
Node2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f4  00800200  00000d00  00000d94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d00  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003f  008002f4  008002f4  00000e88  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e88  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001e8  00000000  00000000  00000ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000014a4  00000000  00000000  000010cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a12  00000000  00000000  00002570  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000df6  00000000  00000000  00002f82  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000490  00000000  00000000  00003d78  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004f9  00000000  00000000  00004208  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000009ee  00000000  00000000  00004701  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000168  00000000  00000000  000050ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	f4 c1       	rjmp	.+1000   	; 0x3ee <__vector_1>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 e0       	ldi	r30, 0x00	; 0
  fc:	fd e0       	ldi	r31, 0x0D	; 13
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 3f       	cpi	r26, 0xF4	; 244
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	23 e0       	ldi	r18, 0x03	; 3
 110:	a4 ef       	ldi	r26, 0xF4	; 244
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a3 33       	cpi	r26, 0x33	; 51
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	d1 d2       	rcall	.+1442   	; 0x6c2 <main>
 120:	ed c5       	rjmp	.+3034   	; 0xcfc <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <adc_init>:
#include <util/delay.h>
#include "adc_driver.h"


void adc_init(){
	ADCSRA	|= (1 << ADEN) | (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);
 124:	ea e7       	ldi	r30, 0x7A	; 122
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	87 68       	ori	r24, 0x87	; 135
 12c:	80 83       	st	Z, r24
	ADMUX	|= (1<<REFS0);
 12e:	ec e7       	ldi	r30, 0x7C	; 124
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	80 64       	ori	r24, 0x40	; 64
 136:	80 83       	st	Z, r24
	ADMUX	&= ~(1<<REFS1); 
 138:	80 81       	ld	r24, Z
 13a:	8f 77       	andi	r24, 0x7F	; 127
 13c:	80 83       	st	Z, r24
 13e:	08 95       	ret

00000140 <adc_read>:
}

uint16_t adc_read(uint8_t channel){
	ADMUX	|= ((1<<channel) & 0x03);
 140:	ec e7       	ldi	r30, 0x7C	; 124
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	90 81       	ld	r25, Z
 146:	21 e0       	ldi	r18, 0x01	; 1
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	02 c0       	rjmp	.+4      	; 0x150 <adc_read+0x10>
 14c:	22 0f       	add	r18, r18
 14e:	33 1f       	adc	r19, r19
 150:	8a 95       	dec	r24
 152:	e2 f7       	brpl	.-8      	; 0x14c <adc_read+0xc>
 154:	23 70       	andi	r18, 0x03	; 3
 156:	92 2b       	or	r25, r18
 158:	90 83       	st	Z, r25
	ADCSRA	|= (1 << ADSC);
 15a:	ea e7       	ldi	r30, 0x7A	; 122
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	80 64       	ori	r24, 0x40	; 64
 162:	80 83       	st	Z, r24

	while((ADCSRA & (1<<ADSC))){ ; }
 164:	80 81       	ld	r24, Z
 166:	86 fd       	sbrc	r24, 6
 168:	fd cf       	rjmp	.-6      	; 0x164 <adc_read+0x24>

	return ADC;
 16a:	80 91 78 00 	lds	r24, 0x0078
 16e:	90 91 79 00 	lds	r25, 0x0079
}
 172:	08 95       	ret

00000174 <can_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 174:	d1 d1       	rcall	.+930    	; 0x518 <mcp2515_init>
 176:	8f e0       	ldi	r24, 0x0F	; 15
 178:	c2 d1       	rcall	.+900    	; 0x4fe <mcp2515_read>
 17a:	1f 92       	push	r1
 17c:	8f 93       	push	r24
 17e:	8e e0       	ldi	r24, 0x0E	; 14
 180:	92 e0       	ldi	r25, 0x02	; 2
 182:	9f 93       	push	r25
 184:	8f 93       	push	r24
 186:	e8 d2       	rcall	.+1488   	; 0x758 <printf>
 188:	4f ef       	ldi	r20, 0xFF	; 255
 18a:	60 e6       	ldi	r22, 0x60	; 96
 18c:	80 e6       	ldi	r24, 0x60	; 96
 18e:	9e d1       	rcall	.+828    	; 0x4cc <mcp2515_bit_modify>
 190:	40 e0       	ldi	r20, 0x00	; 0
 192:	64 e0       	ldi	r22, 0x04	; 4
 194:	80 e6       	ldi	r24, 0x60	; 96
 196:	9a d1       	rcall	.+820    	; 0x4cc <mcp2515_bit_modify>
 198:	4f ef       	ldi	r20, 0xFF	; 255
 19a:	61 e0       	ldi	r22, 0x01	; 1
 19c:	8b e2       	ldi	r24, 0x2B	; 43
 19e:	96 d1       	rcall	.+812    	; 0x4cc <mcp2515_bit_modify>
 1a0:	40 e0       	ldi	r20, 0x00	; 0
 1a2:	60 ee       	ldi	r22, 0xE0	; 224
 1a4:	8f e0       	ldi	r24, 0x0F	; 15
 1a6:	92 d1       	rcall	.+804    	; 0x4cc <mcp2515_bit_modify>
 1a8:	0f 90       	pop	r0
 1aa:	0f 90       	pop	r0
 1ac:	0f 90       	pop	r0
 1ae:	0f 90       	pop	r0
 1b0:	08 95       	ret

000001b2 <can_transmit_complete>:
 1b2:	80 e3       	ldi	r24, 0x30	; 48
 1b4:	a4 d1       	rcall	.+840    	; 0x4fe <mcp2515_read>
 1b6:	86 95       	lsr	r24
 1b8:	86 95       	lsr	r24
 1ba:	86 95       	lsr	r24
 1bc:	91 e0       	ldi	r25, 0x01	; 1
 1be:	89 27       	eor	r24, r25
 1c0:	81 70       	andi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	08 95       	ret

000001c6 <can_message_send>:
 1c6:	1f 93       	push	r17
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
 1cc:	ec 01       	movw	r28, r24
 1ce:	f1 df       	rcall	.-30     	; 0x1b2 <can_transmit_complete>
 1d0:	89 2b       	or	r24, r25
 1d2:	e9 f3       	breq	.-6      	; 0x1ce <can_message_send+0x8>
 1d4:	68 81       	ld	r22, Y
 1d6:	79 81       	ldd	r23, Y+1	; 0x01
 1d8:	75 95       	asr	r23
 1da:	67 95       	ror	r22
 1dc:	75 95       	asr	r23
 1de:	67 95       	ror	r22
 1e0:	75 95       	asr	r23
 1e2:	67 95       	ror	r22
 1e4:	81 e3       	ldi	r24, 0x31	; 49
 1e6:	56 d1       	rcall	.+684    	; 0x494 <mcp2515_write>
 1e8:	68 81       	ld	r22, Y
 1ea:	79 81       	ldd	r23, Y+1	; 0x01
 1ec:	66 0f       	add	r22, r22
 1ee:	77 1f       	adc	r23, r23
 1f0:	62 95       	swap	r22
 1f2:	72 95       	swap	r23
 1f4:	70 7f       	andi	r23, 0xF0	; 240
 1f6:	76 27       	eor	r23, r22
 1f8:	60 7f       	andi	r22, 0xF0	; 240
 1fa:	76 27       	eor	r23, r22
 1fc:	82 e3       	ldi	r24, 0x32	; 50
 1fe:	4a d1       	rcall	.+660    	; 0x494 <mcp2515_write>
 200:	6a 81       	ldd	r22, Y+2	; 0x02
 202:	6f 70       	andi	r22, 0x0F	; 15
 204:	85 e3       	ldi	r24, 0x35	; 53
 206:	46 d1       	rcall	.+652    	; 0x494 <mcp2515_write>
 208:	8a 81       	ldd	r24, Y+2	; 0x02
 20a:	88 23       	and	r24, r24
 20c:	61 f0       	breq	.+24     	; 0x226 <can_message_send+0x60>
 20e:	10 e0       	ldi	r17, 0x00	; 0
 210:	fe 01       	movw	r30, r28
 212:	e1 0f       	add	r30, r17
 214:	f1 1d       	adc	r31, r1
 216:	63 81       	ldd	r22, Z+3	; 0x03
 218:	86 e3       	ldi	r24, 0x36	; 54
 21a:	81 0f       	add	r24, r17
 21c:	3b d1       	rcall	.+630    	; 0x494 <mcp2515_write>
 21e:	1f 5f       	subi	r17, 0xFF	; 255
 220:	8a 81       	ldd	r24, Y+2	; 0x02
 222:	18 17       	cp	r17, r24
 224:	a8 f3       	brcs	.-22     	; 0x210 <can_message_send+0x4a>
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	44 d1       	rcall	.+648    	; 0x4b2 <mcp2515_request_to_send>
 22a:	df 91       	pop	r29
 22c:	cf 91       	pop	r28
 22e:	1f 91       	pop	r17
 230:	08 95       	ret

00000232 <can_data_receive>:
 232:	9f 92       	push	r9
 234:	af 92       	push	r10
 236:	bf 92       	push	r11
 238:	cf 92       	push	r12
 23a:	df 92       	push	r13
 23c:	ef 92       	push	r14
 23e:	ff 92       	push	r15
 240:	0f 93       	push	r16
 242:	1f 93       	push	r17
 244:	cf 93       	push	r28
 246:	df 93       	push	r29
 248:	cd b7       	in	r28, 0x3d	; 61
 24a:	de b7       	in	r29, 0x3e	; 62
 24c:	2b 97       	sbiw	r28, 0x0b	; 11
 24e:	0f b6       	in	r0, 0x3f	; 63
 250:	f8 94       	cli
 252:	de bf       	out	0x3e, r29	; 62
 254:	0f be       	out	0x3f, r0	; 63
 256:	cd bf       	out	0x3d, r28	; 61
 258:	7c 01       	movw	r14, r24
 25a:	8c e2       	ldi	r24, 0x2C	; 44
 25c:	50 d1       	rcall	.+672    	; 0x4fe <mcp2515_read>
 25e:	80 ff       	sbrs	r24, 0
 260:	30 c0       	rjmp	.+96     	; 0x2c2 <can_data_receive+0x90>
 262:	81 e6       	ldi	r24, 0x61	; 97
 264:	4c d1       	rcall	.+664    	; 0x4fe <mcp2515_read>
 266:	c8 2e       	mov	r12, r24
 268:	82 e6       	ldi	r24, 0x62	; 98
 26a:	49 d1       	rcall	.+658    	; 0x4fe <mcp2515_read>
 26c:	82 95       	swap	r24
 26e:	86 95       	lsr	r24
 270:	87 70       	andi	r24, 0x07	; 7
 272:	d1 2c       	mov	r13, r1
 274:	cc 0c       	add	r12, r12
 276:	dd 1c       	adc	r13, r13
 278:	cc 0c       	add	r12, r12
 27a:	dd 1c       	adc	r13, r13
 27c:	cc 0c       	add	r12, r12
 27e:	dd 1c       	adc	r13, r13
 280:	c8 2a       	or	r12, r24
 282:	85 e6       	ldi	r24, 0x65	; 101
 284:	3c d1       	rcall	.+632    	; 0x4fe <mcp2515_read>
 286:	8f 70       	andi	r24, 0x0F	; 15
 288:	98 2e       	mov	r9, r24
 28a:	a1 f0       	breq	.+40     	; 0x2b4 <can_data_receive+0x82>
 28c:	8e 01       	movw	r16, r28
 28e:	0c 5f       	subi	r16, 0xFC	; 252
 290:	1f 4f       	sbci	r17, 0xFF	; 255
 292:	0f 2e       	mov	r0, r31
 294:	f6 e6       	ldi	r31, 0x66	; 102
 296:	af 2e       	mov	r10, r31
 298:	f0 2d       	mov	r31, r0
 29a:	a8 0e       	add	r10, r24
 29c:	0f 2e       	mov	r0, r31
 29e:	f6 e6       	ldi	r31, 0x66	; 102
 2a0:	bf 2e       	mov	r11, r31
 2a2:	f0 2d       	mov	r31, r0
 2a4:	8b 2d       	mov	r24, r11
 2a6:	2b d1       	rcall	.+598    	; 0x4fe <mcp2515_read>
 2a8:	f8 01       	movw	r30, r16
 2aa:	81 93       	st	Z+, r24
 2ac:	8f 01       	movw	r16, r30
 2ae:	b3 94       	inc	r11
 2b0:	ba 10       	cpse	r11, r10
 2b2:	f8 cf       	rjmp	.-16     	; 0x2a4 <can_data_receive+0x72>
 2b4:	10 92 2c 03 	sts	0x032C, r1
 2b8:	40 e0       	ldi	r20, 0x00	; 0
 2ba:	61 e0       	ldi	r22, 0x01	; 1
 2bc:	8c e2       	ldi	r24, 0x2C	; 44
 2be:	06 d1       	rcall	.+524    	; 0x4cc <mcp2515_bit_modify>
 2c0:	03 c0       	rjmp	.+6      	; 0x2c8 <can_data_receive+0x96>
 2c2:	cc 24       	eor	r12, r12
 2c4:	ca 94       	dec	r12
 2c6:	dc 2c       	mov	r13, r12
 2c8:	da 82       	std	Y+2, r13	; 0x02
 2ca:	c9 82       	std	Y+1, r12	; 0x01
 2cc:	9b 82       	std	Y+3, r9	; 0x03
 2ce:	8b e0       	ldi	r24, 0x0B	; 11
 2d0:	fe 01       	movw	r30, r28
 2d2:	31 96       	adiw	r30, 0x01	; 1
 2d4:	d7 01       	movw	r26, r14
 2d6:	01 90       	ld	r0, Z+
 2d8:	0d 92       	st	X+, r0
 2da:	8a 95       	dec	r24
 2dc:	e1 f7       	brne	.-8      	; 0x2d6 <can_data_receive+0xa4>
 2de:	c7 01       	movw	r24, r14
 2e0:	2b 96       	adiw	r28, 0x0b	; 11
 2e2:	0f b6       	in	r0, 0x3f	; 63
 2e4:	f8 94       	cli
 2e6:	de bf       	out	0x3e, r29	; 62
 2e8:	0f be       	out	0x3f, r0	; 63
 2ea:	cd bf       	out	0x3d, r28	; 61
 2ec:	df 91       	pop	r29
 2ee:	cf 91       	pop	r28
 2f0:	1f 91       	pop	r17
 2f2:	0f 91       	pop	r16
 2f4:	ff 90       	pop	r15
 2f6:	ef 90       	pop	r14
 2f8:	df 90       	pop	r13
 2fa:	cf 90       	pop	r12
 2fc:	bf 90       	pop	r11
 2fe:	af 90       	pop	r10
 300:	9f 90       	pop	r9
 302:	08 95       	ret

00000304 <can_print_message>:
 304:	ff 92       	push	r15
 306:	0f 93       	push	r16
 308:	1f 93       	push	r17
 30a:	cf 93       	push	r28
 30c:	df 93       	push	r29
 30e:	ec 01       	movw	r28, r24
 310:	88 81       	ld	r24, Y
 312:	99 81       	ldd	r25, Y+1	; 0x01
 314:	8f 3f       	cpi	r24, 0xFF	; 255
 316:	2f ef       	ldi	r18, 0xFF	; 255
 318:	92 07       	cpc	r25, r18
 31a:	21 f4       	brne	.+8      	; 0x324 <can_print_message+0x20>
 31c:	8d e2       	ldi	r24, 0x2D	; 45
 31e:	92 e0       	ldi	r25, 0x02	; 2
 320:	2c d2       	rcall	.+1112   	; 0x77a <puts>
 322:	3d c0       	rjmp	.+122    	; 0x39e <can_print_message+0x9a>
 324:	2a 81       	ldd	r18, Y+2	; 0x02
 326:	1f 92       	push	r1
 328:	2f 93       	push	r18
 32a:	9f 93       	push	r25
 32c:	8f 93       	push	r24
 32e:	83 e4       	ldi	r24, 0x43	; 67
 330:	92 e0       	ldi	r25, 0x02	; 2
 332:	9f 93       	push	r25
 334:	8f 93       	push	r24
 336:	10 d2       	rcall	.+1056   	; 0x758 <printf>
 338:	2b 81       	ldd	r18, Y+3	; 0x03
 33a:	82 2f       	mov	r24, r18
 33c:	99 27       	eor	r25, r25
 33e:	87 fd       	sbrc	r24, 7
 340:	90 95       	com	r25
 342:	9f 93       	push	r25
 344:	2f 93       	push	r18
 346:	85 e6       	ldi	r24, 0x65	; 101
 348:	92 e0       	ldi	r25, 0x02	; 2
 34a:	9f 93       	push	r25
 34c:	8f 93       	push	r24
 34e:	04 d2       	rcall	.+1032   	; 0x758 <printf>
 350:	8d b7       	in	r24, 0x3d	; 61
 352:	9e b7       	in	r25, 0x3e	; 62
 354:	0a 96       	adiw	r24, 0x0a	; 10
 356:	0f b6       	in	r0, 0x3f	; 63
 358:	f8 94       	cli
 35a:	9e bf       	out	0x3e, r25	; 62
 35c:	0f be       	out	0x3f, r0	; 63
 35e:	8d bf       	out	0x3d, r24	; 61
 360:	8a 81       	ldd	r24, Y+2	; 0x02
 362:	82 30       	cpi	r24, 0x02	; 2
 364:	c8 f0       	brcs	.+50     	; 0x398 <can_print_message+0x94>
 366:	ff 24       	eor	r15, r15
 368:	f3 94       	inc	r15
 36a:	08 e7       	ldi	r16, 0x78	; 120
 36c:	12 e0       	ldi	r17, 0x02	; 2
 36e:	fe 01       	movw	r30, r28
 370:	ef 0d       	add	r30, r15
 372:	f1 1d       	adc	r31, r1
 374:	23 81       	ldd	r18, Z+3	; 0x03
 376:	82 2f       	mov	r24, r18
 378:	99 27       	eor	r25, r25
 37a:	87 fd       	sbrc	r24, 7
 37c:	90 95       	com	r25
 37e:	9f 93       	push	r25
 380:	2f 93       	push	r18
 382:	1f 93       	push	r17
 384:	0f 93       	push	r16
 386:	e8 d1       	rcall	.+976    	; 0x758 <printf>
 388:	f3 94       	inc	r15
 38a:	0f 90       	pop	r0
 38c:	0f 90       	pop	r0
 38e:	0f 90       	pop	r0
 390:	0f 90       	pop	r0
 392:	8a 81       	ldd	r24, Y+2	; 0x02
 394:	f8 16       	cp	r15, r24
 396:	58 f3       	brcs	.-42     	; 0x36e <can_print_message+0x6a>
 398:	8d e7       	ldi	r24, 0x7D	; 125
 39a:	92 e0       	ldi	r25, 0x02	; 2
 39c:	ee d1       	rcall	.+988    	; 0x77a <puts>
 39e:	df 91       	pop	r29
 3a0:	cf 91       	pop	r28
 3a2:	1f 91       	pop	r17
 3a4:	0f 91       	pop	r16
 3a6:	ff 90       	pop	r15
 3a8:	08 95       	ret

000003aa <can_interrupt_vector>:
 3aa:	cf 93       	push	r28
 3ac:	df 93       	push	r29
 3ae:	cd b7       	in	r28, 0x3d	; 61
 3b0:	de b7       	in	r29, 0x3e	; 62
 3b2:	2b 97       	sbiw	r28, 0x0b	; 11
 3b4:	0f b6       	in	r0, 0x3f	; 63
 3b6:	f8 94       	cli
 3b8:	de bf       	out	0x3e, r29	; 62
 3ba:	0f be       	out	0x3f, r0	; 63
 3bc:	cd bf       	out	0x3d, r28	; 61
 3be:	ce 01       	movw	r24, r28
 3c0:	01 96       	adiw	r24, 0x01	; 1
 3c2:	37 df       	rcall	.-402    	; 0x232 <can_data_receive>
 3c4:	8b e0       	ldi	r24, 0x0B	; 11
 3c6:	fe 01       	movw	r30, r28
 3c8:	31 96       	adiw	r30, 0x01	; 1
 3ca:	af ef       	ldi	r26, 0xFF	; 255
 3cc:	b2 e0       	ldi	r27, 0x02	; 2
 3ce:	01 90       	ld	r0, Z+
 3d0:	0d 92       	st	X+, r0
 3d2:	8a 95       	dec	r24
 3d4:	e1 f7       	brne	.-8      	; 0x3ce <can_interrupt_vector+0x24>
 3d6:	8f ef       	ldi	r24, 0xFF	; 255
 3d8:	92 e0       	ldi	r25, 0x02	; 2
 3da:	94 df       	rcall	.-216    	; 0x304 <can_print_message>
 3dc:	2b 96       	adiw	r28, 0x0b	; 11
 3de:	0f b6       	in	r0, 0x3f	; 63
 3e0:	f8 94       	cli
 3e2:	de bf       	out	0x3e, r29	; 62
 3e4:	0f be       	out	0x3f, r0	; 63
 3e6:	cd bf       	out	0x3d, r28	; 61
 3e8:	df 91       	pop	r29
 3ea:	cf 91       	pop	r28
 3ec:	08 95       	ret

000003ee <__vector_1>:
 3ee:	1f 92       	push	r1
 3f0:	0f 92       	push	r0
 3f2:	0f b6       	in	r0, 0x3f	; 63
 3f4:	0f 92       	push	r0
 3f6:	11 24       	eor	r1, r1
 3f8:	0b b6       	in	r0, 0x3b	; 59
 3fa:	0f 92       	push	r0
 3fc:	2f 93       	push	r18
 3fe:	3f 93       	push	r19
 400:	4f 93       	push	r20
 402:	5f 93       	push	r21
 404:	6f 93       	push	r22
 406:	7f 93       	push	r23
 408:	8f 93       	push	r24
 40a:	9f 93       	push	r25
 40c:	af 93       	push	r26
 40e:	bf 93       	push	r27
 410:	ef 93       	push	r30
 412:	ff 93       	push	r31
 414:	ca df       	rcall	.-108    	; 0x3aa <can_interrupt_vector>
 416:	ff 91       	pop	r31
 418:	ef 91       	pop	r30
 41a:	bf 91       	pop	r27
 41c:	af 91       	pop	r26
 41e:	9f 91       	pop	r25
 420:	8f 91       	pop	r24
 422:	7f 91       	pop	r23
 424:	6f 91       	pop	r22
 426:	5f 91       	pop	r21
 428:	4f 91       	pop	r20
 42a:	3f 91       	pop	r19
 42c:	2f 91       	pop	r18
 42e:	0f 90       	pop	r0
 430:	0b be       	out	0x3b, r0	; 59
 432:	0f 90       	pop	r0
 434:	0f be       	out	0x3f, r0	; 63
 436:	0f 90       	pop	r0
 438:	1f 90       	pop	r1
 43a:	18 95       	reti

0000043c <can_read_joy_message>:
	}
}



void can_read_joy_message(){
 43c:	cf 93       	push	r28
 43e:	df 93       	push	r29
 440:	cd b7       	in	r28, 0x3d	; 61
 442:	de b7       	in	r29, 0x3e	; 62
 444:	2b 97       	sbiw	r28, 0x0b	; 11
 446:	0f b6       	in	r0, 0x3f	; 63
 448:	f8 94       	cli
 44a:	de bf       	out	0x3e, r29	; 62
 44c:	0f be       	out	0x3f, r0	; 63
 44e:	cd bf       	out	0x3d, r28	; 61
	static can_message_t joy_message;
	joy_message = can_data_receive();
 450:	ce 01       	movw	r24, r28
 452:	01 96       	adiw	r24, 0x01	; 1
 454:	ee de       	rcall	.-548    	; 0x232 <can_data_receive>
 456:	8b e0       	ldi	r24, 0x0B	; 11
 458:	fe 01       	movw	r30, r28
 45a:	31 96       	adiw	r30, 0x01	; 1
 45c:	a4 ef       	ldi	r26, 0xF4	; 244
 45e:	b2 e0       	ldi	r27, 0x02	; 2
 460:	01 90       	ld	r0, Z+
 462:	0d 92       	st	X+, r0
 464:	8a 95       	dec	r24
 466:	e1 f7       	brne	.-8      	; 0x460 <can_read_joy_message+0x24>
	
	if(joy_message.id == -1) { return; }
 468:	80 91 f4 02 	lds	r24, 0x02F4
 46c:	90 91 f5 02 	lds	r25, 0x02F5
 470:	01 96       	adiw	r24, 0x01	; 1
 472:	39 f0       	breq	.+14     	; 0x482 <can_read_joy_message+0x46>
		
	//can_print_message(&joy_message);
	
	pwm_set_servo(-joy_message.data[0]);
 474:	80 91 f7 02 	lds	r24, 0x02F7
 478:	99 27       	eor	r25, r25
 47a:	81 95       	neg	r24
 47c:	0c f4       	brge	.+2      	; 0x480 <can_read_joy_message+0x44>
 47e:	90 95       	com	r25
 480:	87 d0       	rcall	.+270    	; 0x590 <pwm_set_servo>
}
 482:	2b 96       	adiw	r28, 0x0b	; 11
 484:	0f b6       	in	r0, 0x3f	; 63
 486:	f8 94       	cli
 488:	de bf       	out	0x3e, r29	; 62
 48a:	0f be       	out	0x3f, r0	; 63
 48c:	cd bf       	out	0x3d, r28	; 61
 48e:	df 91       	pop	r29
 490:	cf 91       	pop	r28
 492:	08 95       	ret

00000494 <mcp2515_write>:
	} else {
		;//printf("MCP2515 is in config mode after reset\n");
	}
}

void mcp2515_write(uint8_t address, uint8_t data){
 494:	cf 93       	push	r28
 496:	df 93       	push	r29
 498:	d8 2f       	mov	r29, r24
 49a:	c6 2f       	mov	r28, r22
	spi_select();
 49c:	a8 d0       	rcall	.+336    	; 0x5ee <spi_select>

	spi_send(MCP_WRITE);
 49e:	82 e0       	ldi	r24, 0x02	; 2
 4a0:	9a d0       	rcall	.+308    	; 0x5d6 <spi_send>
	spi_send(address);
 4a2:	8d 2f       	mov	r24, r29
 4a4:	98 d0       	rcall	.+304    	; 0x5d6 <spi_send>
	spi_send(data);
 4a6:	8c 2f       	mov	r24, r28
 4a8:	96 d0       	rcall	.+300    	; 0x5d6 <spi_send>

	spi_deselect();
 4aa:	a3 d0       	rcall	.+326    	; 0x5f2 <spi_deselect>
}
 4ac:	df 91       	pop	r29
 4ae:	cf 91       	pop	r28
 4b0:	08 95       	ret

000004b2 <mcp2515_request_to_send>:

void mcp2515_request_to_send(uint8_t command){
 4b2:	cf 93       	push	r28
	//Check last 3 bits of given command
	if (command <= 7) {
 4b4:	88 30       	cpi	r24, 0x08	; 8
 4b6:	18 f4       	brcc	.+6      	; 0x4be <mcp2515_request_to_send+0xc>
		command = MCP_RTS | command;
 4b8:	c8 2f       	mov	r28, r24
 4ba:	c0 68       	ori	r28, 0x80	; 128
 4bc:	01 c0       	rjmp	.+2      	; 0x4c0 <mcp2515_request_to_send+0xe>
	} else {
		command = MCP_RTS;
 4be:	c0 e8       	ldi	r28, 0x80	; 128
	}

	//Select, send RTS command, then deselect
	spi_select();
 4c0:	96 d0       	rcall	.+300    	; 0x5ee <spi_select>
	spi_send(command);
 4c2:	8c 2f       	mov	r24, r28
 4c4:	88 d0       	rcall	.+272    	; 0x5d6 <spi_send>
	spi_deselect();
 4c6:	95 d0       	rcall	.+298    	; 0x5f2 <spi_deselect>
}
 4c8:	cf 91       	pop	r28
 4ca:	08 95       	ret

000004cc <mcp2515_bit_modify>:

void mcp2515_bit_modify(uint8_t address, uint8_t mask, uint8_t data){
 4cc:	1f 93       	push	r17
 4ce:	cf 93       	push	r28
 4d0:	df 93       	push	r29
 4d2:	18 2f       	mov	r17, r24
 4d4:	d6 2f       	mov	r29, r22
 4d6:	c4 2f       	mov	r28, r20
	spi_select();
 4d8:	8a d0       	rcall	.+276    	; 0x5ee <spi_select>

	spi_send(MCP_BITMOD);
 4da:	85 e0       	ldi	r24, 0x05	; 5
 4dc:	7c d0       	rcall	.+248    	; 0x5d6 <spi_send>
	spi_send(address);
 4de:	81 2f       	mov	r24, r17
 4e0:	7a d0       	rcall	.+244    	; 0x5d6 <spi_send>
	spi_send(mask);
 4e2:	8d 2f       	mov	r24, r29
 4e4:	78 d0       	rcall	.+240    	; 0x5d6 <spi_send>
	spi_send(data);
 4e6:	8c 2f       	mov	r24, r28
 4e8:	76 d0       	rcall	.+236    	; 0x5d6 <spi_send>

	spi_deselect();
 4ea:	83 d0       	rcall	.+262    	; 0x5f2 <spi_deselect>
}
 4ec:	df 91       	pop	r29
 4ee:	cf 91       	pop	r28
 4f0:	1f 91       	pop	r17
 4f2:	08 95       	ret

000004f4 <mcp2515_reset>:

void mcp2515_reset(){
	spi_select();
 4f4:	7c d0       	rcall	.+248    	; 0x5ee <spi_select>
	spi_send(MCP_RESET);	
 4f6:	80 ec       	ldi	r24, 0xC0	; 192
 4f8:	6e d0       	rcall	.+220    	; 0x5d6 <spi_send>
	spi_deselect();
 4fa:	7b c0       	rjmp	.+246    	; 0x5f2 <spi_deselect>
 4fc:	08 95       	ret

000004fe <mcp2515_read>:
}


uint8_t mcp2515_read(uint8_t address){
 4fe:	cf 93       	push	r28
 500:	c8 2f       	mov	r28, r24
	uint8_t result;

	spi_select();
 502:	75 d0       	rcall	.+234    	; 0x5ee <spi_select>
	
	//Send command and address, then read result
	spi_send(MCP_READ);
 504:	83 e0       	ldi	r24, 0x03	; 3
 506:	67 d0       	rcall	.+206    	; 0x5d6 <spi_send>
	spi_send(address);
 508:	8c 2f       	mov	r24, r28
 50a:	65 d0       	rcall	.+202    	; 0x5d6 <spi_send>

	result = spi_read();
 50c:	69 d0       	rcall	.+210    	; 0x5e0 <spi_read>
 50e:	c8 2f       	mov	r28, r24
	spi_deselect();
 510:	70 d0       	rcall	.+224    	; 0x5f2 <spi_deselect>

	return result;	
}
 512:	8c 2f       	mov	r24, r28
 514:	cf 91       	pop	r28
 516:	08 95       	ret

00000518 <mcp2515_init>:
#include <util/delay.h>
#include "uart_driver.h"
#include "spi_driver.h"
#include "mcp2515_driver.h"

void mcp2515_init() {
 518:	cf 93       	push	r28
 51a:	df 93       	push	r29
 51c:	1f 92       	push	r1
 51e:	cd b7       	in	r28, 0x3d	; 61
 520:	de b7       	in	r29, 0x3e	; 62
	//NO NEED, ALREADY ENABLED
	//Enable interrupt when message is recieved (RX0IE = 1)
	//mcp2515_bit_modify(MCP_CANINTE, 0x01, 0xff);

	//Start SPI driver
	spi_init();
 522:	51 d0       	rcall	.+162    	; 0x5c6 <spi_init>

	mcp2515_reset();
 524:	e7 df       	rcall	.-50     	; 0x4f4 <mcp2515_reset>
	
	//Testing for correct initialization
	value_check = mcp2515_read(MCP_CANSTAT);
 526:	8e e0       	ldi	r24, 0x0E	; 14
 528:	ea df       	rcall	.-44     	; 0x4fe <mcp2515_read>
 52a:	89 83       	std	Y+1, r24	; 0x01
	
	if ((value_check & MODE_MASK) != MODE_CONFIG) {
 52c:	89 81       	ldd	r24, Y+1	; 0x01
 52e:	80 7e       	andi	r24, 0xE0	; 224
 530:	80 38       	cpi	r24, 0x80	; 128
 532:	19 f0       	breq	.+6      	; 0x53a <mcp2515_init+0x22>
		printf("MCP2515 is not in config mode after reset\n");
 534:	80 e9       	ldi	r24, 0x90	; 144
 536:	92 e0       	ldi	r25, 0x02	; 2
 538:	20 d1       	rcall	.+576    	; 0x77a <puts>
	} else {
		;//printf("MCP2515 is in config mode after reset\n");
	}
}
 53a:	0f 90       	pop	r0
 53c:	df 91       	pop	r29
 53e:	cf 91       	pop	r28
 540:	08 95       	ret

00000542 <pwm_init>:
	ICR3 = DUTY_CYCLE_STEPS;
	pwm_set_value(MID_SERVO);
}

void pwm_set_value(uint16_t val) {
	OCR3A = val;
 542:	6b 9a       	sbi	0x0d, 3	; 13
 544:	a1 e9       	ldi	r26, 0x91	; 145
 546:	b0 e0       	ldi	r27, 0x00	; 0
 548:	8c 91       	ld	r24, X
 54a:	82 60       	ori	r24, 0x02	; 2
 54c:	8c 93       	st	X, r24
 54e:	8c 91       	ld	r24, X
 550:	8a 7f       	andi	r24, 0xFA	; 250
 552:	8c 93       	st	X, r24
 554:	e0 e9       	ldi	r30, 0x90	; 144
 556:	f0 e0       	ldi	r31, 0x00	; 0
 558:	80 81       	ld	r24, Z
 55a:	82 60       	ori	r24, 0x02	; 2
 55c:	80 83       	st	Z, r24
 55e:	80 81       	ld	r24, Z
 560:	8e 7f       	andi	r24, 0xFE	; 254
 562:	80 83       	st	Z, r24
 564:	8c 91       	ld	r24, X
 566:	88 61       	ori	r24, 0x18	; 24
 568:	8c 93       	st	X, r24
 56a:	80 81       	ld	r24, Z
 56c:	80 68       	ori	r24, 0x80	; 128
 56e:	80 83       	st	Z, r24
 570:	80 81       	ld	r24, Z
 572:	8f 7b       	andi	r24, 0xBF	; 191
 574:	80 83       	st	Z, r24
 576:	80 e4       	ldi	r24, 0x40	; 64
 578:	9c e9       	ldi	r25, 0x9C	; 156
 57a:	90 93 97 00 	sts	0x0097, r25
 57e:	80 93 96 00 	sts	0x0096, r24
 582:	88 eb       	ldi	r24, 0xB8	; 184
 584:	9b e0       	ldi	r25, 0x0B	; 11
 586:	90 93 99 00 	sts	0x0099, r25
 58a:	80 93 98 00 	sts	0x0098, r24
 58e:	08 95       	ret

00000590 <pwm_set_servo>:
}

void pwm_set_servo(int16_t val){
	val += 128;
 590:	9c 01       	movw	r18, r24
 592:	20 58       	subi	r18, 0x80	; 128
 594:	3f 4f       	sbci	r19, 0xFF	; 255
	//printf("%d\n", val);
	val = (val*(VAL_SCALE/UNDERFLOW_FIX)) / 255 * UNDERFLOW_FIX + MIN_SERVO;
 596:	4b e4       	ldi	r20, 0x4B	; 75
 598:	42 9f       	mul	r20, r18
 59a:	c0 01       	movw	r24, r0
 59c:	43 9f       	mul	r20, r19
 59e:	90 0d       	add	r25, r0
 5a0:	11 24       	eor	r1, r1
 5a2:	6f ef       	ldi	r22, 0xFF	; 255
 5a4:	70 e0       	ldi	r23, 0x00	; 0
 5a6:	b1 d0       	rcall	.+354    	; 0x70a <__divmodhi4>
 5a8:	66 0f       	add	r22, r22
 5aa:	77 1f       	adc	r23, r23
 5ac:	62 95       	swap	r22
 5ae:	72 95       	swap	r23
 5b0:	70 7f       	andi	r23, 0xF0	; 240
 5b2:	76 27       	eor	r23, r22
 5b4:	60 7f       	andi	r22, 0xF0	; 240
 5b6:	76 27       	eor	r23, r22
 5b8:	68 5f       	subi	r22, 0xF8	; 248
 5ba:	78 4f       	sbci	r23, 0xF8	; 248
	ICR3 = DUTY_CYCLE_STEPS;
	pwm_set_value(MID_SERVO);
}

void pwm_set_value(uint16_t val) {
	OCR3A = val;
 5bc:	70 93 99 00 	sts	0x0099, r23
 5c0:	60 93 98 00 	sts	0x0098, r22
 5c4:	08 95       	ret

000005c6 <spi_init>:
#define SPI_MISO PB3
#define SPI_SCK PB1 

void spi_init(){
	//Set MOSI, SCK and SS as output pins 	
	DDRB |= (1 << SPI_MOSI) | (1 << SPI_SCK) | (1 << SPI_SS);
 5c6:	84 b1       	in	r24, 0x04	; 4
 5c8:	87 60       	ori	r24, 0x07	; 7
 5ca:	84 b9       	out	0x04, r24	; 4
	
	//Set MISO as input pin
	DDRB &= ~(1 << SPI_MISO);
 5cc:	23 98       	cbi	0x04, 3	; 4
	
	//Enable SPI in master mode and set clock rate fosc/16
	SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0);
 5ce:	8c b5       	in	r24, 0x2c	; 44
 5d0:	81 65       	ori	r24, 0x51	; 81
 5d2:	8c bd       	out	0x2c, r24	; 44
 5d4:	08 95       	ret

000005d6 <spi_send>:
	return SPDR;
}

void spi_send(char data){
	//Start transmission
	SPDR = data;
 5d6:	8e bd       	out	0x2e, r24	; 46
	
	//Wait for transmission, checks if register is empty 
	while(!(SPSR & (1 << SPIF)));
 5d8:	0d b4       	in	r0, 0x2d	; 45
 5da:	07 fe       	sbrs	r0, 7
 5dc:	fd cf       	rjmp	.-6      	; 0x5d8 <spi_send+0x2>
}
 5de:	08 95       	ret

000005e0 <spi_read>:
}


uint8_t spi_read(){
	//Dummy send in order to read from slave
	spi_send(0xaa);
 5e0:	8a ea       	ldi	r24, 0xAA	; 170
 5e2:	f9 df       	rcall	.-14     	; 0x5d6 <spi_send>
	
	while(!(SPSR & (1 << SPIF)));
 5e4:	0d b4       	in	r0, 0x2d	; 45
 5e6:	07 fe       	sbrs	r0, 7
 5e8:	fd cf       	rjmp	.-6      	; 0x5e4 <spi_read+0x4>

	return SPDR;
 5ea:	8e b5       	in	r24, 0x2e	; 46
}
 5ec:	08 95       	ret

000005ee <spi_select>:
	while(!(SPSR & (1 << SPIF)));
}

void spi_select(){
	//Set !SS to 0 for selection of slave
	PORTB &= ~(1 << SPI_SS);
 5ee:	28 98       	cbi	0x05, 0	; 5
 5f0:	08 95       	ret

000005f2 <spi_deselect>:
}

void spi_deselect(){
	//Set !SS to 1 for deselection of slave
	PORTB |= (1 << SPI_SS);
 5f2:	28 9a       	sbi	0x05, 0	; 5
 5f4:	08 95       	ret

000005f6 <uart_sendChar>:

}

void uart_sendChar(unsigned char data){
	//Wait for empty transmitter buffer
	while(!(UCSR0A & (1<<UDRE0)));
 5f6:	e0 ec       	ldi	r30, 0xC0	; 192
 5f8:	f0 e0       	ldi	r31, 0x00	; 0
 5fa:	90 81       	ld	r25, Z
 5fc:	95 ff       	sbrs	r25, 5
 5fe:	fd cf       	rjmp	.-6      	; 0x5fa <uart_sendChar+0x4>
		
	//Put data into buffer, then send the data
	UDR0 = data;
 600:	80 93 c6 00 	sts	0x00C6, r24
 604:	08 95       	ret

00000606 <uart_getChar>:
}


unsigned int uart_getChar(){
	//Wait for the data to be received 
	while(!(UCSR0A & (1<<RXC0))){}
 606:	e0 ec       	ldi	r30, 0xC0	; 192
 608:	f0 e0       	ldi	r31, 0x00	; 0
 60a:	80 81       	ld	r24, Z
 60c:	88 23       	and	r24, r24
 60e:	ec f7       	brge	.-6      	; 0x60a <uart_getChar+0x4>
	
	//Get status and the 9th bit, then data from buffer
	return UDR0;
 610:	80 91 c6 00 	lds	r24, 0x00C6
}
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	08 95       	ret

00000618 <uart_init>:

static FILE uart_io = FDEV_SETUP_STREAM(uart_sendChar, uart_getChar, _FDEV_SETUP_RW);

void uart_init(unsigned int ubrr){
	//Set baud rate
	UBRR0L = (unsigned int) ubrr;
 618:	80 93 c4 00 	sts	0x00C4, r24
	
	//Enable receiver and transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 61c:	88 e1       	ldi	r24, 0x18	; 24
 61e:	80 93 c1 00 	sts	0x00C1, r24
	
	stdout = &uart_io;
 622:	80 e0       	ldi	r24, 0x00	; 0
 624:	92 e0       	ldi	r25, 0x02	; 2
 626:	90 93 30 03 	sts	0x0330, r25
 62a:	80 93 2f 03 	sts	0x032F, r24
	stdin = &uart_io;
 62e:	90 93 2e 03 	sts	0x032E, r25
 632:	80 93 2d 03 	sts	0x032D, r24
 636:	08 95       	ret

00000638 <ir_obstructed>:
	for (uint8_t i = 0; i < FILTER_BUFFER_SIZE; i++ ){
		ir_obstructed();
	}
}

uint8_t ir_obstructed(){
 638:	cf 93       	push	r28
 63a:	df 93       	push	r29
	static uint16_t ringbuffer_filter[FILTER_BUFFER_SIZE];
	static uint8_t ringbuffer_index;

	//return adc_read(IR_CHANNEL);

	if (ringbuffer_index >= FILTER_BUFFER_SIZE - 1){
 63c:	80 91 2b 03 	lds	r24, 0x032B
 640:	8f 30       	cpi	r24, 0x0F	; 15
 642:	18 f0       	brcs	.+6      	; 0x64a <ir_obstructed+0x12>
		ringbuffer_index = 0;
 644:	10 92 2b 03 	sts	0x032B, r1
 648:	03 c0       	rjmp	.+6      	; 0x650 <ir_obstructed+0x18>
	} else { ringbuffer_index++; }
 64a:	8f 5f       	subi	r24, 0xFF	; 255
 64c:	80 93 2b 03 	sts	0x032B, r24
			
	ringbuffer_filter[ringbuffer_index] = adc_read(IR_CHANNEL) / FILTER_BUFFER_SIZE;
 650:	c0 91 2b 03 	lds	r28, 0x032B
 654:	d0 e0       	ldi	r29, 0x00	; 0
 656:	80 e0       	ldi	r24, 0x00	; 0
 658:	73 dd       	rcall	.-1306   	; 0x140 <adc_read>
 65a:	cc 0f       	add	r28, r28
 65c:	dd 1f       	adc	r29, r29
 65e:	c5 5f       	subi	r28, 0xF5	; 245
 660:	dc 4f       	sbci	r29, 0xFC	; 252
 662:	92 95       	swap	r25
 664:	82 95       	swap	r24
 666:	8f 70       	andi	r24, 0x0F	; 15
 668:	89 27       	eor	r24, r25
 66a:	9f 70       	andi	r25, 0x0F	; 15
 66c:	89 27       	eor	r24, r25
 66e:	99 83       	std	Y+1, r25	; 0x01
 670:	88 83       	st	Y, r24
 672:	eb e0       	ldi	r30, 0x0B	; 11
 674:	f3 e0       	ldi	r31, 0x03	; 3
 676:	4b e2       	ldi	r20, 0x2B	; 43
 678:	53 e0       	ldi	r21, 0x03	; 3



	uint16_t avg = 0;
 67a:	20 e0       	ldi	r18, 0x00	; 0
 67c:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t i = 0; i < FILTER_BUFFER_SIZE; i++) {
		avg += ringbuffer_filter[i] ;
 67e:	81 91       	ld	r24, Z+
 680:	91 91       	ld	r25, Z+
 682:	28 0f       	add	r18, r24
 684:	39 1f       	adc	r19, r25
	ringbuffer_filter[ringbuffer_index] = adc_read(IR_CHANNEL) / FILTER_BUFFER_SIZE;



	uint16_t avg = 0;
	for (uint8_t i = 0; i < FILTER_BUFFER_SIZE; i++) {
 686:	e4 17       	cp	r30, r20
 688:	f5 07       	cpc	r31, r21
 68a:	c9 f7       	brne	.-14     	; 0x67e <ir_obstructed+0x46>
		printf(", %d", ringbuffer_filter[i]);
	}
	printf(" ]\n");
	printf("avg: %d\n",avg);*/
	
	if (avg < FILTER_THRESHOLD) {
 68c:	81 e0       	ldi	r24, 0x01	; 1
 68e:	24 30       	cpi	r18, 0x04	; 4
 690:	31 40       	sbci	r19, 0x01	; 1
 692:	08 f0       	brcs	.+2      	; 0x696 <ir_obstructed+0x5e>
 694:	80 e0       	ldi	r24, 0x00	; 0
		return 1;
	}

	return 0;
}
 696:	df 91       	pop	r29
 698:	cf 91       	pop	r28
 69a:	08 95       	ret

0000069c <ir_filter_init>:
#include "Drivers/uart_driver.h"

#define FILTER_THRESHOLD 260
#define FILTER_BUFFER_SIZE 16

void ir_filter_init() {
 69c:	cf 93       	push	r28
 69e:	c0 e1       	ldi	r28, 0x10	; 16
	for (uint8_t i = 0; i < FILTER_BUFFER_SIZE; i++ ){
		ir_obstructed();
 6a0:	cb df       	rcall	.-106    	; 0x638 <ir_obstructed>
 6a2:	c1 50       	subi	r28, 0x01	; 1

#define FILTER_THRESHOLD 260
#define FILTER_BUFFER_SIZE 16

void ir_filter_init() {
	for (uint8_t i = 0; i < FILTER_BUFFER_SIZE; i++ ){
 6a4:	e9 f7       	brne	.-6      	; 0x6a0 <ir_filter_init+0x4>
		ir_obstructed();
	}
}
 6a6:	cf 91       	pop	r28
 6a8:	08 95       	ret

000006aa <ir_edge_detected>:
	return 0;
}

uint8_t ir_edge_detected() {
	static uint8_t last;
	if (last != ir_obstructed()){
 6aa:	c6 df       	rcall	.-116    	; 0x638 <ir_obstructed>
 6ac:	90 91 0a 03 	lds	r25, 0x030A
 6b0:	89 17       	cp	r24, r25
 6b2:	29 f0       	breq	.+10     	; 0x6be <ir_edge_detected+0x14>
		last = ir_obstructed();
 6b4:	c1 df       	rcall	.-126    	; 0x638 <ir_obstructed>
 6b6:	80 93 0a 03 	sts	0x030A, r24
		return 1;
 6ba:	81 e0       	ldi	r24, 0x01	; 1
 6bc:	08 95       	ret
	}
	return 0;
 6be:	80 e0       	ldi	r24, 0x00	; 0
 6c0:	08 95       	ret

000006c2 <main>:
#include "Drivers/pwm_driver.h"
#include "Drivers/adc_driver.h"
#include "ir.h"
#include "test_node_2.h"

int main(void){
 6c2:	cf 93       	push	r28
 6c4:	df 93       	push	r29
 6c6:	cd b7       	in	r28, 0x3d	; 61
 6c8:	de b7       	in	r29, 0x3e	; 62
 6ca:	2b 97       	sbiw	r28, 0x0b	; 11
 6cc:	0f b6       	in	r0, 0x3f	; 63
 6ce:	f8 94       	cli
 6d0:	de bf       	out	0x3e, r29	; 62
 6d2:	0f be       	out	0x3f, r0	; 63
 6d4:	cd bf       	out	0x3d, r28	; 61
	uart_init(MYUBRR);
 6d6:	87 e6       	ldi	r24, 0x67	; 103
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	9e df       	rcall	.-196    	; 0x618 <uart_init>
	can_init();
 6dc:	4b dd       	rcall	.-1386   	; 0x174 <can_init>
	pwm_init();
 6de:	31 df       	rcall	.-414    	; 0x542 <pwm_init>
	printf("ir\n");
 6e0:	81 ef       	ldi	r24, 0xF1	; 241
 6e2:	92 e0       	ldi	r25, 0x02	; 2
 6e4:	4a d0       	rcall	.+148    	; 0x77a <puts>
	adc_init();
 6e6:	1e dd       	rcall	.-1476   	; 0x124 <adc_init>
	ir_filter_init();
 6e8:	d9 df       	rcall	.-78     	; 0x69c <ir_filter_init>
	//pwm_test();
	//can_test();

	can_message_t ir_message;
	ir_message.length = 1;
 6ea:	81 e0       	ldi	r24, 0x01	; 1
 6ec:	8b 83       	std	Y+3, r24	; 0x03
	ir_message.id = IR_CAN_ID;
 6ee:	82 e0       	ldi	r24, 0x02	; 2
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	9a 83       	std	Y+2, r25	; 0x02
 6f4:	89 83       	std	Y+1, r24	; 0x01
	while(1){
		can_read_joy_message();
 6f6:	a2 de       	rcall	.-700    	; 0x43c <can_read_joy_message>
		//pwm_set_value(150);
		//printf("%d\n", TCNT3);
		//_delay_ms(8);
		if (ir_edge_detected()){
 6f8:	d8 df       	rcall	.-80     	; 0x6aa <ir_edge_detected>
 6fa:	88 23       	and	r24, r24
 6fc:	e1 f3       	breq	.-8      	; 0x6f6 <main+0x34>
			ir_message.data[0] = ir_obstructed();
 6fe:	9c df       	rcall	.-200    	; 0x638 <ir_obstructed>
 700:	8c 83       	std	Y+4, r24	; 0x04
			can_message_send(&ir_message);
 702:	ce 01       	movw	r24, r28
 704:	01 96       	adiw	r24, 0x01	; 1
 706:	5f dd       	rcall	.-1346   	; 0x1c6 <can_message_send>
 708:	f6 cf       	rjmp	.-20     	; 0x6f6 <main+0x34>

0000070a <__divmodhi4>:
 70a:	97 fb       	bst	r25, 7
 70c:	07 2e       	mov	r0, r23
 70e:	16 f4       	brtc	.+4      	; 0x714 <__divmodhi4+0xa>
 710:	00 94       	com	r0
 712:	06 d0       	rcall	.+12     	; 0x720 <__divmodhi4_neg1>
 714:	77 fd       	sbrc	r23, 7
 716:	08 d0       	rcall	.+16     	; 0x728 <__divmodhi4_neg2>
 718:	0b d0       	rcall	.+22     	; 0x730 <__udivmodhi4>
 71a:	07 fc       	sbrc	r0, 7
 71c:	05 d0       	rcall	.+10     	; 0x728 <__divmodhi4_neg2>
 71e:	3e f4       	brtc	.+14     	; 0x72e <__divmodhi4_exit>

00000720 <__divmodhi4_neg1>:
 720:	90 95       	com	r25
 722:	81 95       	neg	r24
 724:	9f 4f       	sbci	r25, 0xFF	; 255
 726:	08 95       	ret

00000728 <__divmodhi4_neg2>:
 728:	70 95       	com	r23
 72a:	61 95       	neg	r22
 72c:	7f 4f       	sbci	r23, 0xFF	; 255

0000072e <__divmodhi4_exit>:
 72e:	08 95       	ret

00000730 <__udivmodhi4>:
 730:	aa 1b       	sub	r26, r26
 732:	bb 1b       	sub	r27, r27
 734:	51 e1       	ldi	r21, 0x11	; 17
 736:	07 c0       	rjmp	.+14     	; 0x746 <__udivmodhi4_ep>

00000738 <__udivmodhi4_loop>:
 738:	aa 1f       	adc	r26, r26
 73a:	bb 1f       	adc	r27, r27
 73c:	a6 17       	cp	r26, r22
 73e:	b7 07       	cpc	r27, r23
 740:	10 f0       	brcs	.+4      	; 0x746 <__udivmodhi4_ep>
 742:	a6 1b       	sub	r26, r22
 744:	b7 0b       	sbc	r27, r23

00000746 <__udivmodhi4_ep>:
 746:	88 1f       	adc	r24, r24
 748:	99 1f       	adc	r25, r25
 74a:	5a 95       	dec	r21
 74c:	a9 f7       	brne	.-22     	; 0x738 <__udivmodhi4_loop>
 74e:	80 95       	com	r24
 750:	90 95       	com	r25
 752:	bc 01       	movw	r22, r24
 754:	cd 01       	movw	r24, r26
 756:	08 95       	ret

00000758 <printf>:
 758:	cf 93       	push	r28
 75a:	df 93       	push	r29
 75c:	cd b7       	in	r28, 0x3d	; 61
 75e:	de b7       	in	r29, 0x3e	; 62
 760:	fe 01       	movw	r30, r28
 762:	36 96       	adiw	r30, 0x06	; 6
 764:	61 91       	ld	r22, Z+
 766:	71 91       	ld	r23, Z+
 768:	af 01       	movw	r20, r30
 76a:	80 91 2f 03 	lds	r24, 0x032F
 76e:	90 91 30 03 	lds	r25, 0x0330
 772:	30 d0       	rcall	.+96     	; 0x7d4 <vfprintf>
 774:	df 91       	pop	r29
 776:	cf 91       	pop	r28
 778:	08 95       	ret

0000077a <puts>:
 77a:	0f 93       	push	r16
 77c:	1f 93       	push	r17
 77e:	cf 93       	push	r28
 780:	df 93       	push	r29
 782:	e0 91 2f 03 	lds	r30, 0x032F
 786:	f0 91 30 03 	lds	r31, 0x0330
 78a:	23 81       	ldd	r18, Z+3	; 0x03
 78c:	21 ff       	sbrs	r18, 1
 78e:	1b c0       	rjmp	.+54     	; 0x7c6 <puts+0x4c>
 790:	ec 01       	movw	r28, r24
 792:	00 e0       	ldi	r16, 0x00	; 0
 794:	10 e0       	ldi	r17, 0x00	; 0
 796:	89 91       	ld	r24, Y+
 798:	60 91 2f 03 	lds	r22, 0x032F
 79c:	70 91 30 03 	lds	r23, 0x0330
 7a0:	db 01       	movw	r26, r22
 7a2:	18 96       	adiw	r26, 0x08	; 8
 7a4:	ed 91       	ld	r30, X+
 7a6:	fc 91       	ld	r31, X
 7a8:	19 97       	sbiw	r26, 0x09	; 9
 7aa:	88 23       	and	r24, r24
 7ac:	31 f0       	breq	.+12     	; 0x7ba <puts+0x40>
 7ae:	19 95       	eicall
 7b0:	89 2b       	or	r24, r25
 7b2:	89 f3       	breq	.-30     	; 0x796 <puts+0x1c>
 7b4:	0f ef       	ldi	r16, 0xFF	; 255
 7b6:	1f ef       	ldi	r17, 0xFF	; 255
 7b8:	ee cf       	rjmp	.-36     	; 0x796 <puts+0x1c>
 7ba:	8a e0       	ldi	r24, 0x0A	; 10
 7bc:	19 95       	eicall
 7be:	89 2b       	or	r24, r25
 7c0:	11 f4       	brne	.+4      	; 0x7c6 <puts+0x4c>
 7c2:	c8 01       	movw	r24, r16
 7c4:	02 c0       	rjmp	.+4      	; 0x7ca <puts+0x50>
 7c6:	8f ef       	ldi	r24, 0xFF	; 255
 7c8:	9f ef       	ldi	r25, 0xFF	; 255
 7ca:	df 91       	pop	r29
 7cc:	cf 91       	pop	r28
 7ce:	1f 91       	pop	r17
 7d0:	0f 91       	pop	r16
 7d2:	08 95       	ret

000007d4 <vfprintf>:
 7d4:	2f 92       	push	r2
 7d6:	3f 92       	push	r3
 7d8:	4f 92       	push	r4
 7da:	5f 92       	push	r5
 7dc:	6f 92       	push	r6
 7de:	7f 92       	push	r7
 7e0:	8f 92       	push	r8
 7e2:	9f 92       	push	r9
 7e4:	af 92       	push	r10
 7e6:	bf 92       	push	r11
 7e8:	cf 92       	push	r12
 7ea:	df 92       	push	r13
 7ec:	ef 92       	push	r14
 7ee:	ff 92       	push	r15
 7f0:	0f 93       	push	r16
 7f2:	1f 93       	push	r17
 7f4:	cf 93       	push	r28
 7f6:	df 93       	push	r29
 7f8:	cd b7       	in	r28, 0x3d	; 61
 7fa:	de b7       	in	r29, 0x3e	; 62
 7fc:	2c 97       	sbiw	r28, 0x0c	; 12
 7fe:	0f b6       	in	r0, 0x3f	; 63
 800:	f8 94       	cli
 802:	de bf       	out	0x3e, r29	; 62
 804:	0f be       	out	0x3f, r0	; 63
 806:	cd bf       	out	0x3d, r28	; 61
 808:	7c 01       	movw	r14, r24
 80a:	6b 01       	movw	r12, r22
 80c:	8a 01       	movw	r16, r20
 80e:	fc 01       	movw	r30, r24
 810:	17 82       	std	Z+7, r1	; 0x07
 812:	16 82       	std	Z+6, r1	; 0x06
 814:	83 81       	ldd	r24, Z+3	; 0x03
 816:	81 ff       	sbrs	r24, 1
 818:	b0 c1       	rjmp	.+864    	; 0xb7a <vfprintf+0x3a6>
 81a:	ce 01       	movw	r24, r28
 81c:	01 96       	adiw	r24, 0x01	; 1
 81e:	4c 01       	movw	r8, r24
 820:	f7 01       	movw	r30, r14
 822:	93 81       	ldd	r25, Z+3	; 0x03
 824:	f6 01       	movw	r30, r12
 826:	93 fd       	sbrc	r25, 3
 828:	85 91       	lpm	r24, Z+
 82a:	93 ff       	sbrs	r25, 3
 82c:	81 91       	ld	r24, Z+
 82e:	6f 01       	movw	r12, r30
 830:	88 23       	and	r24, r24
 832:	09 f4       	brne	.+2      	; 0x836 <vfprintf+0x62>
 834:	9e c1       	rjmp	.+828    	; 0xb72 <vfprintf+0x39e>
 836:	85 32       	cpi	r24, 0x25	; 37
 838:	39 f4       	brne	.+14     	; 0x848 <vfprintf+0x74>
 83a:	93 fd       	sbrc	r25, 3
 83c:	85 91       	lpm	r24, Z+
 83e:	93 ff       	sbrs	r25, 3
 840:	81 91       	ld	r24, Z+
 842:	6f 01       	movw	r12, r30
 844:	85 32       	cpi	r24, 0x25	; 37
 846:	21 f4       	brne	.+8      	; 0x850 <vfprintf+0x7c>
 848:	b7 01       	movw	r22, r14
 84a:	90 e0       	ldi	r25, 0x00	; 0
 84c:	c7 d1       	rcall	.+910    	; 0xbdc <fputc>
 84e:	e8 cf       	rjmp	.-48     	; 0x820 <vfprintf+0x4c>
 850:	51 2c       	mov	r5, r1
 852:	31 2c       	mov	r3, r1
 854:	20 e0       	ldi	r18, 0x00	; 0
 856:	20 32       	cpi	r18, 0x20	; 32
 858:	a0 f4       	brcc	.+40     	; 0x882 <vfprintf+0xae>
 85a:	8b 32       	cpi	r24, 0x2B	; 43
 85c:	69 f0       	breq	.+26     	; 0x878 <vfprintf+0xa4>
 85e:	30 f4       	brcc	.+12     	; 0x86c <vfprintf+0x98>
 860:	80 32       	cpi	r24, 0x20	; 32
 862:	59 f0       	breq	.+22     	; 0x87a <vfprintf+0xa6>
 864:	83 32       	cpi	r24, 0x23	; 35
 866:	69 f4       	brne	.+26     	; 0x882 <vfprintf+0xae>
 868:	20 61       	ori	r18, 0x10	; 16
 86a:	2c c0       	rjmp	.+88     	; 0x8c4 <vfprintf+0xf0>
 86c:	8d 32       	cpi	r24, 0x2D	; 45
 86e:	39 f0       	breq	.+14     	; 0x87e <vfprintf+0xaa>
 870:	80 33       	cpi	r24, 0x30	; 48
 872:	39 f4       	brne	.+14     	; 0x882 <vfprintf+0xae>
 874:	21 60       	ori	r18, 0x01	; 1
 876:	26 c0       	rjmp	.+76     	; 0x8c4 <vfprintf+0xf0>
 878:	22 60       	ori	r18, 0x02	; 2
 87a:	24 60       	ori	r18, 0x04	; 4
 87c:	23 c0       	rjmp	.+70     	; 0x8c4 <vfprintf+0xf0>
 87e:	28 60       	ori	r18, 0x08	; 8
 880:	21 c0       	rjmp	.+66     	; 0x8c4 <vfprintf+0xf0>
 882:	27 fd       	sbrc	r18, 7
 884:	27 c0       	rjmp	.+78     	; 0x8d4 <vfprintf+0x100>
 886:	30 ed       	ldi	r19, 0xD0	; 208
 888:	38 0f       	add	r19, r24
 88a:	3a 30       	cpi	r19, 0x0A	; 10
 88c:	78 f4       	brcc	.+30     	; 0x8ac <vfprintf+0xd8>
 88e:	26 ff       	sbrs	r18, 6
 890:	06 c0       	rjmp	.+12     	; 0x89e <vfprintf+0xca>
 892:	fa e0       	ldi	r31, 0x0A	; 10
 894:	5f 9e       	mul	r5, r31
 896:	30 0d       	add	r19, r0
 898:	11 24       	eor	r1, r1
 89a:	53 2e       	mov	r5, r19
 89c:	13 c0       	rjmp	.+38     	; 0x8c4 <vfprintf+0xf0>
 89e:	8a e0       	ldi	r24, 0x0A	; 10
 8a0:	38 9e       	mul	r3, r24
 8a2:	30 0d       	add	r19, r0
 8a4:	11 24       	eor	r1, r1
 8a6:	33 2e       	mov	r3, r19
 8a8:	20 62       	ori	r18, 0x20	; 32
 8aa:	0c c0       	rjmp	.+24     	; 0x8c4 <vfprintf+0xf0>
 8ac:	8e 32       	cpi	r24, 0x2E	; 46
 8ae:	21 f4       	brne	.+8      	; 0x8b8 <vfprintf+0xe4>
 8b0:	26 fd       	sbrc	r18, 6
 8b2:	5f c1       	rjmp	.+702    	; 0xb72 <vfprintf+0x39e>
 8b4:	20 64       	ori	r18, 0x40	; 64
 8b6:	06 c0       	rjmp	.+12     	; 0x8c4 <vfprintf+0xf0>
 8b8:	8c 36       	cpi	r24, 0x6C	; 108
 8ba:	11 f4       	brne	.+4      	; 0x8c0 <vfprintf+0xec>
 8bc:	20 68       	ori	r18, 0x80	; 128
 8be:	02 c0       	rjmp	.+4      	; 0x8c4 <vfprintf+0xf0>
 8c0:	88 36       	cpi	r24, 0x68	; 104
 8c2:	41 f4       	brne	.+16     	; 0x8d4 <vfprintf+0x100>
 8c4:	f6 01       	movw	r30, r12
 8c6:	93 fd       	sbrc	r25, 3
 8c8:	85 91       	lpm	r24, Z+
 8ca:	93 ff       	sbrs	r25, 3
 8cc:	81 91       	ld	r24, Z+
 8ce:	6f 01       	movw	r12, r30
 8d0:	81 11       	cpse	r24, r1
 8d2:	c1 cf       	rjmp	.-126    	; 0x856 <vfprintf+0x82>
 8d4:	98 2f       	mov	r25, r24
 8d6:	9f 7d       	andi	r25, 0xDF	; 223
 8d8:	95 54       	subi	r25, 0x45	; 69
 8da:	93 30       	cpi	r25, 0x03	; 3
 8dc:	28 f4       	brcc	.+10     	; 0x8e8 <vfprintf+0x114>
 8de:	0c 5f       	subi	r16, 0xFC	; 252
 8e0:	1f 4f       	sbci	r17, 0xFF	; 255
 8e2:	ff e3       	ldi	r31, 0x3F	; 63
 8e4:	f9 83       	std	Y+1, r31	; 0x01
 8e6:	0d c0       	rjmp	.+26     	; 0x902 <vfprintf+0x12e>
 8e8:	83 36       	cpi	r24, 0x63	; 99
 8ea:	31 f0       	breq	.+12     	; 0x8f8 <vfprintf+0x124>
 8ec:	83 37       	cpi	r24, 0x73	; 115
 8ee:	71 f0       	breq	.+28     	; 0x90c <vfprintf+0x138>
 8f0:	83 35       	cpi	r24, 0x53	; 83
 8f2:	09 f0       	breq	.+2      	; 0x8f6 <vfprintf+0x122>
 8f4:	57 c0       	rjmp	.+174    	; 0x9a4 <vfprintf+0x1d0>
 8f6:	21 c0       	rjmp	.+66     	; 0x93a <vfprintf+0x166>
 8f8:	f8 01       	movw	r30, r16
 8fa:	80 81       	ld	r24, Z
 8fc:	89 83       	std	Y+1, r24	; 0x01
 8fe:	0e 5f       	subi	r16, 0xFE	; 254
 900:	1f 4f       	sbci	r17, 0xFF	; 255
 902:	44 24       	eor	r4, r4
 904:	43 94       	inc	r4
 906:	51 2c       	mov	r5, r1
 908:	54 01       	movw	r10, r8
 90a:	14 c0       	rjmp	.+40     	; 0x934 <vfprintf+0x160>
 90c:	38 01       	movw	r6, r16
 90e:	f2 e0       	ldi	r31, 0x02	; 2
 910:	6f 0e       	add	r6, r31
 912:	71 1c       	adc	r7, r1
 914:	f8 01       	movw	r30, r16
 916:	a0 80       	ld	r10, Z
 918:	b1 80       	ldd	r11, Z+1	; 0x01
 91a:	26 ff       	sbrs	r18, 6
 91c:	03 c0       	rjmp	.+6      	; 0x924 <vfprintf+0x150>
 91e:	65 2d       	mov	r22, r5
 920:	70 e0       	ldi	r23, 0x00	; 0
 922:	02 c0       	rjmp	.+4      	; 0x928 <vfprintf+0x154>
 924:	6f ef       	ldi	r22, 0xFF	; 255
 926:	7f ef       	ldi	r23, 0xFF	; 255
 928:	c5 01       	movw	r24, r10
 92a:	2c 87       	std	Y+12, r18	; 0x0c
 92c:	4c d1       	rcall	.+664    	; 0xbc6 <strnlen>
 92e:	2c 01       	movw	r4, r24
 930:	83 01       	movw	r16, r6
 932:	2c 85       	ldd	r18, Y+12	; 0x0c
 934:	2f 77       	andi	r18, 0x7F	; 127
 936:	22 2e       	mov	r2, r18
 938:	16 c0       	rjmp	.+44     	; 0x966 <vfprintf+0x192>
 93a:	38 01       	movw	r6, r16
 93c:	f2 e0       	ldi	r31, 0x02	; 2
 93e:	6f 0e       	add	r6, r31
 940:	71 1c       	adc	r7, r1
 942:	f8 01       	movw	r30, r16
 944:	a0 80       	ld	r10, Z
 946:	b1 80       	ldd	r11, Z+1	; 0x01
 948:	26 ff       	sbrs	r18, 6
 94a:	03 c0       	rjmp	.+6      	; 0x952 <vfprintf+0x17e>
 94c:	65 2d       	mov	r22, r5
 94e:	70 e0       	ldi	r23, 0x00	; 0
 950:	02 c0       	rjmp	.+4      	; 0x956 <vfprintf+0x182>
 952:	6f ef       	ldi	r22, 0xFF	; 255
 954:	7f ef       	ldi	r23, 0xFF	; 255
 956:	c5 01       	movw	r24, r10
 958:	2c 87       	std	Y+12, r18	; 0x0c
 95a:	2a d1       	rcall	.+596    	; 0xbb0 <strnlen_P>
 95c:	2c 01       	movw	r4, r24
 95e:	2c 85       	ldd	r18, Y+12	; 0x0c
 960:	20 68       	ori	r18, 0x80	; 128
 962:	22 2e       	mov	r2, r18
 964:	83 01       	movw	r16, r6
 966:	23 fc       	sbrc	r2, 3
 968:	19 c0       	rjmp	.+50     	; 0x99c <vfprintf+0x1c8>
 96a:	83 2d       	mov	r24, r3
 96c:	90 e0       	ldi	r25, 0x00	; 0
 96e:	48 16       	cp	r4, r24
 970:	59 06       	cpc	r5, r25
 972:	a0 f4       	brcc	.+40     	; 0x99c <vfprintf+0x1c8>
 974:	b7 01       	movw	r22, r14
 976:	80 e2       	ldi	r24, 0x20	; 32
 978:	90 e0       	ldi	r25, 0x00	; 0
 97a:	30 d1       	rcall	.+608    	; 0xbdc <fputc>
 97c:	3a 94       	dec	r3
 97e:	f5 cf       	rjmp	.-22     	; 0x96a <vfprintf+0x196>
 980:	f5 01       	movw	r30, r10
 982:	27 fc       	sbrc	r2, 7
 984:	85 91       	lpm	r24, Z+
 986:	27 fe       	sbrs	r2, 7
 988:	81 91       	ld	r24, Z+
 98a:	5f 01       	movw	r10, r30
 98c:	b7 01       	movw	r22, r14
 98e:	90 e0       	ldi	r25, 0x00	; 0
 990:	25 d1       	rcall	.+586    	; 0xbdc <fputc>
 992:	31 10       	cpse	r3, r1
 994:	3a 94       	dec	r3
 996:	f1 e0       	ldi	r31, 0x01	; 1
 998:	4f 1a       	sub	r4, r31
 99a:	51 08       	sbc	r5, r1
 99c:	41 14       	cp	r4, r1
 99e:	51 04       	cpc	r5, r1
 9a0:	79 f7       	brne	.-34     	; 0x980 <vfprintf+0x1ac>
 9a2:	de c0       	rjmp	.+444    	; 0xb60 <vfprintf+0x38c>
 9a4:	84 36       	cpi	r24, 0x64	; 100
 9a6:	11 f0       	breq	.+4      	; 0x9ac <vfprintf+0x1d8>
 9a8:	89 36       	cpi	r24, 0x69	; 105
 9aa:	31 f5       	brne	.+76     	; 0x9f8 <vfprintf+0x224>
 9ac:	f8 01       	movw	r30, r16
 9ae:	27 ff       	sbrs	r18, 7
 9b0:	07 c0       	rjmp	.+14     	; 0x9c0 <vfprintf+0x1ec>
 9b2:	60 81       	ld	r22, Z
 9b4:	71 81       	ldd	r23, Z+1	; 0x01
 9b6:	82 81       	ldd	r24, Z+2	; 0x02
 9b8:	93 81       	ldd	r25, Z+3	; 0x03
 9ba:	0c 5f       	subi	r16, 0xFC	; 252
 9bc:	1f 4f       	sbci	r17, 0xFF	; 255
 9be:	08 c0       	rjmp	.+16     	; 0x9d0 <vfprintf+0x1fc>
 9c0:	60 81       	ld	r22, Z
 9c2:	71 81       	ldd	r23, Z+1	; 0x01
 9c4:	88 27       	eor	r24, r24
 9c6:	77 fd       	sbrc	r23, 7
 9c8:	80 95       	com	r24
 9ca:	98 2f       	mov	r25, r24
 9cc:	0e 5f       	subi	r16, 0xFE	; 254
 9ce:	1f 4f       	sbci	r17, 0xFF	; 255
 9d0:	2f 76       	andi	r18, 0x6F	; 111
 9d2:	b2 2e       	mov	r11, r18
 9d4:	97 ff       	sbrs	r25, 7
 9d6:	09 c0       	rjmp	.+18     	; 0x9ea <vfprintf+0x216>
 9d8:	90 95       	com	r25
 9da:	80 95       	com	r24
 9dc:	70 95       	com	r23
 9de:	61 95       	neg	r22
 9e0:	7f 4f       	sbci	r23, 0xFF	; 255
 9e2:	8f 4f       	sbci	r24, 0xFF	; 255
 9e4:	9f 4f       	sbci	r25, 0xFF	; 255
 9e6:	20 68       	ori	r18, 0x80	; 128
 9e8:	b2 2e       	mov	r11, r18
 9ea:	2a e0       	ldi	r18, 0x0A	; 10
 9ec:	30 e0       	ldi	r19, 0x00	; 0
 9ee:	a4 01       	movw	r20, r8
 9f0:	27 d1       	rcall	.+590    	; 0xc40 <__ultoa_invert>
 9f2:	a8 2e       	mov	r10, r24
 9f4:	a8 18       	sub	r10, r8
 9f6:	43 c0       	rjmp	.+134    	; 0xa7e <vfprintf+0x2aa>
 9f8:	85 37       	cpi	r24, 0x75	; 117
 9fa:	29 f4       	brne	.+10     	; 0xa06 <vfprintf+0x232>
 9fc:	2f 7e       	andi	r18, 0xEF	; 239
 9fe:	b2 2e       	mov	r11, r18
 a00:	2a e0       	ldi	r18, 0x0A	; 10
 a02:	30 e0       	ldi	r19, 0x00	; 0
 a04:	25 c0       	rjmp	.+74     	; 0xa50 <vfprintf+0x27c>
 a06:	f2 2f       	mov	r31, r18
 a08:	f9 7f       	andi	r31, 0xF9	; 249
 a0a:	bf 2e       	mov	r11, r31
 a0c:	8f 36       	cpi	r24, 0x6F	; 111
 a0e:	c1 f0       	breq	.+48     	; 0xa40 <vfprintf+0x26c>
 a10:	18 f4       	brcc	.+6      	; 0xa18 <vfprintf+0x244>
 a12:	88 35       	cpi	r24, 0x58	; 88
 a14:	79 f0       	breq	.+30     	; 0xa34 <vfprintf+0x260>
 a16:	ad c0       	rjmp	.+346    	; 0xb72 <vfprintf+0x39e>
 a18:	80 37       	cpi	r24, 0x70	; 112
 a1a:	19 f0       	breq	.+6      	; 0xa22 <vfprintf+0x24e>
 a1c:	88 37       	cpi	r24, 0x78	; 120
 a1e:	21 f0       	breq	.+8      	; 0xa28 <vfprintf+0x254>
 a20:	a8 c0       	rjmp	.+336    	; 0xb72 <vfprintf+0x39e>
 a22:	2f 2f       	mov	r18, r31
 a24:	20 61       	ori	r18, 0x10	; 16
 a26:	b2 2e       	mov	r11, r18
 a28:	b4 fe       	sbrs	r11, 4
 a2a:	0d c0       	rjmp	.+26     	; 0xa46 <vfprintf+0x272>
 a2c:	8b 2d       	mov	r24, r11
 a2e:	84 60       	ori	r24, 0x04	; 4
 a30:	b8 2e       	mov	r11, r24
 a32:	09 c0       	rjmp	.+18     	; 0xa46 <vfprintf+0x272>
 a34:	24 ff       	sbrs	r18, 4
 a36:	0a c0       	rjmp	.+20     	; 0xa4c <vfprintf+0x278>
 a38:	9f 2f       	mov	r25, r31
 a3a:	96 60       	ori	r25, 0x06	; 6
 a3c:	b9 2e       	mov	r11, r25
 a3e:	06 c0       	rjmp	.+12     	; 0xa4c <vfprintf+0x278>
 a40:	28 e0       	ldi	r18, 0x08	; 8
 a42:	30 e0       	ldi	r19, 0x00	; 0
 a44:	05 c0       	rjmp	.+10     	; 0xa50 <vfprintf+0x27c>
 a46:	20 e1       	ldi	r18, 0x10	; 16
 a48:	30 e0       	ldi	r19, 0x00	; 0
 a4a:	02 c0       	rjmp	.+4      	; 0xa50 <vfprintf+0x27c>
 a4c:	20 e1       	ldi	r18, 0x10	; 16
 a4e:	32 e0       	ldi	r19, 0x02	; 2
 a50:	f8 01       	movw	r30, r16
 a52:	b7 fe       	sbrs	r11, 7
 a54:	07 c0       	rjmp	.+14     	; 0xa64 <vfprintf+0x290>
 a56:	60 81       	ld	r22, Z
 a58:	71 81       	ldd	r23, Z+1	; 0x01
 a5a:	82 81       	ldd	r24, Z+2	; 0x02
 a5c:	93 81       	ldd	r25, Z+3	; 0x03
 a5e:	0c 5f       	subi	r16, 0xFC	; 252
 a60:	1f 4f       	sbci	r17, 0xFF	; 255
 a62:	06 c0       	rjmp	.+12     	; 0xa70 <vfprintf+0x29c>
 a64:	60 81       	ld	r22, Z
 a66:	71 81       	ldd	r23, Z+1	; 0x01
 a68:	80 e0       	ldi	r24, 0x00	; 0
 a6a:	90 e0       	ldi	r25, 0x00	; 0
 a6c:	0e 5f       	subi	r16, 0xFE	; 254
 a6e:	1f 4f       	sbci	r17, 0xFF	; 255
 a70:	a4 01       	movw	r20, r8
 a72:	e6 d0       	rcall	.+460    	; 0xc40 <__ultoa_invert>
 a74:	a8 2e       	mov	r10, r24
 a76:	a8 18       	sub	r10, r8
 a78:	fb 2d       	mov	r31, r11
 a7a:	ff 77       	andi	r31, 0x7F	; 127
 a7c:	bf 2e       	mov	r11, r31
 a7e:	b6 fe       	sbrs	r11, 6
 a80:	0b c0       	rjmp	.+22     	; 0xa98 <vfprintf+0x2c4>
 a82:	2b 2d       	mov	r18, r11
 a84:	2e 7f       	andi	r18, 0xFE	; 254
 a86:	a5 14       	cp	r10, r5
 a88:	50 f4       	brcc	.+20     	; 0xa9e <vfprintf+0x2ca>
 a8a:	b4 fe       	sbrs	r11, 4
 a8c:	0a c0       	rjmp	.+20     	; 0xaa2 <vfprintf+0x2ce>
 a8e:	b2 fc       	sbrc	r11, 2
 a90:	08 c0       	rjmp	.+16     	; 0xaa2 <vfprintf+0x2ce>
 a92:	2b 2d       	mov	r18, r11
 a94:	2e 7e       	andi	r18, 0xEE	; 238
 a96:	05 c0       	rjmp	.+10     	; 0xaa2 <vfprintf+0x2ce>
 a98:	7a 2c       	mov	r7, r10
 a9a:	2b 2d       	mov	r18, r11
 a9c:	03 c0       	rjmp	.+6      	; 0xaa4 <vfprintf+0x2d0>
 a9e:	7a 2c       	mov	r7, r10
 aa0:	01 c0       	rjmp	.+2      	; 0xaa4 <vfprintf+0x2d0>
 aa2:	75 2c       	mov	r7, r5
 aa4:	24 ff       	sbrs	r18, 4
 aa6:	0d c0       	rjmp	.+26     	; 0xac2 <vfprintf+0x2ee>
 aa8:	fe 01       	movw	r30, r28
 aaa:	ea 0d       	add	r30, r10
 aac:	f1 1d       	adc	r31, r1
 aae:	80 81       	ld	r24, Z
 ab0:	80 33       	cpi	r24, 0x30	; 48
 ab2:	11 f4       	brne	.+4      	; 0xab8 <vfprintf+0x2e4>
 ab4:	29 7e       	andi	r18, 0xE9	; 233
 ab6:	09 c0       	rjmp	.+18     	; 0xaca <vfprintf+0x2f6>
 ab8:	22 ff       	sbrs	r18, 2
 aba:	06 c0       	rjmp	.+12     	; 0xac8 <vfprintf+0x2f4>
 abc:	73 94       	inc	r7
 abe:	73 94       	inc	r7
 ac0:	04 c0       	rjmp	.+8      	; 0xaca <vfprintf+0x2f6>
 ac2:	82 2f       	mov	r24, r18
 ac4:	86 78       	andi	r24, 0x86	; 134
 ac6:	09 f0       	breq	.+2      	; 0xaca <vfprintf+0x2f6>
 ac8:	73 94       	inc	r7
 aca:	23 fd       	sbrc	r18, 3
 acc:	12 c0       	rjmp	.+36     	; 0xaf2 <vfprintf+0x31e>
 ace:	20 ff       	sbrs	r18, 0
 ad0:	06 c0       	rjmp	.+12     	; 0xade <vfprintf+0x30a>
 ad2:	5a 2c       	mov	r5, r10
 ad4:	73 14       	cp	r7, r3
 ad6:	18 f4       	brcc	.+6      	; 0xade <vfprintf+0x30a>
 ad8:	53 0c       	add	r5, r3
 ada:	57 18       	sub	r5, r7
 adc:	73 2c       	mov	r7, r3
 ade:	73 14       	cp	r7, r3
 ae0:	60 f4       	brcc	.+24     	; 0xafa <vfprintf+0x326>
 ae2:	b7 01       	movw	r22, r14
 ae4:	80 e2       	ldi	r24, 0x20	; 32
 ae6:	90 e0       	ldi	r25, 0x00	; 0
 ae8:	2c 87       	std	Y+12, r18	; 0x0c
 aea:	78 d0       	rcall	.+240    	; 0xbdc <fputc>
 aec:	73 94       	inc	r7
 aee:	2c 85       	ldd	r18, Y+12	; 0x0c
 af0:	f6 cf       	rjmp	.-20     	; 0xade <vfprintf+0x30a>
 af2:	73 14       	cp	r7, r3
 af4:	10 f4       	brcc	.+4      	; 0xafa <vfprintf+0x326>
 af6:	37 18       	sub	r3, r7
 af8:	01 c0       	rjmp	.+2      	; 0xafc <vfprintf+0x328>
 afa:	31 2c       	mov	r3, r1
 afc:	24 ff       	sbrs	r18, 4
 afe:	11 c0       	rjmp	.+34     	; 0xb22 <vfprintf+0x34e>
 b00:	b7 01       	movw	r22, r14
 b02:	80 e3       	ldi	r24, 0x30	; 48
 b04:	90 e0       	ldi	r25, 0x00	; 0
 b06:	2c 87       	std	Y+12, r18	; 0x0c
 b08:	69 d0       	rcall	.+210    	; 0xbdc <fputc>
 b0a:	2c 85       	ldd	r18, Y+12	; 0x0c
 b0c:	22 ff       	sbrs	r18, 2
 b0e:	16 c0       	rjmp	.+44     	; 0xb3c <vfprintf+0x368>
 b10:	21 ff       	sbrs	r18, 1
 b12:	03 c0       	rjmp	.+6      	; 0xb1a <vfprintf+0x346>
 b14:	88 e5       	ldi	r24, 0x58	; 88
 b16:	90 e0       	ldi	r25, 0x00	; 0
 b18:	02 c0       	rjmp	.+4      	; 0xb1e <vfprintf+0x34a>
 b1a:	88 e7       	ldi	r24, 0x78	; 120
 b1c:	90 e0       	ldi	r25, 0x00	; 0
 b1e:	b7 01       	movw	r22, r14
 b20:	0c c0       	rjmp	.+24     	; 0xb3a <vfprintf+0x366>
 b22:	82 2f       	mov	r24, r18
 b24:	86 78       	andi	r24, 0x86	; 134
 b26:	51 f0       	breq	.+20     	; 0xb3c <vfprintf+0x368>
 b28:	21 fd       	sbrc	r18, 1
 b2a:	02 c0       	rjmp	.+4      	; 0xb30 <vfprintf+0x35c>
 b2c:	80 e2       	ldi	r24, 0x20	; 32
 b2e:	01 c0       	rjmp	.+2      	; 0xb32 <vfprintf+0x35e>
 b30:	8b e2       	ldi	r24, 0x2B	; 43
 b32:	27 fd       	sbrc	r18, 7
 b34:	8d e2       	ldi	r24, 0x2D	; 45
 b36:	b7 01       	movw	r22, r14
 b38:	90 e0       	ldi	r25, 0x00	; 0
 b3a:	50 d0       	rcall	.+160    	; 0xbdc <fputc>
 b3c:	a5 14       	cp	r10, r5
 b3e:	30 f4       	brcc	.+12     	; 0xb4c <vfprintf+0x378>
 b40:	b7 01       	movw	r22, r14
 b42:	80 e3       	ldi	r24, 0x30	; 48
 b44:	90 e0       	ldi	r25, 0x00	; 0
 b46:	4a d0       	rcall	.+148    	; 0xbdc <fputc>
 b48:	5a 94       	dec	r5
 b4a:	f8 cf       	rjmp	.-16     	; 0xb3c <vfprintf+0x368>
 b4c:	aa 94       	dec	r10
 b4e:	f4 01       	movw	r30, r8
 b50:	ea 0d       	add	r30, r10
 b52:	f1 1d       	adc	r31, r1
 b54:	80 81       	ld	r24, Z
 b56:	b7 01       	movw	r22, r14
 b58:	90 e0       	ldi	r25, 0x00	; 0
 b5a:	40 d0       	rcall	.+128    	; 0xbdc <fputc>
 b5c:	a1 10       	cpse	r10, r1
 b5e:	f6 cf       	rjmp	.-20     	; 0xb4c <vfprintf+0x378>
 b60:	33 20       	and	r3, r3
 b62:	09 f4       	brne	.+2      	; 0xb66 <vfprintf+0x392>
 b64:	5d ce       	rjmp	.-838    	; 0x820 <vfprintf+0x4c>
 b66:	b7 01       	movw	r22, r14
 b68:	80 e2       	ldi	r24, 0x20	; 32
 b6a:	90 e0       	ldi	r25, 0x00	; 0
 b6c:	37 d0       	rcall	.+110    	; 0xbdc <fputc>
 b6e:	3a 94       	dec	r3
 b70:	f7 cf       	rjmp	.-18     	; 0xb60 <vfprintf+0x38c>
 b72:	f7 01       	movw	r30, r14
 b74:	86 81       	ldd	r24, Z+6	; 0x06
 b76:	97 81       	ldd	r25, Z+7	; 0x07
 b78:	02 c0       	rjmp	.+4      	; 0xb7e <vfprintf+0x3aa>
 b7a:	8f ef       	ldi	r24, 0xFF	; 255
 b7c:	9f ef       	ldi	r25, 0xFF	; 255
 b7e:	2c 96       	adiw	r28, 0x0c	; 12
 b80:	0f b6       	in	r0, 0x3f	; 63
 b82:	f8 94       	cli
 b84:	de bf       	out	0x3e, r29	; 62
 b86:	0f be       	out	0x3f, r0	; 63
 b88:	cd bf       	out	0x3d, r28	; 61
 b8a:	df 91       	pop	r29
 b8c:	cf 91       	pop	r28
 b8e:	1f 91       	pop	r17
 b90:	0f 91       	pop	r16
 b92:	ff 90       	pop	r15
 b94:	ef 90       	pop	r14
 b96:	df 90       	pop	r13
 b98:	cf 90       	pop	r12
 b9a:	bf 90       	pop	r11
 b9c:	af 90       	pop	r10
 b9e:	9f 90       	pop	r9
 ba0:	8f 90       	pop	r8
 ba2:	7f 90       	pop	r7
 ba4:	6f 90       	pop	r6
 ba6:	5f 90       	pop	r5
 ba8:	4f 90       	pop	r4
 baa:	3f 90       	pop	r3
 bac:	2f 90       	pop	r2
 bae:	08 95       	ret

00000bb0 <strnlen_P>:
 bb0:	fc 01       	movw	r30, r24
 bb2:	05 90       	lpm	r0, Z+
 bb4:	61 50       	subi	r22, 0x01	; 1
 bb6:	70 40       	sbci	r23, 0x00	; 0
 bb8:	01 10       	cpse	r0, r1
 bba:	d8 f7       	brcc	.-10     	; 0xbb2 <strnlen_P+0x2>
 bbc:	80 95       	com	r24
 bbe:	90 95       	com	r25
 bc0:	8e 0f       	add	r24, r30
 bc2:	9f 1f       	adc	r25, r31
 bc4:	08 95       	ret

00000bc6 <strnlen>:
 bc6:	fc 01       	movw	r30, r24
 bc8:	61 50       	subi	r22, 0x01	; 1
 bca:	70 40       	sbci	r23, 0x00	; 0
 bcc:	01 90       	ld	r0, Z+
 bce:	01 10       	cpse	r0, r1
 bd0:	d8 f7       	brcc	.-10     	; 0xbc8 <strnlen+0x2>
 bd2:	80 95       	com	r24
 bd4:	90 95       	com	r25
 bd6:	8e 0f       	add	r24, r30
 bd8:	9f 1f       	adc	r25, r31
 bda:	08 95       	ret

00000bdc <fputc>:
 bdc:	0f 93       	push	r16
 bde:	1f 93       	push	r17
 be0:	cf 93       	push	r28
 be2:	df 93       	push	r29
 be4:	18 2f       	mov	r17, r24
 be6:	09 2f       	mov	r16, r25
 be8:	eb 01       	movw	r28, r22
 bea:	8b 81       	ldd	r24, Y+3	; 0x03
 bec:	81 fd       	sbrc	r24, 1
 bee:	03 c0       	rjmp	.+6      	; 0xbf6 <fputc+0x1a>
 bf0:	8f ef       	ldi	r24, 0xFF	; 255
 bf2:	9f ef       	ldi	r25, 0xFF	; 255
 bf4:	20 c0       	rjmp	.+64     	; 0xc36 <fputc+0x5a>
 bf6:	82 ff       	sbrs	r24, 2
 bf8:	10 c0       	rjmp	.+32     	; 0xc1a <fputc+0x3e>
 bfa:	4e 81       	ldd	r20, Y+6	; 0x06
 bfc:	5f 81       	ldd	r21, Y+7	; 0x07
 bfe:	2c 81       	ldd	r18, Y+4	; 0x04
 c00:	3d 81       	ldd	r19, Y+5	; 0x05
 c02:	42 17       	cp	r20, r18
 c04:	53 07       	cpc	r21, r19
 c06:	7c f4       	brge	.+30     	; 0xc26 <fputc+0x4a>
 c08:	e8 81       	ld	r30, Y
 c0a:	f9 81       	ldd	r31, Y+1	; 0x01
 c0c:	9f 01       	movw	r18, r30
 c0e:	2f 5f       	subi	r18, 0xFF	; 255
 c10:	3f 4f       	sbci	r19, 0xFF	; 255
 c12:	39 83       	std	Y+1, r19	; 0x01
 c14:	28 83       	st	Y, r18
 c16:	10 83       	st	Z, r17
 c18:	06 c0       	rjmp	.+12     	; 0xc26 <fputc+0x4a>
 c1a:	e8 85       	ldd	r30, Y+8	; 0x08
 c1c:	f9 85       	ldd	r31, Y+9	; 0x09
 c1e:	81 2f       	mov	r24, r17
 c20:	19 95       	eicall
 c22:	89 2b       	or	r24, r25
 c24:	29 f7       	brne	.-54     	; 0xbf0 <fputc+0x14>
 c26:	2e 81       	ldd	r18, Y+6	; 0x06
 c28:	3f 81       	ldd	r19, Y+7	; 0x07
 c2a:	2f 5f       	subi	r18, 0xFF	; 255
 c2c:	3f 4f       	sbci	r19, 0xFF	; 255
 c2e:	3f 83       	std	Y+7, r19	; 0x07
 c30:	2e 83       	std	Y+6, r18	; 0x06
 c32:	81 2f       	mov	r24, r17
 c34:	90 2f       	mov	r25, r16
 c36:	df 91       	pop	r29
 c38:	cf 91       	pop	r28
 c3a:	1f 91       	pop	r17
 c3c:	0f 91       	pop	r16
 c3e:	08 95       	ret

00000c40 <__ultoa_invert>:
 c40:	fa 01       	movw	r30, r20
 c42:	aa 27       	eor	r26, r26
 c44:	28 30       	cpi	r18, 0x08	; 8
 c46:	51 f1       	breq	.+84     	; 0xc9c <__ultoa_invert+0x5c>
 c48:	20 31       	cpi	r18, 0x10	; 16
 c4a:	81 f1       	breq	.+96     	; 0xcac <__ultoa_invert+0x6c>
 c4c:	e8 94       	clt
 c4e:	6f 93       	push	r22
 c50:	6e 7f       	andi	r22, 0xFE	; 254
 c52:	6e 5f       	subi	r22, 0xFE	; 254
 c54:	7f 4f       	sbci	r23, 0xFF	; 255
 c56:	8f 4f       	sbci	r24, 0xFF	; 255
 c58:	9f 4f       	sbci	r25, 0xFF	; 255
 c5a:	af 4f       	sbci	r26, 0xFF	; 255
 c5c:	b1 e0       	ldi	r27, 0x01	; 1
 c5e:	3e d0       	rcall	.+124    	; 0xcdc <__ultoa_invert+0x9c>
 c60:	b4 e0       	ldi	r27, 0x04	; 4
 c62:	3c d0       	rcall	.+120    	; 0xcdc <__ultoa_invert+0x9c>
 c64:	67 0f       	add	r22, r23
 c66:	78 1f       	adc	r23, r24
 c68:	89 1f       	adc	r24, r25
 c6a:	9a 1f       	adc	r25, r26
 c6c:	a1 1d       	adc	r26, r1
 c6e:	68 0f       	add	r22, r24
 c70:	79 1f       	adc	r23, r25
 c72:	8a 1f       	adc	r24, r26
 c74:	91 1d       	adc	r25, r1
 c76:	a1 1d       	adc	r26, r1
 c78:	6a 0f       	add	r22, r26
 c7a:	71 1d       	adc	r23, r1
 c7c:	81 1d       	adc	r24, r1
 c7e:	91 1d       	adc	r25, r1
 c80:	a1 1d       	adc	r26, r1
 c82:	20 d0       	rcall	.+64     	; 0xcc4 <__ultoa_invert+0x84>
 c84:	09 f4       	brne	.+2      	; 0xc88 <__ultoa_invert+0x48>
 c86:	68 94       	set
 c88:	3f 91       	pop	r19
 c8a:	2a e0       	ldi	r18, 0x0A	; 10
 c8c:	26 9f       	mul	r18, r22
 c8e:	11 24       	eor	r1, r1
 c90:	30 19       	sub	r19, r0
 c92:	30 5d       	subi	r19, 0xD0	; 208
 c94:	31 93       	st	Z+, r19
 c96:	de f6       	brtc	.-74     	; 0xc4e <__ultoa_invert+0xe>
 c98:	cf 01       	movw	r24, r30
 c9a:	08 95       	ret
 c9c:	46 2f       	mov	r20, r22
 c9e:	47 70       	andi	r20, 0x07	; 7
 ca0:	40 5d       	subi	r20, 0xD0	; 208
 ca2:	41 93       	st	Z+, r20
 ca4:	b3 e0       	ldi	r27, 0x03	; 3
 ca6:	0f d0       	rcall	.+30     	; 0xcc6 <__ultoa_invert+0x86>
 ca8:	c9 f7       	brne	.-14     	; 0xc9c <__ultoa_invert+0x5c>
 caa:	f6 cf       	rjmp	.-20     	; 0xc98 <__ultoa_invert+0x58>
 cac:	46 2f       	mov	r20, r22
 cae:	4f 70       	andi	r20, 0x0F	; 15
 cb0:	40 5d       	subi	r20, 0xD0	; 208
 cb2:	4a 33       	cpi	r20, 0x3A	; 58
 cb4:	18 f0       	brcs	.+6      	; 0xcbc <__ultoa_invert+0x7c>
 cb6:	49 5d       	subi	r20, 0xD9	; 217
 cb8:	31 fd       	sbrc	r19, 1
 cba:	40 52       	subi	r20, 0x20	; 32
 cbc:	41 93       	st	Z+, r20
 cbe:	02 d0       	rcall	.+4      	; 0xcc4 <__ultoa_invert+0x84>
 cc0:	a9 f7       	brne	.-22     	; 0xcac <__ultoa_invert+0x6c>
 cc2:	ea cf       	rjmp	.-44     	; 0xc98 <__ultoa_invert+0x58>
 cc4:	b4 e0       	ldi	r27, 0x04	; 4
 cc6:	a6 95       	lsr	r26
 cc8:	97 95       	ror	r25
 cca:	87 95       	ror	r24
 ccc:	77 95       	ror	r23
 cce:	67 95       	ror	r22
 cd0:	ba 95       	dec	r27
 cd2:	c9 f7       	brne	.-14     	; 0xcc6 <__ultoa_invert+0x86>
 cd4:	00 97       	sbiw	r24, 0x00	; 0
 cd6:	61 05       	cpc	r22, r1
 cd8:	71 05       	cpc	r23, r1
 cda:	08 95       	ret
 cdc:	9b 01       	movw	r18, r22
 cde:	ac 01       	movw	r20, r24
 ce0:	0a 2e       	mov	r0, r26
 ce2:	06 94       	lsr	r0
 ce4:	57 95       	ror	r21
 ce6:	47 95       	ror	r20
 ce8:	37 95       	ror	r19
 cea:	27 95       	ror	r18
 cec:	ba 95       	dec	r27
 cee:	c9 f7       	brne	.-14     	; 0xce2 <__ultoa_invert+0xa2>
 cf0:	62 0f       	add	r22, r18
 cf2:	73 1f       	adc	r23, r19
 cf4:	84 1f       	adc	r24, r20
 cf6:	95 1f       	adc	r25, r21
 cf8:	a0 1d       	adc	r26, r0
 cfa:	08 95       	ret

00000cfc <_exit>:
 cfc:	f8 94       	cli

00000cfe <__stop_program>:
 cfe:	ff cf       	rjmp	.-2      	; 0xcfe <__stop_program>
