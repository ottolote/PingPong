
Node2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f6  00800200  00000f82  00001016  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f82  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000052  008002f6  008002f6  0000110c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000110c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000290  00000000  00000000  00001168  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001a46  00000000  00000000  000013f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000dbf  00000000  00000000  00002e3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001428  00000000  00000000  00003bfd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000005f8  00000000  00000000  00005028  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000679  00000000  00000000  00005620  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000bc2  00000000  00000000  00005c99  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001e0  00000000  00000000  0000685b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	c2 c0       	rjmp	.+388    	; 0x186 <__ctors_end>
   2:	00 00       	nop
   4:	3c c2       	rjmp	.+1144   	; 0x47e <__vector_1>
   6:	00 00       	nop
   8:	dd c0       	rjmp	.+442    	; 0x1c4 <__bad_interrupt>
   a:	00 00       	nop
   c:	db c0       	rjmp	.+438    	; 0x1c4 <__bad_interrupt>
   e:	00 00       	nop
  10:	d9 c0       	rjmp	.+434    	; 0x1c4 <__bad_interrupt>
  12:	00 00       	nop
  14:	d7 c0       	rjmp	.+430    	; 0x1c4 <__bad_interrupt>
  16:	00 00       	nop
  18:	d5 c0       	rjmp	.+426    	; 0x1c4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	d3 c0       	rjmp	.+422    	; 0x1c4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	d1 c0       	rjmp	.+418    	; 0x1c4 <__bad_interrupt>
  22:	00 00       	nop
  24:	cf c0       	rjmp	.+414    	; 0x1c4 <__bad_interrupt>
  26:	00 00       	nop
  28:	cd c0       	rjmp	.+410    	; 0x1c4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	cb c0       	rjmp	.+406    	; 0x1c4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	c9 c0       	rjmp	.+402    	; 0x1c4 <__bad_interrupt>
  32:	00 00       	nop
  34:	c7 c0       	rjmp	.+398    	; 0x1c4 <__bad_interrupt>
  36:	00 00       	nop
  38:	c5 c0       	rjmp	.+394    	; 0x1c4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	c3 c0       	rjmp	.+390    	; 0x1c4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	c1 c0       	rjmp	.+386    	; 0x1c4 <__bad_interrupt>
  42:	00 00       	nop
  44:	bf c0       	rjmp	.+382    	; 0x1c4 <__bad_interrupt>
  46:	00 00       	nop
  48:	bd c0       	rjmp	.+378    	; 0x1c4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	bb c0       	rjmp	.+374    	; 0x1c4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	b9 c0       	rjmp	.+370    	; 0x1c4 <__bad_interrupt>
  52:	00 00       	nop
  54:	b7 c0       	rjmp	.+366    	; 0x1c4 <__bad_interrupt>
  56:	00 00       	nop
  58:	b5 c0       	rjmp	.+362    	; 0x1c4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	b3 c0       	rjmp	.+358    	; 0x1c4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	b1 c0       	rjmp	.+354    	; 0x1c4 <__bad_interrupt>
  62:	00 00       	nop
  64:	af c0       	rjmp	.+350    	; 0x1c4 <__bad_interrupt>
  66:	00 00       	nop
  68:	ad c0       	rjmp	.+346    	; 0x1c4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	ab c0       	rjmp	.+342    	; 0x1c4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	a9 c0       	rjmp	.+338    	; 0x1c4 <__bad_interrupt>
  72:	00 00       	nop
  74:	a7 c0       	rjmp	.+334    	; 0x1c4 <__bad_interrupt>
  76:	00 00       	nop
  78:	a5 c0       	rjmp	.+330    	; 0x1c4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	a3 c0       	rjmp	.+326    	; 0x1c4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	a1 c0       	rjmp	.+322    	; 0x1c4 <__bad_interrupt>
  82:	00 00       	nop
  84:	9f c0       	rjmp	.+318    	; 0x1c4 <__bad_interrupt>
  86:	00 00       	nop
  88:	9d c0       	rjmp	.+314    	; 0x1c4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	9b c0       	rjmp	.+310    	; 0x1c4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	99 c0       	rjmp	.+306    	; 0x1c4 <__bad_interrupt>
  92:	00 00       	nop
  94:	97 c0       	rjmp	.+302    	; 0x1c4 <__bad_interrupt>
  96:	00 00       	nop
  98:	95 c0       	rjmp	.+298    	; 0x1c4 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	ee c3       	rjmp	.+2012   	; 0x87a <__vector_39>
  9e:	00 00       	nop
  a0:	91 c0       	rjmp	.+290    	; 0x1c4 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	8f c0       	rjmp	.+286    	; 0x1c4 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	be c3       	rjmp	.+1916   	; 0x826 <__vector_42>
  aa:	00 00       	nop
  ac:	8b c0       	rjmp	.+278    	; 0x1c4 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	89 c0       	rjmp	.+274    	; 0x1c4 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	87 c0       	rjmp	.+270    	; 0x1c4 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	85 c0       	rjmp	.+266    	; 0x1c4 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	83 c0       	rjmp	.+262    	; 0x1c4 <__bad_interrupt>
  be:	00 00       	nop
  c0:	81 c0       	rjmp	.+258    	; 0x1c4 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	7f c0       	rjmp	.+254    	; 0x1c4 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	7d c0       	rjmp	.+250    	; 0x1c4 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	7b c0       	rjmp	.+246    	; 0x1c4 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	79 c0       	rjmp	.+242    	; 0x1c4 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	77 c0       	rjmp	.+238    	; 0x1c4 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	75 c0       	rjmp	.+234    	; 0x1c4 <__bad_interrupt>
  da:	00 00       	nop
  dc:	73 c0       	rjmp	.+230    	; 0x1c4 <__bad_interrupt>
  de:	00 00       	nop
  e0:	71 c0       	rjmp	.+226    	; 0x1c4 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	58 04       	cpc	r5, r8
  e6:	aa 04       	cpc	r10, r10
  e8:	aa 04       	cpc	r10, r10
  ea:	aa 04       	cpc	r10, r10
  ec:	aa 04       	cpc	r10, r10
  ee:	aa 04       	cpc	r10, r10
  f0:	aa 04       	cpc	r10, r10
  f2:	aa 04       	cpc	r10, r10
  f4:	58 04       	cpc	r5, r8
  f6:	aa 04       	cpc	r10, r10
  f8:	aa 04       	cpc	r10, r10
  fa:	aa 04       	cpc	r10, r10
  fc:	aa 04       	cpc	r10, r10
  fe:	aa 04       	cpc	r10, r10
 100:	aa 04       	cpc	r10, r10
 102:	aa 04       	cpc	r10, r10
 104:	5a 04       	cpc	r5, r10
 106:	aa 04       	cpc	r10, r10
 108:	aa 04       	cpc	r10, r10
 10a:	aa 04       	cpc	r10, r10
 10c:	aa 04       	cpc	r10, r10
 10e:	aa 04       	cpc	r10, r10
 110:	aa 04       	cpc	r10, r10
 112:	aa 04       	cpc	r10, r10
 114:	aa 04       	cpc	r10, r10
 116:	aa 04       	cpc	r10, r10
 118:	aa 04       	cpc	r10, r10
 11a:	aa 04       	cpc	r10, r10
 11c:	aa 04       	cpc	r10, r10
 11e:	aa 04       	cpc	r10, r10
 120:	aa 04       	cpc	r10, r10
 122:	aa 04       	cpc	r10, r10
 124:	5a 04       	cpc	r5, r10
 126:	aa 04       	cpc	r10, r10
 128:	aa 04       	cpc	r10, r10
 12a:	aa 04       	cpc	r10, r10
 12c:	aa 04       	cpc	r10, r10
 12e:	aa 04       	cpc	r10, r10
 130:	aa 04       	cpc	r10, r10
 132:	aa 04       	cpc	r10, r10
 134:	aa 04       	cpc	r10, r10
 136:	aa 04       	cpc	r10, r10
 138:	aa 04       	cpc	r10, r10
 13a:	aa 04       	cpc	r10, r10
 13c:	aa 04       	cpc	r10, r10
 13e:	aa 04       	cpc	r10, r10
 140:	aa 04       	cpc	r10, r10
 142:	aa 04       	cpc	r10, r10
 144:	a6 04       	cpc	r10, r6
 146:	aa 04       	cpc	r10, r10
 148:	aa 04       	cpc	r10, r10
 14a:	aa 04       	cpc	r10, r10
 14c:	aa 04       	cpc	r10, r10
 14e:	aa 04       	cpc	r10, r10
 150:	aa 04       	cpc	r10, r10
 152:	aa 04       	cpc	r10, r10
 154:	83 04       	cpc	r8, r3
 156:	aa 04       	cpc	r10, r10
 158:	aa 04       	cpc	r10, r10
 15a:	aa 04       	cpc	r10, r10
 15c:	aa 04       	cpc	r10, r10
 15e:	aa 04       	cpc	r10, r10
 160:	aa 04       	cpc	r10, r10
 162:	aa 04       	cpc	r10, r10
 164:	aa 04       	cpc	r10, r10
 166:	aa 04       	cpc	r10, r10
 168:	aa 04       	cpc	r10, r10
 16a:	aa 04       	cpc	r10, r10
 16c:	aa 04       	cpc	r10, r10
 16e:	aa 04       	cpc	r10, r10
 170:	aa 04       	cpc	r10, r10
 172:	aa 04       	cpc	r10, r10
 174:	77 04       	cpc	r7, r7
 176:	aa 04       	cpc	r10, r10
 178:	aa 04       	cpc	r10, r10
 17a:	aa 04       	cpc	r10, r10
 17c:	aa 04       	cpc	r10, r10
 17e:	aa 04       	cpc	r10, r10
 180:	aa 04       	cpc	r10, r10
 182:	aa 04       	cpc	r10, r10
 184:	95 04       	cpc	r9, r5

00000186 <__ctors_end>:
 186:	11 24       	eor	r1, r1
 188:	1f be       	out	0x3f, r1	; 63
 18a:	cf ef       	ldi	r28, 0xFF	; 255
 18c:	d1 e2       	ldi	r29, 0x21	; 33
 18e:	de bf       	out	0x3e, r29	; 62
 190:	cd bf       	out	0x3d, r28	; 61
 192:	00 e0       	ldi	r16, 0x00	; 0
 194:	0c bf       	out	0x3c, r16	; 60

00000196 <__do_copy_data>:
 196:	12 e0       	ldi	r17, 0x02	; 2
 198:	a0 e0       	ldi	r26, 0x00	; 0
 19a:	b2 e0       	ldi	r27, 0x02	; 2
 19c:	e2 e8       	ldi	r30, 0x82	; 130
 19e:	ff e0       	ldi	r31, 0x0F	; 15
 1a0:	00 e0       	ldi	r16, 0x00	; 0
 1a2:	0b bf       	out	0x3b, r16	; 59
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <__do_copy_data+0x14>
 1a6:	07 90       	elpm	r0, Z+
 1a8:	0d 92       	st	X+, r0
 1aa:	a6 3f       	cpi	r26, 0xF6	; 246
 1ac:	b1 07       	cpc	r27, r17
 1ae:	d9 f7       	brne	.-10     	; 0x1a6 <__do_copy_data+0x10>

000001b0 <__do_clear_bss>:
 1b0:	23 e0       	ldi	r18, 0x03	; 3
 1b2:	a6 ef       	ldi	r26, 0xF6	; 246
 1b4:	b2 e0       	ldi	r27, 0x02	; 2
 1b6:	01 c0       	rjmp	.+2      	; 0x1ba <.do_clear_bss_start>

000001b8 <.do_clear_bss_loop>:
 1b8:	1d 92       	st	X+, r1

000001ba <.do_clear_bss_start>:
 1ba:	a8 34       	cpi	r26, 0x48	; 72
 1bc:	b2 07       	cpc	r27, r18
 1be:	e1 f7       	brne	.-8      	; 0x1b8 <.do_clear_bss_loop>
 1c0:	fd d2       	rcall	.+1530   	; 0x7bc <main>
 1c2:	dd c6       	rjmp	.+3514   	; 0xf7e <_exit>

000001c4 <__bad_interrupt>:
 1c4:	1d cf       	rjmp	.-454    	; 0x0 <__vectors>

000001c6 <adc_init>:
#include <util/delay.h>
#include "adc_driver.h"


void adc_init(){
	ADCSRA	|= (1 << ADEN) | (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);
 1c6:	ea e7       	ldi	r30, 0x7A	; 122
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	80 81       	ld	r24, Z
 1cc:	87 68       	ori	r24, 0x87	; 135
 1ce:	80 83       	st	Z, r24
	ADMUX	|= (1<<REFS0);
 1d0:	ec e7       	ldi	r30, 0x7C	; 124
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	80 64       	ori	r24, 0x40	; 64
 1d8:	80 83       	st	Z, r24
	ADMUX	&= ~(1<<REFS1); 
 1da:	80 81       	ld	r24, Z
 1dc:	8f 77       	andi	r24, 0x7F	; 127
 1de:	80 83       	st	Z, r24
 1e0:	08 95       	ret

000001e2 <adc_read>:
}

uint16_t adc_read(uint8_t channel){
	ADMUX	= (1<<REFS0) | (channel & 0x03);
 1e2:	83 70       	andi	r24, 0x03	; 3
 1e4:	80 64       	ori	r24, 0x40	; 64
 1e6:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA	|= (1 << ADSC);
 1ea:	ea e7       	ldi	r30, 0x7A	; 122
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	80 81       	ld	r24, Z
 1f0:	80 64       	ori	r24, 0x40	; 64
 1f2:	80 83       	st	Z, r24

	while((ADCSRA & (1<<ADSC))){ ; }
 1f4:	80 81       	ld	r24, Z
 1f6:	86 fd       	sbrc	r24, 6
 1f8:	fd cf       	rjmp	.-6      	; 0x1f4 <adc_read+0x12>

	return ADC;
 1fa:	80 91 78 00 	lds	r24, 0x0078
 1fe:	90 91 79 00 	lds	r25, 0x0079
}
 202:	08 95       	ret

00000204 <can_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 204:	e8 d1       	rcall	.+976    	; 0x5d6 <mcp2515_init>
 206:	8f e0       	ldi	r24, 0x0F	; 15
 208:	d9 d1       	rcall	.+946    	; 0x5bc <mcp2515_read>
 20a:	1f 92       	push	r1
 20c:	8f 93       	push	r24
 20e:	8f e0       	ldi	r24, 0x0F	; 15
 210:	92 e0       	ldi	r25, 0x02	; 2
 212:	9f 93       	push	r25
 214:	8f 93       	push	r24
 216:	e1 d3       	rcall	.+1986   	; 0x9da <printf>
 218:	4f ef       	ldi	r20, 0xFF	; 255
 21a:	60 e6       	ldi	r22, 0x60	; 96
 21c:	80 e6       	ldi	r24, 0x60	; 96
 21e:	b5 d1       	rcall	.+874    	; 0x58a <mcp2515_bit_modify>
 220:	40 e0       	ldi	r20, 0x00	; 0
 222:	64 e0       	ldi	r22, 0x04	; 4
 224:	80 e6       	ldi	r24, 0x60	; 96
 226:	b1 d1       	rcall	.+866    	; 0x58a <mcp2515_bit_modify>
 228:	4f ef       	ldi	r20, 0xFF	; 255
 22a:	61 e0       	ldi	r22, 0x01	; 1
 22c:	8b e2       	ldi	r24, 0x2B	; 43
 22e:	ad d1       	rcall	.+858    	; 0x58a <mcp2515_bit_modify>
 230:	40 e0       	ldi	r20, 0x00	; 0
 232:	60 ee       	ldi	r22, 0xE0	; 224
 234:	8f e0       	ldi	r24, 0x0F	; 15
 236:	a9 d1       	rcall	.+850    	; 0x58a <mcp2515_bit_modify>
 238:	0f 90       	pop	r0
 23a:	0f 90       	pop	r0
 23c:	0f 90       	pop	r0
 23e:	0f 90       	pop	r0
 240:	08 95       	ret

00000242 <can_transmit_complete>:
 242:	80 e3       	ldi	r24, 0x30	; 48
 244:	bb d1       	rcall	.+886    	; 0x5bc <mcp2515_read>
 246:	86 95       	lsr	r24
 248:	86 95       	lsr	r24
 24a:	86 95       	lsr	r24
 24c:	91 e0       	ldi	r25, 0x01	; 1
 24e:	89 27       	eor	r24, r25
 250:	81 70       	andi	r24, 0x01	; 1
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	08 95       	ret

00000256 <can_message_send>:
 256:	1f 93       	push	r17
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
 25c:	ec 01       	movw	r28, r24
 25e:	f1 df       	rcall	.-30     	; 0x242 <can_transmit_complete>
 260:	89 2b       	or	r24, r25
 262:	e9 f3       	breq	.-6      	; 0x25e <can_message_send+0x8>
 264:	68 81       	ld	r22, Y
 266:	79 81       	ldd	r23, Y+1	; 0x01
 268:	75 95       	asr	r23
 26a:	67 95       	ror	r22
 26c:	75 95       	asr	r23
 26e:	67 95       	ror	r22
 270:	75 95       	asr	r23
 272:	67 95       	ror	r22
 274:	81 e3       	ldi	r24, 0x31	; 49
 276:	6d d1       	rcall	.+730    	; 0x552 <mcp2515_write>
 278:	68 81       	ld	r22, Y
 27a:	79 81       	ldd	r23, Y+1	; 0x01
 27c:	66 0f       	add	r22, r22
 27e:	77 1f       	adc	r23, r23
 280:	62 95       	swap	r22
 282:	72 95       	swap	r23
 284:	70 7f       	andi	r23, 0xF0	; 240
 286:	76 27       	eor	r23, r22
 288:	60 7f       	andi	r22, 0xF0	; 240
 28a:	76 27       	eor	r23, r22
 28c:	82 e3       	ldi	r24, 0x32	; 50
 28e:	61 d1       	rcall	.+706    	; 0x552 <mcp2515_write>
 290:	6a 81       	ldd	r22, Y+2	; 0x02
 292:	6f 70       	andi	r22, 0x0F	; 15
 294:	85 e3       	ldi	r24, 0x35	; 53
 296:	5d d1       	rcall	.+698    	; 0x552 <mcp2515_write>
 298:	8a 81       	ldd	r24, Y+2	; 0x02
 29a:	88 23       	and	r24, r24
 29c:	61 f0       	breq	.+24     	; 0x2b6 <can_message_send+0x60>
 29e:	10 e0       	ldi	r17, 0x00	; 0
 2a0:	fe 01       	movw	r30, r28
 2a2:	e1 0f       	add	r30, r17
 2a4:	f1 1d       	adc	r31, r1
 2a6:	63 81       	ldd	r22, Z+3	; 0x03
 2a8:	86 e3       	ldi	r24, 0x36	; 54
 2aa:	81 0f       	add	r24, r17
 2ac:	52 d1       	rcall	.+676    	; 0x552 <mcp2515_write>
 2ae:	1f 5f       	subi	r17, 0xFF	; 255
 2b0:	8a 81       	ldd	r24, Y+2	; 0x02
 2b2:	18 17       	cp	r17, r24
 2b4:	a8 f3       	brcs	.-22     	; 0x2a0 <can_message_send+0x4a>
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	5b d1       	rcall	.+694    	; 0x570 <mcp2515_request_to_send>
 2ba:	df 91       	pop	r29
 2bc:	cf 91       	pop	r28
 2be:	1f 91       	pop	r17
 2c0:	08 95       	ret

000002c2 <can_data_receive>:
 2c2:	9f 92       	push	r9
 2c4:	af 92       	push	r10
 2c6:	bf 92       	push	r11
 2c8:	cf 92       	push	r12
 2ca:	df 92       	push	r13
 2cc:	ef 92       	push	r14
 2ce:	ff 92       	push	r15
 2d0:	0f 93       	push	r16
 2d2:	1f 93       	push	r17
 2d4:	cf 93       	push	r28
 2d6:	df 93       	push	r29
 2d8:	cd b7       	in	r28, 0x3d	; 61
 2da:	de b7       	in	r29, 0x3e	; 62
 2dc:	2b 97       	sbiw	r28, 0x0b	; 11
 2de:	0f b6       	in	r0, 0x3f	; 63
 2e0:	f8 94       	cli
 2e2:	de bf       	out	0x3e, r29	; 62
 2e4:	0f be       	out	0x3f, r0	; 63
 2e6:	cd bf       	out	0x3d, r28	; 61
 2e8:	7c 01       	movw	r14, r24
 2ea:	8c e2       	ldi	r24, 0x2C	; 44
 2ec:	67 d1       	rcall	.+718    	; 0x5bc <mcp2515_read>
 2ee:	80 ff       	sbrs	r24, 0
 2f0:	30 c0       	rjmp	.+96     	; 0x352 <can_data_receive+0x90>
 2f2:	81 e6       	ldi	r24, 0x61	; 97
 2f4:	63 d1       	rcall	.+710    	; 0x5bc <mcp2515_read>
 2f6:	c8 2e       	mov	r12, r24
 2f8:	82 e6       	ldi	r24, 0x62	; 98
 2fa:	60 d1       	rcall	.+704    	; 0x5bc <mcp2515_read>
 2fc:	82 95       	swap	r24
 2fe:	86 95       	lsr	r24
 300:	87 70       	andi	r24, 0x07	; 7
 302:	d1 2c       	mov	r13, r1
 304:	cc 0c       	add	r12, r12
 306:	dd 1c       	adc	r13, r13
 308:	cc 0c       	add	r12, r12
 30a:	dd 1c       	adc	r13, r13
 30c:	cc 0c       	add	r12, r12
 30e:	dd 1c       	adc	r13, r13
 310:	c8 2a       	or	r12, r24
 312:	85 e6       	ldi	r24, 0x65	; 101
 314:	53 d1       	rcall	.+678    	; 0x5bc <mcp2515_read>
 316:	8f 70       	andi	r24, 0x0F	; 15
 318:	98 2e       	mov	r9, r24
 31a:	a1 f0       	breq	.+40     	; 0x344 <can_data_receive+0x82>
 31c:	8e 01       	movw	r16, r28
 31e:	0c 5f       	subi	r16, 0xFC	; 252
 320:	1f 4f       	sbci	r17, 0xFF	; 255
 322:	0f 2e       	mov	r0, r31
 324:	f6 e6       	ldi	r31, 0x66	; 102
 326:	af 2e       	mov	r10, r31
 328:	f0 2d       	mov	r31, r0
 32a:	a8 0e       	add	r10, r24
 32c:	0f 2e       	mov	r0, r31
 32e:	f6 e6       	ldi	r31, 0x66	; 102
 330:	bf 2e       	mov	r11, r31
 332:	f0 2d       	mov	r31, r0
 334:	8b 2d       	mov	r24, r11
 336:	42 d1       	rcall	.+644    	; 0x5bc <mcp2515_read>
 338:	f8 01       	movw	r30, r16
 33a:	81 93       	st	Z+, r24
 33c:	8f 01       	movw	r16, r30
 33e:	b3 94       	inc	r11
 340:	ba 10       	cpse	r11, r10
 342:	f8 cf       	rjmp	.-16     	; 0x334 <can_data_receive+0x72>
 344:	10 92 41 03 	sts	0x0341, r1
 348:	40 e0       	ldi	r20, 0x00	; 0
 34a:	61 e0       	ldi	r22, 0x01	; 1
 34c:	8c e2       	ldi	r24, 0x2C	; 44
 34e:	1d d1       	rcall	.+570    	; 0x58a <mcp2515_bit_modify>
 350:	03 c0       	rjmp	.+6      	; 0x358 <can_data_receive+0x96>
 352:	cc 24       	eor	r12, r12
 354:	ca 94       	dec	r12
 356:	dc 2c       	mov	r13, r12
 358:	da 82       	std	Y+2, r13	; 0x02
 35a:	c9 82       	std	Y+1, r12	; 0x01
 35c:	9b 82       	std	Y+3, r9	; 0x03
 35e:	8b e0       	ldi	r24, 0x0B	; 11
 360:	fe 01       	movw	r30, r28
 362:	31 96       	adiw	r30, 0x01	; 1
 364:	d7 01       	movw	r26, r14
 366:	01 90       	ld	r0, Z+
 368:	0d 92       	st	X+, r0
 36a:	8a 95       	dec	r24
 36c:	e1 f7       	brne	.-8      	; 0x366 <can_data_receive+0xa4>
 36e:	c7 01       	movw	r24, r14
 370:	2b 96       	adiw	r28, 0x0b	; 11
 372:	0f b6       	in	r0, 0x3f	; 63
 374:	f8 94       	cli
 376:	de bf       	out	0x3e, r29	; 62
 378:	0f be       	out	0x3f, r0	; 63
 37a:	cd bf       	out	0x3d, r28	; 61
 37c:	df 91       	pop	r29
 37e:	cf 91       	pop	r28
 380:	1f 91       	pop	r17
 382:	0f 91       	pop	r16
 384:	ff 90       	pop	r15
 386:	ef 90       	pop	r14
 388:	df 90       	pop	r13
 38a:	cf 90       	pop	r12
 38c:	bf 90       	pop	r11
 38e:	af 90       	pop	r10
 390:	9f 90       	pop	r9
 392:	08 95       	ret

00000394 <can_print_message>:
 394:	ff 92       	push	r15
 396:	0f 93       	push	r16
 398:	1f 93       	push	r17
 39a:	cf 93       	push	r28
 39c:	df 93       	push	r29
 39e:	ec 01       	movw	r28, r24
 3a0:	88 81       	ld	r24, Y
 3a2:	99 81       	ldd	r25, Y+1	; 0x01
 3a4:	8f 3f       	cpi	r24, 0xFF	; 255
 3a6:	2f ef       	ldi	r18, 0xFF	; 255
 3a8:	92 07       	cpc	r25, r18
 3aa:	21 f4       	brne	.+8      	; 0x3b4 <can_print_message+0x20>
 3ac:	8e e2       	ldi	r24, 0x2E	; 46
 3ae:	92 e0       	ldi	r25, 0x02	; 2
 3b0:	25 d3       	rcall	.+1610   	; 0x9fc <puts>
 3b2:	3d c0       	rjmp	.+122    	; 0x42e <can_print_message+0x9a>
 3b4:	2a 81       	ldd	r18, Y+2	; 0x02
 3b6:	1f 92       	push	r1
 3b8:	2f 93       	push	r18
 3ba:	9f 93       	push	r25
 3bc:	8f 93       	push	r24
 3be:	84 e4       	ldi	r24, 0x44	; 68
 3c0:	92 e0       	ldi	r25, 0x02	; 2
 3c2:	9f 93       	push	r25
 3c4:	8f 93       	push	r24
 3c6:	09 d3       	rcall	.+1554   	; 0x9da <printf>
 3c8:	2b 81       	ldd	r18, Y+3	; 0x03
 3ca:	82 2f       	mov	r24, r18
 3cc:	99 27       	eor	r25, r25
 3ce:	87 fd       	sbrc	r24, 7
 3d0:	90 95       	com	r25
 3d2:	9f 93       	push	r25
 3d4:	2f 93       	push	r18
 3d6:	86 e6       	ldi	r24, 0x66	; 102
 3d8:	92 e0       	ldi	r25, 0x02	; 2
 3da:	9f 93       	push	r25
 3dc:	8f 93       	push	r24
 3de:	fd d2       	rcall	.+1530   	; 0x9da <printf>
 3e0:	8d b7       	in	r24, 0x3d	; 61
 3e2:	9e b7       	in	r25, 0x3e	; 62
 3e4:	0a 96       	adiw	r24, 0x0a	; 10
 3e6:	0f b6       	in	r0, 0x3f	; 63
 3e8:	f8 94       	cli
 3ea:	9e bf       	out	0x3e, r25	; 62
 3ec:	0f be       	out	0x3f, r0	; 63
 3ee:	8d bf       	out	0x3d, r24	; 61
 3f0:	8a 81       	ldd	r24, Y+2	; 0x02
 3f2:	82 30       	cpi	r24, 0x02	; 2
 3f4:	c8 f0       	brcs	.+50     	; 0x428 <can_print_message+0x94>
 3f6:	ff 24       	eor	r15, r15
 3f8:	f3 94       	inc	r15
 3fa:	09 e7       	ldi	r16, 0x79	; 121
 3fc:	12 e0       	ldi	r17, 0x02	; 2
 3fe:	fe 01       	movw	r30, r28
 400:	ef 0d       	add	r30, r15
 402:	f1 1d       	adc	r31, r1
 404:	23 81       	ldd	r18, Z+3	; 0x03
 406:	82 2f       	mov	r24, r18
 408:	99 27       	eor	r25, r25
 40a:	87 fd       	sbrc	r24, 7
 40c:	90 95       	com	r25
 40e:	9f 93       	push	r25
 410:	2f 93       	push	r18
 412:	1f 93       	push	r17
 414:	0f 93       	push	r16
 416:	e1 d2       	rcall	.+1474   	; 0x9da <printf>
 418:	f3 94       	inc	r15
 41a:	0f 90       	pop	r0
 41c:	0f 90       	pop	r0
 41e:	0f 90       	pop	r0
 420:	0f 90       	pop	r0
 422:	8a 81       	ldd	r24, Y+2	; 0x02
 424:	f8 16       	cp	r15, r24
 426:	58 f3       	brcs	.-42     	; 0x3fe <can_print_message+0x6a>
 428:	8e e7       	ldi	r24, 0x7E	; 126
 42a:	92 e0       	ldi	r25, 0x02	; 2
 42c:	e7 d2       	rcall	.+1486   	; 0x9fc <puts>
 42e:	df 91       	pop	r29
 430:	cf 91       	pop	r28
 432:	1f 91       	pop	r17
 434:	0f 91       	pop	r16
 436:	ff 90       	pop	r15
 438:	08 95       	ret

0000043a <can_interrupt_vector>:
 43a:	cf 93       	push	r28
 43c:	df 93       	push	r29
 43e:	cd b7       	in	r28, 0x3d	; 61
 440:	de b7       	in	r29, 0x3e	; 62
 442:	2b 97       	sbiw	r28, 0x0b	; 11
 444:	0f b6       	in	r0, 0x3f	; 63
 446:	f8 94       	cli
 448:	de bf       	out	0x3e, r29	; 62
 44a:	0f be       	out	0x3f, r0	; 63
 44c:	cd bf       	out	0x3d, r28	; 61
 44e:	ce 01       	movw	r24, r28
 450:	01 96       	adiw	r24, 0x01	; 1
 452:	37 df       	rcall	.-402    	; 0x2c2 <can_data_receive>
 454:	8b e0       	ldi	r24, 0x0B	; 11
 456:	fe 01       	movw	r30, r28
 458:	31 96       	adiw	r30, 0x01	; 1
 45a:	ac e0       	ldi	r26, 0x0C	; 12
 45c:	b3 e0       	ldi	r27, 0x03	; 3
 45e:	01 90       	ld	r0, Z+
 460:	0d 92       	st	X+, r0
 462:	8a 95       	dec	r24
 464:	e1 f7       	brne	.-8      	; 0x45e <can_interrupt_vector+0x24>
 466:	8c e0       	ldi	r24, 0x0C	; 12
 468:	93 e0       	ldi	r25, 0x03	; 3
 46a:	94 df       	rcall	.-216    	; 0x394 <can_print_message>
 46c:	2b 96       	adiw	r28, 0x0b	; 11
 46e:	0f b6       	in	r0, 0x3f	; 63
 470:	f8 94       	cli
 472:	de bf       	out	0x3e, r29	; 62
 474:	0f be       	out	0x3f, r0	; 63
 476:	cd bf       	out	0x3d, r28	; 61
 478:	df 91       	pop	r29
 47a:	cf 91       	pop	r28
 47c:	08 95       	ret

0000047e <__vector_1>:
 47e:	1f 92       	push	r1
 480:	0f 92       	push	r0
 482:	0f b6       	in	r0, 0x3f	; 63
 484:	0f 92       	push	r0
 486:	11 24       	eor	r1, r1
 488:	0b b6       	in	r0, 0x3b	; 59
 48a:	0f 92       	push	r0
 48c:	2f 93       	push	r18
 48e:	3f 93       	push	r19
 490:	4f 93       	push	r20
 492:	5f 93       	push	r21
 494:	6f 93       	push	r22
 496:	7f 93       	push	r23
 498:	8f 93       	push	r24
 49a:	9f 93       	push	r25
 49c:	af 93       	push	r26
 49e:	bf 93       	push	r27
 4a0:	ef 93       	push	r30
 4a2:	ff 93       	push	r31
 4a4:	ca df       	rcall	.-108    	; 0x43a <can_interrupt_vector>
 4a6:	ff 91       	pop	r31
 4a8:	ef 91       	pop	r30
 4aa:	bf 91       	pop	r27
 4ac:	af 91       	pop	r26
 4ae:	9f 91       	pop	r25
 4b0:	8f 91       	pop	r24
 4b2:	7f 91       	pop	r23
 4b4:	6f 91       	pop	r22
 4b6:	5f 91       	pop	r21
 4b8:	4f 91       	pop	r20
 4ba:	3f 91       	pop	r19
 4bc:	2f 91       	pop	r18
 4be:	0f 90       	pop	r0
 4c0:	0b be       	out	0x3b, r0	; 59
 4c2:	0f 90       	pop	r0
 4c4:	0f be       	out	0x3f, r0	; 63
 4c6:	0f 90       	pop	r0
 4c8:	1f 90       	pop	r1
 4ca:	18 95       	reti

000004cc <can_handle_message>:
	}
}



void can_handle_message(){
 4cc:	cf 93       	push	r28
 4ce:	df 93       	push	r29
 4d0:	cd b7       	in	r28, 0x3d	; 61
 4d2:	de b7       	in	r29, 0x3e	; 62
 4d4:	2b 97       	sbiw	r28, 0x0b	; 11
 4d6:	0f b6       	in	r0, 0x3f	; 63
 4d8:	f8 94       	cli
 4da:	de bf       	out	0x3e, r29	; 62
 4dc:	0f be       	out	0x3f, r0	; 63
 4de:	cd bf       	out	0x3d, r28	; 61
	static can_message_t message;
	message = can_data_receive();
 4e0:	ce 01       	movw	r24, r28
 4e2:	01 96       	adiw	r24, 0x01	; 1
 4e4:	ee de       	rcall	.-548    	; 0x2c2 <can_data_receive>
 4e6:	8b e0       	ldi	r24, 0x0B	; 11
 4e8:	fe 01       	movw	r30, r28
 4ea:	31 96       	adiw	r30, 0x01	; 1
 4ec:	a1 e0       	ldi	r26, 0x01	; 1
 4ee:	b3 e0       	ldi	r27, 0x03	; 3
 4f0:	01 90       	ld	r0, Z+
 4f2:	0d 92       	st	X+, r0
 4f4:	8a 95       	dec	r24
 4f6:	e1 f7       	brne	.-8      	; 0x4f0 <can_handle_message+0x24>
	
	switch(message.id){
 4f8:	80 91 01 03 	lds	r24, 0x0301
 4fc:	90 91 02 03 	lds	r25, 0x0302
 500:	81 30       	cpi	r24, 0x01	; 1
 502:	91 05       	cpc	r25, r1
 504:	19 f0       	breq	.+6      	; 0x50c <can_handle_message+0x40>
 506:	03 97       	sbiw	r24, 0x03	; 3
 508:	49 f0       	breq	.+18     	; 0x51c <can_handle_message+0x50>
 50a:	09 c0       	rjmp	.+18     	; 0x51e <can_handle_message+0x52>
		case JOY_CAN_ID:
			pwm_set_servo(-message.data[0]);
 50c:	80 91 04 03 	lds	r24, 0x0304
 510:	99 27       	eor	r25, r25
 512:	81 95       	neg	r24
 514:	0c f4       	brge	.+2      	; 0x518 <can_handle_message+0x4c>
 516:	90 95       	com	r25
 518:	9a d0       	rcall	.+308    	; 0x64e <pwm_set_servo>
			return;
 51a:	01 c0       	rjmp	.+2      	; 0x51e <can_handle_message+0x52>
		case BUTTON_CAN_ID:
			solenoid_shoot();
 51c:	be d0       	rcall	.+380    	; 0x69a <solenoid_shoot>
			return;
		default:
			return;
	}
}
 51e:	2b 96       	adiw	r28, 0x0b	; 11
 520:	0f b6       	in	r0, 0x3f	; 63
 522:	f8 94       	cli
 524:	de bf       	out	0x3e, r29	; 62
 526:	0f be       	out	0x3f, r0	; 63
 528:	cd bf       	out	0x3d, r28	; 61
 52a:	df 91       	pop	r29
 52c:	cf 91       	pop	r28
 52e:	08 95       	ret

00000530 <can_ir_transmit>:


void can_ir_transmit(){
	static can_message_t ir_message;
	ir_message.length = 1;
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	80 93 f8 02 	sts	0x02F8, r24
	ir_message.id = IR_CAN_ID;
 536:	82 e0       	ldi	r24, 0x02	; 2
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	90 93 f7 02 	sts	0x02F7, r25
 53e:	80 93 f6 02 	sts	0x02F6, r24
	ir_message.data[0] = last_ir_val;
 542:	80 91 40 03 	lds	r24, 0x0340
 546:	80 93 f9 02 	sts	0x02F9, r24
	can_message_send(&ir_message);
 54a:	86 ef       	ldi	r24, 0xF6	; 246
 54c:	92 e0       	ldi	r25, 0x02	; 2
 54e:	83 ce       	rjmp	.-762    	; 0x256 <can_message_send>
 550:	08 95       	ret

00000552 <mcp2515_write>:
	} else {
		;//printf("MCP2515 is in config mode after reset\n");
	}
}

void mcp2515_write(uint8_t address, uint8_t data){
 552:	cf 93       	push	r28
 554:	df 93       	push	r29
 556:	d8 2f       	mov	r29, r24
 558:	c6 2f       	mov	r28, r22
	spi_select();
 55a:	c5 d0       	rcall	.+394    	; 0x6e6 <spi_select>

	spi_send(MCP_WRITE);
 55c:	82 e0       	ldi	r24, 0x02	; 2
 55e:	b7 d0       	rcall	.+366    	; 0x6ce <spi_send>
	spi_send(address);
 560:	8d 2f       	mov	r24, r29
 562:	b5 d0       	rcall	.+362    	; 0x6ce <spi_send>
	spi_send(data);
 564:	8c 2f       	mov	r24, r28
 566:	b3 d0       	rcall	.+358    	; 0x6ce <spi_send>

	spi_deselect();
 568:	c0 d0       	rcall	.+384    	; 0x6ea <spi_deselect>
}
 56a:	df 91       	pop	r29
 56c:	cf 91       	pop	r28
 56e:	08 95       	ret

00000570 <mcp2515_request_to_send>:

void mcp2515_request_to_send(uint8_t command){
 570:	cf 93       	push	r28
	//Check last 3 bits of given command
	if (command <= 7) {
 572:	88 30       	cpi	r24, 0x08	; 8
 574:	18 f4       	brcc	.+6      	; 0x57c <mcp2515_request_to_send+0xc>
		command = MCP_RTS | command;
 576:	c8 2f       	mov	r28, r24
 578:	c0 68       	ori	r28, 0x80	; 128
 57a:	01 c0       	rjmp	.+2      	; 0x57e <mcp2515_request_to_send+0xe>
	} else {
		command = MCP_RTS;
 57c:	c0 e8       	ldi	r28, 0x80	; 128
	}

	//Select, send RTS command, then deselect
	spi_select();
 57e:	b3 d0       	rcall	.+358    	; 0x6e6 <spi_select>
	spi_send(command);
 580:	8c 2f       	mov	r24, r28
 582:	a5 d0       	rcall	.+330    	; 0x6ce <spi_send>
	spi_deselect();
 584:	b2 d0       	rcall	.+356    	; 0x6ea <spi_deselect>
}
 586:	cf 91       	pop	r28
 588:	08 95       	ret

0000058a <mcp2515_bit_modify>:

void mcp2515_bit_modify(uint8_t address, uint8_t mask, uint8_t data){
 58a:	1f 93       	push	r17
 58c:	cf 93       	push	r28
 58e:	df 93       	push	r29
 590:	18 2f       	mov	r17, r24
 592:	d6 2f       	mov	r29, r22
 594:	c4 2f       	mov	r28, r20
	spi_select();
 596:	a7 d0       	rcall	.+334    	; 0x6e6 <spi_select>

	spi_send(MCP_BITMOD);
 598:	85 e0       	ldi	r24, 0x05	; 5
 59a:	99 d0       	rcall	.+306    	; 0x6ce <spi_send>
	spi_send(address);
 59c:	81 2f       	mov	r24, r17
 59e:	97 d0       	rcall	.+302    	; 0x6ce <spi_send>
	spi_send(mask);
 5a0:	8d 2f       	mov	r24, r29
 5a2:	95 d0       	rcall	.+298    	; 0x6ce <spi_send>
	spi_send(data);
 5a4:	8c 2f       	mov	r24, r28
 5a6:	93 d0       	rcall	.+294    	; 0x6ce <spi_send>

	spi_deselect();
 5a8:	a0 d0       	rcall	.+320    	; 0x6ea <spi_deselect>
}
 5aa:	df 91       	pop	r29
 5ac:	cf 91       	pop	r28
 5ae:	1f 91       	pop	r17
 5b0:	08 95       	ret

000005b2 <mcp2515_reset>:

void mcp2515_reset(){
	spi_select();
 5b2:	99 d0       	rcall	.+306    	; 0x6e6 <spi_select>
	spi_send(MCP_RESET);	
 5b4:	80 ec       	ldi	r24, 0xC0	; 192
 5b6:	8b d0       	rcall	.+278    	; 0x6ce <spi_send>
	spi_deselect();
 5b8:	98 c0       	rjmp	.+304    	; 0x6ea <spi_deselect>
 5ba:	08 95       	ret

000005bc <mcp2515_read>:
}


uint8_t mcp2515_read(uint8_t address){
 5bc:	cf 93       	push	r28
 5be:	c8 2f       	mov	r28, r24
	uint8_t result;

	spi_select();
 5c0:	92 d0       	rcall	.+292    	; 0x6e6 <spi_select>
	
	//Send command and address, then read result
	spi_send(MCP_READ);
 5c2:	83 e0       	ldi	r24, 0x03	; 3
 5c4:	84 d0       	rcall	.+264    	; 0x6ce <spi_send>
	spi_send(address);
 5c6:	8c 2f       	mov	r24, r28
 5c8:	82 d0       	rcall	.+260    	; 0x6ce <spi_send>

	result = spi_read();
 5ca:	86 d0       	rcall	.+268    	; 0x6d8 <spi_read>
 5cc:	c8 2f       	mov	r28, r24
	spi_deselect();
 5ce:	8d d0       	rcall	.+282    	; 0x6ea <spi_deselect>

	return result;	
}
 5d0:	8c 2f       	mov	r24, r28
 5d2:	cf 91       	pop	r28
 5d4:	08 95       	ret

000005d6 <mcp2515_init>:
#include <util/delay.h>
#include "uart_driver.h"
#include "spi_driver.h"
#include "mcp2515_driver.h"

void mcp2515_init() {
 5d6:	cf 93       	push	r28
 5d8:	df 93       	push	r29
 5da:	1f 92       	push	r1
 5dc:	cd b7       	in	r28, 0x3d	; 61
 5de:	de b7       	in	r29, 0x3e	; 62
	//NO NEED, ALREADY ENABLED
	//Enable interrupt when message is recieved (RX0IE = 1)
	//mcp2515_bit_modify(MCP_CANINTE, 0x01, 0xff);

	//Start SPI driver
	spi_init();
 5e0:	6e d0       	rcall	.+220    	; 0x6be <spi_init>

	mcp2515_reset();
 5e2:	e7 df       	rcall	.-50     	; 0x5b2 <mcp2515_reset>
	
	//Testing for correct initialization
	value_check = mcp2515_read(MCP_CANSTAT);
 5e4:	8e e0       	ldi	r24, 0x0E	; 14
 5e6:	ea df       	rcall	.-44     	; 0x5bc <mcp2515_read>
 5e8:	89 83       	std	Y+1, r24	; 0x01
	
	if ((value_check & MODE_MASK) != MODE_CONFIG) {
 5ea:	89 81       	ldd	r24, Y+1	; 0x01
 5ec:	80 7e       	andi	r24, 0xE0	; 224
 5ee:	80 38       	cpi	r24, 0x80	; 128
 5f0:	19 f0       	breq	.+6      	; 0x5f8 <mcp2515_init+0x22>
		printf("MCP2515 is not in config mode after reset\n");
 5f2:	81 e9       	ldi	r24, 0x91	; 145
 5f4:	92 e0       	ldi	r25, 0x02	; 2
 5f6:	02 d2       	rcall	.+1028   	; 0x9fc <puts>
	} else {
		;//printf("MCP2515 is in config mode after reset\n");
	}
}
 5f8:	0f 90       	pop	r0
 5fa:	df 91       	pop	r29
 5fc:	cf 91       	pop	r28
 5fe:	08 95       	ret

00000600 <pwm_init>:
	ICR3 = DUTY_CYCLE_STEPS;
	pwm_set_value(MID_SERVO);
}

void pwm_set_value(uint16_t val) {
	OCR3A = val;
 600:	6b 9a       	sbi	0x0d, 3	; 13
 602:	a1 e9       	ldi	r26, 0x91	; 145
 604:	b0 e0       	ldi	r27, 0x00	; 0
 606:	8c 91       	ld	r24, X
 608:	82 60       	ori	r24, 0x02	; 2
 60a:	8c 93       	st	X, r24
 60c:	8c 91       	ld	r24, X
 60e:	8a 7f       	andi	r24, 0xFA	; 250
 610:	8c 93       	st	X, r24
 612:	e0 e9       	ldi	r30, 0x90	; 144
 614:	f0 e0       	ldi	r31, 0x00	; 0
 616:	80 81       	ld	r24, Z
 618:	82 60       	ori	r24, 0x02	; 2
 61a:	80 83       	st	Z, r24
 61c:	80 81       	ld	r24, Z
 61e:	8e 7f       	andi	r24, 0xFE	; 254
 620:	80 83       	st	Z, r24
 622:	8c 91       	ld	r24, X
 624:	88 61       	ori	r24, 0x18	; 24
 626:	8c 93       	st	X, r24
 628:	80 81       	ld	r24, Z
 62a:	80 68       	ori	r24, 0x80	; 128
 62c:	80 83       	st	Z, r24
 62e:	80 81       	ld	r24, Z
 630:	8f 7b       	andi	r24, 0xBF	; 191
 632:	80 83       	st	Z, r24
 634:	80 e4       	ldi	r24, 0x40	; 64
 636:	9c e9       	ldi	r25, 0x9C	; 156
 638:	90 93 97 00 	sts	0x0097, r25
 63c:	80 93 96 00 	sts	0x0096, r24
 640:	88 eb       	ldi	r24, 0xB8	; 184
 642:	9b e0       	ldi	r25, 0x0B	; 11
 644:	90 93 99 00 	sts	0x0099, r25
 648:	80 93 98 00 	sts	0x0098, r24
 64c:	08 95       	ret

0000064e <pwm_set_servo>:
}

void pwm_set_servo(int16_t val){
	val += 128;
 64e:	9c 01       	movw	r18, r24
 650:	20 58       	subi	r18, 0x80	; 128
 652:	3f 4f       	sbci	r19, 0xFF	; 255
	//printf("%d\n", val);
	val = (val*(VAL_SCALE/UNDERFLOW_FIX)) / 255 * UNDERFLOW_FIX + MIN_SERVO;
 654:	4b e4       	ldi	r20, 0x4B	; 75
 656:	42 9f       	mul	r20, r18
 658:	c0 01       	movw	r24, r0
 65a:	43 9f       	mul	r20, r19
 65c:	90 0d       	add	r25, r0
 65e:	11 24       	eor	r1, r1
 660:	6f ef       	ldi	r22, 0xFF	; 255
 662:	70 e0       	ldi	r23, 0x00	; 0
 664:	8d d1       	rcall	.+794    	; 0x980 <__divmodhi4>
 666:	66 0f       	add	r22, r22
 668:	77 1f       	adc	r23, r23
 66a:	62 95       	swap	r22
 66c:	72 95       	swap	r23
 66e:	70 7f       	andi	r23, 0xF0	; 240
 670:	76 27       	eor	r23, r22
 672:	60 7f       	andi	r22, 0xF0	; 240
 674:	76 27       	eor	r23, r22
 676:	68 5f       	subi	r22, 0xF8	; 248
 678:	78 4f       	sbci	r23, 0xF8	; 248
	ICR3 = DUTY_CYCLE_STEPS;
	pwm_set_value(MID_SERVO);
}

void pwm_set_value(uint16_t val) {
	OCR3A = val;
 67a:	70 93 99 00 	sts	0x0099, r23
 67e:	60 93 98 00 	sts	0x0098, r22
 682:	08 95       	ret

00000684 <solenoid_init>:

#include <avr/io.h>
#include <avr/delay.h>

void solenoid_init(){
	DDRH |= (1<<PH3);
 684:	e1 e0       	ldi	r30, 0x01	; 1
 686:	f1 e0       	ldi	r31, 0x01	; 1
 688:	80 81       	ld	r24, Z
 68a:	88 60       	ori	r24, 0x08	; 8
 68c:	80 83       	st	Z, r24
	PORTH |= (1<<PH3);
 68e:	e2 e0       	ldi	r30, 0x02	; 2
 690:	f1 e0       	ldi	r31, 0x01	; 1
 692:	80 81       	ld	r24, Z
 694:	88 60       	ori	r24, 0x08	; 8
 696:	80 83       	st	Z, r24
 698:	08 95       	ret

0000069a <solenoid_shoot>:
}

void solenoid_shoot(){
	PORTH &= ~(1<<PH3);
 69a:	e2 e0       	ldi	r30, 0x02	; 2
 69c:	f1 e0       	ldi	r31, 0x01	; 1
 69e:	80 81       	ld	r24, Z
 6a0:	87 7f       	andi	r24, 0xF7	; 247
 6a2:	80 83       	st	Z, r24
 6a4:	2f ef       	ldi	r18, 0xFF	; 255
 6a6:	80 e7       	ldi	r24, 0x70	; 112
 6a8:	92 e0       	ldi	r25, 0x02	; 2
 6aa:	21 50       	subi	r18, 0x01	; 1
 6ac:	80 40       	sbci	r24, 0x00	; 0
 6ae:	90 40       	sbci	r25, 0x00	; 0
 6b0:	e1 f7       	brne	.-8      	; 0x6aa <solenoid_shoot+0x10>
 6b2:	00 c0       	rjmp	.+0      	; 0x6b4 <solenoid_shoot+0x1a>
 6b4:	00 00       	nop
	_delay_ms(50);
	PORTH |= (1<<PH3);
 6b6:	80 81       	ld	r24, Z
 6b8:	88 60       	ori	r24, 0x08	; 8
 6ba:	80 83       	st	Z, r24
 6bc:	08 95       	ret

000006be <spi_init>:
#define SPI_MISO PB3
#define SPI_SCK PB1 

void spi_init(){
	//Set MOSI, SCK and SS as output pins 	
	DDRB |= (1 << SPI_MOSI) | (1 << SPI_SCK) | (1 << SPI_SS);
 6be:	84 b1       	in	r24, 0x04	; 4
 6c0:	87 60       	ori	r24, 0x07	; 7
 6c2:	84 b9       	out	0x04, r24	; 4
	
	//Set MISO as input pin
	DDRB &= ~(1 << SPI_MISO);
 6c4:	23 98       	cbi	0x04, 3	; 4
	
	//Enable SPI in master mode and set clock rate fosc/16
	SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0);
 6c6:	8c b5       	in	r24, 0x2c	; 44
 6c8:	81 65       	ori	r24, 0x51	; 81
 6ca:	8c bd       	out	0x2c, r24	; 44
 6cc:	08 95       	ret

000006ce <spi_send>:
	return SPDR;
}

void spi_send(char data){
	//Start transmission
	SPDR = data;
 6ce:	8e bd       	out	0x2e, r24	; 46
	
	//Wait for transmission, checks if register is empty 
	while(!(SPSR & (1 << SPIF)));
 6d0:	0d b4       	in	r0, 0x2d	; 45
 6d2:	07 fe       	sbrs	r0, 7
 6d4:	fd cf       	rjmp	.-6      	; 0x6d0 <spi_send+0x2>
}
 6d6:	08 95       	ret

000006d8 <spi_read>:
}


uint8_t spi_read(){
	//Dummy send in order to read from slave
	spi_send(0xaa);
 6d8:	8a ea       	ldi	r24, 0xAA	; 170
 6da:	f9 df       	rcall	.-14     	; 0x6ce <spi_send>
	
	while(!(SPSR & (1 << SPIF)));
 6dc:	0d b4       	in	r0, 0x2d	; 45
 6de:	07 fe       	sbrs	r0, 7
 6e0:	fd cf       	rjmp	.-6      	; 0x6dc <spi_read+0x4>

	return SPDR;
 6e2:	8e b5       	in	r24, 0x2e	; 46
}
 6e4:	08 95       	ret

000006e6 <spi_select>:
	while(!(SPSR & (1 << SPIF)));
}

void spi_select(){
	//Set !SS to 0 for selection of slave
	PORTB &= ~(1 << SPI_SS);
 6e6:	28 98       	cbi	0x05, 0	; 5
 6e8:	08 95       	ret

000006ea <spi_deselect>:
}

void spi_deselect(){
	//Set !SS to 1 for deselection of slave
	PORTB |= (1 << SPI_SS);
 6ea:	28 9a       	sbi	0x05, 0	; 5
 6ec:	08 95       	ret

000006ee <uart_sendChar>:

}

void uart_sendChar(unsigned char data){
	//Wait for empty transmitter buffer
	while(!(UCSR0A & (1<<UDRE0)));
 6ee:	e0 ec       	ldi	r30, 0xC0	; 192
 6f0:	f0 e0       	ldi	r31, 0x00	; 0
 6f2:	90 81       	ld	r25, Z
 6f4:	95 ff       	sbrs	r25, 5
 6f6:	fd cf       	rjmp	.-6      	; 0x6f2 <uart_sendChar+0x4>
		
	//Put data into buffer, then send the data
	UDR0 = data;
 6f8:	80 93 c6 00 	sts	0x00C6, r24
 6fc:	08 95       	ret

000006fe <uart_getChar>:
}


unsigned int uart_getChar(){
	//Wait for the data to be received 
	while(!(UCSR0A & (1<<RXC0))){}
 6fe:	e0 ec       	ldi	r30, 0xC0	; 192
 700:	f0 e0       	ldi	r31, 0x00	; 0
 702:	80 81       	ld	r24, Z
 704:	88 23       	and	r24, r24
 706:	ec f7       	brge	.-6      	; 0x702 <uart_getChar+0x4>
	
	//Get status and the 9th bit, then data from buffer
	return UDR0;
 708:	80 91 c6 00 	lds	r24, 0x00C6
}
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	08 95       	ret

00000710 <uart_init>:

static FILE uart_io = FDEV_SETUP_STREAM(uart_sendChar, uart_getChar, _FDEV_SETUP_RW);

void uart_init(unsigned int ubrr){
	//Set baud rate
	UBRR0L = (unsigned int) ubrr;
 710:	80 93 c4 00 	sts	0x00C4, r24
	
	//Enable receiver and transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 714:	88 e1       	ldi	r24, 0x18	; 24
 716:	80 93 c1 00 	sts	0x00C1, r24
	
	stdout = &uart_io;
 71a:	80 e0       	ldi	r24, 0x00	; 0
 71c:	92 e0       	ldi	r25, 0x02	; 2
 71e:	90 93 45 03 	sts	0x0345, r25
 722:	80 93 44 03 	sts	0x0344, r24
	stdin = &uart_io;
 726:	90 93 43 03 	sts	0x0343, r25
 72a:	80 93 42 03 	sts	0x0342, r24
 72e:	08 95       	ret

00000730 <ir_obstructed>:
	for (uint8_t i = 0; i < FILTER_BUFFER_SIZE; i++ ){
		ir_obstructed();
	}
}

uint8_t ir_obstructed(){
 730:	cf 93       	push	r28
 732:	df 93       	push	r29
	static uint16_t ringbuffer_filter[FILTER_BUFFER_SIZE];
	static uint8_t ringbuffer_index;

	//return adc_read(IR_CHANNEL);

	if (ringbuffer_index >= FILTER_BUFFER_SIZE - 1){
 734:	80 91 38 03 	lds	r24, 0x0338
 738:	8f 30       	cpi	r24, 0x0F	; 15
 73a:	18 f0       	brcs	.+6      	; 0x742 <ir_obstructed+0x12>
		ringbuffer_index = 0;
 73c:	10 92 38 03 	sts	0x0338, r1
 740:	03 c0       	rjmp	.+6      	; 0x748 <ir_obstructed+0x18>
	} else { ringbuffer_index++; }
 742:	8f 5f       	subi	r24, 0xFF	; 255
 744:	80 93 38 03 	sts	0x0338, r24
			
	ringbuffer_filter[ringbuffer_index] = adc_read(IR_CHANNEL) / FILTER_BUFFER_SIZE;
 748:	c0 91 38 03 	lds	r28, 0x0338
 74c:	d0 e0       	ldi	r29, 0x00	; 0
 74e:	80 e0       	ldi	r24, 0x00	; 0
 750:	48 dd       	rcall	.-1392   	; 0x1e2 <adc_read>
 752:	cc 0f       	add	r28, r28
 754:	dd 1f       	adc	r29, r29
 756:	c8 5e       	subi	r28, 0xE8	; 232
 758:	dc 4f       	sbci	r29, 0xFC	; 252
 75a:	92 95       	swap	r25
 75c:	82 95       	swap	r24
 75e:	8f 70       	andi	r24, 0x0F	; 15
 760:	89 27       	eor	r24, r25
 762:	9f 70       	andi	r25, 0x0F	; 15
 764:	89 27       	eor	r24, r25
 766:	99 83       	std	Y+1, r25	; 0x01
 768:	88 83       	st	Y, r24
 76a:	e8 e1       	ldi	r30, 0x18	; 24
 76c:	f3 e0       	ldi	r31, 0x03	; 3
 76e:	48 e3       	ldi	r20, 0x38	; 56
 770:	53 e0       	ldi	r21, 0x03	; 3



	uint16_t avg = 0;
 772:	20 e0       	ldi	r18, 0x00	; 0
 774:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t i = 0; i < FILTER_BUFFER_SIZE; i++) {
		avg += ringbuffer_filter[i] ;
 776:	81 91       	ld	r24, Z+
 778:	91 91       	ld	r25, Z+
 77a:	28 0f       	add	r18, r24
 77c:	39 1f       	adc	r19, r25
	ringbuffer_filter[ringbuffer_index] = adc_read(IR_CHANNEL) / FILTER_BUFFER_SIZE;



	uint16_t avg = 0;
	for (uint8_t i = 0; i < FILTER_BUFFER_SIZE; i++) {
 77e:	e4 17       	cp	r30, r20
 780:	f5 07       	cpc	r31, r21
 782:	c9 f7       	brne	.-14     	; 0x776 <ir_obstructed+0x46>
		printf(", %d", ringbuffer_filter[i]);
	}
	printf(" ]\n");*/

	
	if (avg < FILTER_THRESHOLD) {
 784:	81 e0       	ldi	r24, 0x01	; 1
 786:	22 33       	cpi	r18, 0x32	; 50
 788:	31 05       	cpc	r19, r1
 78a:	08 f0       	brcs	.+2      	; 0x78e <ir_obstructed+0x5e>
 78c:	80 e0       	ldi	r24, 0x00	; 0
		return 1;
	}

	return 0;
}
 78e:	df 91       	pop	r29
 790:	cf 91       	pop	r28
 792:	08 95       	ret

00000794 <ir_filter_init>:
#include "Drivers/uart_driver.h"

#define FILTER_THRESHOLD 50
#define FILTER_BUFFER_SIZE 16

void ir_filter_init() {
 794:	cf 93       	push	r28
 796:	c0 e1       	ldi	r28, 0x10	; 16
	for (uint8_t i = 0; i < FILTER_BUFFER_SIZE; i++ ){
		ir_obstructed();
 798:	cb df       	rcall	.-106    	; 0x730 <ir_obstructed>
 79a:	c1 50       	subi	r28, 0x01	; 1

#define FILTER_THRESHOLD 50
#define FILTER_BUFFER_SIZE 16

void ir_filter_init() {
	for (uint8_t i = 0; i < FILTER_BUFFER_SIZE; i++ ){
 79c:	e9 f7       	brne	.-6      	; 0x798 <ir_filter_init+0x4>
		ir_obstructed();
	}
}
 79e:	cf 91       	pop	r28
 7a0:	08 95       	ret

000007a2 <ir_edge_detected>:
	return 0;
}

uint8_t ir_edge_detected() {
	static uint8_t current;
	current = ir_obstructed();
 7a2:	c6 df       	rcall	.-116    	; 0x730 <ir_obstructed>
 7a4:	80 93 17 03 	sts	0x0317, r24
	if (last_ir_val != current){
 7a8:	90 91 40 03 	lds	r25, 0x0340
 7ac:	89 17       	cp	r24, r25
 7ae:	21 f0       	breq	.+8      	; 0x7b8 <ir_edge_detected+0x16>
		last_ir_val = current;
 7b0:	80 93 40 03 	sts	0x0340, r24
		return 1;
 7b4:	81 e0       	ldi	r24, 0x01	; 1
 7b6:	08 95       	ret
	}
	return 0;
 7b8:	80 e0       	ldi	r24, 0x00	; 0
 7ba:	08 95       	ret

000007bc <main>:
#include "ir.h"
#include "test_node_2.h"
#include "timer.h"

int main(void){
	uart_init(MYUBRR);
 7bc:	87 e6       	ldi	r24, 0x67	; 103
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	a7 df       	rcall	.-178    	; 0x710 <uart_init>
	can_init();
 7c2:	20 dd       	rcall	.-1472   	; 0x204 <can_init>
	pwm_init();
 7c4:	1d df       	rcall	.-454    	; 0x600 <pwm_init>
	printf("ir\n");
 7c6:	82 ef       	ldi	r24, 0xF2	; 242
 7c8:	92 e0       	ldi	r25, 0x02	; 2
 7ca:	18 d1       	rcall	.+560    	; 0x9fc <puts>
	adc_init();
 7cc:	fc dc       	rcall	.-1544   	; 0x1c6 <adc_init>
	ir_filter_init();
 7ce:	e2 df       	rcall	.-60     	; 0x794 <ir_filter_init>
	solenoid_init();
 7d0:	59 df       	rcall	.-334    	; 0x684 <solenoid_init>
	timer_init();
 7d2:	05 d0       	rcall	.+10     	; 0x7de <timer_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7d4:	85 ed       	ldi	r24, 0xD5	; 213
 7d6:	8a 95       	dec	r24
 7d8:	f1 f7       	brne	.-4      	; 0x7d6 <main+0x1a>
 7da:	00 00       	nop
 7dc:	fb cf       	rjmp	.-10     	; 0x7d4 <main+0x18>

000007de <timer_init>:
#include "Drivers/adc_driver.h"
#include "Drivers/uart_driver.h"

void timer_init() {
	//CS3{2:0}   = 101  prescaler set to 1024
	TCCR4B |=  (1<<CS42) | (1<<CS40);
 7de:	e1 ea       	ldi	r30, 0xA1	; 161
 7e0:	f0 e0       	ldi	r31, 0x00	; 0
 7e2:	80 81       	ld	r24, Z
 7e4:	85 60       	ori	r24, 0x05	; 5
 7e6:	80 83       	st	Z, r24
	TCCR4B &= ~(1<<CS41);
 7e8:	80 81       	ld	r24, Z
 7ea:	8d 7f       	andi	r24, 0xFD	; 253
 7ec:	80 83       	st	Z, r24
	
	TCCR4A &= ~(1<<WGM40);
 7ee:	a0 ea       	ldi	r26, 0xA0	; 160
 7f0:	b0 e0       	ldi	r27, 0x00	; 0
 7f2:	8c 91       	ld	r24, X
 7f4:	8e 7f       	andi	r24, 0xFE	; 254
 7f6:	8c 93       	st	X, r24
	TCCR4A &= ~(1<<WGM41);
 7f8:	8c 91       	ld	r24, X
 7fa:	8d 7f       	andi	r24, 0xFD	; 253
 7fc:	8c 93       	st	X, r24
	TCCR4B |=  (1<<WGM42);
 7fe:	80 81       	ld	r24, Z
 800:	88 60       	ori	r24, 0x08	; 8
 802:	80 83       	st	Z, r24
	TCCR4B &= ~(1<<WGM43);
 804:	80 81       	ld	r24, Z
 806:	8f 7e       	andi	r24, 0xEF	; 239
 808:	80 83       	st	Z, r24
	//TCCR3A |=  (1<<COM3A1) | (1<<COM3A0);
	
	OCR4A = 223; // 223 for 70 HZ, 7812 for 2 Hz
 80a:	8f ed       	ldi	r24, 0xDF	; 223
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	90 93 a9 00 	sts	0x00A9, r25
 812:	80 93 a8 00 	sts	0x00A8, r24
	
	//enable interrupt on OCR3A compare

	TIMSK4 |= (1<<OCIE4A);
 816:	e2 e7       	ldi	r30, 0x72	; 114
 818:	f0 e0       	ldi	r31, 0x00	; 0
 81a:	80 81       	ld	r24, Z
 81c:	82 60       	ori	r24, 0x02	; 2
 81e:	80 83       	st	Z, r24
	TIFR4 |= (1<<ICF1);
 820:	cd 9a       	sbi	0x19, 5	; 25
	
	
	sei();
 822:	78 94       	sei
 824:	08 95       	ret

00000826 <__vector_42>:
	
}


ISR(TIMER4_COMPA_vect){
 826:	1f 92       	push	r1
 828:	0f 92       	push	r0
 82a:	0f b6       	in	r0, 0x3f	; 63
 82c:	0f 92       	push	r0
 82e:	11 24       	eor	r1, r1
 830:	0b b6       	in	r0, 0x3b	; 59
 832:	0f 92       	push	r0
 834:	2f 93       	push	r18
 836:	3f 93       	push	r19
 838:	4f 93       	push	r20
 83a:	5f 93       	push	r21
 83c:	6f 93       	push	r22
 83e:	7f 93       	push	r23
 840:	8f 93       	push	r24
 842:	9f 93       	push	r25
 844:	af 93       	push	r26
 846:	bf 93       	push	r27
 848:	ef 93       	push	r30
 84a:	ff 93       	push	r31
	//printf("read: %d\n",adc_read(0));
	//printf("edge: %d\n\n",ir_edge_detected());

	if(ir_edge_detected()){
 84c:	aa df       	rcall	.-172    	; 0x7a2 <ir_edge_detected>
 84e:	81 11       	cpse	r24, r1
		can_ir_transmit();
 850:	6f de       	rcall	.-802    	; 0x530 <can_ir_transmit>
		
	}
	
	can_handle_message();
 852:	3c de       	rcall	.-904    	; 0x4cc <can_handle_message>
 854:	ff 91       	pop	r31
 856:	ef 91       	pop	r30
 858:	bf 91       	pop	r27
 85a:	af 91       	pop	r26
 85c:	9f 91       	pop	r25
 85e:	8f 91       	pop	r24
 860:	7f 91       	pop	r23
 862:	6f 91       	pop	r22
 864:	5f 91       	pop	r21
 866:	4f 91       	pop	r20
 868:	3f 91       	pop	r19
 86a:	2f 91       	pop	r18
 86c:	0f 90       	pop	r0
 86e:	0b be       	out	0x3b, r0	; 59
 870:	0f 90       	pop	r0
 872:	0f be       	out	0x3f, r0	; 63
 874:	0f 90       	pop	r0
 876:	1f 90       	pop	r1
 878:	18 95       	reti

0000087a <__vector_39>:
This function is the Interrupt Service Routine (ISR), and called when the TWI interrupt is triggered;
that is whenever a TWI event has occurred. This function should not be called directly from the main
application.
****************************************************************************/
ISR(TWI_vect)
{
 87a:	1f 92       	push	r1
 87c:	0f 92       	push	r0
 87e:	0f b6       	in	r0, 0x3f	; 63
 880:	0f 92       	push	r0
 882:	11 24       	eor	r1, r1
 884:	0b b6       	in	r0, 0x3b	; 59
 886:	0f 92       	push	r0
 888:	2f 93       	push	r18
 88a:	3f 93       	push	r19
 88c:	8f 93       	push	r24
 88e:	9f 93       	push	r25
 890:	af 93       	push	r26
 892:	bf 93       	push	r27
 894:	ef 93       	push	r30
 896:	ff 93       	push	r31
	static unsigned char TWI_bufPtr;
	
	switch (TWSR)
 898:	80 91 b9 00 	lds	r24, 0x00B9
 89c:	90 e0       	ldi	r25, 0x00	; 0
 89e:	fc 01       	movw	r30, r24
 8a0:	38 97       	sbiw	r30, 0x08	; 8
 8a2:	e1 35       	cpi	r30, 0x51	; 81
 8a4:	f1 05       	cpc	r31, r1
 8a6:	08 f0       	brcs	.+2      	; 0x8aa <__vector_39+0x30>
 8a8:	55 c0       	rjmp	.+170    	; 0x954 <__vector_39+0xda>
 8aa:	ee 58       	subi	r30, 0x8E	; 142
 8ac:	ff 4f       	sbci	r31, 0xFF	; 255
 8ae:	7b c0       	rjmp	.+246    	; 0x9a6 <__tablejump2__>
	{
		case TWI_START:             // START has been transmitted
		case TWI_REP_START:         // Repeated START has been transmitted
		TWI_bufPtr = 0;                                     // Set buffer pointer to the TWI Address location
 8b0:	10 92 39 03 	sts	0x0339, r1
		case TWI_MTX_ADR_ACK:       // SLA+W has been tramsmitted and ACK received
		case TWI_MTX_DATA_ACK:      // Data byte has been tramsmitted and ACK received
		if (TWI_bufPtr < TWI_msgSize)
 8b4:	e0 91 39 03 	lds	r30, 0x0339
 8b8:	80 91 3b 03 	lds	r24, 0x033B
 8bc:	e8 17       	cp	r30, r24
 8be:	70 f4       	brcc	.+28     	; 0x8dc <__vector_39+0x62>
		{
			TWDR = TWI_buf[TWI_bufPtr++];
 8c0:	81 e0       	ldi	r24, 0x01	; 1
 8c2:	8e 0f       	add	r24, r30
 8c4:	80 93 39 03 	sts	0x0339, r24
 8c8:	f0 e0       	ldi	r31, 0x00	; 0
 8ca:	e4 5c       	subi	r30, 0xC4	; 196
 8cc:	fc 4f       	sbci	r31, 0xFC	; 252
 8ce:	80 81       	ld	r24, Z
 8d0:	80 93 bb 00 	sts	0x00BB, r24
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 8d4:	85 e8       	ldi	r24, 0x85	; 133
 8d6:	80 93 bc 00 	sts	0x00BC, r24
 8da:	43 c0       	rjmp	.+134    	; 0x962 <__vector_39+0xe8>
			(1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag to send byte
			(0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           //
			(0<<TWWC);                                 //
		}else                    // Send STOP after last byte
		{
			TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully.
 8dc:	80 91 3a 03 	lds	r24, 0x033A
 8e0:	81 60       	ori	r24, 0x01	; 1
 8e2:	80 93 3a 03 	sts	0x033A, r24
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 8e6:	84 e9       	ldi	r24, 0x94	; 148
 8e8:	80 93 bc 00 	sts	0x00BC, r24
 8ec:	3a c0       	rjmp	.+116    	; 0x962 <__vector_39+0xe8>
			(0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
			(0<<TWWC);                                 //
		}
		break;
		case TWI_MRX_DATA_ACK:      // Data byte has been received and ACK tramsmitted
		TWI_buf[TWI_bufPtr++] = TWDR;
 8ee:	e0 91 39 03 	lds	r30, 0x0339
 8f2:	81 e0       	ldi	r24, 0x01	; 1
 8f4:	8e 0f       	add	r24, r30
 8f6:	80 93 39 03 	sts	0x0339, r24
 8fa:	80 91 bb 00 	lds	r24, 0x00BB
 8fe:	f0 e0       	ldi	r31, 0x00	; 0
 900:	e4 5c       	subi	r30, 0xC4	; 196
 902:	fc 4f       	sbci	r31, 0xFC	; 252
 904:	80 83       	st	Z, r24
		case TWI_MRX_ADR_ACK:       // SLA+R has been tramsmitted and ACK received
		if (TWI_bufPtr < (TWI_msgSize-1) )                  // Detect the last byte to NACK it.
 906:	20 91 39 03 	lds	r18, 0x0339
 90a:	30 e0       	ldi	r19, 0x00	; 0
 90c:	80 91 3b 03 	lds	r24, 0x033B
 910:	90 e0       	ldi	r25, 0x00	; 0
 912:	01 97       	sbiw	r24, 0x01	; 1
 914:	28 17       	cp	r18, r24
 916:	39 07       	cpc	r19, r25
 918:	24 f4       	brge	.+8      	; 0x922 <__vector_39+0xa8>
		{
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 91a:	85 ec       	ldi	r24, 0xC5	; 197
 91c:	80 93 bc 00 	sts	0x00BC, r24
 920:	20 c0       	rjmp	.+64     	; 0x962 <__vector_39+0xe8>
			(1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag to read next byte
			(1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send ACK after reception
			(0<<TWWC);                                 //
		}else                    // Send NACK after next reception
		{
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 922:	85 e8       	ldi	r24, 0x85	; 133
 924:	80 93 bc 00 	sts	0x00BC, r24
 928:	1c c0       	rjmp	.+56     	; 0x962 <__vector_39+0xe8>
			(0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send NACK after reception
			(0<<TWWC);                                 //
		}
		break;
		case TWI_MRX_DATA_NACK:     // Data byte has been received and NACK tramsmitted
		TWI_buf[TWI_bufPtr] = TWDR;
 92a:	80 91 bb 00 	lds	r24, 0x00BB
 92e:	e0 91 39 03 	lds	r30, 0x0339
 932:	f0 e0       	ldi	r31, 0x00	; 0
 934:	e4 5c       	subi	r30, 0xC4	; 196
 936:	fc 4f       	sbci	r31, 0xFC	; 252
 938:	80 83       	st	Z, r24
		TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully.
 93a:	80 91 3a 03 	lds	r24, 0x033A
 93e:	81 60       	ori	r24, 0x01	; 1
 940:	80 93 3a 03 	sts	0x033A, r24
		TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 944:	84 e9       	ldi	r24, 0x94	; 148
 946:	80 93 bc 00 	sts	0x00BC, r24
		(0<<TWIE)|(1<<TWINT)|                      // Disable TWI Interrupt and clear the flag
		(0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
		(0<<TWWC);                                 //
		break;
 94a:	0b c0       	rjmp	.+22     	; 0x962 <__vector_39+0xe8>
		case TWI_ARB_LOST:          // Arbitration lost
		TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 94c:	85 ea       	ldi	r24, 0xA5	; 165
 94e:	80 93 bc 00 	sts	0x00BC, r24
		(1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag
		(0<<TWEA)|(1<<TWSTA)|(0<<TWSTO)|           // Initiate a (RE)START condition.
		(0<<TWWC);                                 //
		break;
 952:	07 c0       	rjmp	.+14     	; 0x962 <__vector_39+0xe8>
		case TWI_MRX_ADR_NACK:      // SLA+R has been tramsmitted and NACK received
		case TWI_MTX_DATA_NACK:     // Data byte has been tramsmitted and NACK received
		//    case TWI_NO_STATE              // No relevant state information available; TWINT = ?0?
		case TWI_BUS_ERROR:         // Bus error due to an illegal START or STOP condition
		default:
		TWI_state = TWSR;                                 // Store TWSR and automatically sets clears noErrors bit.
 954:	80 91 b9 00 	lds	r24, 0x00B9
 958:	80 93 0e 02 	sts	0x020E, r24
		// Reset TWI Interface
		TWCR = (1<<TWEN)|                                 // Enable TWI-interface and release TWI pins
 95c:	84 e0       	ldi	r24, 0x04	; 4
 95e:	80 93 bc 00 	sts	0x00BC, r24
		(0<<TWIE)|(0<<TWINT)|                      // Disable Interupt
		(0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // No Signal requests
		(0<<TWWC);                                 //
	}
 962:	ff 91       	pop	r31
 964:	ef 91       	pop	r30
 966:	bf 91       	pop	r27
 968:	af 91       	pop	r26
 96a:	9f 91       	pop	r25
 96c:	8f 91       	pop	r24
 96e:	3f 91       	pop	r19
 970:	2f 91       	pop	r18
 972:	0f 90       	pop	r0
 974:	0b be       	out	0x3b, r0	; 59
 976:	0f 90       	pop	r0
 978:	0f be       	out	0x3f, r0	; 63
 97a:	0f 90       	pop	r0
 97c:	1f 90       	pop	r1
 97e:	18 95       	reti

00000980 <__divmodhi4>:
 980:	97 fb       	bst	r25, 7
 982:	07 2e       	mov	r0, r23
 984:	16 f4       	brtc	.+4      	; 0x98a <__divmodhi4+0xa>
 986:	00 94       	com	r0
 988:	06 d0       	rcall	.+12     	; 0x996 <__divmodhi4_neg1>
 98a:	77 fd       	sbrc	r23, 7
 98c:	08 d0       	rcall	.+16     	; 0x99e <__divmodhi4_neg2>
 98e:	11 d0       	rcall	.+34     	; 0x9b2 <__udivmodhi4>
 990:	07 fc       	sbrc	r0, 7
 992:	05 d0       	rcall	.+10     	; 0x99e <__divmodhi4_neg2>
 994:	3e f4       	brtc	.+14     	; 0x9a4 <__divmodhi4_exit>

00000996 <__divmodhi4_neg1>:
 996:	90 95       	com	r25
 998:	81 95       	neg	r24
 99a:	9f 4f       	sbci	r25, 0xFF	; 255
 99c:	08 95       	ret

0000099e <__divmodhi4_neg2>:
 99e:	70 95       	com	r23
 9a0:	61 95       	neg	r22
 9a2:	7f 4f       	sbci	r23, 0xFF	; 255

000009a4 <__divmodhi4_exit>:
 9a4:	08 95       	ret

000009a6 <__tablejump2__>:
 9a6:	ee 0f       	add	r30, r30
 9a8:	ff 1f       	adc	r31, r31

000009aa <__tablejump__>:
 9aa:	05 90       	lpm	r0, Z+
 9ac:	f4 91       	lpm	r31, Z
 9ae:	e0 2d       	mov	r30, r0
 9b0:	19 94       	eijmp

000009b2 <__udivmodhi4>:
 9b2:	aa 1b       	sub	r26, r26
 9b4:	bb 1b       	sub	r27, r27
 9b6:	51 e1       	ldi	r21, 0x11	; 17
 9b8:	07 c0       	rjmp	.+14     	; 0x9c8 <__udivmodhi4_ep>

000009ba <__udivmodhi4_loop>:
 9ba:	aa 1f       	adc	r26, r26
 9bc:	bb 1f       	adc	r27, r27
 9be:	a6 17       	cp	r26, r22
 9c0:	b7 07       	cpc	r27, r23
 9c2:	10 f0       	brcs	.+4      	; 0x9c8 <__udivmodhi4_ep>
 9c4:	a6 1b       	sub	r26, r22
 9c6:	b7 0b       	sbc	r27, r23

000009c8 <__udivmodhi4_ep>:
 9c8:	88 1f       	adc	r24, r24
 9ca:	99 1f       	adc	r25, r25
 9cc:	5a 95       	dec	r21
 9ce:	a9 f7       	brne	.-22     	; 0x9ba <__udivmodhi4_loop>
 9d0:	80 95       	com	r24
 9d2:	90 95       	com	r25
 9d4:	bc 01       	movw	r22, r24
 9d6:	cd 01       	movw	r24, r26
 9d8:	08 95       	ret

000009da <printf>:
 9da:	cf 93       	push	r28
 9dc:	df 93       	push	r29
 9de:	cd b7       	in	r28, 0x3d	; 61
 9e0:	de b7       	in	r29, 0x3e	; 62
 9e2:	fe 01       	movw	r30, r28
 9e4:	36 96       	adiw	r30, 0x06	; 6
 9e6:	61 91       	ld	r22, Z+
 9e8:	71 91       	ld	r23, Z+
 9ea:	af 01       	movw	r20, r30
 9ec:	80 91 44 03 	lds	r24, 0x0344
 9f0:	90 91 45 03 	lds	r25, 0x0345
 9f4:	30 d0       	rcall	.+96     	; 0xa56 <vfprintf>
 9f6:	df 91       	pop	r29
 9f8:	cf 91       	pop	r28
 9fa:	08 95       	ret

000009fc <puts>:
 9fc:	0f 93       	push	r16
 9fe:	1f 93       	push	r17
 a00:	cf 93       	push	r28
 a02:	df 93       	push	r29
 a04:	e0 91 44 03 	lds	r30, 0x0344
 a08:	f0 91 45 03 	lds	r31, 0x0345
 a0c:	23 81       	ldd	r18, Z+3	; 0x03
 a0e:	21 ff       	sbrs	r18, 1
 a10:	1b c0       	rjmp	.+54     	; 0xa48 <puts+0x4c>
 a12:	ec 01       	movw	r28, r24
 a14:	00 e0       	ldi	r16, 0x00	; 0
 a16:	10 e0       	ldi	r17, 0x00	; 0
 a18:	89 91       	ld	r24, Y+
 a1a:	60 91 44 03 	lds	r22, 0x0344
 a1e:	70 91 45 03 	lds	r23, 0x0345
 a22:	db 01       	movw	r26, r22
 a24:	18 96       	adiw	r26, 0x08	; 8
 a26:	ed 91       	ld	r30, X+
 a28:	fc 91       	ld	r31, X
 a2a:	19 97       	sbiw	r26, 0x09	; 9
 a2c:	88 23       	and	r24, r24
 a2e:	31 f0       	breq	.+12     	; 0xa3c <puts+0x40>
 a30:	19 95       	eicall
 a32:	89 2b       	or	r24, r25
 a34:	89 f3       	breq	.-30     	; 0xa18 <puts+0x1c>
 a36:	0f ef       	ldi	r16, 0xFF	; 255
 a38:	1f ef       	ldi	r17, 0xFF	; 255
 a3a:	ee cf       	rjmp	.-36     	; 0xa18 <puts+0x1c>
 a3c:	8a e0       	ldi	r24, 0x0A	; 10
 a3e:	19 95       	eicall
 a40:	89 2b       	or	r24, r25
 a42:	11 f4       	brne	.+4      	; 0xa48 <puts+0x4c>
 a44:	c8 01       	movw	r24, r16
 a46:	02 c0       	rjmp	.+4      	; 0xa4c <puts+0x50>
 a48:	8f ef       	ldi	r24, 0xFF	; 255
 a4a:	9f ef       	ldi	r25, 0xFF	; 255
 a4c:	df 91       	pop	r29
 a4e:	cf 91       	pop	r28
 a50:	1f 91       	pop	r17
 a52:	0f 91       	pop	r16
 a54:	08 95       	ret

00000a56 <vfprintf>:
 a56:	2f 92       	push	r2
 a58:	3f 92       	push	r3
 a5a:	4f 92       	push	r4
 a5c:	5f 92       	push	r5
 a5e:	6f 92       	push	r6
 a60:	7f 92       	push	r7
 a62:	8f 92       	push	r8
 a64:	9f 92       	push	r9
 a66:	af 92       	push	r10
 a68:	bf 92       	push	r11
 a6a:	cf 92       	push	r12
 a6c:	df 92       	push	r13
 a6e:	ef 92       	push	r14
 a70:	ff 92       	push	r15
 a72:	0f 93       	push	r16
 a74:	1f 93       	push	r17
 a76:	cf 93       	push	r28
 a78:	df 93       	push	r29
 a7a:	cd b7       	in	r28, 0x3d	; 61
 a7c:	de b7       	in	r29, 0x3e	; 62
 a7e:	2c 97       	sbiw	r28, 0x0c	; 12
 a80:	0f b6       	in	r0, 0x3f	; 63
 a82:	f8 94       	cli
 a84:	de bf       	out	0x3e, r29	; 62
 a86:	0f be       	out	0x3f, r0	; 63
 a88:	cd bf       	out	0x3d, r28	; 61
 a8a:	7c 01       	movw	r14, r24
 a8c:	6b 01       	movw	r12, r22
 a8e:	8a 01       	movw	r16, r20
 a90:	fc 01       	movw	r30, r24
 a92:	17 82       	std	Z+7, r1	; 0x07
 a94:	16 82       	std	Z+6, r1	; 0x06
 a96:	83 81       	ldd	r24, Z+3	; 0x03
 a98:	81 ff       	sbrs	r24, 1
 a9a:	b0 c1       	rjmp	.+864    	; 0xdfc <vfprintf+0x3a6>
 a9c:	ce 01       	movw	r24, r28
 a9e:	01 96       	adiw	r24, 0x01	; 1
 aa0:	4c 01       	movw	r8, r24
 aa2:	f7 01       	movw	r30, r14
 aa4:	93 81       	ldd	r25, Z+3	; 0x03
 aa6:	f6 01       	movw	r30, r12
 aa8:	93 fd       	sbrc	r25, 3
 aaa:	85 91       	lpm	r24, Z+
 aac:	93 ff       	sbrs	r25, 3
 aae:	81 91       	ld	r24, Z+
 ab0:	6f 01       	movw	r12, r30
 ab2:	88 23       	and	r24, r24
 ab4:	09 f4       	brne	.+2      	; 0xab8 <vfprintf+0x62>
 ab6:	9e c1       	rjmp	.+828    	; 0xdf4 <vfprintf+0x39e>
 ab8:	85 32       	cpi	r24, 0x25	; 37
 aba:	39 f4       	brne	.+14     	; 0xaca <vfprintf+0x74>
 abc:	93 fd       	sbrc	r25, 3
 abe:	85 91       	lpm	r24, Z+
 ac0:	93 ff       	sbrs	r25, 3
 ac2:	81 91       	ld	r24, Z+
 ac4:	6f 01       	movw	r12, r30
 ac6:	85 32       	cpi	r24, 0x25	; 37
 ac8:	21 f4       	brne	.+8      	; 0xad2 <vfprintf+0x7c>
 aca:	b7 01       	movw	r22, r14
 acc:	90 e0       	ldi	r25, 0x00	; 0
 ace:	c7 d1       	rcall	.+910    	; 0xe5e <fputc>
 ad0:	e8 cf       	rjmp	.-48     	; 0xaa2 <vfprintf+0x4c>
 ad2:	51 2c       	mov	r5, r1
 ad4:	31 2c       	mov	r3, r1
 ad6:	20 e0       	ldi	r18, 0x00	; 0
 ad8:	20 32       	cpi	r18, 0x20	; 32
 ada:	a0 f4       	brcc	.+40     	; 0xb04 <vfprintf+0xae>
 adc:	8b 32       	cpi	r24, 0x2B	; 43
 ade:	69 f0       	breq	.+26     	; 0xafa <vfprintf+0xa4>
 ae0:	30 f4       	brcc	.+12     	; 0xaee <vfprintf+0x98>
 ae2:	80 32       	cpi	r24, 0x20	; 32
 ae4:	59 f0       	breq	.+22     	; 0xafc <vfprintf+0xa6>
 ae6:	83 32       	cpi	r24, 0x23	; 35
 ae8:	69 f4       	brne	.+26     	; 0xb04 <vfprintf+0xae>
 aea:	20 61       	ori	r18, 0x10	; 16
 aec:	2c c0       	rjmp	.+88     	; 0xb46 <vfprintf+0xf0>
 aee:	8d 32       	cpi	r24, 0x2D	; 45
 af0:	39 f0       	breq	.+14     	; 0xb00 <vfprintf+0xaa>
 af2:	80 33       	cpi	r24, 0x30	; 48
 af4:	39 f4       	brne	.+14     	; 0xb04 <vfprintf+0xae>
 af6:	21 60       	ori	r18, 0x01	; 1
 af8:	26 c0       	rjmp	.+76     	; 0xb46 <vfprintf+0xf0>
 afa:	22 60       	ori	r18, 0x02	; 2
 afc:	24 60       	ori	r18, 0x04	; 4
 afe:	23 c0       	rjmp	.+70     	; 0xb46 <vfprintf+0xf0>
 b00:	28 60       	ori	r18, 0x08	; 8
 b02:	21 c0       	rjmp	.+66     	; 0xb46 <vfprintf+0xf0>
 b04:	27 fd       	sbrc	r18, 7
 b06:	27 c0       	rjmp	.+78     	; 0xb56 <vfprintf+0x100>
 b08:	30 ed       	ldi	r19, 0xD0	; 208
 b0a:	38 0f       	add	r19, r24
 b0c:	3a 30       	cpi	r19, 0x0A	; 10
 b0e:	78 f4       	brcc	.+30     	; 0xb2e <vfprintf+0xd8>
 b10:	26 ff       	sbrs	r18, 6
 b12:	06 c0       	rjmp	.+12     	; 0xb20 <vfprintf+0xca>
 b14:	fa e0       	ldi	r31, 0x0A	; 10
 b16:	5f 9e       	mul	r5, r31
 b18:	30 0d       	add	r19, r0
 b1a:	11 24       	eor	r1, r1
 b1c:	53 2e       	mov	r5, r19
 b1e:	13 c0       	rjmp	.+38     	; 0xb46 <vfprintf+0xf0>
 b20:	8a e0       	ldi	r24, 0x0A	; 10
 b22:	38 9e       	mul	r3, r24
 b24:	30 0d       	add	r19, r0
 b26:	11 24       	eor	r1, r1
 b28:	33 2e       	mov	r3, r19
 b2a:	20 62       	ori	r18, 0x20	; 32
 b2c:	0c c0       	rjmp	.+24     	; 0xb46 <vfprintf+0xf0>
 b2e:	8e 32       	cpi	r24, 0x2E	; 46
 b30:	21 f4       	brne	.+8      	; 0xb3a <vfprintf+0xe4>
 b32:	26 fd       	sbrc	r18, 6
 b34:	5f c1       	rjmp	.+702    	; 0xdf4 <vfprintf+0x39e>
 b36:	20 64       	ori	r18, 0x40	; 64
 b38:	06 c0       	rjmp	.+12     	; 0xb46 <vfprintf+0xf0>
 b3a:	8c 36       	cpi	r24, 0x6C	; 108
 b3c:	11 f4       	brne	.+4      	; 0xb42 <vfprintf+0xec>
 b3e:	20 68       	ori	r18, 0x80	; 128
 b40:	02 c0       	rjmp	.+4      	; 0xb46 <vfprintf+0xf0>
 b42:	88 36       	cpi	r24, 0x68	; 104
 b44:	41 f4       	brne	.+16     	; 0xb56 <vfprintf+0x100>
 b46:	f6 01       	movw	r30, r12
 b48:	93 fd       	sbrc	r25, 3
 b4a:	85 91       	lpm	r24, Z+
 b4c:	93 ff       	sbrs	r25, 3
 b4e:	81 91       	ld	r24, Z+
 b50:	6f 01       	movw	r12, r30
 b52:	81 11       	cpse	r24, r1
 b54:	c1 cf       	rjmp	.-126    	; 0xad8 <vfprintf+0x82>
 b56:	98 2f       	mov	r25, r24
 b58:	9f 7d       	andi	r25, 0xDF	; 223
 b5a:	95 54       	subi	r25, 0x45	; 69
 b5c:	93 30       	cpi	r25, 0x03	; 3
 b5e:	28 f4       	brcc	.+10     	; 0xb6a <vfprintf+0x114>
 b60:	0c 5f       	subi	r16, 0xFC	; 252
 b62:	1f 4f       	sbci	r17, 0xFF	; 255
 b64:	ff e3       	ldi	r31, 0x3F	; 63
 b66:	f9 83       	std	Y+1, r31	; 0x01
 b68:	0d c0       	rjmp	.+26     	; 0xb84 <vfprintf+0x12e>
 b6a:	83 36       	cpi	r24, 0x63	; 99
 b6c:	31 f0       	breq	.+12     	; 0xb7a <vfprintf+0x124>
 b6e:	83 37       	cpi	r24, 0x73	; 115
 b70:	71 f0       	breq	.+28     	; 0xb8e <vfprintf+0x138>
 b72:	83 35       	cpi	r24, 0x53	; 83
 b74:	09 f0       	breq	.+2      	; 0xb78 <vfprintf+0x122>
 b76:	57 c0       	rjmp	.+174    	; 0xc26 <vfprintf+0x1d0>
 b78:	21 c0       	rjmp	.+66     	; 0xbbc <vfprintf+0x166>
 b7a:	f8 01       	movw	r30, r16
 b7c:	80 81       	ld	r24, Z
 b7e:	89 83       	std	Y+1, r24	; 0x01
 b80:	0e 5f       	subi	r16, 0xFE	; 254
 b82:	1f 4f       	sbci	r17, 0xFF	; 255
 b84:	44 24       	eor	r4, r4
 b86:	43 94       	inc	r4
 b88:	51 2c       	mov	r5, r1
 b8a:	54 01       	movw	r10, r8
 b8c:	14 c0       	rjmp	.+40     	; 0xbb6 <vfprintf+0x160>
 b8e:	38 01       	movw	r6, r16
 b90:	f2 e0       	ldi	r31, 0x02	; 2
 b92:	6f 0e       	add	r6, r31
 b94:	71 1c       	adc	r7, r1
 b96:	f8 01       	movw	r30, r16
 b98:	a0 80       	ld	r10, Z
 b9a:	b1 80       	ldd	r11, Z+1	; 0x01
 b9c:	26 ff       	sbrs	r18, 6
 b9e:	03 c0       	rjmp	.+6      	; 0xba6 <vfprintf+0x150>
 ba0:	65 2d       	mov	r22, r5
 ba2:	70 e0       	ldi	r23, 0x00	; 0
 ba4:	02 c0       	rjmp	.+4      	; 0xbaa <vfprintf+0x154>
 ba6:	6f ef       	ldi	r22, 0xFF	; 255
 ba8:	7f ef       	ldi	r23, 0xFF	; 255
 baa:	c5 01       	movw	r24, r10
 bac:	2c 87       	std	Y+12, r18	; 0x0c
 bae:	4c d1       	rcall	.+664    	; 0xe48 <strnlen>
 bb0:	2c 01       	movw	r4, r24
 bb2:	83 01       	movw	r16, r6
 bb4:	2c 85       	ldd	r18, Y+12	; 0x0c
 bb6:	2f 77       	andi	r18, 0x7F	; 127
 bb8:	22 2e       	mov	r2, r18
 bba:	16 c0       	rjmp	.+44     	; 0xbe8 <vfprintf+0x192>
 bbc:	38 01       	movw	r6, r16
 bbe:	f2 e0       	ldi	r31, 0x02	; 2
 bc0:	6f 0e       	add	r6, r31
 bc2:	71 1c       	adc	r7, r1
 bc4:	f8 01       	movw	r30, r16
 bc6:	a0 80       	ld	r10, Z
 bc8:	b1 80       	ldd	r11, Z+1	; 0x01
 bca:	26 ff       	sbrs	r18, 6
 bcc:	03 c0       	rjmp	.+6      	; 0xbd4 <vfprintf+0x17e>
 bce:	65 2d       	mov	r22, r5
 bd0:	70 e0       	ldi	r23, 0x00	; 0
 bd2:	02 c0       	rjmp	.+4      	; 0xbd8 <vfprintf+0x182>
 bd4:	6f ef       	ldi	r22, 0xFF	; 255
 bd6:	7f ef       	ldi	r23, 0xFF	; 255
 bd8:	c5 01       	movw	r24, r10
 bda:	2c 87       	std	Y+12, r18	; 0x0c
 bdc:	2a d1       	rcall	.+596    	; 0xe32 <strnlen_P>
 bde:	2c 01       	movw	r4, r24
 be0:	2c 85       	ldd	r18, Y+12	; 0x0c
 be2:	20 68       	ori	r18, 0x80	; 128
 be4:	22 2e       	mov	r2, r18
 be6:	83 01       	movw	r16, r6
 be8:	23 fc       	sbrc	r2, 3
 bea:	19 c0       	rjmp	.+50     	; 0xc1e <vfprintf+0x1c8>
 bec:	83 2d       	mov	r24, r3
 bee:	90 e0       	ldi	r25, 0x00	; 0
 bf0:	48 16       	cp	r4, r24
 bf2:	59 06       	cpc	r5, r25
 bf4:	a0 f4       	brcc	.+40     	; 0xc1e <vfprintf+0x1c8>
 bf6:	b7 01       	movw	r22, r14
 bf8:	80 e2       	ldi	r24, 0x20	; 32
 bfa:	90 e0       	ldi	r25, 0x00	; 0
 bfc:	30 d1       	rcall	.+608    	; 0xe5e <fputc>
 bfe:	3a 94       	dec	r3
 c00:	f5 cf       	rjmp	.-22     	; 0xbec <vfprintf+0x196>
 c02:	f5 01       	movw	r30, r10
 c04:	27 fc       	sbrc	r2, 7
 c06:	85 91       	lpm	r24, Z+
 c08:	27 fe       	sbrs	r2, 7
 c0a:	81 91       	ld	r24, Z+
 c0c:	5f 01       	movw	r10, r30
 c0e:	b7 01       	movw	r22, r14
 c10:	90 e0       	ldi	r25, 0x00	; 0
 c12:	25 d1       	rcall	.+586    	; 0xe5e <fputc>
 c14:	31 10       	cpse	r3, r1
 c16:	3a 94       	dec	r3
 c18:	f1 e0       	ldi	r31, 0x01	; 1
 c1a:	4f 1a       	sub	r4, r31
 c1c:	51 08       	sbc	r5, r1
 c1e:	41 14       	cp	r4, r1
 c20:	51 04       	cpc	r5, r1
 c22:	79 f7       	brne	.-34     	; 0xc02 <vfprintf+0x1ac>
 c24:	de c0       	rjmp	.+444    	; 0xde2 <vfprintf+0x38c>
 c26:	84 36       	cpi	r24, 0x64	; 100
 c28:	11 f0       	breq	.+4      	; 0xc2e <vfprintf+0x1d8>
 c2a:	89 36       	cpi	r24, 0x69	; 105
 c2c:	31 f5       	brne	.+76     	; 0xc7a <vfprintf+0x224>
 c2e:	f8 01       	movw	r30, r16
 c30:	27 ff       	sbrs	r18, 7
 c32:	07 c0       	rjmp	.+14     	; 0xc42 <vfprintf+0x1ec>
 c34:	60 81       	ld	r22, Z
 c36:	71 81       	ldd	r23, Z+1	; 0x01
 c38:	82 81       	ldd	r24, Z+2	; 0x02
 c3a:	93 81       	ldd	r25, Z+3	; 0x03
 c3c:	0c 5f       	subi	r16, 0xFC	; 252
 c3e:	1f 4f       	sbci	r17, 0xFF	; 255
 c40:	08 c0       	rjmp	.+16     	; 0xc52 <vfprintf+0x1fc>
 c42:	60 81       	ld	r22, Z
 c44:	71 81       	ldd	r23, Z+1	; 0x01
 c46:	88 27       	eor	r24, r24
 c48:	77 fd       	sbrc	r23, 7
 c4a:	80 95       	com	r24
 c4c:	98 2f       	mov	r25, r24
 c4e:	0e 5f       	subi	r16, 0xFE	; 254
 c50:	1f 4f       	sbci	r17, 0xFF	; 255
 c52:	2f 76       	andi	r18, 0x6F	; 111
 c54:	b2 2e       	mov	r11, r18
 c56:	97 ff       	sbrs	r25, 7
 c58:	09 c0       	rjmp	.+18     	; 0xc6c <vfprintf+0x216>
 c5a:	90 95       	com	r25
 c5c:	80 95       	com	r24
 c5e:	70 95       	com	r23
 c60:	61 95       	neg	r22
 c62:	7f 4f       	sbci	r23, 0xFF	; 255
 c64:	8f 4f       	sbci	r24, 0xFF	; 255
 c66:	9f 4f       	sbci	r25, 0xFF	; 255
 c68:	20 68       	ori	r18, 0x80	; 128
 c6a:	b2 2e       	mov	r11, r18
 c6c:	2a e0       	ldi	r18, 0x0A	; 10
 c6e:	30 e0       	ldi	r19, 0x00	; 0
 c70:	a4 01       	movw	r20, r8
 c72:	27 d1       	rcall	.+590    	; 0xec2 <__ultoa_invert>
 c74:	a8 2e       	mov	r10, r24
 c76:	a8 18       	sub	r10, r8
 c78:	43 c0       	rjmp	.+134    	; 0xd00 <vfprintf+0x2aa>
 c7a:	85 37       	cpi	r24, 0x75	; 117
 c7c:	29 f4       	brne	.+10     	; 0xc88 <vfprintf+0x232>
 c7e:	2f 7e       	andi	r18, 0xEF	; 239
 c80:	b2 2e       	mov	r11, r18
 c82:	2a e0       	ldi	r18, 0x0A	; 10
 c84:	30 e0       	ldi	r19, 0x00	; 0
 c86:	25 c0       	rjmp	.+74     	; 0xcd2 <vfprintf+0x27c>
 c88:	f2 2f       	mov	r31, r18
 c8a:	f9 7f       	andi	r31, 0xF9	; 249
 c8c:	bf 2e       	mov	r11, r31
 c8e:	8f 36       	cpi	r24, 0x6F	; 111
 c90:	c1 f0       	breq	.+48     	; 0xcc2 <vfprintf+0x26c>
 c92:	18 f4       	brcc	.+6      	; 0xc9a <vfprintf+0x244>
 c94:	88 35       	cpi	r24, 0x58	; 88
 c96:	79 f0       	breq	.+30     	; 0xcb6 <vfprintf+0x260>
 c98:	ad c0       	rjmp	.+346    	; 0xdf4 <vfprintf+0x39e>
 c9a:	80 37       	cpi	r24, 0x70	; 112
 c9c:	19 f0       	breq	.+6      	; 0xca4 <vfprintf+0x24e>
 c9e:	88 37       	cpi	r24, 0x78	; 120
 ca0:	21 f0       	breq	.+8      	; 0xcaa <vfprintf+0x254>
 ca2:	a8 c0       	rjmp	.+336    	; 0xdf4 <vfprintf+0x39e>
 ca4:	2f 2f       	mov	r18, r31
 ca6:	20 61       	ori	r18, 0x10	; 16
 ca8:	b2 2e       	mov	r11, r18
 caa:	b4 fe       	sbrs	r11, 4
 cac:	0d c0       	rjmp	.+26     	; 0xcc8 <vfprintf+0x272>
 cae:	8b 2d       	mov	r24, r11
 cb0:	84 60       	ori	r24, 0x04	; 4
 cb2:	b8 2e       	mov	r11, r24
 cb4:	09 c0       	rjmp	.+18     	; 0xcc8 <vfprintf+0x272>
 cb6:	24 ff       	sbrs	r18, 4
 cb8:	0a c0       	rjmp	.+20     	; 0xcce <vfprintf+0x278>
 cba:	9f 2f       	mov	r25, r31
 cbc:	96 60       	ori	r25, 0x06	; 6
 cbe:	b9 2e       	mov	r11, r25
 cc0:	06 c0       	rjmp	.+12     	; 0xcce <vfprintf+0x278>
 cc2:	28 e0       	ldi	r18, 0x08	; 8
 cc4:	30 e0       	ldi	r19, 0x00	; 0
 cc6:	05 c0       	rjmp	.+10     	; 0xcd2 <vfprintf+0x27c>
 cc8:	20 e1       	ldi	r18, 0x10	; 16
 cca:	30 e0       	ldi	r19, 0x00	; 0
 ccc:	02 c0       	rjmp	.+4      	; 0xcd2 <vfprintf+0x27c>
 cce:	20 e1       	ldi	r18, 0x10	; 16
 cd0:	32 e0       	ldi	r19, 0x02	; 2
 cd2:	f8 01       	movw	r30, r16
 cd4:	b7 fe       	sbrs	r11, 7
 cd6:	07 c0       	rjmp	.+14     	; 0xce6 <vfprintf+0x290>
 cd8:	60 81       	ld	r22, Z
 cda:	71 81       	ldd	r23, Z+1	; 0x01
 cdc:	82 81       	ldd	r24, Z+2	; 0x02
 cde:	93 81       	ldd	r25, Z+3	; 0x03
 ce0:	0c 5f       	subi	r16, 0xFC	; 252
 ce2:	1f 4f       	sbci	r17, 0xFF	; 255
 ce4:	06 c0       	rjmp	.+12     	; 0xcf2 <vfprintf+0x29c>
 ce6:	60 81       	ld	r22, Z
 ce8:	71 81       	ldd	r23, Z+1	; 0x01
 cea:	80 e0       	ldi	r24, 0x00	; 0
 cec:	90 e0       	ldi	r25, 0x00	; 0
 cee:	0e 5f       	subi	r16, 0xFE	; 254
 cf0:	1f 4f       	sbci	r17, 0xFF	; 255
 cf2:	a4 01       	movw	r20, r8
 cf4:	e6 d0       	rcall	.+460    	; 0xec2 <__ultoa_invert>
 cf6:	a8 2e       	mov	r10, r24
 cf8:	a8 18       	sub	r10, r8
 cfa:	fb 2d       	mov	r31, r11
 cfc:	ff 77       	andi	r31, 0x7F	; 127
 cfe:	bf 2e       	mov	r11, r31
 d00:	b6 fe       	sbrs	r11, 6
 d02:	0b c0       	rjmp	.+22     	; 0xd1a <vfprintf+0x2c4>
 d04:	2b 2d       	mov	r18, r11
 d06:	2e 7f       	andi	r18, 0xFE	; 254
 d08:	a5 14       	cp	r10, r5
 d0a:	50 f4       	brcc	.+20     	; 0xd20 <vfprintf+0x2ca>
 d0c:	b4 fe       	sbrs	r11, 4
 d0e:	0a c0       	rjmp	.+20     	; 0xd24 <vfprintf+0x2ce>
 d10:	b2 fc       	sbrc	r11, 2
 d12:	08 c0       	rjmp	.+16     	; 0xd24 <vfprintf+0x2ce>
 d14:	2b 2d       	mov	r18, r11
 d16:	2e 7e       	andi	r18, 0xEE	; 238
 d18:	05 c0       	rjmp	.+10     	; 0xd24 <vfprintf+0x2ce>
 d1a:	7a 2c       	mov	r7, r10
 d1c:	2b 2d       	mov	r18, r11
 d1e:	03 c0       	rjmp	.+6      	; 0xd26 <vfprintf+0x2d0>
 d20:	7a 2c       	mov	r7, r10
 d22:	01 c0       	rjmp	.+2      	; 0xd26 <vfprintf+0x2d0>
 d24:	75 2c       	mov	r7, r5
 d26:	24 ff       	sbrs	r18, 4
 d28:	0d c0       	rjmp	.+26     	; 0xd44 <vfprintf+0x2ee>
 d2a:	fe 01       	movw	r30, r28
 d2c:	ea 0d       	add	r30, r10
 d2e:	f1 1d       	adc	r31, r1
 d30:	80 81       	ld	r24, Z
 d32:	80 33       	cpi	r24, 0x30	; 48
 d34:	11 f4       	brne	.+4      	; 0xd3a <vfprintf+0x2e4>
 d36:	29 7e       	andi	r18, 0xE9	; 233
 d38:	09 c0       	rjmp	.+18     	; 0xd4c <vfprintf+0x2f6>
 d3a:	22 ff       	sbrs	r18, 2
 d3c:	06 c0       	rjmp	.+12     	; 0xd4a <vfprintf+0x2f4>
 d3e:	73 94       	inc	r7
 d40:	73 94       	inc	r7
 d42:	04 c0       	rjmp	.+8      	; 0xd4c <vfprintf+0x2f6>
 d44:	82 2f       	mov	r24, r18
 d46:	86 78       	andi	r24, 0x86	; 134
 d48:	09 f0       	breq	.+2      	; 0xd4c <vfprintf+0x2f6>
 d4a:	73 94       	inc	r7
 d4c:	23 fd       	sbrc	r18, 3
 d4e:	12 c0       	rjmp	.+36     	; 0xd74 <vfprintf+0x31e>
 d50:	20 ff       	sbrs	r18, 0
 d52:	06 c0       	rjmp	.+12     	; 0xd60 <vfprintf+0x30a>
 d54:	5a 2c       	mov	r5, r10
 d56:	73 14       	cp	r7, r3
 d58:	18 f4       	brcc	.+6      	; 0xd60 <vfprintf+0x30a>
 d5a:	53 0c       	add	r5, r3
 d5c:	57 18       	sub	r5, r7
 d5e:	73 2c       	mov	r7, r3
 d60:	73 14       	cp	r7, r3
 d62:	60 f4       	brcc	.+24     	; 0xd7c <vfprintf+0x326>
 d64:	b7 01       	movw	r22, r14
 d66:	80 e2       	ldi	r24, 0x20	; 32
 d68:	90 e0       	ldi	r25, 0x00	; 0
 d6a:	2c 87       	std	Y+12, r18	; 0x0c
 d6c:	78 d0       	rcall	.+240    	; 0xe5e <fputc>
 d6e:	73 94       	inc	r7
 d70:	2c 85       	ldd	r18, Y+12	; 0x0c
 d72:	f6 cf       	rjmp	.-20     	; 0xd60 <vfprintf+0x30a>
 d74:	73 14       	cp	r7, r3
 d76:	10 f4       	brcc	.+4      	; 0xd7c <vfprintf+0x326>
 d78:	37 18       	sub	r3, r7
 d7a:	01 c0       	rjmp	.+2      	; 0xd7e <vfprintf+0x328>
 d7c:	31 2c       	mov	r3, r1
 d7e:	24 ff       	sbrs	r18, 4
 d80:	11 c0       	rjmp	.+34     	; 0xda4 <vfprintf+0x34e>
 d82:	b7 01       	movw	r22, r14
 d84:	80 e3       	ldi	r24, 0x30	; 48
 d86:	90 e0       	ldi	r25, 0x00	; 0
 d88:	2c 87       	std	Y+12, r18	; 0x0c
 d8a:	69 d0       	rcall	.+210    	; 0xe5e <fputc>
 d8c:	2c 85       	ldd	r18, Y+12	; 0x0c
 d8e:	22 ff       	sbrs	r18, 2
 d90:	16 c0       	rjmp	.+44     	; 0xdbe <vfprintf+0x368>
 d92:	21 ff       	sbrs	r18, 1
 d94:	03 c0       	rjmp	.+6      	; 0xd9c <vfprintf+0x346>
 d96:	88 e5       	ldi	r24, 0x58	; 88
 d98:	90 e0       	ldi	r25, 0x00	; 0
 d9a:	02 c0       	rjmp	.+4      	; 0xda0 <vfprintf+0x34a>
 d9c:	88 e7       	ldi	r24, 0x78	; 120
 d9e:	90 e0       	ldi	r25, 0x00	; 0
 da0:	b7 01       	movw	r22, r14
 da2:	0c c0       	rjmp	.+24     	; 0xdbc <vfprintf+0x366>
 da4:	82 2f       	mov	r24, r18
 da6:	86 78       	andi	r24, 0x86	; 134
 da8:	51 f0       	breq	.+20     	; 0xdbe <vfprintf+0x368>
 daa:	21 fd       	sbrc	r18, 1
 dac:	02 c0       	rjmp	.+4      	; 0xdb2 <vfprintf+0x35c>
 dae:	80 e2       	ldi	r24, 0x20	; 32
 db0:	01 c0       	rjmp	.+2      	; 0xdb4 <vfprintf+0x35e>
 db2:	8b e2       	ldi	r24, 0x2B	; 43
 db4:	27 fd       	sbrc	r18, 7
 db6:	8d e2       	ldi	r24, 0x2D	; 45
 db8:	b7 01       	movw	r22, r14
 dba:	90 e0       	ldi	r25, 0x00	; 0
 dbc:	50 d0       	rcall	.+160    	; 0xe5e <fputc>
 dbe:	a5 14       	cp	r10, r5
 dc0:	30 f4       	brcc	.+12     	; 0xdce <vfprintf+0x378>
 dc2:	b7 01       	movw	r22, r14
 dc4:	80 e3       	ldi	r24, 0x30	; 48
 dc6:	90 e0       	ldi	r25, 0x00	; 0
 dc8:	4a d0       	rcall	.+148    	; 0xe5e <fputc>
 dca:	5a 94       	dec	r5
 dcc:	f8 cf       	rjmp	.-16     	; 0xdbe <vfprintf+0x368>
 dce:	aa 94       	dec	r10
 dd0:	f4 01       	movw	r30, r8
 dd2:	ea 0d       	add	r30, r10
 dd4:	f1 1d       	adc	r31, r1
 dd6:	80 81       	ld	r24, Z
 dd8:	b7 01       	movw	r22, r14
 dda:	90 e0       	ldi	r25, 0x00	; 0
 ddc:	40 d0       	rcall	.+128    	; 0xe5e <fputc>
 dde:	a1 10       	cpse	r10, r1
 de0:	f6 cf       	rjmp	.-20     	; 0xdce <vfprintf+0x378>
 de2:	33 20       	and	r3, r3
 de4:	09 f4       	brne	.+2      	; 0xde8 <vfprintf+0x392>
 de6:	5d ce       	rjmp	.-838    	; 0xaa2 <vfprintf+0x4c>
 de8:	b7 01       	movw	r22, r14
 dea:	80 e2       	ldi	r24, 0x20	; 32
 dec:	90 e0       	ldi	r25, 0x00	; 0
 dee:	37 d0       	rcall	.+110    	; 0xe5e <fputc>
 df0:	3a 94       	dec	r3
 df2:	f7 cf       	rjmp	.-18     	; 0xde2 <vfprintf+0x38c>
 df4:	f7 01       	movw	r30, r14
 df6:	86 81       	ldd	r24, Z+6	; 0x06
 df8:	97 81       	ldd	r25, Z+7	; 0x07
 dfa:	02 c0       	rjmp	.+4      	; 0xe00 <vfprintf+0x3aa>
 dfc:	8f ef       	ldi	r24, 0xFF	; 255
 dfe:	9f ef       	ldi	r25, 0xFF	; 255
 e00:	2c 96       	adiw	r28, 0x0c	; 12
 e02:	0f b6       	in	r0, 0x3f	; 63
 e04:	f8 94       	cli
 e06:	de bf       	out	0x3e, r29	; 62
 e08:	0f be       	out	0x3f, r0	; 63
 e0a:	cd bf       	out	0x3d, r28	; 61
 e0c:	df 91       	pop	r29
 e0e:	cf 91       	pop	r28
 e10:	1f 91       	pop	r17
 e12:	0f 91       	pop	r16
 e14:	ff 90       	pop	r15
 e16:	ef 90       	pop	r14
 e18:	df 90       	pop	r13
 e1a:	cf 90       	pop	r12
 e1c:	bf 90       	pop	r11
 e1e:	af 90       	pop	r10
 e20:	9f 90       	pop	r9
 e22:	8f 90       	pop	r8
 e24:	7f 90       	pop	r7
 e26:	6f 90       	pop	r6
 e28:	5f 90       	pop	r5
 e2a:	4f 90       	pop	r4
 e2c:	3f 90       	pop	r3
 e2e:	2f 90       	pop	r2
 e30:	08 95       	ret

00000e32 <strnlen_P>:
 e32:	fc 01       	movw	r30, r24
 e34:	05 90       	lpm	r0, Z+
 e36:	61 50       	subi	r22, 0x01	; 1
 e38:	70 40       	sbci	r23, 0x00	; 0
 e3a:	01 10       	cpse	r0, r1
 e3c:	d8 f7       	brcc	.-10     	; 0xe34 <strnlen_P+0x2>
 e3e:	80 95       	com	r24
 e40:	90 95       	com	r25
 e42:	8e 0f       	add	r24, r30
 e44:	9f 1f       	adc	r25, r31
 e46:	08 95       	ret

00000e48 <strnlen>:
 e48:	fc 01       	movw	r30, r24
 e4a:	61 50       	subi	r22, 0x01	; 1
 e4c:	70 40       	sbci	r23, 0x00	; 0
 e4e:	01 90       	ld	r0, Z+
 e50:	01 10       	cpse	r0, r1
 e52:	d8 f7       	brcc	.-10     	; 0xe4a <strnlen+0x2>
 e54:	80 95       	com	r24
 e56:	90 95       	com	r25
 e58:	8e 0f       	add	r24, r30
 e5a:	9f 1f       	adc	r25, r31
 e5c:	08 95       	ret

00000e5e <fputc>:
 e5e:	0f 93       	push	r16
 e60:	1f 93       	push	r17
 e62:	cf 93       	push	r28
 e64:	df 93       	push	r29
 e66:	18 2f       	mov	r17, r24
 e68:	09 2f       	mov	r16, r25
 e6a:	eb 01       	movw	r28, r22
 e6c:	8b 81       	ldd	r24, Y+3	; 0x03
 e6e:	81 fd       	sbrc	r24, 1
 e70:	03 c0       	rjmp	.+6      	; 0xe78 <fputc+0x1a>
 e72:	8f ef       	ldi	r24, 0xFF	; 255
 e74:	9f ef       	ldi	r25, 0xFF	; 255
 e76:	20 c0       	rjmp	.+64     	; 0xeb8 <fputc+0x5a>
 e78:	82 ff       	sbrs	r24, 2
 e7a:	10 c0       	rjmp	.+32     	; 0xe9c <fputc+0x3e>
 e7c:	4e 81       	ldd	r20, Y+6	; 0x06
 e7e:	5f 81       	ldd	r21, Y+7	; 0x07
 e80:	2c 81       	ldd	r18, Y+4	; 0x04
 e82:	3d 81       	ldd	r19, Y+5	; 0x05
 e84:	42 17       	cp	r20, r18
 e86:	53 07       	cpc	r21, r19
 e88:	7c f4       	brge	.+30     	; 0xea8 <fputc+0x4a>
 e8a:	e8 81       	ld	r30, Y
 e8c:	f9 81       	ldd	r31, Y+1	; 0x01
 e8e:	9f 01       	movw	r18, r30
 e90:	2f 5f       	subi	r18, 0xFF	; 255
 e92:	3f 4f       	sbci	r19, 0xFF	; 255
 e94:	39 83       	std	Y+1, r19	; 0x01
 e96:	28 83       	st	Y, r18
 e98:	10 83       	st	Z, r17
 e9a:	06 c0       	rjmp	.+12     	; 0xea8 <fputc+0x4a>
 e9c:	e8 85       	ldd	r30, Y+8	; 0x08
 e9e:	f9 85       	ldd	r31, Y+9	; 0x09
 ea0:	81 2f       	mov	r24, r17
 ea2:	19 95       	eicall
 ea4:	89 2b       	or	r24, r25
 ea6:	29 f7       	brne	.-54     	; 0xe72 <fputc+0x14>
 ea8:	2e 81       	ldd	r18, Y+6	; 0x06
 eaa:	3f 81       	ldd	r19, Y+7	; 0x07
 eac:	2f 5f       	subi	r18, 0xFF	; 255
 eae:	3f 4f       	sbci	r19, 0xFF	; 255
 eb0:	3f 83       	std	Y+7, r19	; 0x07
 eb2:	2e 83       	std	Y+6, r18	; 0x06
 eb4:	81 2f       	mov	r24, r17
 eb6:	90 2f       	mov	r25, r16
 eb8:	df 91       	pop	r29
 eba:	cf 91       	pop	r28
 ebc:	1f 91       	pop	r17
 ebe:	0f 91       	pop	r16
 ec0:	08 95       	ret

00000ec2 <__ultoa_invert>:
 ec2:	fa 01       	movw	r30, r20
 ec4:	aa 27       	eor	r26, r26
 ec6:	28 30       	cpi	r18, 0x08	; 8
 ec8:	51 f1       	breq	.+84     	; 0xf1e <__ultoa_invert+0x5c>
 eca:	20 31       	cpi	r18, 0x10	; 16
 ecc:	81 f1       	breq	.+96     	; 0xf2e <__ultoa_invert+0x6c>
 ece:	e8 94       	clt
 ed0:	6f 93       	push	r22
 ed2:	6e 7f       	andi	r22, 0xFE	; 254
 ed4:	6e 5f       	subi	r22, 0xFE	; 254
 ed6:	7f 4f       	sbci	r23, 0xFF	; 255
 ed8:	8f 4f       	sbci	r24, 0xFF	; 255
 eda:	9f 4f       	sbci	r25, 0xFF	; 255
 edc:	af 4f       	sbci	r26, 0xFF	; 255
 ede:	b1 e0       	ldi	r27, 0x01	; 1
 ee0:	3e d0       	rcall	.+124    	; 0xf5e <__ultoa_invert+0x9c>
 ee2:	b4 e0       	ldi	r27, 0x04	; 4
 ee4:	3c d0       	rcall	.+120    	; 0xf5e <__ultoa_invert+0x9c>
 ee6:	67 0f       	add	r22, r23
 ee8:	78 1f       	adc	r23, r24
 eea:	89 1f       	adc	r24, r25
 eec:	9a 1f       	adc	r25, r26
 eee:	a1 1d       	adc	r26, r1
 ef0:	68 0f       	add	r22, r24
 ef2:	79 1f       	adc	r23, r25
 ef4:	8a 1f       	adc	r24, r26
 ef6:	91 1d       	adc	r25, r1
 ef8:	a1 1d       	adc	r26, r1
 efa:	6a 0f       	add	r22, r26
 efc:	71 1d       	adc	r23, r1
 efe:	81 1d       	adc	r24, r1
 f00:	91 1d       	adc	r25, r1
 f02:	a1 1d       	adc	r26, r1
 f04:	20 d0       	rcall	.+64     	; 0xf46 <__ultoa_invert+0x84>
 f06:	09 f4       	brne	.+2      	; 0xf0a <__ultoa_invert+0x48>
 f08:	68 94       	set
 f0a:	3f 91       	pop	r19
 f0c:	2a e0       	ldi	r18, 0x0A	; 10
 f0e:	26 9f       	mul	r18, r22
 f10:	11 24       	eor	r1, r1
 f12:	30 19       	sub	r19, r0
 f14:	30 5d       	subi	r19, 0xD0	; 208
 f16:	31 93       	st	Z+, r19
 f18:	de f6       	brtc	.-74     	; 0xed0 <__ultoa_invert+0xe>
 f1a:	cf 01       	movw	r24, r30
 f1c:	08 95       	ret
 f1e:	46 2f       	mov	r20, r22
 f20:	47 70       	andi	r20, 0x07	; 7
 f22:	40 5d       	subi	r20, 0xD0	; 208
 f24:	41 93       	st	Z+, r20
 f26:	b3 e0       	ldi	r27, 0x03	; 3
 f28:	0f d0       	rcall	.+30     	; 0xf48 <__ultoa_invert+0x86>
 f2a:	c9 f7       	brne	.-14     	; 0xf1e <__ultoa_invert+0x5c>
 f2c:	f6 cf       	rjmp	.-20     	; 0xf1a <__ultoa_invert+0x58>
 f2e:	46 2f       	mov	r20, r22
 f30:	4f 70       	andi	r20, 0x0F	; 15
 f32:	40 5d       	subi	r20, 0xD0	; 208
 f34:	4a 33       	cpi	r20, 0x3A	; 58
 f36:	18 f0       	brcs	.+6      	; 0xf3e <__ultoa_invert+0x7c>
 f38:	49 5d       	subi	r20, 0xD9	; 217
 f3a:	31 fd       	sbrc	r19, 1
 f3c:	40 52       	subi	r20, 0x20	; 32
 f3e:	41 93       	st	Z+, r20
 f40:	02 d0       	rcall	.+4      	; 0xf46 <__ultoa_invert+0x84>
 f42:	a9 f7       	brne	.-22     	; 0xf2e <__ultoa_invert+0x6c>
 f44:	ea cf       	rjmp	.-44     	; 0xf1a <__ultoa_invert+0x58>
 f46:	b4 e0       	ldi	r27, 0x04	; 4
 f48:	a6 95       	lsr	r26
 f4a:	97 95       	ror	r25
 f4c:	87 95       	ror	r24
 f4e:	77 95       	ror	r23
 f50:	67 95       	ror	r22
 f52:	ba 95       	dec	r27
 f54:	c9 f7       	brne	.-14     	; 0xf48 <__ultoa_invert+0x86>
 f56:	00 97       	sbiw	r24, 0x00	; 0
 f58:	61 05       	cpc	r22, r1
 f5a:	71 05       	cpc	r23, r1
 f5c:	08 95       	ret
 f5e:	9b 01       	movw	r18, r22
 f60:	ac 01       	movw	r20, r24
 f62:	0a 2e       	mov	r0, r26
 f64:	06 94       	lsr	r0
 f66:	57 95       	ror	r21
 f68:	47 95       	ror	r20
 f6a:	37 95       	ror	r19
 f6c:	27 95       	ror	r18
 f6e:	ba 95       	dec	r27
 f70:	c9 f7       	brne	.-14     	; 0xf64 <__ultoa_invert+0xa2>
 f72:	62 0f       	add	r22, r18
 f74:	73 1f       	adc	r23, r19
 f76:	84 1f       	adc	r24, r20
 f78:	95 1f       	adc	r25, r21
 f7a:	a0 1d       	adc	r26, r0
 f7c:	08 95       	ret

00000f7e <_exit>:
 f7e:	f8 94       	cli

00000f80 <__stop_program>:
 f80:	ff cf       	rjmp	.-2      	; 0xf80 <__stop_program>
