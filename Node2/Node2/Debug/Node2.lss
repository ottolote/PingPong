
Node2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f6  00800200  00000f0a  00000f9e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f0a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000037  008002f6  008002f6  00001094  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001094  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000260  00000000  00000000  000010f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000018f9  00000000  00000000  00001350  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ce6  00000000  00000000  00002c49  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000012e4  00000000  00000000  0000392f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000057c  00000000  00000000  00004c14  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000063e  00000000  00000000  00005190  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b3e  00000000  00000000  000057ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001c0  00000000  00000000  0000630c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	c2 c0       	rjmp	.+388    	; 0x186 <__ctors_end>
   2:	00 00       	nop
   4:	45 c2       	rjmp	.+1162   	; 0x490 <__vector_1>
   6:	00 00       	nop
   8:	dd c0       	rjmp	.+442    	; 0x1c4 <__bad_interrupt>
   a:	00 00       	nop
   c:	db c0       	rjmp	.+438    	; 0x1c4 <__bad_interrupt>
   e:	00 00       	nop
  10:	d9 c0       	rjmp	.+434    	; 0x1c4 <__bad_interrupt>
  12:	00 00       	nop
  14:	d7 c0       	rjmp	.+430    	; 0x1c4 <__bad_interrupt>
  16:	00 00       	nop
  18:	d5 c0       	rjmp	.+426    	; 0x1c4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	d3 c0       	rjmp	.+422    	; 0x1c4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	d1 c0       	rjmp	.+418    	; 0x1c4 <__bad_interrupt>
  22:	00 00       	nop
  24:	cf c0       	rjmp	.+414    	; 0x1c4 <__bad_interrupt>
  26:	00 00       	nop
  28:	cd c0       	rjmp	.+410    	; 0x1c4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	cb c0       	rjmp	.+406    	; 0x1c4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	c9 c0       	rjmp	.+402    	; 0x1c4 <__bad_interrupt>
  32:	00 00       	nop
  34:	c7 c0       	rjmp	.+398    	; 0x1c4 <__bad_interrupt>
  36:	00 00       	nop
  38:	c5 c0       	rjmp	.+394    	; 0x1c4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	c3 c0       	rjmp	.+390    	; 0x1c4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	c1 c0       	rjmp	.+386    	; 0x1c4 <__bad_interrupt>
  42:	00 00       	nop
  44:	bf c0       	rjmp	.+382    	; 0x1c4 <__bad_interrupt>
  46:	00 00       	nop
  48:	bd c0       	rjmp	.+378    	; 0x1c4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	bb c0       	rjmp	.+374    	; 0x1c4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	b9 c0       	rjmp	.+370    	; 0x1c4 <__bad_interrupt>
  52:	00 00       	nop
  54:	b7 c0       	rjmp	.+366    	; 0x1c4 <__bad_interrupt>
  56:	00 00       	nop
  58:	b5 c0       	rjmp	.+362    	; 0x1c4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	b3 c0       	rjmp	.+358    	; 0x1c4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	b1 c0       	rjmp	.+354    	; 0x1c4 <__bad_interrupt>
  62:	00 00       	nop
  64:	af c0       	rjmp	.+350    	; 0x1c4 <__bad_interrupt>
  66:	00 00       	nop
  68:	ad c0       	rjmp	.+346    	; 0x1c4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	ab c0       	rjmp	.+342    	; 0x1c4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	a9 c0       	rjmp	.+338    	; 0x1c4 <__bad_interrupt>
  72:	00 00       	nop
  74:	a7 c0       	rjmp	.+334    	; 0x1c4 <__bad_interrupt>
  76:	00 00       	nop
  78:	a5 c0       	rjmp	.+330    	; 0x1c4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	a3 c0       	rjmp	.+326    	; 0x1c4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	a1 c0       	rjmp	.+322    	; 0x1c4 <__bad_interrupt>
  82:	00 00       	nop
  84:	9f c0       	rjmp	.+318    	; 0x1c4 <__bad_interrupt>
  86:	00 00       	nop
  88:	9d c0       	rjmp	.+314    	; 0x1c4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	9b c0       	rjmp	.+310    	; 0x1c4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	99 c0       	rjmp	.+306    	; 0x1c4 <__bad_interrupt>
  92:	00 00       	nop
  94:	97 c0       	rjmp	.+302    	; 0x1c4 <__bad_interrupt>
  96:	00 00       	nop
  98:	95 c0       	rjmp	.+298    	; 0x1c4 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	b2 c3       	rjmp	.+1892   	; 0x802 <__vector_39>
  9e:	00 00       	nop
  a0:	91 c0       	rjmp	.+290    	; 0x1c4 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	8f c0       	rjmp	.+286    	; 0x1c4 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	8d c0       	rjmp	.+282    	; 0x1c4 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	8b c0       	rjmp	.+278    	; 0x1c4 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	89 c0       	rjmp	.+274    	; 0x1c4 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	87 c0       	rjmp	.+270    	; 0x1c4 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	85 c0       	rjmp	.+266    	; 0x1c4 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	83 c0       	rjmp	.+262    	; 0x1c4 <__bad_interrupt>
  be:	00 00       	nop
  c0:	81 c0       	rjmp	.+258    	; 0x1c4 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	7f c0       	rjmp	.+254    	; 0x1c4 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	7d c0       	rjmp	.+250    	; 0x1c4 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	7b c0       	rjmp	.+246    	; 0x1c4 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	79 c0       	rjmp	.+242    	; 0x1c4 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	77 c0       	rjmp	.+238    	; 0x1c4 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	75 c0       	rjmp	.+234    	; 0x1c4 <__bad_interrupt>
  da:	00 00       	nop
  dc:	73 c0       	rjmp	.+230    	; 0x1c4 <__bad_interrupt>
  de:	00 00       	nop
  e0:	71 c0       	rjmp	.+226    	; 0x1c4 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	1c 04       	cpc	r1, r12
  e6:	6e 04       	cpc	r6, r14
  e8:	6e 04       	cpc	r6, r14
  ea:	6e 04       	cpc	r6, r14
  ec:	6e 04       	cpc	r6, r14
  ee:	6e 04       	cpc	r6, r14
  f0:	6e 04       	cpc	r6, r14
  f2:	6e 04       	cpc	r6, r14
  f4:	1c 04       	cpc	r1, r12
  f6:	6e 04       	cpc	r6, r14
  f8:	6e 04       	cpc	r6, r14
  fa:	6e 04       	cpc	r6, r14
  fc:	6e 04       	cpc	r6, r14
  fe:	6e 04       	cpc	r6, r14
 100:	6e 04       	cpc	r6, r14
 102:	6e 04       	cpc	r6, r14
 104:	1e 04       	cpc	r1, r14
 106:	6e 04       	cpc	r6, r14
 108:	6e 04       	cpc	r6, r14
 10a:	6e 04       	cpc	r6, r14
 10c:	6e 04       	cpc	r6, r14
 10e:	6e 04       	cpc	r6, r14
 110:	6e 04       	cpc	r6, r14
 112:	6e 04       	cpc	r6, r14
 114:	6e 04       	cpc	r6, r14
 116:	6e 04       	cpc	r6, r14
 118:	6e 04       	cpc	r6, r14
 11a:	6e 04       	cpc	r6, r14
 11c:	6e 04       	cpc	r6, r14
 11e:	6e 04       	cpc	r6, r14
 120:	6e 04       	cpc	r6, r14
 122:	6e 04       	cpc	r6, r14
 124:	1e 04       	cpc	r1, r14
 126:	6e 04       	cpc	r6, r14
 128:	6e 04       	cpc	r6, r14
 12a:	6e 04       	cpc	r6, r14
 12c:	6e 04       	cpc	r6, r14
 12e:	6e 04       	cpc	r6, r14
 130:	6e 04       	cpc	r6, r14
 132:	6e 04       	cpc	r6, r14
 134:	6e 04       	cpc	r6, r14
 136:	6e 04       	cpc	r6, r14
 138:	6e 04       	cpc	r6, r14
 13a:	6e 04       	cpc	r6, r14
 13c:	6e 04       	cpc	r6, r14
 13e:	6e 04       	cpc	r6, r14
 140:	6e 04       	cpc	r6, r14
 142:	6e 04       	cpc	r6, r14
 144:	6a 04       	cpc	r6, r10
 146:	6e 04       	cpc	r6, r14
 148:	6e 04       	cpc	r6, r14
 14a:	6e 04       	cpc	r6, r14
 14c:	6e 04       	cpc	r6, r14
 14e:	6e 04       	cpc	r6, r14
 150:	6e 04       	cpc	r6, r14
 152:	6e 04       	cpc	r6, r14
 154:	47 04       	cpc	r4, r7
 156:	6e 04       	cpc	r6, r14
 158:	6e 04       	cpc	r6, r14
 15a:	6e 04       	cpc	r6, r14
 15c:	6e 04       	cpc	r6, r14
 15e:	6e 04       	cpc	r6, r14
 160:	6e 04       	cpc	r6, r14
 162:	6e 04       	cpc	r6, r14
 164:	6e 04       	cpc	r6, r14
 166:	6e 04       	cpc	r6, r14
 168:	6e 04       	cpc	r6, r14
 16a:	6e 04       	cpc	r6, r14
 16c:	6e 04       	cpc	r6, r14
 16e:	6e 04       	cpc	r6, r14
 170:	6e 04       	cpc	r6, r14
 172:	6e 04       	cpc	r6, r14
 174:	3b 04       	cpc	r3, r11
 176:	6e 04       	cpc	r6, r14
 178:	6e 04       	cpc	r6, r14
 17a:	6e 04       	cpc	r6, r14
 17c:	6e 04       	cpc	r6, r14
 17e:	6e 04       	cpc	r6, r14
 180:	6e 04       	cpc	r6, r14
 182:	6e 04       	cpc	r6, r14
 184:	59 04       	cpc	r5, r9

00000186 <__ctors_end>:
 186:	11 24       	eor	r1, r1
 188:	1f be       	out	0x3f, r1	; 63
 18a:	cf ef       	ldi	r28, 0xFF	; 255
 18c:	d1 e2       	ldi	r29, 0x21	; 33
 18e:	de bf       	out	0x3e, r29	; 62
 190:	cd bf       	out	0x3d, r28	; 61
 192:	00 e0       	ldi	r16, 0x00	; 0
 194:	0c bf       	out	0x3c, r16	; 60

00000196 <__do_copy_data>:
 196:	12 e0       	ldi	r17, 0x02	; 2
 198:	a0 e0       	ldi	r26, 0x00	; 0
 19a:	b2 e0       	ldi	r27, 0x02	; 2
 19c:	ea e0       	ldi	r30, 0x0A	; 10
 19e:	ff e0       	ldi	r31, 0x0F	; 15
 1a0:	00 e0       	ldi	r16, 0x00	; 0
 1a2:	0b bf       	out	0x3b, r16	; 59
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <__do_copy_data+0x14>
 1a6:	07 90       	elpm	r0, Z+
 1a8:	0d 92       	st	X+, r0
 1aa:	a6 3f       	cpi	r26, 0xF6	; 246
 1ac:	b1 07       	cpc	r27, r17
 1ae:	d9 f7       	brne	.-10     	; 0x1a6 <__do_copy_data+0x10>

000001b0 <__do_clear_bss>:
 1b0:	23 e0       	ldi	r18, 0x03	; 3
 1b2:	a6 ef       	ldi	r26, 0xF6	; 246
 1b4:	b2 e0       	ldi	r27, 0x02	; 2
 1b6:	01 c0       	rjmp	.+2      	; 0x1ba <.do_clear_bss_start>

000001b8 <.do_clear_bss_loop>:
 1b8:	1d 92       	st	X+, r1

000001ba <.do_clear_bss_start>:
 1ba:	ad 32       	cpi	r26, 0x2D	; 45
 1bc:	b2 07       	cpc	r27, r18
 1be:	e1 f7       	brne	.-8      	; 0x1b8 <.do_clear_bss_loop>
 1c0:	f5 d2       	rcall	.+1514   	; 0x7ac <main>
 1c2:	a1 c6       	rjmp	.+3394   	; 0xf06 <_exit>

000001c4 <__bad_interrupt>:
 1c4:	1d cf       	rjmp	.-454    	; 0x0 <__vectors>

000001c6 <adc_init>:
#include <util/delay.h>
#include "adc_driver.h"


void adc_init(){
	ADCSRA	|= (1 << ADEN) | (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);
 1c6:	ea e7       	ldi	r30, 0x7A	; 122
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	80 81       	ld	r24, Z
 1cc:	87 68       	ori	r24, 0x87	; 135
 1ce:	80 83       	st	Z, r24
	ADMUX	|= (1<<REFS0);
 1d0:	ec e7       	ldi	r30, 0x7C	; 124
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	80 64       	ori	r24, 0x40	; 64
 1d8:	80 83       	st	Z, r24
	ADMUX	&= ~(1<<REFS1); 
 1da:	80 81       	ld	r24, Z
 1dc:	8f 77       	andi	r24, 0x7F	; 127
 1de:	80 83       	st	Z, r24
 1e0:	08 95       	ret

000001e2 <adc_read>:
}

uint16_t adc_read(uint8_t channel){
	ADMUX	|= ((1<<channel) & 0x03);
 1e2:	ec e7       	ldi	r30, 0x7C	; 124
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	90 81       	ld	r25, Z
 1e8:	21 e0       	ldi	r18, 0x01	; 1
 1ea:	30 e0       	ldi	r19, 0x00	; 0
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <adc_read+0x10>
 1ee:	22 0f       	add	r18, r18
 1f0:	33 1f       	adc	r19, r19
 1f2:	8a 95       	dec	r24
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <adc_read+0xc>
 1f6:	23 70       	andi	r18, 0x03	; 3
 1f8:	92 2b       	or	r25, r18
 1fa:	90 83       	st	Z, r25
	ADCSRA	|= (1 << ADSC);
 1fc:	ea e7       	ldi	r30, 0x7A	; 122
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 81       	ld	r24, Z
 202:	80 64       	ori	r24, 0x40	; 64
 204:	80 83       	st	Z, r24

	while((ADCSRA & (1<<ADSC))){ ; }
 206:	80 81       	ld	r24, Z
 208:	86 fd       	sbrc	r24, 6
 20a:	fd cf       	rjmp	.-6      	; 0x206 <adc_read+0x24>

	return ADC;
 20c:	80 91 78 00 	lds	r24, 0x0078
 210:	90 91 79 00 	lds	r25, 0x0079
}
 214:	08 95       	ret

00000216 <can_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 216:	d7 d1       	rcall	.+942    	; 0x5c6 <mcp2515_init>
 218:	8f e0       	ldi	r24, 0x0F	; 15
 21a:	c8 d1       	rcall	.+912    	; 0x5ac <mcp2515_read>
 21c:	1f 92       	push	r1
 21e:	8f 93       	push	r24
 220:	8f e0       	ldi	r24, 0x0F	; 15
 222:	92 e0       	ldi	r25, 0x02	; 2
 224:	9f 93       	push	r25
 226:	8f 93       	push	r24
 228:	9c d3       	rcall	.+1848   	; 0x962 <printf>
 22a:	4f ef       	ldi	r20, 0xFF	; 255
 22c:	60 e6       	ldi	r22, 0x60	; 96
 22e:	80 e6       	ldi	r24, 0x60	; 96
 230:	a4 d1       	rcall	.+840    	; 0x57a <mcp2515_bit_modify>
 232:	40 e0       	ldi	r20, 0x00	; 0
 234:	64 e0       	ldi	r22, 0x04	; 4
 236:	80 e6       	ldi	r24, 0x60	; 96
 238:	a0 d1       	rcall	.+832    	; 0x57a <mcp2515_bit_modify>
 23a:	4f ef       	ldi	r20, 0xFF	; 255
 23c:	61 e0       	ldi	r22, 0x01	; 1
 23e:	8b e2       	ldi	r24, 0x2B	; 43
 240:	9c d1       	rcall	.+824    	; 0x57a <mcp2515_bit_modify>
 242:	40 e0       	ldi	r20, 0x00	; 0
 244:	60 ee       	ldi	r22, 0xE0	; 224
 246:	8f e0       	ldi	r24, 0x0F	; 15
 248:	98 d1       	rcall	.+816    	; 0x57a <mcp2515_bit_modify>
 24a:	0f 90       	pop	r0
 24c:	0f 90       	pop	r0
 24e:	0f 90       	pop	r0
 250:	0f 90       	pop	r0
 252:	08 95       	ret

00000254 <can_transmit_complete>:
 254:	80 e3       	ldi	r24, 0x30	; 48
 256:	aa d1       	rcall	.+852    	; 0x5ac <mcp2515_read>
 258:	86 95       	lsr	r24
 25a:	86 95       	lsr	r24
 25c:	86 95       	lsr	r24
 25e:	91 e0       	ldi	r25, 0x01	; 1
 260:	89 27       	eor	r24, r25
 262:	81 70       	andi	r24, 0x01	; 1
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	08 95       	ret

00000268 <can_message_send>:
 268:	1f 93       	push	r17
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
 26e:	ec 01       	movw	r28, r24
 270:	f1 df       	rcall	.-30     	; 0x254 <can_transmit_complete>
 272:	89 2b       	or	r24, r25
 274:	e9 f3       	breq	.-6      	; 0x270 <can_message_send+0x8>
 276:	68 81       	ld	r22, Y
 278:	79 81       	ldd	r23, Y+1	; 0x01
 27a:	75 95       	asr	r23
 27c:	67 95       	ror	r22
 27e:	75 95       	asr	r23
 280:	67 95       	ror	r22
 282:	75 95       	asr	r23
 284:	67 95       	ror	r22
 286:	81 e3       	ldi	r24, 0x31	; 49
 288:	5c d1       	rcall	.+696    	; 0x542 <mcp2515_write>
 28a:	68 81       	ld	r22, Y
 28c:	79 81       	ldd	r23, Y+1	; 0x01
 28e:	66 0f       	add	r22, r22
 290:	77 1f       	adc	r23, r23
 292:	62 95       	swap	r22
 294:	72 95       	swap	r23
 296:	70 7f       	andi	r23, 0xF0	; 240
 298:	76 27       	eor	r23, r22
 29a:	60 7f       	andi	r22, 0xF0	; 240
 29c:	76 27       	eor	r23, r22
 29e:	82 e3       	ldi	r24, 0x32	; 50
 2a0:	50 d1       	rcall	.+672    	; 0x542 <mcp2515_write>
 2a2:	6a 81       	ldd	r22, Y+2	; 0x02
 2a4:	6f 70       	andi	r22, 0x0F	; 15
 2a6:	85 e3       	ldi	r24, 0x35	; 53
 2a8:	4c d1       	rcall	.+664    	; 0x542 <mcp2515_write>
 2aa:	8a 81       	ldd	r24, Y+2	; 0x02
 2ac:	88 23       	and	r24, r24
 2ae:	61 f0       	breq	.+24     	; 0x2c8 <can_message_send+0x60>
 2b0:	10 e0       	ldi	r17, 0x00	; 0
 2b2:	fe 01       	movw	r30, r28
 2b4:	e1 0f       	add	r30, r17
 2b6:	f1 1d       	adc	r31, r1
 2b8:	63 81       	ldd	r22, Z+3	; 0x03
 2ba:	86 e3       	ldi	r24, 0x36	; 54
 2bc:	81 0f       	add	r24, r17
 2be:	41 d1       	rcall	.+642    	; 0x542 <mcp2515_write>
 2c0:	1f 5f       	subi	r17, 0xFF	; 255
 2c2:	8a 81       	ldd	r24, Y+2	; 0x02
 2c4:	18 17       	cp	r17, r24
 2c6:	a8 f3       	brcs	.-22     	; 0x2b2 <can_message_send+0x4a>
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	4a d1       	rcall	.+660    	; 0x560 <mcp2515_request_to_send>
 2cc:	df 91       	pop	r29
 2ce:	cf 91       	pop	r28
 2d0:	1f 91       	pop	r17
 2d2:	08 95       	ret

000002d4 <can_data_receive>:
 2d4:	9f 92       	push	r9
 2d6:	af 92       	push	r10
 2d8:	bf 92       	push	r11
 2da:	cf 92       	push	r12
 2dc:	df 92       	push	r13
 2de:	ef 92       	push	r14
 2e0:	ff 92       	push	r15
 2e2:	0f 93       	push	r16
 2e4:	1f 93       	push	r17
 2e6:	cf 93       	push	r28
 2e8:	df 93       	push	r29
 2ea:	cd b7       	in	r28, 0x3d	; 61
 2ec:	de b7       	in	r29, 0x3e	; 62
 2ee:	2b 97       	sbiw	r28, 0x0b	; 11
 2f0:	0f b6       	in	r0, 0x3f	; 63
 2f2:	f8 94       	cli
 2f4:	de bf       	out	0x3e, r29	; 62
 2f6:	0f be       	out	0x3f, r0	; 63
 2f8:	cd bf       	out	0x3d, r28	; 61
 2fa:	7c 01       	movw	r14, r24
 2fc:	8c e2       	ldi	r24, 0x2C	; 44
 2fe:	56 d1       	rcall	.+684    	; 0x5ac <mcp2515_read>
 300:	80 ff       	sbrs	r24, 0
 302:	30 c0       	rjmp	.+96     	; 0x364 <can_data_receive+0x90>
 304:	81 e6       	ldi	r24, 0x61	; 97
 306:	52 d1       	rcall	.+676    	; 0x5ac <mcp2515_read>
 308:	c8 2e       	mov	r12, r24
 30a:	82 e6       	ldi	r24, 0x62	; 98
 30c:	4f d1       	rcall	.+670    	; 0x5ac <mcp2515_read>
 30e:	82 95       	swap	r24
 310:	86 95       	lsr	r24
 312:	87 70       	andi	r24, 0x07	; 7
 314:	d1 2c       	mov	r13, r1
 316:	cc 0c       	add	r12, r12
 318:	dd 1c       	adc	r13, r13
 31a:	cc 0c       	add	r12, r12
 31c:	dd 1c       	adc	r13, r13
 31e:	cc 0c       	add	r12, r12
 320:	dd 1c       	adc	r13, r13
 322:	c8 2a       	or	r12, r24
 324:	85 e6       	ldi	r24, 0x65	; 101
 326:	42 d1       	rcall	.+644    	; 0x5ac <mcp2515_read>
 328:	8f 70       	andi	r24, 0x0F	; 15
 32a:	98 2e       	mov	r9, r24
 32c:	a1 f0       	breq	.+40     	; 0x356 <can_data_receive+0x82>
 32e:	8e 01       	movw	r16, r28
 330:	0c 5f       	subi	r16, 0xFC	; 252
 332:	1f 4f       	sbci	r17, 0xFF	; 255
 334:	0f 2e       	mov	r0, r31
 336:	f6 e6       	ldi	r31, 0x66	; 102
 338:	af 2e       	mov	r10, r31
 33a:	f0 2d       	mov	r31, r0
 33c:	a8 0e       	add	r10, r24
 33e:	0f 2e       	mov	r0, r31
 340:	f6 e6       	ldi	r31, 0x66	; 102
 342:	bf 2e       	mov	r11, r31
 344:	f0 2d       	mov	r31, r0
 346:	8b 2d       	mov	r24, r11
 348:	31 d1       	rcall	.+610    	; 0x5ac <mcp2515_read>
 34a:	f8 01       	movw	r30, r16
 34c:	81 93       	st	Z+, r24
 34e:	8f 01       	movw	r16, r30
 350:	b3 94       	inc	r11
 352:	ba 10       	cpse	r11, r10
 354:	f8 cf       	rjmp	.-16     	; 0x346 <can_data_receive+0x72>
 356:	10 92 26 03 	sts	0x0326, r1
 35a:	40 e0       	ldi	r20, 0x00	; 0
 35c:	61 e0       	ldi	r22, 0x01	; 1
 35e:	8c e2       	ldi	r24, 0x2C	; 44
 360:	0c d1       	rcall	.+536    	; 0x57a <mcp2515_bit_modify>
 362:	03 c0       	rjmp	.+6      	; 0x36a <can_data_receive+0x96>
 364:	cc 24       	eor	r12, r12
 366:	ca 94       	dec	r12
 368:	dc 2c       	mov	r13, r12
 36a:	da 82       	std	Y+2, r13	; 0x02
 36c:	c9 82       	std	Y+1, r12	; 0x01
 36e:	9b 82       	std	Y+3, r9	; 0x03
 370:	8b e0       	ldi	r24, 0x0B	; 11
 372:	fe 01       	movw	r30, r28
 374:	31 96       	adiw	r30, 0x01	; 1
 376:	d7 01       	movw	r26, r14
 378:	01 90       	ld	r0, Z+
 37a:	0d 92       	st	X+, r0
 37c:	8a 95       	dec	r24
 37e:	e1 f7       	brne	.-8      	; 0x378 <can_data_receive+0xa4>
 380:	c7 01       	movw	r24, r14
 382:	2b 96       	adiw	r28, 0x0b	; 11
 384:	0f b6       	in	r0, 0x3f	; 63
 386:	f8 94       	cli
 388:	de bf       	out	0x3e, r29	; 62
 38a:	0f be       	out	0x3f, r0	; 63
 38c:	cd bf       	out	0x3d, r28	; 61
 38e:	df 91       	pop	r29
 390:	cf 91       	pop	r28
 392:	1f 91       	pop	r17
 394:	0f 91       	pop	r16
 396:	ff 90       	pop	r15
 398:	ef 90       	pop	r14
 39a:	df 90       	pop	r13
 39c:	cf 90       	pop	r12
 39e:	bf 90       	pop	r11
 3a0:	af 90       	pop	r10
 3a2:	9f 90       	pop	r9
 3a4:	08 95       	ret

000003a6 <can_print_message>:
 3a6:	ff 92       	push	r15
 3a8:	0f 93       	push	r16
 3aa:	1f 93       	push	r17
 3ac:	cf 93       	push	r28
 3ae:	df 93       	push	r29
 3b0:	ec 01       	movw	r28, r24
 3b2:	88 81       	ld	r24, Y
 3b4:	99 81       	ldd	r25, Y+1	; 0x01
 3b6:	8f 3f       	cpi	r24, 0xFF	; 255
 3b8:	2f ef       	ldi	r18, 0xFF	; 255
 3ba:	92 07       	cpc	r25, r18
 3bc:	21 f4       	brne	.+8      	; 0x3c6 <can_print_message+0x20>
 3be:	8e e2       	ldi	r24, 0x2E	; 46
 3c0:	92 e0       	ldi	r25, 0x02	; 2
 3c2:	e0 d2       	rcall	.+1472   	; 0x984 <puts>
 3c4:	3d c0       	rjmp	.+122    	; 0x440 <can_print_message+0x9a>
 3c6:	2a 81       	ldd	r18, Y+2	; 0x02
 3c8:	1f 92       	push	r1
 3ca:	2f 93       	push	r18
 3cc:	9f 93       	push	r25
 3ce:	8f 93       	push	r24
 3d0:	84 e4       	ldi	r24, 0x44	; 68
 3d2:	92 e0       	ldi	r25, 0x02	; 2
 3d4:	9f 93       	push	r25
 3d6:	8f 93       	push	r24
 3d8:	c4 d2       	rcall	.+1416   	; 0x962 <printf>
 3da:	2b 81       	ldd	r18, Y+3	; 0x03
 3dc:	82 2f       	mov	r24, r18
 3de:	99 27       	eor	r25, r25
 3e0:	87 fd       	sbrc	r24, 7
 3e2:	90 95       	com	r25
 3e4:	9f 93       	push	r25
 3e6:	2f 93       	push	r18
 3e8:	86 e6       	ldi	r24, 0x66	; 102
 3ea:	92 e0       	ldi	r25, 0x02	; 2
 3ec:	9f 93       	push	r25
 3ee:	8f 93       	push	r24
 3f0:	b8 d2       	rcall	.+1392   	; 0x962 <printf>
 3f2:	8d b7       	in	r24, 0x3d	; 61
 3f4:	9e b7       	in	r25, 0x3e	; 62
 3f6:	0a 96       	adiw	r24, 0x0a	; 10
 3f8:	0f b6       	in	r0, 0x3f	; 63
 3fa:	f8 94       	cli
 3fc:	9e bf       	out	0x3e, r25	; 62
 3fe:	0f be       	out	0x3f, r0	; 63
 400:	8d bf       	out	0x3d, r24	; 61
 402:	8a 81       	ldd	r24, Y+2	; 0x02
 404:	82 30       	cpi	r24, 0x02	; 2
 406:	c8 f0       	brcs	.+50     	; 0x43a <can_print_message+0x94>
 408:	ff 24       	eor	r15, r15
 40a:	f3 94       	inc	r15
 40c:	09 e7       	ldi	r16, 0x79	; 121
 40e:	12 e0       	ldi	r17, 0x02	; 2
 410:	fe 01       	movw	r30, r28
 412:	ef 0d       	add	r30, r15
 414:	f1 1d       	adc	r31, r1
 416:	23 81       	ldd	r18, Z+3	; 0x03
 418:	82 2f       	mov	r24, r18
 41a:	99 27       	eor	r25, r25
 41c:	87 fd       	sbrc	r24, 7
 41e:	90 95       	com	r25
 420:	9f 93       	push	r25
 422:	2f 93       	push	r18
 424:	1f 93       	push	r17
 426:	0f 93       	push	r16
 428:	9c d2       	rcall	.+1336   	; 0x962 <printf>
 42a:	f3 94       	inc	r15
 42c:	0f 90       	pop	r0
 42e:	0f 90       	pop	r0
 430:	0f 90       	pop	r0
 432:	0f 90       	pop	r0
 434:	8a 81       	ldd	r24, Y+2	; 0x02
 436:	f8 16       	cp	r15, r24
 438:	58 f3       	brcs	.-42     	; 0x410 <can_print_message+0x6a>
 43a:	8e e7       	ldi	r24, 0x7E	; 126
 43c:	92 e0       	ldi	r25, 0x02	; 2
 43e:	a2 d2       	rcall	.+1348   	; 0x984 <puts>
 440:	df 91       	pop	r29
 442:	cf 91       	pop	r28
 444:	1f 91       	pop	r17
 446:	0f 91       	pop	r16
 448:	ff 90       	pop	r15
 44a:	08 95       	ret

0000044c <can_interrupt_vector>:
 44c:	cf 93       	push	r28
 44e:	df 93       	push	r29
 450:	cd b7       	in	r28, 0x3d	; 61
 452:	de b7       	in	r29, 0x3e	; 62
 454:	2b 97       	sbiw	r28, 0x0b	; 11
 456:	0f b6       	in	r0, 0x3f	; 63
 458:	f8 94       	cli
 45a:	de bf       	out	0x3e, r29	; 62
 45c:	0f be       	out	0x3f, r0	; 63
 45e:	cd bf       	out	0x3d, r28	; 61
 460:	ce 01       	movw	r24, r28
 462:	01 96       	adiw	r24, 0x01	; 1
 464:	37 df       	rcall	.-402    	; 0x2d4 <can_data_receive>
 466:	8b e0       	ldi	r24, 0x0B	; 11
 468:	fe 01       	movw	r30, r28
 46a:	31 96       	adiw	r30, 0x01	; 1
 46c:	a1 e0       	ldi	r26, 0x01	; 1
 46e:	b3 e0       	ldi	r27, 0x03	; 3
 470:	01 90       	ld	r0, Z+
 472:	0d 92       	st	X+, r0
 474:	8a 95       	dec	r24
 476:	e1 f7       	brne	.-8      	; 0x470 <can_interrupt_vector+0x24>
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	93 e0       	ldi	r25, 0x03	; 3
 47c:	94 df       	rcall	.-216    	; 0x3a6 <can_print_message>
 47e:	2b 96       	adiw	r28, 0x0b	; 11
 480:	0f b6       	in	r0, 0x3f	; 63
 482:	f8 94       	cli
 484:	de bf       	out	0x3e, r29	; 62
 486:	0f be       	out	0x3f, r0	; 63
 488:	cd bf       	out	0x3d, r28	; 61
 48a:	df 91       	pop	r29
 48c:	cf 91       	pop	r28
 48e:	08 95       	ret

00000490 <__vector_1>:
 490:	1f 92       	push	r1
 492:	0f 92       	push	r0
 494:	0f b6       	in	r0, 0x3f	; 63
 496:	0f 92       	push	r0
 498:	11 24       	eor	r1, r1
 49a:	0b b6       	in	r0, 0x3b	; 59
 49c:	0f 92       	push	r0
 49e:	2f 93       	push	r18
 4a0:	3f 93       	push	r19
 4a2:	4f 93       	push	r20
 4a4:	5f 93       	push	r21
 4a6:	6f 93       	push	r22
 4a8:	7f 93       	push	r23
 4aa:	8f 93       	push	r24
 4ac:	9f 93       	push	r25
 4ae:	af 93       	push	r26
 4b0:	bf 93       	push	r27
 4b2:	ef 93       	push	r30
 4b4:	ff 93       	push	r31
 4b6:	ca df       	rcall	.-108    	; 0x44c <can_interrupt_vector>
 4b8:	ff 91       	pop	r31
 4ba:	ef 91       	pop	r30
 4bc:	bf 91       	pop	r27
 4be:	af 91       	pop	r26
 4c0:	9f 91       	pop	r25
 4c2:	8f 91       	pop	r24
 4c4:	7f 91       	pop	r23
 4c6:	6f 91       	pop	r22
 4c8:	5f 91       	pop	r21
 4ca:	4f 91       	pop	r20
 4cc:	3f 91       	pop	r19
 4ce:	2f 91       	pop	r18
 4d0:	0f 90       	pop	r0
 4d2:	0b be       	out	0x3b, r0	; 59
 4d4:	0f 90       	pop	r0
 4d6:	0f be       	out	0x3f, r0	; 63
 4d8:	0f 90       	pop	r0
 4da:	1f 90       	pop	r1
 4dc:	18 95       	reti

000004de <can_handle_message>:
	}
}



void can_handle_message(){
 4de:	cf 93       	push	r28
 4e0:	df 93       	push	r29
 4e2:	cd b7       	in	r28, 0x3d	; 61
 4e4:	de b7       	in	r29, 0x3e	; 62
 4e6:	2b 97       	sbiw	r28, 0x0b	; 11
 4e8:	0f b6       	in	r0, 0x3f	; 63
 4ea:	f8 94       	cli
 4ec:	de bf       	out	0x3e, r29	; 62
 4ee:	0f be       	out	0x3f, r0	; 63
 4f0:	cd bf       	out	0x3d, r28	; 61
	static can_message_t message;
	message = can_data_receive();
 4f2:	ce 01       	movw	r24, r28
 4f4:	01 96       	adiw	r24, 0x01	; 1
 4f6:	ee de       	rcall	.-548    	; 0x2d4 <can_data_receive>
 4f8:	8b e0       	ldi	r24, 0x0B	; 11
 4fa:	fe 01       	movw	r30, r28
 4fc:	31 96       	adiw	r30, 0x01	; 1
 4fe:	a6 ef       	ldi	r26, 0xF6	; 246
 500:	b2 e0       	ldi	r27, 0x02	; 2
 502:	01 90       	ld	r0, Z+
 504:	0d 92       	st	X+, r0
 506:	8a 95       	dec	r24
 508:	e1 f7       	brne	.-8      	; 0x502 <can_handle_message+0x24>
	
	switch(message.id){
 50a:	80 91 f6 02 	lds	r24, 0x02F6
 50e:	90 91 f7 02 	lds	r25, 0x02F7
 512:	81 30       	cpi	r24, 0x01	; 1
 514:	91 05       	cpc	r25, r1
 516:	19 f0       	breq	.+6      	; 0x51e <can_handle_message+0x40>
 518:	03 97       	sbiw	r24, 0x03	; 3
 51a:	49 f0       	breq	.+18     	; 0x52e <can_handle_message+0x50>
 51c:	09 c0       	rjmp	.+18     	; 0x530 <can_handle_message+0x52>
		case JOY_CAN_ID:
			pwm_set_servo(-message.data[0]);
 51e:	80 91 f9 02 	lds	r24, 0x02F9
 522:	99 27       	eor	r25, r25
 524:	81 95       	neg	r24
 526:	0c f4       	brge	.+2      	; 0x52a <can_handle_message+0x4c>
 528:	90 95       	com	r25
 52a:	89 d0       	rcall	.+274    	; 0x63e <pwm_set_servo>
			return;
 52c:	01 c0       	rjmp	.+2      	; 0x530 <can_handle_message+0x52>
		case BUTTON_CAN_ID:
			solenoid_shoot();
 52e:	ad d0       	rcall	.+346    	; 0x68a <solenoid_shoot>

		
	//can_print_message(message);
	
	pwm_set_servo(-message.data[0]);
}
 530:	2b 96       	adiw	r28, 0x0b	; 11
 532:	0f b6       	in	r0, 0x3f	; 63
 534:	f8 94       	cli
 536:	de bf       	out	0x3e, r29	; 62
 538:	0f be       	out	0x3f, r0	; 63
 53a:	cd bf       	out	0x3d, r28	; 61
 53c:	df 91       	pop	r29
 53e:	cf 91       	pop	r28
 540:	08 95       	ret

00000542 <mcp2515_write>:
	} else {
		;//printf("MCP2515 is in config mode after reset\n");
	}
}

void mcp2515_write(uint8_t address, uint8_t data){
 542:	cf 93       	push	r28
 544:	df 93       	push	r29
 546:	d8 2f       	mov	r29, r24
 548:	c6 2f       	mov	r28, r22
	spi_select();
 54a:	c5 d0       	rcall	.+394    	; 0x6d6 <spi_select>

	spi_send(MCP_WRITE);
 54c:	82 e0       	ldi	r24, 0x02	; 2
 54e:	b7 d0       	rcall	.+366    	; 0x6be <spi_send>
	spi_send(address);
 550:	8d 2f       	mov	r24, r29
 552:	b5 d0       	rcall	.+362    	; 0x6be <spi_send>
	spi_send(data);
 554:	8c 2f       	mov	r24, r28
 556:	b3 d0       	rcall	.+358    	; 0x6be <spi_send>

	spi_deselect();
 558:	c0 d0       	rcall	.+384    	; 0x6da <spi_deselect>
}
 55a:	df 91       	pop	r29
 55c:	cf 91       	pop	r28
 55e:	08 95       	ret

00000560 <mcp2515_request_to_send>:

void mcp2515_request_to_send(uint8_t command){
 560:	cf 93       	push	r28
	//Check last 3 bits of given command
	if (command <= 7) {
 562:	88 30       	cpi	r24, 0x08	; 8
 564:	18 f4       	brcc	.+6      	; 0x56c <mcp2515_request_to_send+0xc>
		command = MCP_RTS | command;
 566:	c8 2f       	mov	r28, r24
 568:	c0 68       	ori	r28, 0x80	; 128
 56a:	01 c0       	rjmp	.+2      	; 0x56e <mcp2515_request_to_send+0xe>
	} else {
		command = MCP_RTS;
 56c:	c0 e8       	ldi	r28, 0x80	; 128
	}

	//Select, send RTS command, then deselect
	spi_select();
 56e:	b3 d0       	rcall	.+358    	; 0x6d6 <spi_select>
	spi_send(command);
 570:	8c 2f       	mov	r24, r28
 572:	a5 d0       	rcall	.+330    	; 0x6be <spi_send>
	spi_deselect();
 574:	b2 d0       	rcall	.+356    	; 0x6da <spi_deselect>
}
 576:	cf 91       	pop	r28
 578:	08 95       	ret

0000057a <mcp2515_bit_modify>:

void mcp2515_bit_modify(uint8_t address, uint8_t mask, uint8_t data){
 57a:	1f 93       	push	r17
 57c:	cf 93       	push	r28
 57e:	df 93       	push	r29
 580:	18 2f       	mov	r17, r24
 582:	d6 2f       	mov	r29, r22
 584:	c4 2f       	mov	r28, r20
	spi_select();
 586:	a7 d0       	rcall	.+334    	; 0x6d6 <spi_select>

	spi_send(MCP_BITMOD);
 588:	85 e0       	ldi	r24, 0x05	; 5
 58a:	99 d0       	rcall	.+306    	; 0x6be <spi_send>
	spi_send(address);
 58c:	81 2f       	mov	r24, r17
 58e:	97 d0       	rcall	.+302    	; 0x6be <spi_send>
	spi_send(mask);
 590:	8d 2f       	mov	r24, r29
 592:	95 d0       	rcall	.+298    	; 0x6be <spi_send>
	spi_send(data);
 594:	8c 2f       	mov	r24, r28
 596:	93 d0       	rcall	.+294    	; 0x6be <spi_send>

	spi_deselect();
 598:	a0 d0       	rcall	.+320    	; 0x6da <spi_deselect>
}
 59a:	df 91       	pop	r29
 59c:	cf 91       	pop	r28
 59e:	1f 91       	pop	r17
 5a0:	08 95       	ret

000005a2 <mcp2515_reset>:

void mcp2515_reset(){
	spi_select();
 5a2:	99 d0       	rcall	.+306    	; 0x6d6 <spi_select>
	spi_send(MCP_RESET);	
 5a4:	80 ec       	ldi	r24, 0xC0	; 192
 5a6:	8b d0       	rcall	.+278    	; 0x6be <spi_send>
	spi_deselect();
 5a8:	98 c0       	rjmp	.+304    	; 0x6da <spi_deselect>
 5aa:	08 95       	ret

000005ac <mcp2515_read>:
}


uint8_t mcp2515_read(uint8_t address){
 5ac:	cf 93       	push	r28
 5ae:	c8 2f       	mov	r28, r24
	uint8_t result;

	spi_select();
 5b0:	92 d0       	rcall	.+292    	; 0x6d6 <spi_select>
	
	//Send command and address, then read result
	spi_send(MCP_READ);
 5b2:	83 e0       	ldi	r24, 0x03	; 3
 5b4:	84 d0       	rcall	.+264    	; 0x6be <spi_send>
	spi_send(address);
 5b6:	8c 2f       	mov	r24, r28
 5b8:	82 d0       	rcall	.+260    	; 0x6be <spi_send>

	result = spi_read();
 5ba:	86 d0       	rcall	.+268    	; 0x6c8 <spi_read>
 5bc:	c8 2f       	mov	r28, r24
	spi_deselect();
 5be:	8d d0       	rcall	.+282    	; 0x6da <spi_deselect>

	return result;	
}
 5c0:	8c 2f       	mov	r24, r28
 5c2:	cf 91       	pop	r28
 5c4:	08 95       	ret

000005c6 <mcp2515_init>:
#include <util/delay.h>
#include "uart_driver.h"
#include "spi_driver.h"
#include "mcp2515_driver.h"

void mcp2515_init() {
 5c6:	cf 93       	push	r28
 5c8:	df 93       	push	r29
 5ca:	1f 92       	push	r1
 5cc:	cd b7       	in	r28, 0x3d	; 61
 5ce:	de b7       	in	r29, 0x3e	; 62
	//NO NEED, ALREADY ENABLED
	//Enable interrupt when message is recieved (RX0IE = 1)
	//mcp2515_bit_modify(MCP_CANINTE, 0x01, 0xff);

	//Start SPI driver
	spi_init();
 5d0:	6e d0       	rcall	.+220    	; 0x6ae <spi_init>

	mcp2515_reset();
 5d2:	e7 df       	rcall	.-50     	; 0x5a2 <mcp2515_reset>
	
	//Testing for correct initialization
	value_check = mcp2515_read(MCP_CANSTAT);
 5d4:	8e e0       	ldi	r24, 0x0E	; 14
 5d6:	ea df       	rcall	.-44     	; 0x5ac <mcp2515_read>
 5d8:	89 83       	std	Y+1, r24	; 0x01
	
	if ((value_check & MODE_MASK) != MODE_CONFIG) {
 5da:	89 81       	ldd	r24, Y+1	; 0x01
 5dc:	80 7e       	andi	r24, 0xE0	; 224
 5de:	80 38       	cpi	r24, 0x80	; 128
 5e0:	19 f0       	breq	.+6      	; 0x5e8 <mcp2515_init+0x22>
		printf("MCP2515 is not in config mode after reset\n");
 5e2:	81 e9       	ldi	r24, 0x91	; 145
 5e4:	92 e0       	ldi	r25, 0x02	; 2
 5e6:	ce d1       	rcall	.+924    	; 0x984 <puts>
	} else {
		;//printf("MCP2515 is in config mode after reset\n");
	}
}
 5e8:	0f 90       	pop	r0
 5ea:	df 91       	pop	r29
 5ec:	cf 91       	pop	r28
 5ee:	08 95       	ret

000005f0 <pwm_init>:
	ICR3 = DUTY_CYCLE_STEPS;
	pwm_set_value(MID_SERVO);
}

void pwm_set_value(uint16_t val) {
	OCR3A = val;
 5f0:	6b 9a       	sbi	0x0d, 3	; 13
 5f2:	a1 e9       	ldi	r26, 0x91	; 145
 5f4:	b0 e0       	ldi	r27, 0x00	; 0
 5f6:	8c 91       	ld	r24, X
 5f8:	82 60       	ori	r24, 0x02	; 2
 5fa:	8c 93       	st	X, r24
 5fc:	8c 91       	ld	r24, X
 5fe:	8a 7f       	andi	r24, 0xFA	; 250
 600:	8c 93       	st	X, r24
 602:	e0 e9       	ldi	r30, 0x90	; 144
 604:	f0 e0       	ldi	r31, 0x00	; 0
 606:	80 81       	ld	r24, Z
 608:	82 60       	ori	r24, 0x02	; 2
 60a:	80 83       	st	Z, r24
 60c:	80 81       	ld	r24, Z
 60e:	8e 7f       	andi	r24, 0xFE	; 254
 610:	80 83       	st	Z, r24
 612:	8c 91       	ld	r24, X
 614:	88 61       	ori	r24, 0x18	; 24
 616:	8c 93       	st	X, r24
 618:	80 81       	ld	r24, Z
 61a:	80 68       	ori	r24, 0x80	; 128
 61c:	80 83       	st	Z, r24
 61e:	80 81       	ld	r24, Z
 620:	8f 7b       	andi	r24, 0xBF	; 191
 622:	80 83       	st	Z, r24
 624:	80 e4       	ldi	r24, 0x40	; 64
 626:	9c e9       	ldi	r25, 0x9C	; 156
 628:	90 93 97 00 	sts	0x0097, r25
 62c:	80 93 96 00 	sts	0x0096, r24
 630:	88 eb       	ldi	r24, 0xB8	; 184
 632:	9b e0       	ldi	r25, 0x0B	; 11
 634:	90 93 99 00 	sts	0x0099, r25
 638:	80 93 98 00 	sts	0x0098, r24
 63c:	08 95       	ret

0000063e <pwm_set_servo>:
}

void pwm_set_servo(int16_t val){
	val += 128;
 63e:	9c 01       	movw	r18, r24
 640:	20 58       	subi	r18, 0x80	; 128
 642:	3f 4f       	sbci	r19, 0xFF	; 255
	//printf("%d\n", val);
	val = (val*(VAL_SCALE/UNDERFLOW_FIX)) / 255 * UNDERFLOW_FIX + MIN_SERVO;
 644:	4b e4       	ldi	r20, 0x4B	; 75
 646:	42 9f       	mul	r20, r18
 648:	c0 01       	movw	r24, r0
 64a:	43 9f       	mul	r20, r19
 64c:	90 0d       	add	r25, r0
 64e:	11 24       	eor	r1, r1
 650:	6f ef       	ldi	r22, 0xFF	; 255
 652:	70 e0       	ldi	r23, 0x00	; 0
 654:	59 d1       	rcall	.+690    	; 0x908 <__divmodhi4>
 656:	66 0f       	add	r22, r22
 658:	77 1f       	adc	r23, r23
 65a:	62 95       	swap	r22
 65c:	72 95       	swap	r23
 65e:	70 7f       	andi	r23, 0xF0	; 240
 660:	76 27       	eor	r23, r22
 662:	60 7f       	andi	r22, 0xF0	; 240
 664:	76 27       	eor	r23, r22
 666:	68 5f       	subi	r22, 0xF8	; 248
 668:	78 4f       	sbci	r23, 0xF8	; 248
	ICR3 = DUTY_CYCLE_STEPS;
	pwm_set_value(MID_SERVO);
}

void pwm_set_value(uint16_t val) {
	OCR3A = val;
 66a:	70 93 99 00 	sts	0x0099, r23
 66e:	60 93 98 00 	sts	0x0098, r22
 672:	08 95       	ret

00000674 <solenoid_init>:

#include <avr/io.h>
#include <avr/delay.h>

void solenoid_init(){
	DDRH |= (1<<PH3);
 674:	e1 e0       	ldi	r30, 0x01	; 1
 676:	f1 e0       	ldi	r31, 0x01	; 1
 678:	80 81       	ld	r24, Z
 67a:	88 60       	ori	r24, 0x08	; 8
 67c:	80 83       	st	Z, r24
	PORTH |= (1<<PH3);
 67e:	e2 e0       	ldi	r30, 0x02	; 2
 680:	f1 e0       	ldi	r31, 0x01	; 1
 682:	80 81       	ld	r24, Z
 684:	88 60       	ori	r24, 0x08	; 8
 686:	80 83       	st	Z, r24
 688:	08 95       	ret

0000068a <solenoid_shoot>:
}

void solenoid_shoot(){
	PORTH &= ~(1<<PH3);
 68a:	e2 e0       	ldi	r30, 0x02	; 2
 68c:	f1 e0       	ldi	r31, 0x01	; 1
 68e:	80 81       	ld	r24, Z
 690:	87 7f       	andi	r24, 0xF7	; 247
 692:	80 83       	st	Z, r24
 694:	2f ef       	ldi	r18, 0xFF	; 255
 696:	80 e7       	ldi	r24, 0x70	; 112
 698:	92 e0       	ldi	r25, 0x02	; 2
 69a:	21 50       	subi	r18, 0x01	; 1
 69c:	80 40       	sbci	r24, 0x00	; 0
 69e:	90 40       	sbci	r25, 0x00	; 0
 6a0:	e1 f7       	brne	.-8      	; 0x69a <solenoid_shoot+0x10>
 6a2:	00 c0       	rjmp	.+0      	; 0x6a4 <solenoid_shoot+0x1a>
 6a4:	00 00       	nop
	_delay_ms(50);
	PORTH |= (1<<PH3);
 6a6:	80 81       	ld	r24, Z
 6a8:	88 60       	ori	r24, 0x08	; 8
 6aa:	80 83       	st	Z, r24
 6ac:	08 95       	ret

000006ae <spi_init>:
#define SPI_MISO PB3
#define SPI_SCK PB1 

void spi_init(){
	//Set MOSI, SCK and SS as output pins 	
	DDRB |= (1 << SPI_MOSI) | (1 << SPI_SCK) | (1 << SPI_SS);
 6ae:	84 b1       	in	r24, 0x04	; 4
 6b0:	87 60       	ori	r24, 0x07	; 7
 6b2:	84 b9       	out	0x04, r24	; 4
	
	//Set MISO as input pin
	DDRB &= ~(1 << SPI_MISO);
 6b4:	23 98       	cbi	0x04, 3	; 4
	
	//Enable SPI in master mode and set clock rate fosc/16
	SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0);
 6b6:	8c b5       	in	r24, 0x2c	; 44
 6b8:	81 65       	ori	r24, 0x51	; 81
 6ba:	8c bd       	out	0x2c, r24	; 44
 6bc:	08 95       	ret

000006be <spi_send>:
	return SPDR;
}

void spi_send(char data){
	//Start transmission
	SPDR = data;
 6be:	8e bd       	out	0x2e, r24	; 46
	
	//Wait for transmission, checks if register is empty 
	while(!(SPSR & (1 << SPIF)));
 6c0:	0d b4       	in	r0, 0x2d	; 45
 6c2:	07 fe       	sbrs	r0, 7
 6c4:	fd cf       	rjmp	.-6      	; 0x6c0 <spi_send+0x2>
}
 6c6:	08 95       	ret

000006c8 <spi_read>:
}


uint8_t spi_read(){
	//Dummy send in order to read from slave
	spi_send(0xaa);
 6c8:	8a ea       	ldi	r24, 0xAA	; 170
 6ca:	f9 df       	rcall	.-14     	; 0x6be <spi_send>
	
	while(!(SPSR & (1 << SPIF)));
 6cc:	0d b4       	in	r0, 0x2d	; 45
 6ce:	07 fe       	sbrs	r0, 7
 6d0:	fd cf       	rjmp	.-6      	; 0x6cc <spi_read+0x4>

	return SPDR;
 6d2:	8e b5       	in	r24, 0x2e	; 46
}
 6d4:	08 95       	ret

000006d6 <spi_select>:
	while(!(SPSR & (1 << SPIF)));
}

void spi_select(){
	//Set !SS to 0 for selection of slave
	PORTB &= ~(1 << SPI_SS);
 6d6:	28 98       	cbi	0x05, 0	; 5
 6d8:	08 95       	ret

000006da <spi_deselect>:
}

void spi_deselect(){
	//Set !SS to 1 for deselection of slave
	PORTB |= (1 << SPI_SS);
 6da:	28 9a       	sbi	0x05, 0	; 5
 6dc:	08 95       	ret

000006de <uart_sendChar>:

}

void uart_sendChar(unsigned char data){
	//Wait for empty transmitter buffer
	while(!(UCSR0A & (1<<UDRE0)));
 6de:	e0 ec       	ldi	r30, 0xC0	; 192
 6e0:	f0 e0       	ldi	r31, 0x00	; 0
 6e2:	90 81       	ld	r25, Z
 6e4:	95 ff       	sbrs	r25, 5
 6e6:	fd cf       	rjmp	.-6      	; 0x6e2 <uart_sendChar+0x4>
		
	//Put data into buffer, then send the data
	UDR0 = data;
 6e8:	80 93 c6 00 	sts	0x00C6, r24
 6ec:	08 95       	ret

000006ee <uart_getChar>:
}


unsigned int uart_getChar(){
	//Wait for the data to be received 
	while(!(UCSR0A & (1<<RXC0))){}
 6ee:	e0 ec       	ldi	r30, 0xC0	; 192
 6f0:	f0 e0       	ldi	r31, 0x00	; 0
 6f2:	80 81       	ld	r24, Z
 6f4:	88 23       	and	r24, r24
 6f6:	ec f7       	brge	.-6      	; 0x6f2 <uart_getChar+0x4>
	
	//Get status and the 9th bit, then data from buffer
	return UDR0;
 6f8:	80 91 c6 00 	lds	r24, 0x00C6
}
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	08 95       	ret

00000700 <uart_init>:

static FILE uart_io = FDEV_SETUP_STREAM(uart_sendChar, uart_getChar, _FDEV_SETUP_RW);

void uart_init(unsigned int ubrr){
	//Set baud rate
	UBRR0L = (unsigned int) ubrr;
 700:	80 93 c4 00 	sts	0x00C4, r24
	
	//Enable receiver and transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 704:	88 e1       	ldi	r24, 0x18	; 24
 706:	80 93 c1 00 	sts	0x00C1, r24
	
	stdout = &uart_io;
 70a:	80 e0       	ldi	r24, 0x00	; 0
 70c:	92 e0       	ldi	r25, 0x02	; 2
 70e:	90 93 2a 03 	sts	0x032A, r25
 712:	80 93 29 03 	sts	0x0329, r24
	stdin = &uart_io;
 716:	90 93 28 03 	sts	0x0328, r25
 71a:	80 93 27 03 	sts	0x0327, r24
 71e:	08 95       	ret

00000720 <ir_obstructed>:
	for (uint8_t i = 0; i < FILTER_BUFFER_SIZE; i++ ){
		ir_obstructed();
	}
}

uint8_t ir_obstructed(){
 720:	cf 93       	push	r28
 722:	df 93       	push	r29
	static uint16_t ringbuffer_filter[FILTER_BUFFER_SIZE];
	static uint8_t ringbuffer_index;

	//return adc_read(IR_CHANNEL);

	if (ringbuffer_index >= FILTER_BUFFER_SIZE - 1){
 724:	80 91 1e 03 	lds	r24, 0x031E
 728:	87 30       	cpi	r24, 0x07	; 7
 72a:	18 f0       	brcs	.+6      	; 0x732 <ir_obstructed+0x12>
		ringbuffer_index = 0;
 72c:	10 92 1e 03 	sts	0x031E, r1
 730:	03 c0       	rjmp	.+6      	; 0x738 <ir_obstructed+0x18>
	} else { ringbuffer_index++; }
 732:	8f 5f       	subi	r24, 0xFF	; 255
 734:	80 93 1e 03 	sts	0x031E, r24
			
	ringbuffer_filter[ringbuffer_index] = adc_read(IR_CHANNEL) / FILTER_BUFFER_SIZE;
 738:	c0 91 1e 03 	lds	r28, 0x031E
 73c:	d0 e0       	ldi	r29, 0x00	; 0
 73e:	80 e0       	ldi	r24, 0x00	; 0
 740:	50 dd       	rcall	.-1376   	; 0x1e2 <adc_read>
 742:	cc 0f       	add	r28, r28
 744:	dd 1f       	adc	r29, r29
 746:	c2 5f       	subi	r28, 0xF2	; 242
 748:	dc 4f       	sbci	r29, 0xFC	; 252
 74a:	96 95       	lsr	r25
 74c:	87 95       	ror	r24
 74e:	96 95       	lsr	r25
 750:	87 95       	ror	r24
 752:	96 95       	lsr	r25
 754:	87 95       	ror	r24
 756:	99 83       	std	Y+1, r25	; 0x01
 758:	88 83       	st	Y, r24
 75a:	ee e0       	ldi	r30, 0x0E	; 14
 75c:	f3 e0       	ldi	r31, 0x03	; 3
 75e:	4e e1       	ldi	r20, 0x1E	; 30
 760:	53 e0       	ldi	r21, 0x03	; 3



	uint16_t avg = 0;
 762:	20 e0       	ldi	r18, 0x00	; 0
 764:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t i = 0; i < FILTER_BUFFER_SIZE; i++) {
		avg += ringbuffer_filter[i] ;
 766:	81 91       	ld	r24, Z+
 768:	91 91       	ld	r25, Z+
 76a:	28 0f       	add	r18, r24
 76c:	39 1f       	adc	r19, r25
	ringbuffer_filter[ringbuffer_index] = adc_read(IR_CHANNEL) / FILTER_BUFFER_SIZE;



	uint16_t avg = 0;
	for (uint8_t i = 0; i < FILTER_BUFFER_SIZE; i++) {
 76e:	e4 17       	cp	r30, r20
 770:	f5 07       	cpc	r31, r21
 772:	c9 f7       	brne	.-14     	; 0x766 <ir_obstructed+0x46>
	}
	printf(" ]\n");*/
	/*printf("avg:  %d\n",avg);
	printf("read: %d\n\n",adc_read(0));*/
	
	if (avg < FILTER_THRESHOLD) {
 774:	81 e0       	ldi	r24, 0x01	; 1
 776:	24 3b       	cpi	r18, 0xB4	; 180
 778:	31 05       	cpc	r19, r1
 77a:	08 f0       	brcs	.+2      	; 0x77e <ir_obstructed+0x5e>
 77c:	80 e0       	ldi	r24, 0x00	; 0
		return 1;
	}

	return 0;
}
 77e:	df 91       	pop	r29
 780:	cf 91       	pop	r28
 782:	08 95       	ret

00000784 <ir_filter_init>:
#include "Drivers/uart_driver.h"

#define FILTER_THRESHOLD 180
#define FILTER_BUFFER_SIZE 8

void ir_filter_init() {
 784:	cf 93       	push	r28
 786:	c8 e0       	ldi	r28, 0x08	; 8
	for (uint8_t i = 0; i < FILTER_BUFFER_SIZE; i++ ){
		ir_obstructed();
 788:	cb df       	rcall	.-106    	; 0x720 <ir_obstructed>
 78a:	c1 50       	subi	r28, 0x01	; 1

#define FILTER_THRESHOLD 180
#define FILTER_BUFFER_SIZE 8

void ir_filter_init() {
	for (uint8_t i = 0; i < FILTER_BUFFER_SIZE; i++ ){
 78c:	e9 f7       	brne	.-6      	; 0x788 <ir_filter_init+0x4>
		ir_obstructed();
	}
}
 78e:	cf 91       	pop	r28
 790:	08 95       	ret

00000792 <ir_edge_detected>:
}

uint8_t ir_edge_detected() {
	static uint8_t last;
	static uint8_t current;
	current = ir_obstructed();
 792:	c6 df       	rcall	.-116    	; 0x720 <ir_obstructed>
 794:	80 93 0d 03 	sts	0x030D, r24
	if (last != current){
 798:	90 91 0c 03 	lds	r25, 0x030C
 79c:	89 17       	cp	r24, r25
 79e:	21 f0       	breq	.+8      	; 0x7a8 <ir_edge_detected+0x16>
		last = current;
 7a0:	80 93 0c 03 	sts	0x030C, r24
		return 1;
 7a4:	81 e0       	ldi	r24, 0x01	; 1
 7a6:	08 95       	ret
	}
	return 0;
 7a8:	80 e0       	ldi	r24, 0x00	; 0
 7aa:	08 95       	ret

000007ac <main>:
#include "Drivers/motor_driver.h"
#include "Drivers/solenoid_driver.h"
#include "ir.h"
#include "test_node_2.h"

int main(void){
 7ac:	cf 93       	push	r28
 7ae:	df 93       	push	r29
 7b0:	cd b7       	in	r28, 0x3d	; 61
 7b2:	de b7       	in	r29, 0x3e	; 62
 7b4:	2b 97       	sbiw	r28, 0x0b	; 11
 7b6:	0f b6       	in	r0, 0x3f	; 63
 7b8:	f8 94       	cli
 7ba:	de bf       	out	0x3e, r29	; 62
 7bc:	0f be       	out	0x3f, r0	; 63
 7be:	cd bf       	out	0x3d, r28	; 61
	uart_init(MYUBRR);
 7c0:	87 e6       	ldi	r24, 0x67	; 103
 7c2:	90 e0       	ldi	r25, 0x00	; 0
 7c4:	9d df       	rcall	.-198    	; 0x700 <uart_init>
	can_init();
 7c6:	27 dd       	rcall	.-1458   	; 0x216 <can_init>
	pwm_init();
 7c8:	13 df       	rcall	.-474    	; 0x5f0 <pwm_init>
	printf("ir\n");
 7ca:	82 ef       	ldi	r24, 0xF2	; 242
 7cc:	92 e0       	ldi	r25, 0x02	; 2
 7ce:	da d0       	rcall	.+436    	; 0x984 <puts>
	adc_init();
 7d0:	fa dc       	rcall	.-1548   	; 0x1c6 <adc_init>
	ir_filter_init();
 7d2:	d8 df       	rcall	.-80     	; 0x784 <ir_filter_init>
	solenoid_init();
 7d4:	4f df       	rcall	.-354    	; 0x674 <solenoid_init>
	//can_test();
	
	

	can_message_t ir_message;
	ir_message.length = 1;
 7d6:	81 e0       	ldi	r24, 0x01	; 1
 7d8:	8b 83       	std	Y+3, r24	; 0x03
	ir_message.id = IR_CAN_ID;
 7da:	82 e0       	ldi	r24, 0x02	; 2
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	9a 83       	std	Y+2, r25	; 0x02
 7e0:	89 83       	std	Y+1, r24	; 0x01
	while(1){
		can_handle_message();
 7e2:	7d de       	rcall	.-774    	; 0x4de <can_handle_message>
		//pwm_set_value(150);
		//printf("%d\n", TCNT3);
		//_delay_ms(8);
		if (ir_edge_detected()){
 7e4:	d6 df       	rcall	.-84     	; 0x792 <ir_edge_detected>
 7e6:	88 23       	and	r24, r24
 7e8:	29 f0       	breq	.+10     	; 0x7f4 <main+0x48>
			ir_message.data[0] = ir_obstructed();
 7ea:	9a df       	rcall	.-204    	; 0x720 <ir_obstructed>
 7ec:	8c 83       	std	Y+4, r24	; 0x04
			can_message_send(&ir_message);
 7ee:	ce 01       	movw	r24, r28
 7f0:	01 96       	adiw	r24, 0x01	; 1
 7f2:	3a dd       	rcall	.-1420   	; 0x268 <can_message_send>
 7f4:	8f e7       	ldi	r24, 0x7F	; 127
 7f6:	9b eb       	ldi	r25, 0xBB	; 187
 7f8:	01 97       	sbiw	r24, 0x01	; 1
 7fa:	f1 f7       	brne	.-4      	; 0x7f8 <main+0x4c>
 7fc:	00 c0       	rjmp	.+0      	; 0x7fe <main+0x52>
 7fe:	00 00       	nop
 800:	f0 cf       	rjmp	.-32     	; 0x7e2 <main+0x36>

00000802 <__vector_39>:
This function is the Interrupt Service Routine (ISR), and called when the TWI interrupt is triggered;
that is whenever a TWI event has occurred. This function should not be called directly from the main
application.
****************************************************************************/
ISR(TWI_vect)
{
 802:	1f 92       	push	r1
 804:	0f 92       	push	r0
 806:	0f b6       	in	r0, 0x3f	; 63
 808:	0f 92       	push	r0
 80a:	11 24       	eor	r1, r1
 80c:	0b b6       	in	r0, 0x3b	; 59
 80e:	0f 92       	push	r0
 810:	2f 93       	push	r18
 812:	3f 93       	push	r19
 814:	8f 93       	push	r24
 816:	9f 93       	push	r25
 818:	af 93       	push	r26
 81a:	bf 93       	push	r27
 81c:	ef 93       	push	r30
 81e:	ff 93       	push	r31
	static unsigned char TWI_bufPtr;
	
	switch (TWSR)
 820:	80 91 b9 00 	lds	r24, 0x00B9
 824:	90 e0       	ldi	r25, 0x00	; 0
 826:	fc 01       	movw	r30, r24
 828:	38 97       	sbiw	r30, 0x08	; 8
 82a:	e1 35       	cpi	r30, 0x51	; 81
 82c:	f1 05       	cpc	r31, r1
 82e:	08 f0       	brcs	.+2      	; 0x832 <__vector_39+0x30>
 830:	55 c0       	rjmp	.+170    	; 0x8dc <__vector_39+0xda>
 832:	ee 58       	subi	r30, 0x8E	; 142
 834:	ff 4f       	sbci	r31, 0xFF	; 255
 836:	7b c0       	rjmp	.+246    	; 0x92e <__tablejump2__>
	{
		case TWI_START:             // START has been transmitted
		case TWI_REP_START:         // Repeated START has been transmitted
		TWI_bufPtr = 0;                                     // Set buffer pointer to the TWI Address location
 838:	10 92 1f 03 	sts	0x031F, r1
		case TWI_MTX_ADR_ACK:       // SLA+W has been tramsmitted and ACK received
		case TWI_MTX_DATA_ACK:      // Data byte has been tramsmitted and ACK received
		if (TWI_bufPtr < TWI_msgSize)
 83c:	e0 91 1f 03 	lds	r30, 0x031F
 840:	80 91 21 03 	lds	r24, 0x0321
 844:	e8 17       	cp	r30, r24
 846:	70 f4       	brcc	.+28     	; 0x864 <__vector_39+0x62>
		{
			TWDR = TWI_buf[TWI_bufPtr++];
 848:	81 e0       	ldi	r24, 0x01	; 1
 84a:	8e 0f       	add	r24, r30
 84c:	80 93 1f 03 	sts	0x031F, r24
 850:	f0 e0       	ldi	r31, 0x00	; 0
 852:	ee 5d       	subi	r30, 0xDE	; 222
 854:	fc 4f       	sbci	r31, 0xFC	; 252
 856:	80 81       	ld	r24, Z
 858:	80 93 bb 00 	sts	0x00BB, r24
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 85c:	85 e8       	ldi	r24, 0x85	; 133
 85e:	80 93 bc 00 	sts	0x00BC, r24
 862:	43 c0       	rjmp	.+134    	; 0x8ea <__vector_39+0xe8>
			(1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag to send byte
			(0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           //
			(0<<TWWC);                                 //
		}else                    // Send STOP after last byte
		{
			TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully.
 864:	80 91 20 03 	lds	r24, 0x0320
 868:	81 60       	ori	r24, 0x01	; 1
 86a:	80 93 20 03 	sts	0x0320, r24
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 86e:	84 e9       	ldi	r24, 0x94	; 148
 870:	80 93 bc 00 	sts	0x00BC, r24
 874:	3a c0       	rjmp	.+116    	; 0x8ea <__vector_39+0xe8>
			(0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
			(0<<TWWC);                                 //
		}
		break;
		case TWI_MRX_DATA_ACK:      // Data byte has been received and ACK tramsmitted
		TWI_buf[TWI_bufPtr++] = TWDR;
 876:	e0 91 1f 03 	lds	r30, 0x031F
 87a:	81 e0       	ldi	r24, 0x01	; 1
 87c:	8e 0f       	add	r24, r30
 87e:	80 93 1f 03 	sts	0x031F, r24
 882:	80 91 bb 00 	lds	r24, 0x00BB
 886:	f0 e0       	ldi	r31, 0x00	; 0
 888:	ee 5d       	subi	r30, 0xDE	; 222
 88a:	fc 4f       	sbci	r31, 0xFC	; 252
 88c:	80 83       	st	Z, r24
		case TWI_MRX_ADR_ACK:       // SLA+R has been tramsmitted and ACK received
		if (TWI_bufPtr < (TWI_msgSize-1) )                  // Detect the last byte to NACK it.
 88e:	20 91 1f 03 	lds	r18, 0x031F
 892:	30 e0       	ldi	r19, 0x00	; 0
 894:	80 91 21 03 	lds	r24, 0x0321
 898:	90 e0       	ldi	r25, 0x00	; 0
 89a:	01 97       	sbiw	r24, 0x01	; 1
 89c:	28 17       	cp	r18, r24
 89e:	39 07       	cpc	r19, r25
 8a0:	24 f4       	brge	.+8      	; 0x8aa <__vector_39+0xa8>
		{
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 8a2:	85 ec       	ldi	r24, 0xC5	; 197
 8a4:	80 93 bc 00 	sts	0x00BC, r24
 8a8:	20 c0       	rjmp	.+64     	; 0x8ea <__vector_39+0xe8>
			(1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag to read next byte
			(1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send ACK after reception
			(0<<TWWC);                                 //
		}else                    // Send NACK after next reception
		{
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 8aa:	85 e8       	ldi	r24, 0x85	; 133
 8ac:	80 93 bc 00 	sts	0x00BC, r24
 8b0:	1c c0       	rjmp	.+56     	; 0x8ea <__vector_39+0xe8>
			(0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send NACK after reception
			(0<<TWWC);                                 //
		}
		break;
		case TWI_MRX_DATA_NACK:     // Data byte has been received and NACK tramsmitted
		TWI_buf[TWI_bufPtr] = TWDR;
 8b2:	80 91 bb 00 	lds	r24, 0x00BB
 8b6:	e0 91 1f 03 	lds	r30, 0x031F
 8ba:	f0 e0       	ldi	r31, 0x00	; 0
 8bc:	ee 5d       	subi	r30, 0xDE	; 222
 8be:	fc 4f       	sbci	r31, 0xFC	; 252
 8c0:	80 83       	st	Z, r24
		TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully.
 8c2:	80 91 20 03 	lds	r24, 0x0320
 8c6:	81 60       	ori	r24, 0x01	; 1
 8c8:	80 93 20 03 	sts	0x0320, r24
		TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 8cc:	84 e9       	ldi	r24, 0x94	; 148
 8ce:	80 93 bc 00 	sts	0x00BC, r24
		(0<<TWIE)|(1<<TWINT)|                      // Disable TWI Interrupt and clear the flag
		(0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
		(0<<TWWC);                                 //
		break;
 8d2:	0b c0       	rjmp	.+22     	; 0x8ea <__vector_39+0xe8>
		case TWI_ARB_LOST:          // Arbitration lost
		TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 8d4:	85 ea       	ldi	r24, 0xA5	; 165
 8d6:	80 93 bc 00 	sts	0x00BC, r24
		(1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag
		(0<<TWEA)|(1<<TWSTA)|(0<<TWSTO)|           // Initiate a (RE)START condition.
		(0<<TWWC);                                 //
		break;
 8da:	07 c0       	rjmp	.+14     	; 0x8ea <__vector_39+0xe8>
		case TWI_MRX_ADR_NACK:      // SLA+R has been tramsmitted and NACK received
		case TWI_MTX_DATA_NACK:     // Data byte has been tramsmitted and NACK received
		//    case TWI_NO_STATE              // No relevant state information available; TWINT = ?0?
		case TWI_BUS_ERROR:         // Bus error due to an illegal START or STOP condition
		default:
		TWI_state = TWSR;                                 // Store TWSR and automatically sets clears noErrors bit.
 8dc:	80 91 b9 00 	lds	r24, 0x00B9
 8e0:	80 93 0e 02 	sts	0x020E, r24
		// Reset TWI Interface
		TWCR = (1<<TWEN)|                                 // Enable TWI-interface and release TWI pins
 8e4:	84 e0       	ldi	r24, 0x04	; 4
 8e6:	80 93 bc 00 	sts	0x00BC, r24
		(0<<TWIE)|(0<<TWINT)|                      // Disable Interupt
		(0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // No Signal requests
		(0<<TWWC);                                 //
	}
 8ea:	ff 91       	pop	r31
 8ec:	ef 91       	pop	r30
 8ee:	bf 91       	pop	r27
 8f0:	af 91       	pop	r26
 8f2:	9f 91       	pop	r25
 8f4:	8f 91       	pop	r24
 8f6:	3f 91       	pop	r19
 8f8:	2f 91       	pop	r18
 8fa:	0f 90       	pop	r0
 8fc:	0b be       	out	0x3b, r0	; 59
 8fe:	0f 90       	pop	r0
 900:	0f be       	out	0x3f, r0	; 63
 902:	0f 90       	pop	r0
 904:	1f 90       	pop	r1
 906:	18 95       	reti

00000908 <__divmodhi4>:
 908:	97 fb       	bst	r25, 7
 90a:	07 2e       	mov	r0, r23
 90c:	16 f4       	brtc	.+4      	; 0x912 <__divmodhi4+0xa>
 90e:	00 94       	com	r0
 910:	06 d0       	rcall	.+12     	; 0x91e <__divmodhi4_neg1>
 912:	77 fd       	sbrc	r23, 7
 914:	08 d0       	rcall	.+16     	; 0x926 <__divmodhi4_neg2>
 916:	11 d0       	rcall	.+34     	; 0x93a <__udivmodhi4>
 918:	07 fc       	sbrc	r0, 7
 91a:	05 d0       	rcall	.+10     	; 0x926 <__divmodhi4_neg2>
 91c:	3e f4       	brtc	.+14     	; 0x92c <__divmodhi4_exit>

0000091e <__divmodhi4_neg1>:
 91e:	90 95       	com	r25
 920:	81 95       	neg	r24
 922:	9f 4f       	sbci	r25, 0xFF	; 255
 924:	08 95       	ret

00000926 <__divmodhi4_neg2>:
 926:	70 95       	com	r23
 928:	61 95       	neg	r22
 92a:	7f 4f       	sbci	r23, 0xFF	; 255

0000092c <__divmodhi4_exit>:
 92c:	08 95       	ret

0000092e <__tablejump2__>:
 92e:	ee 0f       	add	r30, r30
 930:	ff 1f       	adc	r31, r31

00000932 <__tablejump__>:
 932:	05 90       	lpm	r0, Z+
 934:	f4 91       	lpm	r31, Z
 936:	e0 2d       	mov	r30, r0
 938:	19 94       	eijmp

0000093a <__udivmodhi4>:
 93a:	aa 1b       	sub	r26, r26
 93c:	bb 1b       	sub	r27, r27
 93e:	51 e1       	ldi	r21, 0x11	; 17
 940:	07 c0       	rjmp	.+14     	; 0x950 <__udivmodhi4_ep>

00000942 <__udivmodhi4_loop>:
 942:	aa 1f       	adc	r26, r26
 944:	bb 1f       	adc	r27, r27
 946:	a6 17       	cp	r26, r22
 948:	b7 07       	cpc	r27, r23
 94a:	10 f0       	brcs	.+4      	; 0x950 <__udivmodhi4_ep>
 94c:	a6 1b       	sub	r26, r22
 94e:	b7 0b       	sbc	r27, r23

00000950 <__udivmodhi4_ep>:
 950:	88 1f       	adc	r24, r24
 952:	99 1f       	adc	r25, r25
 954:	5a 95       	dec	r21
 956:	a9 f7       	brne	.-22     	; 0x942 <__udivmodhi4_loop>
 958:	80 95       	com	r24
 95a:	90 95       	com	r25
 95c:	bc 01       	movw	r22, r24
 95e:	cd 01       	movw	r24, r26
 960:	08 95       	ret

00000962 <printf>:
 962:	cf 93       	push	r28
 964:	df 93       	push	r29
 966:	cd b7       	in	r28, 0x3d	; 61
 968:	de b7       	in	r29, 0x3e	; 62
 96a:	fe 01       	movw	r30, r28
 96c:	36 96       	adiw	r30, 0x06	; 6
 96e:	61 91       	ld	r22, Z+
 970:	71 91       	ld	r23, Z+
 972:	af 01       	movw	r20, r30
 974:	80 91 29 03 	lds	r24, 0x0329
 978:	90 91 2a 03 	lds	r25, 0x032A
 97c:	30 d0       	rcall	.+96     	; 0x9de <vfprintf>
 97e:	df 91       	pop	r29
 980:	cf 91       	pop	r28
 982:	08 95       	ret

00000984 <puts>:
 984:	0f 93       	push	r16
 986:	1f 93       	push	r17
 988:	cf 93       	push	r28
 98a:	df 93       	push	r29
 98c:	e0 91 29 03 	lds	r30, 0x0329
 990:	f0 91 2a 03 	lds	r31, 0x032A
 994:	23 81       	ldd	r18, Z+3	; 0x03
 996:	21 ff       	sbrs	r18, 1
 998:	1b c0       	rjmp	.+54     	; 0x9d0 <puts+0x4c>
 99a:	ec 01       	movw	r28, r24
 99c:	00 e0       	ldi	r16, 0x00	; 0
 99e:	10 e0       	ldi	r17, 0x00	; 0
 9a0:	89 91       	ld	r24, Y+
 9a2:	60 91 29 03 	lds	r22, 0x0329
 9a6:	70 91 2a 03 	lds	r23, 0x032A
 9aa:	db 01       	movw	r26, r22
 9ac:	18 96       	adiw	r26, 0x08	; 8
 9ae:	ed 91       	ld	r30, X+
 9b0:	fc 91       	ld	r31, X
 9b2:	19 97       	sbiw	r26, 0x09	; 9
 9b4:	88 23       	and	r24, r24
 9b6:	31 f0       	breq	.+12     	; 0x9c4 <puts+0x40>
 9b8:	19 95       	eicall
 9ba:	89 2b       	or	r24, r25
 9bc:	89 f3       	breq	.-30     	; 0x9a0 <puts+0x1c>
 9be:	0f ef       	ldi	r16, 0xFF	; 255
 9c0:	1f ef       	ldi	r17, 0xFF	; 255
 9c2:	ee cf       	rjmp	.-36     	; 0x9a0 <puts+0x1c>
 9c4:	8a e0       	ldi	r24, 0x0A	; 10
 9c6:	19 95       	eicall
 9c8:	89 2b       	or	r24, r25
 9ca:	11 f4       	brne	.+4      	; 0x9d0 <puts+0x4c>
 9cc:	c8 01       	movw	r24, r16
 9ce:	02 c0       	rjmp	.+4      	; 0x9d4 <puts+0x50>
 9d0:	8f ef       	ldi	r24, 0xFF	; 255
 9d2:	9f ef       	ldi	r25, 0xFF	; 255
 9d4:	df 91       	pop	r29
 9d6:	cf 91       	pop	r28
 9d8:	1f 91       	pop	r17
 9da:	0f 91       	pop	r16
 9dc:	08 95       	ret

000009de <vfprintf>:
 9de:	2f 92       	push	r2
 9e0:	3f 92       	push	r3
 9e2:	4f 92       	push	r4
 9e4:	5f 92       	push	r5
 9e6:	6f 92       	push	r6
 9e8:	7f 92       	push	r7
 9ea:	8f 92       	push	r8
 9ec:	9f 92       	push	r9
 9ee:	af 92       	push	r10
 9f0:	bf 92       	push	r11
 9f2:	cf 92       	push	r12
 9f4:	df 92       	push	r13
 9f6:	ef 92       	push	r14
 9f8:	ff 92       	push	r15
 9fa:	0f 93       	push	r16
 9fc:	1f 93       	push	r17
 9fe:	cf 93       	push	r28
 a00:	df 93       	push	r29
 a02:	cd b7       	in	r28, 0x3d	; 61
 a04:	de b7       	in	r29, 0x3e	; 62
 a06:	2c 97       	sbiw	r28, 0x0c	; 12
 a08:	0f b6       	in	r0, 0x3f	; 63
 a0a:	f8 94       	cli
 a0c:	de bf       	out	0x3e, r29	; 62
 a0e:	0f be       	out	0x3f, r0	; 63
 a10:	cd bf       	out	0x3d, r28	; 61
 a12:	7c 01       	movw	r14, r24
 a14:	6b 01       	movw	r12, r22
 a16:	8a 01       	movw	r16, r20
 a18:	fc 01       	movw	r30, r24
 a1a:	17 82       	std	Z+7, r1	; 0x07
 a1c:	16 82       	std	Z+6, r1	; 0x06
 a1e:	83 81       	ldd	r24, Z+3	; 0x03
 a20:	81 ff       	sbrs	r24, 1
 a22:	b0 c1       	rjmp	.+864    	; 0xd84 <vfprintf+0x3a6>
 a24:	ce 01       	movw	r24, r28
 a26:	01 96       	adiw	r24, 0x01	; 1
 a28:	4c 01       	movw	r8, r24
 a2a:	f7 01       	movw	r30, r14
 a2c:	93 81       	ldd	r25, Z+3	; 0x03
 a2e:	f6 01       	movw	r30, r12
 a30:	93 fd       	sbrc	r25, 3
 a32:	85 91       	lpm	r24, Z+
 a34:	93 ff       	sbrs	r25, 3
 a36:	81 91       	ld	r24, Z+
 a38:	6f 01       	movw	r12, r30
 a3a:	88 23       	and	r24, r24
 a3c:	09 f4       	brne	.+2      	; 0xa40 <vfprintf+0x62>
 a3e:	9e c1       	rjmp	.+828    	; 0xd7c <vfprintf+0x39e>
 a40:	85 32       	cpi	r24, 0x25	; 37
 a42:	39 f4       	brne	.+14     	; 0xa52 <vfprintf+0x74>
 a44:	93 fd       	sbrc	r25, 3
 a46:	85 91       	lpm	r24, Z+
 a48:	93 ff       	sbrs	r25, 3
 a4a:	81 91       	ld	r24, Z+
 a4c:	6f 01       	movw	r12, r30
 a4e:	85 32       	cpi	r24, 0x25	; 37
 a50:	21 f4       	brne	.+8      	; 0xa5a <vfprintf+0x7c>
 a52:	b7 01       	movw	r22, r14
 a54:	90 e0       	ldi	r25, 0x00	; 0
 a56:	c7 d1       	rcall	.+910    	; 0xde6 <fputc>
 a58:	e8 cf       	rjmp	.-48     	; 0xa2a <vfprintf+0x4c>
 a5a:	51 2c       	mov	r5, r1
 a5c:	31 2c       	mov	r3, r1
 a5e:	20 e0       	ldi	r18, 0x00	; 0
 a60:	20 32       	cpi	r18, 0x20	; 32
 a62:	a0 f4       	brcc	.+40     	; 0xa8c <vfprintf+0xae>
 a64:	8b 32       	cpi	r24, 0x2B	; 43
 a66:	69 f0       	breq	.+26     	; 0xa82 <vfprintf+0xa4>
 a68:	30 f4       	brcc	.+12     	; 0xa76 <vfprintf+0x98>
 a6a:	80 32       	cpi	r24, 0x20	; 32
 a6c:	59 f0       	breq	.+22     	; 0xa84 <vfprintf+0xa6>
 a6e:	83 32       	cpi	r24, 0x23	; 35
 a70:	69 f4       	brne	.+26     	; 0xa8c <vfprintf+0xae>
 a72:	20 61       	ori	r18, 0x10	; 16
 a74:	2c c0       	rjmp	.+88     	; 0xace <vfprintf+0xf0>
 a76:	8d 32       	cpi	r24, 0x2D	; 45
 a78:	39 f0       	breq	.+14     	; 0xa88 <vfprintf+0xaa>
 a7a:	80 33       	cpi	r24, 0x30	; 48
 a7c:	39 f4       	brne	.+14     	; 0xa8c <vfprintf+0xae>
 a7e:	21 60       	ori	r18, 0x01	; 1
 a80:	26 c0       	rjmp	.+76     	; 0xace <vfprintf+0xf0>
 a82:	22 60       	ori	r18, 0x02	; 2
 a84:	24 60       	ori	r18, 0x04	; 4
 a86:	23 c0       	rjmp	.+70     	; 0xace <vfprintf+0xf0>
 a88:	28 60       	ori	r18, 0x08	; 8
 a8a:	21 c0       	rjmp	.+66     	; 0xace <vfprintf+0xf0>
 a8c:	27 fd       	sbrc	r18, 7
 a8e:	27 c0       	rjmp	.+78     	; 0xade <vfprintf+0x100>
 a90:	30 ed       	ldi	r19, 0xD0	; 208
 a92:	38 0f       	add	r19, r24
 a94:	3a 30       	cpi	r19, 0x0A	; 10
 a96:	78 f4       	brcc	.+30     	; 0xab6 <vfprintf+0xd8>
 a98:	26 ff       	sbrs	r18, 6
 a9a:	06 c0       	rjmp	.+12     	; 0xaa8 <vfprintf+0xca>
 a9c:	fa e0       	ldi	r31, 0x0A	; 10
 a9e:	5f 9e       	mul	r5, r31
 aa0:	30 0d       	add	r19, r0
 aa2:	11 24       	eor	r1, r1
 aa4:	53 2e       	mov	r5, r19
 aa6:	13 c0       	rjmp	.+38     	; 0xace <vfprintf+0xf0>
 aa8:	8a e0       	ldi	r24, 0x0A	; 10
 aaa:	38 9e       	mul	r3, r24
 aac:	30 0d       	add	r19, r0
 aae:	11 24       	eor	r1, r1
 ab0:	33 2e       	mov	r3, r19
 ab2:	20 62       	ori	r18, 0x20	; 32
 ab4:	0c c0       	rjmp	.+24     	; 0xace <vfprintf+0xf0>
 ab6:	8e 32       	cpi	r24, 0x2E	; 46
 ab8:	21 f4       	brne	.+8      	; 0xac2 <vfprintf+0xe4>
 aba:	26 fd       	sbrc	r18, 6
 abc:	5f c1       	rjmp	.+702    	; 0xd7c <vfprintf+0x39e>
 abe:	20 64       	ori	r18, 0x40	; 64
 ac0:	06 c0       	rjmp	.+12     	; 0xace <vfprintf+0xf0>
 ac2:	8c 36       	cpi	r24, 0x6C	; 108
 ac4:	11 f4       	brne	.+4      	; 0xaca <vfprintf+0xec>
 ac6:	20 68       	ori	r18, 0x80	; 128
 ac8:	02 c0       	rjmp	.+4      	; 0xace <vfprintf+0xf0>
 aca:	88 36       	cpi	r24, 0x68	; 104
 acc:	41 f4       	brne	.+16     	; 0xade <vfprintf+0x100>
 ace:	f6 01       	movw	r30, r12
 ad0:	93 fd       	sbrc	r25, 3
 ad2:	85 91       	lpm	r24, Z+
 ad4:	93 ff       	sbrs	r25, 3
 ad6:	81 91       	ld	r24, Z+
 ad8:	6f 01       	movw	r12, r30
 ada:	81 11       	cpse	r24, r1
 adc:	c1 cf       	rjmp	.-126    	; 0xa60 <vfprintf+0x82>
 ade:	98 2f       	mov	r25, r24
 ae0:	9f 7d       	andi	r25, 0xDF	; 223
 ae2:	95 54       	subi	r25, 0x45	; 69
 ae4:	93 30       	cpi	r25, 0x03	; 3
 ae6:	28 f4       	brcc	.+10     	; 0xaf2 <vfprintf+0x114>
 ae8:	0c 5f       	subi	r16, 0xFC	; 252
 aea:	1f 4f       	sbci	r17, 0xFF	; 255
 aec:	ff e3       	ldi	r31, 0x3F	; 63
 aee:	f9 83       	std	Y+1, r31	; 0x01
 af0:	0d c0       	rjmp	.+26     	; 0xb0c <vfprintf+0x12e>
 af2:	83 36       	cpi	r24, 0x63	; 99
 af4:	31 f0       	breq	.+12     	; 0xb02 <vfprintf+0x124>
 af6:	83 37       	cpi	r24, 0x73	; 115
 af8:	71 f0       	breq	.+28     	; 0xb16 <vfprintf+0x138>
 afa:	83 35       	cpi	r24, 0x53	; 83
 afc:	09 f0       	breq	.+2      	; 0xb00 <vfprintf+0x122>
 afe:	57 c0       	rjmp	.+174    	; 0xbae <vfprintf+0x1d0>
 b00:	21 c0       	rjmp	.+66     	; 0xb44 <vfprintf+0x166>
 b02:	f8 01       	movw	r30, r16
 b04:	80 81       	ld	r24, Z
 b06:	89 83       	std	Y+1, r24	; 0x01
 b08:	0e 5f       	subi	r16, 0xFE	; 254
 b0a:	1f 4f       	sbci	r17, 0xFF	; 255
 b0c:	44 24       	eor	r4, r4
 b0e:	43 94       	inc	r4
 b10:	51 2c       	mov	r5, r1
 b12:	54 01       	movw	r10, r8
 b14:	14 c0       	rjmp	.+40     	; 0xb3e <vfprintf+0x160>
 b16:	38 01       	movw	r6, r16
 b18:	f2 e0       	ldi	r31, 0x02	; 2
 b1a:	6f 0e       	add	r6, r31
 b1c:	71 1c       	adc	r7, r1
 b1e:	f8 01       	movw	r30, r16
 b20:	a0 80       	ld	r10, Z
 b22:	b1 80       	ldd	r11, Z+1	; 0x01
 b24:	26 ff       	sbrs	r18, 6
 b26:	03 c0       	rjmp	.+6      	; 0xb2e <vfprintf+0x150>
 b28:	65 2d       	mov	r22, r5
 b2a:	70 e0       	ldi	r23, 0x00	; 0
 b2c:	02 c0       	rjmp	.+4      	; 0xb32 <vfprintf+0x154>
 b2e:	6f ef       	ldi	r22, 0xFF	; 255
 b30:	7f ef       	ldi	r23, 0xFF	; 255
 b32:	c5 01       	movw	r24, r10
 b34:	2c 87       	std	Y+12, r18	; 0x0c
 b36:	4c d1       	rcall	.+664    	; 0xdd0 <strnlen>
 b38:	2c 01       	movw	r4, r24
 b3a:	83 01       	movw	r16, r6
 b3c:	2c 85       	ldd	r18, Y+12	; 0x0c
 b3e:	2f 77       	andi	r18, 0x7F	; 127
 b40:	22 2e       	mov	r2, r18
 b42:	16 c0       	rjmp	.+44     	; 0xb70 <vfprintf+0x192>
 b44:	38 01       	movw	r6, r16
 b46:	f2 e0       	ldi	r31, 0x02	; 2
 b48:	6f 0e       	add	r6, r31
 b4a:	71 1c       	adc	r7, r1
 b4c:	f8 01       	movw	r30, r16
 b4e:	a0 80       	ld	r10, Z
 b50:	b1 80       	ldd	r11, Z+1	; 0x01
 b52:	26 ff       	sbrs	r18, 6
 b54:	03 c0       	rjmp	.+6      	; 0xb5c <vfprintf+0x17e>
 b56:	65 2d       	mov	r22, r5
 b58:	70 e0       	ldi	r23, 0x00	; 0
 b5a:	02 c0       	rjmp	.+4      	; 0xb60 <vfprintf+0x182>
 b5c:	6f ef       	ldi	r22, 0xFF	; 255
 b5e:	7f ef       	ldi	r23, 0xFF	; 255
 b60:	c5 01       	movw	r24, r10
 b62:	2c 87       	std	Y+12, r18	; 0x0c
 b64:	2a d1       	rcall	.+596    	; 0xdba <strnlen_P>
 b66:	2c 01       	movw	r4, r24
 b68:	2c 85       	ldd	r18, Y+12	; 0x0c
 b6a:	20 68       	ori	r18, 0x80	; 128
 b6c:	22 2e       	mov	r2, r18
 b6e:	83 01       	movw	r16, r6
 b70:	23 fc       	sbrc	r2, 3
 b72:	19 c0       	rjmp	.+50     	; 0xba6 <vfprintf+0x1c8>
 b74:	83 2d       	mov	r24, r3
 b76:	90 e0       	ldi	r25, 0x00	; 0
 b78:	48 16       	cp	r4, r24
 b7a:	59 06       	cpc	r5, r25
 b7c:	a0 f4       	brcc	.+40     	; 0xba6 <vfprintf+0x1c8>
 b7e:	b7 01       	movw	r22, r14
 b80:	80 e2       	ldi	r24, 0x20	; 32
 b82:	90 e0       	ldi	r25, 0x00	; 0
 b84:	30 d1       	rcall	.+608    	; 0xde6 <fputc>
 b86:	3a 94       	dec	r3
 b88:	f5 cf       	rjmp	.-22     	; 0xb74 <vfprintf+0x196>
 b8a:	f5 01       	movw	r30, r10
 b8c:	27 fc       	sbrc	r2, 7
 b8e:	85 91       	lpm	r24, Z+
 b90:	27 fe       	sbrs	r2, 7
 b92:	81 91       	ld	r24, Z+
 b94:	5f 01       	movw	r10, r30
 b96:	b7 01       	movw	r22, r14
 b98:	90 e0       	ldi	r25, 0x00	; 0
 b9a:	25 d1       	rcall	.+586    	; 0xde6 <fputc>
 b9c:	31 10       	cpse	r3, r1
 b9e:	3a 94       	dec	r3
 ba0:	f1 e0       	ldi	r31, 0x01	; 1
 ba2:	4f 1a       	sub	r4, r31
 ba4:	51 08       	sbc	r5, r1
 ba6:	41 14       	cp	r4, r1
 ba8:	51 04       	cpc	r5, r1
 baa:	79 f7       	brne	.-34     	; 0xb8a <vfprintf+0x1ac>
 bac:	de c0       	rjmp	.+444    	; 0xd6a <vfprintf+0x38c>
 bae:	84 36       	cpi	r24, 0x64	; 100
 bb0:	11 f0       	breq	.+4      	; 0xbb6 <vfprintf+0x1d8>
 bb2:	89 36       	cpi	r24, 0x69	; 105
 bb4:	31 f5       	brne	.+76     	; 0xc02 <vfprintf+0x224>
 bb6:	f8 01       	movw	r30, r16
 bb8:	27 ff       	sbrs	r18, 7
 bba:	07 c0       	rjmp	.+14     	; 0xbca <vfprintf+0x1ec>
 bbc:	60 81       	ld	r22, Z
 bbe:	71 81       	ldd	r23, Z+1	; 0x01
 bc0:	82 81       	ldd	r24, Z+2	; 0x02
 bc2:	93 81       	ldd	r25, Z+3	; 0x03
 bc4:	0c 5f       	subi	r16, 0xFC	; 252
 bc6:	1f 4f       	sbci	r17, 0xFF	; 255
 bc8:	08 c0       	rjmp	.+16     	; 0xbda <vfprintf+0x1fc>
 bca:	60 81       	ld	r22, Z
 bcc:	71 81       	ldd	r23, Z+1	; 0x01
 bce:	88 27       	eor	r24, r24
 bd0:	77 fd       	sbrc	r23, 7
 bd2:	80 95       	com	r24
 bd4:	98 2f       	mov	r25, r24
 bd6:	0e 5f       	subi	r16, 0xFE	; 254
 bd8:	1f 4f       	sbci	r17, 0xFF	; 255
 bda:	2f 76       	andi	r18, 0x6F	; 111
 bdc:	b2 2e       	mov	r11, r18
 bde:	97 ff       	sbrs	r25, 7
 be0:	09 c0       	rjmp	.+18     	; 0xbf4 <vfprintf+0x216>
 be2:	90 95       	com	r25
 be4:	80 95       	com	r24
 be6:	70 95       	com	r23
 be8:	61 95       	neg	r22
 bea:	7f 4f       	sbci	r23, 0xFF	; 255
 bec:	8f 4f       	sbci	r24, 0xFF	; 255
 bee:	9f 4f       	sbci	r25, 0xFF	; 255
 bf0:	20 68       	ori	r18, 0x80	; 128
 bf2:	b2 2e       	mov	r11, r18
 bf4:	2a e0       	ldi	r18, 0x0A	; 10
 bf6:	30 e0       	ldi	r19, 0x00	; 0
 bf8:	a4 01       	movw	r20, r8
 bfa:	27 d1       	rcall	.+590    	; 0xe4a <__ultoa_invert>
 bfc:	a8 2e       	mov	r10, r24
 bfe:	a8 18       	sub	r10, r8
 c00:	43 c0       	rjmp	.+134    	; 0xc88 <vfprintf+0x2aa>
 c02:	85 37       	cpi	r24, 0x75	; 117
 c04:	29 f4       	brne	.+10     	; 0xc10 <vfprintf+0x232>
 c06:	2f 7e       	andi	r18, 0xEF	; 239
 c08:	b2 2e       	mov	r11, r18
 c0a:	2a e0       	ldi	r18, 0x0A	; 10
 c0c:	30 e0       	ldi	r19, 0x00	; 0
 c0e:	25 c0       	rjmp	.+74     	; 0xc5a <vfprintf+0x27c>
 c10:	f2 2f       	mov	r31, r18
 c12:	f9 7f       	andi	r31, 0xF9	; 249
 c14:	bf 2e       	mov	r11, r31
 c16:	8f 36       	cpi	r24, 0x6F	; 111
 c18:	c1 f0       	breq	.+48     	; 0xc4a <vfprintf+0x26c>
 c1a:	18 f4       	brcc	.+6      	; 0xc22 <vfprintf+0x244>
 c1c:	88 35       	cpi	r24, 0x58	; 88
 c1e:	79 f0       	breq	.+30     	; 0xc3e <vfprintf+0x260>
 c20:	ad c0       	rjmp	.+346    	; 0xd7c <vfprintf+0x39e>
 c22:	80 37       	cpi	r24, 0x70	; 112
 c24:	19 f0       	breq	.+6      	; 0xc2c <vfprintf+0x24e>
 c26:	88 37       	cpi	r24, 0x78	; 120
 c28:	21 f0       	breq	.+8      	; 0xc32 <vfprintf+0x254>
 c2a:	a8 c0       	rjmp	.+336    	; 0xd7c <vfprintf+0x39e>
 c2c:	2f 2f       	mov	r18, r31
 c2e:	20 61       	ori	r18, 0x10	; 16
 c30:	b2 2e       	mov	r11, r18
 c32:	b4 fe       	sbrs	r11, 4
 c34:	0d c0       	rjmp	.+26     	; 0xc50 <vfprintf+0x272>
 c36:	8b 2d       	mov	r24, r11
 c38:	84 60       	ori	r24, 0x04	; 4
 c3a:	b8 2e       	mov	r11, r24
 c3c:	09 c0       	rjmp	.+18     	; 0xc50 <vfprintf+0x272>
 c3e:	24 ff       	sbrs	r18, 4
 c40:	0a c0       	rjmp	.+20     	; 0xc56 <vfprintf+0x278>
 c42:	9f 2f       	mov	r25, r31
 c44:	96 60       	ori	r25, 0x06	; 6
 c46:	b9 2e       	mov	r11, r25
 c48:	06 c0       	rjmp	.+12     	; 0xc56 <vfprintf+0x278>
 c4a:	28 e0       	ldi	r18, 0x08	; 8
 c4c:	30 e0       	ldi	r19, 0x00	; 0
 c4e:	05 c0       	rjmp	.+10     	; 0xc5a <vfprintf+0x27c>
 c50:	20 e1       	ldi	r18, 0x10	; 16
 c52:	30 e0       	ldi	r19, 0x00	; 0
 c54:	02 c0       	rjmp	.+4      	; 0xc5a <vfprintf+0x27c>
 c56:	20 e1       	ldi	r18, 0x10	; 16
 c58:	32 e0       	ldi	r19, 0x02	; 2
 c5a:	f8 01       	movw	r30, r16
 c5c:	b7 fe       	sbrs	r11, 7
 c5e:	07 c0       	rjmp	.+14     	; 0xc6e <vfprintf+0x290>
 c60:	60 81       	ld	r22, Z
 c62:	71 81       	ldd	r23, Z+1	; 0x01
 c64:	82 81       	ldd	r24, Z+2	; 0x02
 c66:	93 81       	ldd	r25, Z+3	; 0x03
 c68:	0c 5f       	subi	r16, 0xFC	; 252
 c6a:	1f 4f       	sbci	r17, 0xFF	; 255
 c6c:	06 c0       	rjmp	.+12     	; 0xc7a <vfprintf+0x29c>
 c6e:	60 81       	ld	r22, Z
 c70:	71 81       	ldd	r23, Z+1	; 0x01
 c72:	80 e0       	ldi	r24, 0x00	; 0
 c74:	90 e0       	ldi	r25, 0x00	; 0
 c76:	0e 5f       	subi	r16, 0xFE	; 254
 c78:	1f 4f       	sbci	r17, 0xFF	; 255
 c7a:	a4 01       	movw	r20, r8
 c7c:	e6 d0       	rcall	.+460    	; 0xe4a <__ultoa_invert>
 c7e:	a8 2e       	mov	r10, r24
 c80:	a8 18       	sub	r10, r8
 c82:	fb 2d       	mov	r31, r11
 c84:	ff 77       	andi	r31, 0x7F	; 127
 c86:	bf 2e       	mov	r11, r31
 c88:	b6 fe       	sbrs	r11, 6
 c8a:	0b c0       	rjmp	.+22     	; 0xca2 <vfprintf+0x2c4>
 c8c:	2b 2d       	mov	r18, r11
 c8e:	2e 7f       	andi	r18, 0xFE	; 254
 c90:	a5 14       	cp	r10, r5
 c92:	50 f4       	brcc	.+20     	; 0xca8 <vfprintf+0x2ca>
 c94:	b4 fe       	sbrs	r11, 4
 c96:	0a c0       	rjmp	.+20     	; 0xcac <vfprintf+0x2ce>
 c98:	b2 fc       	sbrc	r11, 2
 c9a:	08 c0       	rjmp	.+16     	; 0xcac <vfprintf+0x2ce>
 c9c:	2b 2d       	mov	r18, r11
 c9e:	2e 7e       	andi	r18, 0xEE	; 238
 ca0:	05 c0       	rjmp	.+10     	; 0xcac <vfprintf+0x2ce>
 ca2:	7a 2c       	mov	r7, r10
 ca4:	2b 2d       	mov	r18, r11
 ca6:	03 c0       	rjmp	.+6      	; 0xcae <vfprintf+0x2d0>
 ca8:	7a 2c       	mov	r7, r10
 caa:	01 c0       	rjmp	.+2      	; 0xcae <vfprintf+0x2d0>
 cac:	75 2c       	mov	r7, r5
 cae:	24 ff       	sbrs	r18, 4
 cb0:	0d c0       	rjmp	.+26     	; 0xccc <vfprintf+0x2ee>
 cb2:	fe 01       	movw	r30, r28
 cb4:	ea 0d       	add	r30, r10
 cb6:	f1 1d       	adc	r31, r1
 cb8:	80 81       	ld	r24, Z
 cba:	80 33       	cpi	r24, 0x30	; 48
 cbc:	11 f4       	brne	.+4      	; 0xcc2 <vfprintf+0x2e4>
 cbe:	29 7e       	andi	r18, 0xE9	; 233
 cc0:	09 c0       	rjmp	.+18     	; 0xcd4 <vfprintf+0x2f6>
 cc2:	22 ff       	sbrs	r18, 2
 cc4:	06 c0       	rjmp	.+12     	; 0xcd2 <vfprintf+0x2f4>
 cc6:	73 94       	inc	r7
 cc8:	73 94       	inc	r7
 cca:	04 c0       	rjmp	.+8      	; 0xcd4 <vfprintf+0x2f6>
 ccc:	82 2f       	mov	r24, r18
 cce:	86 78       	andi	r24, 0x86	; 134
 cd0:	09 f0       	breq	.+2      	; 0xcd4 <vfprintf+0x2f6>
 cd2:	73 94       	inc	r7
 cd4:	23 fd       	sbrc	r18, 3
 cd6:	12 c0       	rjmp	.+36     	; 0xcfc <vfprintf+0x31e>
 cd8:	20 ff       	sbrs	r18, 0
 cda:	06 c0       	rjmp	.+12     	; 0xce8 <vfprintf+0x30a>
 cdc:	5a 2c       	mov	r5, r10
 cde:	73 14       	cp	r7, r3
 ce0:	18 f4       	brcc	.+6      	; 0xce8 <vfprintf+0x30a>
 ce2:	53 0c       	add	r5, r3
 ce4:	57 18       	sub	r5, r7
 ce6:	73 2c       	mov	r7, r3
 ce8:	73 14       	cp	r7, r3
 cea:	60 f4       	brcc	.+24     	; 0xd04 <vfprintf+0x326>
 cec:	b7 01       	movw	r22, r14
 cee:	80 e2       	ldi	r24, 0x20	; 32
 cf0:	90 e0       	ldi	r25, 0x00	; 0
 cf2:	2c 87       	std	Y+12, r18	; 0x0c
 cf4:	78 d0       	rcall	.+240    	; 0xde6 <fputc>
 cf6:	73 94       	inc	r7
 cf8:	2c 85       	ldd	r18, Y+12	; 0x0c
 cfa:	f6 cf       	rjmp	.-20     	; 0xce8 <vfprintf+0x30a>
 cfc:	73 14       	cp	r7, r3
 cfe:	10 f4       	brcc	.+4      	; 0xd04 <vfprintf+0x326>
 d00:	37 18       	sub	r3, r7
 d02:	01 c0       	rjmp	.+2      	; 0xd06 <vfprintf+0x328>
 d04:	31 2c       	mov	r3, r1
 d06:	24 ff       	sbrs	r18, 4
 d08:	11 c0       	rjmp	.+34     	; 0xd2c <vfprintf+0x34e>
 d0a:	b7 01       	movw	r22, r14
 d0c:	80 e3       	ldi	r24, 0x30	; 48
 d0e:	90 e0       	ldi	r25, 0x00	; 0
 d10:	2c 87       	std	Y+12, r18	; 0x0c
 d12:	69 d0       	rcall	.+210    	; 0xde6 <fputc>
 d14:	2c 85       	ldd	r18, Y+12	; 0x0c
 d16:	22 ff       	sbrs	r18, 2
 d18:	16 c0       	rjmp	.+44     	; 0xd46 <vfprintf+0x368>
 d1a:	21 ff       	sbrs	r18, 1
 d1c:	03 c0       	rjmp	.+6      	; 0xd24 <vfprintf+0x346>
 d1e:	88 e5       	ldi	r24, 0x58	; 88
 d20:	90 e0       	ldi	r25, 0x00	; 0
 d22:	02 c0       	rjmp	.+4      	; 0xd28 <vfprintf+0x34a>
 d24:	88 e7       	ldi	r24, 0x78	; 120
 d26:	90 e0       	ldi	r25, 0x00	; 0
 d28:	b7 01       	movw	r22, r14
 d2a:	0c c0       	rjmp	.+24     	; 0xd44 <vfprintf+0x366>
 d2c:	82 2f       	mov	r24, r18
 d2e:	86 78       	andi	r24, 0x86	; 134
 d30:	51 f0       	breq	.+20     	; 0xd46 <vfprintf+0x368>
 d32:	21 fd       	sbrc	r18, 1
 d34:	02 c0       	rjmp	.+4      	; 0xd3a <vfprintf+0x35c>
 d36:	80 e2       	ldi	r24, 0x20	; 32
 d38:	01 c0       	rjmp	.+2      	; 0xd3c <vfprintf+0x35e>
 d3a:	8b e2       	ldi	r24, 0x2B	; 43
 d3c:	27 fd       	sbrc	r18, 7
 d3e:	8d e2       	ldi	r24, 0x2D	; 45
 d40:	b7 01       	movw	r22, r14
 d42:	90 e0       	ldi	r25, 0x00	; 0
 d44:	50 d0       	rcall	.+160    	; 0xde6 <fputc>
 d46:	a5 14       	cp	r10, r5
 d48:	30 f4       	brcc	.+12     	; 0xd56 <vfprintf+0x378>
 d4a:	b7 01       	movw	r22, r14
 d4c:	80 e3       	ldi	r24, 0x30	; 48
 d4e:	90 e0       	ldi	r25, 0x00	; 0
 d50:	4a d0       	rcall	.+148    	; 0xde6 <fputc>
 d52:	5a 94       	dec	r5
 d54:	f8 cf       	rjmp	.-16     	; 0xd46 <vfprintf+0x368>
 d56:	aa 94       	dec	r10
 d58:	f4 01       	movw	r30, r8
 d5a:	ea 0d       	add	r30, r10
 d5c:	f1 1d       	adc	r31, r1
 d5e:	80 81       	ld	r24, Z
 d60:	b7 01       	movw	r22, r14
 d62:	90 e0       	ldi	r25, 0x00	; 0
 d64:	40 d0       	rcall	.+128    	; 0xde6 <fputc>
 d66:	a1 10       	cpse	r10, r1
 d68:	f6 cf       	rjmp	.-20     	; 0xd56 <vfprintf+0x378>
 d6a:	33 20       	and	r3, r3
 d6c:	09 f4       	brne	.+2      	; 0xd70 <vfprintf+0x392>
 d6e:	5d ce       	rjmp	.-838    	; 0xa2a <vfprintf+0x4c>
 d70:	b7 01       	movw	r22, r14
 d72:	80 e2       	ldi	r24, 0x20	; 32
 d74:	90 e0       	ldi	r25, 0x00	; 0
 d76:	37 d0       	rcall	.+110    	; 0xde6 <fputc>
 d78:	3a 94       	dec	r3
 d7a:	f7 cf       	rjmp	.-18     	; 0xd6a <vfprintf+0x38c>
 d7c:	f7 01       	movw	r30, r14
 d7e:	86 81       	ldd	r24, Z+6	; 0x06
 d80:	97 81       	ldd	r25, Z+7	; 0x07
 d82:	02 c0       	rjmp	.+4      	; 0xd88 <vfprintf+0x3aa>
 d84:	8f ef       	ldi	r24, 0xFF	; 255
 d86:	9f ef       	ldi	r25, 0xFF	; 255
 d88:	2c 96       	adiw	r28, 0x0c	; 12
 d8a:	0f b6       	in	r0, 0x3f	; 63
 d8c:	f8 94       	cli
 d8e:	de bf       	out	0x3e, r29	; 62
 d90:	0f be       	out	0x3f, r0	; 63
 d92:	cd bf       	out	0x3d, r28	; 61
 d94:	df 91       	pop	r29
 d96:	cf 91       	pop	r28
 d98:	1f 91       	pop	r17
 d9a:	0f 91       	pop	r16
 d9c:	ff 90       	pop	r15
 d9e:	ef 90       	pop	r14
 da0:	df 90       	pop	r13
 da2:	cf 90       	pop	r12
 da4:	bf 90       	pop	r11
 da6:	af 90       	pop	r10
 da8:	9f 90       	pop	r9
 daa:	8f 90       	pop	r8
 dac:	7f 90       	pop	r7
 dae:	6f 90       	pop	r6
 db0:	5f 90       	pop	r5
 db2:	4f 90       	pop	r4
 db4:	3f 90       	pop	r3
 db6:	2f 90       	pop	r2
 db8:	08 95       	ret

00000dba <strnlen_P>:
 dba:	fc 01       	movw	r30, r24
 dbc:	05 90       	lpm	r0, Z+
 dbe:	61 50       	subi	r22, 0x01	; 1
 dc0:	70 40       	sbci	r23, 0x00	; 0
 dc2:	01 10       	cpse	r0, r1
 dc4:	d8 f7       	brcc	.-10     	; 0xdbc <strnlen_P+0x2>
 dc6:	80 95       	com	r24
 dc8:	90 95       	com	r25
 dca:	8e 0f       	add	r24, r30
 dcc:	9f 1f       	adc	r25, r31
 dce:	08 95       	ret

00000dd0 <strnlen>:
 dd0:	fc 01       	movw	r30, r24
 dd2:	61 50       	subi	r22, 0x01	; 1
 dd4:	70 40       	sbci	r23, 0x00	; 0
 dd6:	01 90       	ld	r0, Z+
 dd8:	01 10       	cpse	r0, r1
 dda:	d8 f7       	brcc	.-10     	; 0xdd2 <strnlen+0x2>
 ddc:	80 95       	com	r24
 dde:	90 95       	com	r25
 de0:	8e 0f       	add	r24, r30
 de2:	9f 1f       	adc	r25, r31
 de4:	08 95       	ret

00000de6 <fputc>:
 de6:	0f 93       	push	r16
 de8:	1f 93       	push	r17
 dea:	cf 93       	push	r28
 dec:	df 93       	push	r29
 dee:	18 2f       	mov	r17, r24
 df0:	09 2f       	mov	r16, r25
 df2:	eb 01       	movw	r28, r22
 df4:	8b 81       	ldd	r24, Y+3	; 0x03
 df6:	81 fd       	sbrc	r24, 1
 df8:	03 c0       	rjmp	.+6      	; 0xe00 <fputc+0x1a>
 dfa:	8f ef       	ldi	r24, 0xFF	; 255
 dfc:	9f ef       	ldi	r25, 0xFF	; 255
 dfe:	20 c0       	rjmp	.+64     	; 0xe40 <fputc+0x5a>
 e00:	82 ff       	sbrs	r24, 2
 e02:	10 c0       	rjmp	.+32     	; 0xe24 <fputc+0x3e>
 e04:	4e 81       	ldd	r20, Y+6	; 0x06
 e06:	5f 81       	ldd	r21, Y+7	; 0x07
 e08:	2c 81       	ldd	r18, Y+4	; 0x04
 e0a:	3d 81       	ldd	r19, Y+5	; 0x05
 e0c:	42 17       	cp	r20, r18
 e0e:	53 07       	cpc	r21, r19
 e10:	7c f4       	brge	.+30     	; 0xe30 <fputc+0x4a>
 e12:	e8 81       	ld	r30, Y
 e14:	f9 81       	ldd	r31, Y+1	; 0x01
 e16:	9f 01       	movw	r18, r30
 e18:	2f 5f       	subi	r18, 0xFF	; 255
 e1a:	3f 4f       	sbci	r19, 0xFF	; 255
 e1c:	39 83       	std	Y+1, r19	; 0x01
 e1e:	28 83       	st	Y, r18
 e20:	10 83       	st	Z, r17
 e22:	06 c0       	rjmp	.+12     	; 0xe30 <fputc+0x4a>
 e24:	e8 85       	ldd	r30, Y+8	; 0x08
 e26:	f9 85       	ldd	r31, Y+9	; 0x09
 e28:	81 2f       	mov	r24, r17
 e2a:	19 95       	eicall
 e2c:	89 2b       	or	r24, r25
 e2e:	29 f7       	brne	.-54     	; 0xdfa <fputc+0x14>
 e30:	2e 81       	ldd	r18, Y+6	; 0x06
 e32:	3f 81       	ldd	r19, Y+7	; 0x07
 e34:	2f 5f       	subi	r18, 0xFF	; 255
 e36:	3f 4f       	sbci	r19, 0xFF	; 255
 e38:	3f 83       	std	Y+7, r19	; 0x07
 e3a:	2e 83       	std	Y+6, r18	; 0x06
 e3c:	81 2f       	mov	r24, r17
 e3e:	90 2f       	mov	r25, r16
 e40:	df 91       	pop	r29
 e42:	cf 91       	pop	r28
 e44:	1f 91       	pop	r17
 e46:	0f 91       	pop	r16
 e48:	08 95       	ret

00000e4a <__ultoa_invert>:
 e4a:	fa 01       	movw	r30, r20
 e4c:	aa 27       	eor	r26, r26
 e4e:	28 30       	cpi	r18, 0x08	; 8
 e50:	51 f1       	breq	.+84     	; 0xea6 <__ultoa_invert+0x5c>
 e52:	20 31       	cpi	r18, 0x10	; 16
 e54:	81 f1       	breq	.+96     	; 0xeb6 <__ultoa_invert+0x6c>
 e56:	e8 94       	clt
 e58:	6f 93       	push	r22
 e5a:	6e 7f       	andi	r22, 0xFE	; 254
 e5c:	6e 5f       	subi	r22, 0xFE	; 254
 e5e:	7f 4f       	sbci	r23, 0xFF	; 255
 e60:	8f 4f       	sbci	r24, 0xFF	; 255
 e62:	9f 4f       	sbci	r25, 0xFF	; 255
 e64:	af 4f       	sbci	r26, 0xFF	; 255
 e66:	b1 e0       	ldi	r27, 0x01	; 1
 e68:	3e d0       	rcall	.+124    	; 0xee6 <__ultoa_invert+0x9c>
 e6a:	b4 e0       	ldi	r27, 0x04	; 4
 e6c:	3c d0       	rcall	.+120    	; 0xee6 <__ultoa_invert+0x9c>
 e6e:	67 0f       	add	r22, r23
 e70:	78 1f       	adc	r23, r24
 e72:	89 1f       	adc	r24, r25
 e74:	9a 1f       	adc	r25, r26
 e76:	a1 1d       	adc	r26, r1
 e78:	68 0f       	add	r22, r24
 e7a:	79 1f       	adc	r23, r25
 e7c:	8a 1f       	adc	r24, r26
 e7e:	91 1d       	adc	r25, r1
 e80:	a1 1d       	adc	r26, r1
 e82:	6a 0f       	add	r22, r26
 e84:	71 1d       	adc	r23, r1
 e86:	81 1d       	adc	r24, r1
 e88:	91 1d       	adc	r25, r1
 e8a:	a1 1d       	adc	r26, r1
 e8c:	20 d0       	rcall	.+64     	; 0xece <__ultoa_invert+0x84>
 e8e:	09 f4       	brne	.+2      	; 0xe92 <__ultoa_invert+0x48>
 e90:	68 94       	set
 e92:	3f 91       	pop	r19
 e94:	2a e0       	ldi	r18, 0x0A	; 10
 e96:	26 9f       	mul	r18, r22
 e98:	11 24       	eor	r1, r1
 e9a:	30 19       	sub	r19, r0
 e9c:	30 5d       	subi	r19, 0xD0	; 208
 e9e:	31 93       	st	Z+, r19
 ea0:	de f6       	brtc	.-74     	; 0xe58 <__ultoa_invert+0xe>
 ea2:	cf 01       	movw	r24, r30
 ea4:	08 95       	ret
 ea6:	46 2f       	mov	r20, r22
 ea8:	47 70       	andi	r20, 0x07	; 7
 eaa:	40 5d       	subi	r20, 0xD0	; 208
 eac:	41 93       	st	Z+, r20
 eae:	b3 e0       	ldi	r27, 0x03	; 3
 eb0:	0f d0       	rcall	.+30     	; 0xed0 <__ultoa_invert+0x86>
 eb2:	c9 f7       	brne	.-14     	; 0xea6 <__ultoa_invert+0x5c>
 eb4:	f6 cf       	rjmp	.-20     	; 0xea2 <__ultoa_invert+0x58>
 eb6:	46 2f       	mov	r20, r22
 eb8:	4f 70       	andi	r20, 0x0F	; 15
 eba:	40 5d       	subi	r20, 0xD0	; 208
 ebc:	4a 33       	cpi	r20, 0x3A	; 58
 ebe:	18 f0       	brcs	.+6      	; 0xec6 <__ultoa_invert+0x7c>
 ec0:	49 5d       	subi	r20, 0xD9	; 217
 ec2:	31 fd       	sbrc	r19, 1
 ec4:	40 52       	subi	r20, 0x20	; 32
 ec6:	41 93       	st	Z+, r20
 ec8:	02 d0       	rcall	.+4      	; 0xece <__ultoa_invert+0x84>
 eca:	a9 f7       	brne	.-22     	; 0xeb6 <__ultoa_invert+0x6c>
 ecc:	ea cf       	rjmp	.-44     	; 0xea2 <__ultoa_invert+0x58>
 ece:	b4 e0       	ldi	r27, 0x04	; 4
 ed0:	a6 95       	lsr	r26
 ed2:	97 95       	ror	r25
 ed4:	87 95       	ror	r24
 ed6:	77 95       	ror	r23
 ed8:	67 95       	ror	r22
 eda:	ba 95       	dec	r27
 edc:	c9 f7       	brne	.-14     	; 0xed0 <__ultoa_invert+0x86>
 ede:	00 97       	sbiw	r24, 0x00	; 0
 ee0:	61 05       	cpc	r22, r1
 ee2:	71 05       	cpc	r23, r1
 ee4:	08 95       	ret
 ee6:	9b 01       	movw	r18, r22
 ee8:	ac 01       	movw	r20, r24
 eea:	0a 2e       	mov	r0, r26
 eec:	06 94       	lsr	r0
 eee:	57 95       	ror	r21
 ef0:	47 95       	ror	r20
 ef2:	37 95       	ror	r19
 ef4:	27 95       	ror	r18
 ef6:	ba 95       	dec	r27
 ef8:	c9 f7       	brne	.-14     	; 0xeec <__ultoa_invert+0xa2>
 efa:	62 0f       	add	r22, r18
 efc:	73 1f       	adc	r23, r19
 efe:	84 1f       	adc	r24, r20
 f00:	95 1f       	adc	r25, r21
 f02:	a0 1d       	adc	r26, r0
 f04:	08 95       	ret

00000f06 <_exit>:
 f06:	f8 94       	cli

00000f08 <__stop_program>:
 f08:	ff cf       	rjmp	.-2      	; 0xf08 <__stop_program>
