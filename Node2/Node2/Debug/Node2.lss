
Node2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ee  00800200  00001d14  00001da8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d14  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000063  008002ee  008002ee  00001e96  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001e96  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000390  00000000  00000000  00001ef2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002608  00000000  00000000  00002282  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001237  00000000  00000000  0000488a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001c5a  00000000  00000000  00005ac1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000800  00000000  00000000  0000771c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000949  00000000  00000000  00007f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000102d  00000000  00000000  00008865  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002a0  00000000  00000000  00009892  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	43 c1       	rjmp	.+646    	; 0x288 <__ctors_end>
       2:	00 00       	nop
       4:	ae c3       	rjmp	.+1884   	; 0x762 <__vector_1>
       6:	00 00       	nop
       8:	5f c1       	rjmp	.+702    	; 0x2c8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c1       	rjmp	.+698    	; 0x2c8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c1       	rjmp	.+694    	; 0x2c8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c1       	rjmp	.+690    	; 0x2c8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c1       	rjmp	.+686    	; 0x2c8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c1       	rjmp	.+682    	; 0x2c8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c1       	rjmp	.+678    	; 0x2c8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c1       	rjmp	.+674    	; 0x2c8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c1       	rjmp	.+670    	; 0x2c8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c1       	rjmp	.+666    	; 0x2c8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c1       	rjmp	.+662    	; 0x2c8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c1       	rjmp	.+658    	; 0x2c8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c1       	rjmp	.+654    	; 0x2c8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c1       	rjmp	.+650    	; 0x2c8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c1       	rjmp	.+646    	; 0x2c8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c1       	rjmp	.+642    	; 0x2c8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c1       	rjmp	.+638    	; 0x2c8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c1       	rjmp	.+634    	; 0x2c8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c1       	rjmp	.+630    	; 0x2c8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c1       	rjmp	.+626    	; 0x2c8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c1       	rjmp	.+622    	; 0x2c8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c1       	rjmp	.+618    	; 0x2c8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c1       	rjmp	.+614    	; 0x2c8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c1       	rjmp	.+610    	; 0x2c8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c1       	rjmp	.+606    	; 0x2c8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c1       	rjmp	.+602    	; 0x2c8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c1       	rjmp	.+598    	; 0x2c8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c1       	rjmp	.+594    	; 0x2c8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c1       	rjmp	.+590    	; 0x2c8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c1       	rjmp	.+586    	; 0x2c8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c1       	rjmp	.+582    	; 0x2c8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c1       	rjmp	.+578    	; 0x2c8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c1       	rjmp	.+574    	; 0x2c8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	1d c1       	rjmp	.+570    	; 0x2c8 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1b c1       	rjmp	.+566    	; 0x2c8 <__bad_interrupt>
      92:	00 00       	nop
      94:	19 c1       	rjmp	.+562    	; 0x2c8 <__bad_interrupt>
      96:	00 00       	nop
      98:	17 c1       	rjmp	.+558    	; 0x2c8 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	48 c6       	rjmp	.+3216   	; 0xd2e <__vector_39>
      9e:	00 00       	nop
      a0:	13 c1       	rjmp	.+550    	; 0x2c8 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	11 c1       	rjmp	.+546    	; 0x2c8 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ce c4       	rjmp	.+2460   	; 0xa46 <__vector_42>
      aa:	00 00       	nop
      ac:	0d c1       	rjmp	.+538    	; 0x2c8 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	0b c1       	rjmp	.+534    	; 0x2c8 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	09 c1       	rjmp	.+530    	; 0x2c8 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	07 c1       	rjmp	.+526    	; 0x2c8 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	e0 c5       	rjmp	.+3008   	; 0xc7e <__vector_47>
      be:	00 00       	nop
      c0:	03 c1       	rjmp	.+518    	; 0x2c8 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	01 c1       	rjmp	.+514    	; 0x2c8 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	ff c0       	rjmp	.+510    	; 0x2c8 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	fd c0       	rjmp	.+506    	; 0x2c8 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	fb c0       	rjmp	.+502    	; 0x2c8 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	f9 c0       	rjmp	.+498    	; 0x2c8 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	f7 c0       	rjmp	.+494    	; 0x2c8 <__bad_interrupt>
      da:	00 00       	nop
      dc:	f5 c0       	rjmp	.+490    	; 0x2c8 <__bad_interrupt>
      de:	00 00       	nop
      e0:	f3 c0       	rjmp	.+486    	; 0x2c8 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b2 06       	cpc	r11, r18
      e6:	04 07       	cpc	r16, r20
      e8:	04 07       	cpc	r16, r20
      ea:	04 07       	cpc	r16, r20
      ec:	04 07       	cpc	r16, r20
      ee:	04 07       	cpc	r16, r20
      f0:	04 07       	cpc	r16, r20
      f2:	04 07       	cpc	r16, r20
      f4:	b2 06       	cpc	r11, r18
      f6:	04 07       	cpc	r16, r20
      f8:	04 07       	cpc	r16, r20
      fa:	04 07       	cpc	r16, r20
      fc:	04 07       	cpc	r16, r20
      fe:	04 07       	cpc	r16, r20
     100:	04 07       	cpc	r16, r20
     102:	04 07       	cpc	r16, r20
     104:	b4 06       	cpc	r11, r20
     106:	04 07       	cpc	r16, r20
     108:	04 07       	cpc	r16, r20
     10a:	04 07       	cpc	r16, r20
     10c:	04 07       	cpc	r16, r20
     10e:	04 07       	cpc	r16, r20
     110:	04 07       	cpc	r16, r20
     112:	04 07       	cpc	r16, r20
     114:	04 07       	cpc	r16, r20
     116:	04 07       	cpc	r16, r20
     118:	04 07       	cpc	r16, r20
     11a:	04 07       	cpc	r16, r20
     11c:	04 07       	cpc	r16, r20
     11e:	04 07       	cpc	r16, r20
     120:	04 07       	cpc	r16, r20
     122:	04 07       	cpc	r16, r20
     124:	b4 06       	cpc	r11, r20
     126:	04 07       	cpc	r16, r20
     128:	04 07       	cpc	r16, r20
     12a:	04 07       	cpc	r16, r20
     12c:	04 07       	cpc	r16, r20
     12e:	04 07       	cpc	r16, r20
     130:	04 07       	cpc	r16, r20
     132:	04 07       	cpc	r16, r20
     134:	04 07       	cpc	r16, r20
     136:	04 07       	cpc	r16, r20
     138:	04 07       	cpc	r16, r20
     13a:	04 07       	cpc	r16, r20
     13c:	04 07       	cpc	r16, r20
     13e:	04 07       	cpc	r16, r20
     140:	04 07       	cpc	r16, r20
     142:	04 07       	cpc	r16, r20
     144:	00 07       	cpc	r16, r16
     146:	04 07       	cpc	r16, r20
     148:	04 07       	cpc	r16, r20
     14a:	04 07       	cpc	r16, r20
     14c:	04 07       	cpc	r16, r20
     14e:	04 07       	cpc	r16, r20
     150:	04 07       	cpc	r16, r20
     152:	04 07       	cpc	r16, r20
     154:	dd 06       	cpc	r13, r29
     156:	04 07       	cpc	r16, r20
     158:	04 07       	cpc	r16, r20
     15a:	04 07       	cpc	r16, r20
     15c:	04 07       	cpc	r16, r20
     15e:	04 07       	cpc	r16, r20
     160:	04 07       	cpc	r16, r20
     162:	04 07       	cpc	r16, r20
     164:	04 07       	cpc	r16, r20
     166:	04 07       	cpc	r16, r20
     168:	04 07       	cpc	r16, r20
     16a:	04 07       	cpc	r16, r20
     16c:	04 07       	cpc	r16, r20
     16e:	04 07       	cpc	r16, r20
     170:	04 07       	cpc	r16, r20
     172:	04 07       	cpc	r16, r20
     174:	d1 06       	cpc	r13, r17
     176:	04 07       	cpc	r16, r20
     178:	04 07       	cpc	r16, r20
     17a:	04 07       	cpc	r16, r20
     17c:	04 07       	cpc	r16, r20
     17e:	04 07       	cpc	r16, r20
     180:	04 07       	cpc	r16, r20
     182:	04 07       	cpc	r16, r20
     184:	ef 06       	cpc	r14, r31

00000186 <__trampolines_end>:
     186:	6e 61       	ori	r22, 0x1E	; 30
     188:	6e 00       	.word	0x006e	; ????

0000018a <__c.2159>:
     18a:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     19a:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1aa:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1ba:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1ca:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1da:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1ea:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1fa:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     20a:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     21a:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     22a:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     23a:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     24a:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     25a:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     26a:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     27a:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000288 <__ctors_end>:
     288:	11 24       	eor	r1, r1
     28a:	1f be       	out	0x3f, r1	; 63
     28c:	cf ef       	ldi	r28, 0xFF	; 255
     28e:	d1 e2       	ldi	r29, 0x21	; 33
     290:	de bf       	out	0x3e, r29	; 62
     292:	cd bf       	out	0x3d, r28	; 61
     294:	00 e0       	ldi	r16, 0x00	; 0
     296:	0c bf       	out	0x3c, r16	; 60

00000298 <__do_copy_data>:
     298:	12 e0       	ldi	r17, 0x02	; 2
     29a:	a0 e0       	ldi	r26, 0x00	; 0
     29c:	b2 e0       	ldi	r27, 0x02	; 2
     29e:	e4 e1       	ldi	r30, 0x14	; 20
     2a0:	fd e1       	ldi	r31, 0x1D	; 29
     2a2:	00 e0       	ldi	r16, 0x00	; 0
     2a4:	0b bf       	out	0x3b, r16	; 59
     2a6:	02 c0       	rjmp	.+4      	; 0x2ac <__do_copy_data+0x14>
     2a8:	07 90       	elpm	r0, Z+
     2aa:	0d 92       	st	X+, r0
     2ac:	ae 3e       	cpi	r26, 0xEE	; 238
     2ae:	b1 07       	cpc	r27, r17
     2b0:	d9 f7       	brne	.-10     	; 0x2a8 <__do_copy_data+0x10>

000002b2 <__do_clear_bss>:
     2b2:	23 e0       	ldi	r18, 0x03	; 3
     2b4:	ae ee       	ldi	r26, 0xEE	; 238
     2b6:	b2 e0       	ldi	r27, 0x02	; 2
     2b8:	01 c0       	rjmp	.+2      	; 0x2bc <.do_clear_bss_start>

000002ba <.do_clear_bss_loop>:
     2ba:	1d 92       	st	X+, r1

000002bc <.do_clear_bss_start>:
     2bc:	a1 35       	cpi	r26, 0x51	; 81
     2be:	b2 07       	cpc	r27, r18
     2c0:	e1 f7       	brne	.-8      	; 0x2ba <.do_clear_bss_loop>
     2c2:	98 d4       	rcall	.+2352   	; 0xbf4 <main>
     2c4:	0c 94 88 0e 	jmp	0x1d10	; 0x1d10 <_exit>

000002c8 <__bad_interrupt>:
     2c8:	9b ce       	rjmp	.-714    	; 0x0 <__vectors>

000002ca <pi_calibrate>:
uint16_t max_position;

uint8_t printvar;

void pi_calibrate() {
	motor_speed(120);
     2ca:	88 e7       	ldi	r24, 0x78	; 120
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	5d d3       	rcall	.+1722   	; 0x98a <motor_speed>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2d0:	2f ef       	ldi	r18, 0xFF	; 255
     2d2:	8d e3       	ldi	r24, 0x3D	; 61
     2d4:	99 e4       	ldi	r25, 0x49	; 73
     2d6:	21 50       	subi	r18, 0x01	; 1
     2d8:	80 40       	sbci	r24, 0x00	; 0
     2da:	90 40       	sbci	r25, 0x00	; 0
     2dc:	e1 f7       	brne	.-8      	; 0x2d6 <pi_calibrate+0xc>
     2de:	00 c0       	rjmp	.+0      	; 0x2e0 <pi_calibrate+0x16>
     2e0:	00 00       	nop
	_delay_ms(1500);
	motor_speed(0);
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	51 d3       	rcall	.+1698   	; 0x98a <motor_speed>
     2e8:	2f ef       	ldi	r18, 0xFF	; 255
     2ea:	80 e7       	ldi	r24, 0x70	; 112
     2ec:	92 e0       	ldi	r25, 0x02	; 2
     2ee:	21 50       	subi	r18, 0x01	; 1
     2f0:	80 40       	sbci	r24, 0x00	; 0
     2f2:	90 40       	sbci	r25, 0x00	; 0
     2f4:	e1 f7       	brne	.-8      	; 0x2ee <pi_calibrate+0x24>
     2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <pi_calibrate+0x2e>
     2f8:	00 00       	nop
	_delay_ms(50);
	motor_encoder_reset();
     2fa:	2a d3       	rcall	.+1620   	; 0x950 <motor_encoder_reset>

	motor_speed(-110);
     2fc:	82 e9       	ldi	r24, 0x92	; 146
     2fe:	9f ef       	ldi	r25, 0xFF	; 255
     300:	44 d3       	rcall	.+1672   	; 0x98a <motor_speed>
     302:	2f ef       	ldi	r18, 0xFF	; 255
     304:	8d e3       	ldi	r24, 0x3D	; 61
     306:	99 e4       	ldi	r25, 0x49	; 73
     308:	21 50       	subi	r18, 0x01	; 1
     30a:	80 40       	sbci	r24, 0x00	; 0
     30c:	90 40       	sbci	r25, 0x00	; 0
     30e:	e1 f7       	brne	.-8      	; 0x308 <pi_calibrate+0x3e>
     310:	00 c0       	rjmp	.+0      	; 0x312 <pi_calibrate+0x48>
     312:	00 00       	nop
	_delay_ms(1500);
	motor_speed(0);
     314:	80 e0       	ldi	r24, 0x00	; 0
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	38 d3       	rcall	.+1648   	; 0x98a <motor_speed>
     31a:	2f ef       	ldi	r18, 0xFF	; 255
     31c:	80 e7       	ldi	r24, 0x70	; 112
     31e:	92 e0       	ldi	r25, 0x02	; 2
     320:	21 50       	subi	r18, 0x01	; 1
     322:	80 40       	sbci	r24, 0x00	; 0
     324:	90 40       	sbci	r25, 0x00	; 0
     326:	e1 f7       	brne	.-8      	; 0x320 <pi_calibrate+0x56>
     328:	00 c0       	rjmp	.+0      	; 0x32a <pi_calibrate+0x60>
     32a:	00 00       	nop
	_delay_ms(50);
	
	max_position = motor_encoder_read();
     32c:	6e d3       	rcall	.+1756   	; 0xa0a <motor_encoder_read>
     32e:	80 93 39 03 	sts	0x0339, r24
     332:	90 93 3a 03 	sts	0x033A, r25
	//motor_encoder_reset();
	printf("max pos: %d\n\n", max_position);
     336:	9f 93       	push	r25
     338:	8f 93       	push	r24
     33a:	8f e0       	ldi	r24, 0x0F	; 15
     33c:	92 e0       	ldi	r25, 0x02	; 2
     33e:	9f 93       	push	r25
     340:	8f 93       	push	r24
     342:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <printf>
     346:	0f 90       	pop	r0
     348:	0f 90       	pop	r0
     34a:	0f 90       	pop	r0
     34c:	0f 90       	pop	r0
     34e:	08 95       	ret

00000350 <pi_update_posref>:
	position = max_position;
	pi_update_posref(128);
}

void pi_update_posref(uint8_t newref) {
	posref = newref*(max_position/OVERFLOW_FIX)/255 * OVERFLOW_FIX;
     350:	40 91 39 03 	lds	r20, 0x0339
     354:	50 91 3a 03 	lds	r21, 0x033A
     358:	00 24       	eor	r0, r0
     35a:	44 0f       	add	r20, r20
     35c:	55 1f       	adc	r21, r21
     35e:	00 1c       	adc	r0, r0
     360:	44 0f       	add	r20, r20
     362:	55 1f       	adc	r21, r21
     364:	00 1c       	adc	r0, r0
     366:	45 2f       	mov	r20, r21
     368:	50 2d       	mov	r21, r0
     36a:	84 9f       	mul	r24, r20
     36c:	90 01       	movw	r18, r0
     36e:	85 9f       	mul	r24, r21
     370:	30 0d       	add	r19, r0
     372:	11 24       	eor	r1, r1
     374:	a1 e8       	ldi	r26, 0x81	; 129
     376:	b0 e8       	ldi	r27, 0x80	; 128
     378:	0e 94 a9 0c 	call	0x1952	; 0x1952 <__umulhisi3>
     37c:	88 0f       	add	r24, r24
     37e:	89 2f       	mov	r24, r25
     380:	88 1f       	adc	r24, r24
     382:	99 0b       	sbc	r25, r25
     384:	91 95       	neg	r25
     386:	00 24       	eor	r0, r0
     388:	96 95       	lsr	r25
     38a:	87 95       	ror	r24
     38c:	07 94       	ror	r0
     38e:	96 95       	lsr	r25
     390:	87 95       	ror	r24
     392:	07 94       	ror	r0
     394:	98 2f       	mov	r25, r24
     396:	80 2d       	mov	r24, r0
     398:	90 93 3f 03 	sts	0x033F, r25
     39c:	80 93 3e 03 	sts	0x033E, r24
     3a0:	08 95       	ret

000003a2 <pi_init>:
	//motor_encoder_reset();
	printf("max pos: %d\n\n", max_position);
}

void pi_init() {
	direction = MOTOR_LEFT;
     3a2:	81 e0       	ldi	r24, 0x01	; 1
     3a4:	80 93 3d 03 	sts	0x033D, r24
	
	integral = 0;
     3a8:	10 92 45 03 	sts	0x0345, r1
     3ac:	10 92 46 03 	sts	0x0346, r1
     3b0:	10 92 47 03 	sts	0x0347, r1
     3b4:	10 92 48 03 	sts	0x0348, r1

	printvar = 0;
     3b8:	10 92 40 03 	sts	0x0340, r1

	pi_calibrate();
     3bc:	86 df       	rcall	.-244    	; 0x2ca <pi_calibrate>
	position = max_position;
     3be:	80 91 39 03 	lds	r24, 0x0339
     3c2:	90 91 3a 03 	lds	r25, 0x033A
     3c6:	90 93 3c 03 	sts	0x033C, r25
     3ca:	80 93 3b 03 	sts	0x033B, r24
	pi_update_posref(128);
     3ce:	80 e8       	ldi	r24, 0x80	; 128
     3d0:	bf cf       	rjmp	.-130    	; 0x350 <pi_update_posref>
     3d2:	08 95       	ret

000003d4 <pi_update>:

void pi_update_posref(uint8_t newref) {
	posref = newref*(max_position/OVERFLOW_FIX)/255 * OVERFLOW_FIX;
}

void pi_update() {
     3d4:	8f 92       	push	r8
     3d6:	9f 92       	push	r9
     3d8:	af 92       	push	r10
     3da:	bf 92       	push	r11
     3dc:	cf 92       	push	r12
     3de:	df 92       	push	r13
     3e0:	ef 92       	push	r14
     3e2:	ff 92       	push	r15
	//PORTC |= (1<<MOTOR_RST);
	position = motor_encoder_read();
     3e4:	12 d3       	rcall	.+1572   	; 0xa0a <motor_encoder_read>
     3e6:	90 93 3c 03 	sts	0x033C, r25
     3ea:	80 93 3b 03 	sts	0x033B, r24
	
	int16_t error = (position/2 - posref/2);
     3ee:	bc 01       	movw	r22, r24
     3f0:	99 23       	and	r25, r25
     3f2:	14 f4       	brge	.+4      	; 0x3f8 <pi_update+0x24>
     3f4:	6f 5f       	subi	r22, 0xFF	; 255
     3f6:	7f 4f       	sbci	r23, 0xFF	; 255
     3f8:	75 95       	asr	r23
     3fa:	67 95       	ror	r22
     3fc:	80 91 3e 03 	lds	r24, 0x033E
     400:	90 91 3f 03 	lds	r25, 0x033F
     404:	99 23       	and	r25, r25
     406:	0c f4       	brge	.+2      	; 0x40a <pi_update+0x36>
     408:	01 96       	adiw	r24, 0x01	; 1
     40a:	95 95       	asr	r25
     40c:	87 95       	ror	r24
     40e:	68 1b       	sub	r22, r24
     410:	79 0b       	sbc	r23, r25
	
	integral += ((float)error * (float)TIMER5_OCRA / (float)F_CPU)*1024; //unit of integral is seconds  
     412:	88 27       	eor	r24, r24
     414:	77 fd       	sbrc	r23, 7
     416:	80 95       	com	r24
     418:	98 2f       	mov	r25, r24
     41a:	0c d6       	rcall	.+3096   	; 0x1034 <__floatsisf>
     41c:	4b 01       	movw	r8, r22
     41e:	5c 01       	movw	r10, r24
     420:	20 e0       	ldi	r18, 0x00	; 0
     422:	30 e0       	ldi	r19, 0x00	; 0
     424:	4f e5       	ldi	r20, 0x5F	; 95
     426:	53 e4       	ldi	r21, 0x43	; 67
     428:	91 d6       	rcall	.+3362   	; 0x114c <__mulsf3>
     42a:	20 e0       	ldi	r18, 0x00	; 0
     42c:	34 e2       	ldi	r19, 0x24	; 36
     42e:	44 e7       	ldi	r20, 0x74	; 116
     430:	5b e4       	ldi	r21, 0x4B	; 75
     432:	65 d5       	rcall	.+2762   	; 0xefe <__divsf3>
     434:	20 e0       	ldi	r18, 0x00	; 0
     436:	30 e0       	ldi	r19, 0x00	; 0
     438:	40 e8       	ldi	r20, 0x80	; 128
     43a:	54 e4       	ldi	r21, 0x44	; 68
     43c:	87 d6       	rcall	.+3342   	; 0x114c <__mulsf3>
     43e:	20 91 45 03 	lds	r18, 0x0345
     442:	30 91 46 03 	lds	r19, 0x0346
     446:	40 91 47 03 	lds	r20, 0x0347
     44a:	50 91 48 03 	lds	r21, 0x0348
     44e:	f3 d4       	rcall	.+2534   	; 0xe36 <__addsf3>
     450:	6b 01       	movw	r12, r22
     452:	7c 01       	movw	r14, r24
     454:	60 93 45 03 	sts	0x0345, r22
     458:	70 93 46 03 	sts	0x0346, r23
     45c:	80 93 47 03 	sts	0x0347, r24
     460:	90 93 48 03 	sts	0x0348, r25

	int16_t speed = 2*(float)K_P * (float)error+ integral * K_I;
     464:	2d ec       	ldi	r18, 0xCD	; 205
     466:	3c ec       	ldi	r19, 0xCC	; 204
     468:	4c e4       	ldi	r20, 0x4C	; 76
     46a:	5e e3       	ldi	r21, 0x3E	; 62
     46c:	c5 01       	movw	r24, r10
     46e:	b4 01       	movw	r22, r8
     470:	6d d6       	rcall	.+3290   	; 0x114c <__mulsf3>
     472:	4b 01       	movw	r8, r22
     474:	5c 01       	movw	r10, r24
     476:	2a e0       	ldi	r18, 0x0A	; 10
     478:	37 ed       	ldi	r19, 0xD7	; 215
     47a:	43 ea       	ldi	r20, 0xA3	; 163
     47c:	5d e3       	ldi	r21, 0x3D	; 61
     47e:	c7 01       	movw	r24, r14
     480:	b6 01       	movw	r22, r12
     482:	64 d6       	rcall	.+3272   	; 0x114c <__mulsf3>
     484:	9b 01       	movw	r18, r22
     486:	ac 01       	movw	r20, r24
     488:	c5 01       	movw	r24, r10
     48a:	b4 01       	movw	r22, r8
     48c:	d4 d4       	rcall	.+2472   	; 0xe36 <__addsf3>
     48e:	9f d5       	rcall	.+2878   	; 0xfce <__fixsfsi>

	 
	motor_speed(speed);
     490:	cb 01       	movw	r24, r22
     492:	7b d2       	rcall	.+1270   	; 0x98a <motor_speed>
 

	//printf("speed: %d\nerror: %d\n\n", speed, error);

     494:	ff 90       	pop	r15
     496:	ef 90       	pop	r14
     498:	df 90       	pop	r13
     49a:	cf 90       	pop	r12
     49c:	bf 90       	pop	r11
     49e:	af 90       	pop	r10
     4a0:	9f 90       	pop	r9
     4a2:	8f 90       	pop	r8
     4a4:	08 95       	ret

000004a6 <adc_init>:
#include <util/delay.h>
#include "adc_driver.h"


void adc_init(){
	ADCSRA	|= (1 << ADEN) | (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);
     4a6:	ea e7       	ldi	r30, 0x7A	; 122
     4a8:	f0 e0       	ldi	r31, 0x00	; 0
     4aa:	80 81       	ld	r24, Z
     4ac:	87 68       	ori	r24, 0x87	; 135
     4ae:	80 83       	st	Z, r24
	ADMUX	|= (1<<REFS0);
     4b0:	ec e7       	ldi	r30, 0x7C	; 124
     4b2:	f0 e0       	ldi	r31, 0x00	; 0
     4b4:	80 81       	ld	r24, Z
     4b6:	80 64       	ori	r24, 0x40	; 64
     4b8:	80 83       	st	Z, r24
	ADMUX	&= ~(1<<REFS1); 
     4ba:	80 81       	ld	r24, Z
     4bc:	8f 77       	andi	r24, 0x7F	; 127
     4be:	80 83       	st	Z, r24
     4c0:	08 95       	ret

000004c2 <adc_read>:
}

uint16_t adc_read(uint8_t channel){
	ADMUX	= (1<<REFS0) | (channel & 0x03);
     4c2:	83 70       	andi	r24, 0x03	; 3
     4c4:	80 64       	ori	r24, 0x40	; 64
     4c6:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA	|= (1 << ADSC);
     4ca:	ea e7       	ldi	r30, 0x7A	; 122
     4cc:	f0 e0       	ldi	r31, 0x00	; 0
     4ce:	80 81       	ld	r24, Z
     4d0:	80 64       	ori	r24, 0x40	; 64
     4d2:	80 83       	st	Z, r24

	while((ADCSRA & (1<<ADSC))){ ; }
     4d4:	80 81       	ld	r24, Z
     4d6:	86 fd       	sbrc	r24, 6
     4d8:	fd cf       	rjmp	.-6      	; 0x4d4 <adc_read+0x12>

	return ADC;
     4da:	80 91 78 00 	lds	r24, 0x0078
     4de:	90 91 79 00 	lds	r25, 0x0079
}
     4e2:	08 95       	ret

000004e4 <can_init>:
     4e4:	15 d2       	rcall	.+1066   	; 0x910 <mcp2515_init>
     4e6:	8f e0       	ldi	r24, 0x0F	; 15
     4e8:	06 d2       	rcall	.+1036   	; 0x8f6 <mcp2515_read>
     4ea:	1f 92       	push	r1
     4ec:	8f 93       	push	r24
     4ee:	8d e1       	ldi	r24, 0x1D	; 29
     4f0:	92 e0       	ldi	r25, 0x02	; 2
     4f2:	9f 93       	push	r25
     4f4:	8f 93       	push	r24
     4f6:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <printf>
     4fa:	4f ef       	ldi	r20, 0xFF	; 255
     4fc:	60 e6       	ldi	r22, 0x60	; 96
     4fe:	80 e6       	ldi	r24, 0x60	; 96
     500:	e1 d1       	rcall	.+962    	; 0x8c4 <mcp2515_bit_modify>
     502:	40 e0       	ldi	r20, 0x00	; 0
     504:	64 e0       	ldi	r22, 0x04	; 4
     506:	80 e6       	ldi	r24, 0x60	; 96
     508:	dd d1       	rcall	.+954    	; 0x8c4 <mcp2515_bit_modify>
     50a:	4f ef       	ldi	r20, 0xFF	; 255
     50c:	61 e0       	ldi	r22, 0x01	; 1
     50e:	8b e2       	ldi	r24, 0x2B	; 43
     510:	d9 d1       	rcall	.+946    	; 0x8c4 <mcp2515_bit_modify>
     512:	40 e0       	ldi	r20, 0x00	; 0
     514:	60 ee       	ldi	r22, 0xE0	; 224
     516:	8f e0       	ldi	r24, 0x0F	; 15
     518:	d5 d1       	rcall	.+938    	; 0x8c4 <mcp2515_bit_modify>
     51a:	0f 90       	pop	r0
     51c:	0f 90       	pop	r0
     51e:	0f 90       	pop	r0
     520:	0f 90       	pop	r0
     522:	08 95       	ret

00000524 <can_transmit_complete>:
     524:	80 e3       	ldi	r24, 0x30	; 48
     526:	e7 d1       	rcall	.+974    	; 0x8f6 <mcp2515_read>
     528:	86 95       	lsr	r24
     52a:	86 95       	lsr	r24
     52c:	86 95       	lsr	r24
     52e:	91 e0       	ldi	r25, 0x01	; 1
     530:	89 27       	eor	r24, r25
     532:	81 70       	andi	r24, 0x01	; 1
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	08 95       	ret

00000538 <can_message_send>:
     538:	1f 93       	push	r17
     53a:	cf 93       	push	r28
     53c:	df 93       	push	r29
     53e:	ec 01       	movw	r28, r24
     540:	f1 df       	rcall	.-30     	; 0x524 <can_transmit_complete>
     542:	89 2b       	or	r24, r25
     544:	e9 f3       	breq	.-6      	; 0x540 <can_message_send+0x8>
     546:	68 81       	ld	r22, Y
     548:	79 81       	ldd	r23, Y+1	; 0x01
     54a:	75 95       	asr	r23
     54c:	67 95       	ror	r22
     54e:	75 95       	asr	r23
     550:	67 95       	ror	r22
     552:	75 95       	asr	r23
     554:	67 95       	ror	r22
     556:	81 e3       	ldi	r24, 0x31	; 49
     558:	99 d1       	rcall	.+818    	; 0x88c <mcp2515_write>
     55a:	68 81       	ld	r22, Y
     55c:	79 81       	ldd	r23, Y+1	; 0x01
     55e:	66 0f       	add	r22, r22
     560:	77 1f       	adc	r23, r23
     562:	62 95       	swap	r22
     564:	72 95       	swap	r23
     566:	70 7f       	andi	r23, 0xF0	; 240
     568:	76 27       	eor	r23, r22
     56a:	60 7f       	andi	r22, 0xF0	; 240
     56c:	76 27       	eor	r23, r22
     56e:	82 e3       	ldi	r24, 0x32	; 50
     570:	8d d1       	rcall	.+794    	; 0x88c <mcp2515_write>
     572:	6a 81       	ldd	r22, Y+2	; 0x02
     574:	6f 70       	andi	r22, 0x0F	; 15
     576:	85 e3       	ldi	r24, 0x35	; 53
     578:	89 d1       	rcall	.+786    	; 0x88c <mcp2515_write>
     57a:	8a 81       	ldd	r24, Y+2	; 0x02
     57c:	88 23       	and	r24, r24
     57e:	61 f0       	breq	.+24     	; 0x598 <can_message_send+0x60>
     580:	10 e0       	ldi	r17, 0x00	; 0
     582:	fe 01       	movw	r30, r28
     584:	e1 0f       	add	r30, r17
     586:	f1 1d       	adc	r31, r1
     588:	63 81       	ldd	r22, Z+3	; 0x03
     58a:	86 e3       	ldi	r24, 0x36	; 54
     58c:	81 0f       	add	r24, r17
     58e:	7e d1       	rcall	.+764    	; 0x88c <mcp2515_write>
     590:	1f 5f       	subi	r17, 0xFF	; 255
     592:	8a 81       	ldd	r24, Y+2	; 0x02
     594:	18 17       	cp	r17, r24
     596:	a8 f3       	brcs	.-22     	; 0x582 <can_message_send+0x4a>
     598:	81 e0       	ldi	r24, 0x01	; 1
     59a:	87 d1       	rcall	.+782    	; 0x8aa <mcp2515_request_to_send>
     59c:	df 91       	pop	r29
     59e:	cf 91       	pop	r28
     5a0:	1f 91       	pop	r17
     5a2:	08 95       	ret

000005a4 <can_data_receive>:
     5a4:	9f 92       	push	r9
     5a6:	af 92       	push	r10
     5a8:	bf 92       	push	r11
     5aa:	cf 92       	push	r12
     5ac:	df 92       	push	r13
     5ae:	ef 92       	push	r14
     5b0:	ff 92       	push	r15
     5b2:	0f 93       	push	r16
     5b4:	1f 93       	push	r17
     5b6:	cf 93       	push	r28
     5b8:	df 93       	push	r29
     5ba:	cd b7       	in	r28, 0x3d	; 61
     5bc:	de b7       	in	r29, 0x3e	; 62
     5be:	2b 97       	sbiw	r28, 0x0b	; 11
     5c0:	0f b6       	in	r0, 0x3f	; 63
     5c2:	f8 94       	cli
     5c4:	de bf       	out	0x3e, r29	; 62
     5c6:	0f be       	out	0x3f, r0	; 63
     5c8:	cd bf       	out	0x3d, r28	; 61
     5ca:	7c 01       	movw	r14, r24
     5cc:	8c e2       	ldi	r24, 0x2C	; 44
     5ce:	93 d1       	rcall	.+806    	; 0x8f6 <mcp2515_read>
     5d0:	80 ff       	sbrs	r24, 0
     5d2:	30 c0       	rjmp	.+96     	; 0x634 <can_data_receive+0x90>
     5d4:	81 e6       	ldi	r24, 0x61	; 97
     5d6:	8f d1       	rcall	.+798    	; 0x8f6 <mcp2515_read>
     5d8:	c8 2e       	mov	r12, r24
     5da:	82 e6       	ldi	r24, 0x62	; 98
     5dc:	8c d1       	rcall	.+792    	; 0x8f6 <mcp2515_read>
     5de:	82 95       	swap	r24
     5e0:	86 95       	lsr	r24
     5e2:	87 70       	andi	r24, 0x07	; 7
     5e4:	d1 2c       	mov	r13, r1
     5e6:	cc 0c       	add	r12, r12
     5e8:	dd 1c       	adc	r13, r13
     5ea:	cc 0c       	add	r12, r12
     5ec:	dd 1c       	adc	r13, r13
     5ee:	cc 0c       	add	r12, r12
     5f0:	dd 1c       	adc	r13, r13
     5f2:	c8 2a       	or	r12, r24
     5f4:	85 e6       	ldi	r24, 0x65	; 101
     5f6:	7f d1       	rcall	.+766    	; 0x8f6 <mcp2515_read>
     5f8:	8f 70       	andi	r24, 0x0F	; 15
     5fa:	98 2e       	mov	r9, r24
     5fc:	a1 f0       	breq	.+40     	; 0x626 <can_data_receive+0x82>
     5fe:	8e 01       	movw	r16, r28
     600:	0c 5f       	subi	r16, 0xFC	; 252
     602:	1f 4f       	sbci	r17, 0xFF	; 255
     604:	0f 2e       	mov	r0, r31
     606:	f6 e6       	ldi	r31, 0x66	; 102
     608:	af 2e       	mov	r10, r31
     60a:	f0 2d       	mov	r31, r0
     60c:	a8 0e       	add	r10, r24
     60e:	0f 2e       	mov	r0, r31
     610:	f6 e6       	ldi	r31, 0x66	; 102
     612:	bf 2e       	mov	r11, r31
     614:	f0 2d       	mov	r31, r0
     616:	8b 2d       	mov	r24, r11
     618:	6e d1       	rcall	.+732    	; 0x8f6 <mcp2515_read>
     61a:	f8 01       	movw	r30, r16
     61c:	81 93       	st	Z+, r24
     61e:	8f 01       	movw	r16, r30
     620:	b3 94       	inc	r11
     622:	ba 10       	cpse	r11, r10
     624:	f8 cf       	rjmp	.-16     	; 0x616 <can_data_receive+0x72>
     626:	10 92 4a 03 	sts	0x034A, r1
     62a:	40 e0       	ldi	r20, 0x00	; 0
     62c:	61 e0       	ldi	r22, 0x01	; 1
     62e:	8c e2       	ldi	r24, 0x2C	; 44
     630:	49 d1       	rcall	.+658    	; 0x8c4 <mcp2515_bit_modify>
     632:	03 c0       	rjmp	.+6      	; 0x63a <can_data_receive+0x96>
     634:	cc 24       	eor	r12, r12
     636:	ca 94       	dec	r12
     638:	dc 2c       	mov	r13, r12
     63a:	da 82       	std	Y+2, r13	; 0x02
     63c:	c9 82       	std	Y+1, r12	; 0x01
     63e:	9b 82       	std	Y+3, r9	; 0x03
     640:	8b e0       	ldi	r24, 0x0B	; 11
     642:	fe 01       	movw	r30, r28
     644:	31 96       	adiw	r30, 0x01	; 1
     646:	d7 01       	movw	r26, r14
     648:	01 90       	ld	r0, Z+
     64a:	0d 92       	st	X+, r0
     64c:	8a 95       	dec	r24
     64e:	e1 f7       	brne	.-8      	; 0x648 <can_data_receive+0xa4>
     650:	c7 01       	movw	r24, r14
     652:	2b 96       	adiw	r28, 0x0b	; 11
     654:	0f b6       	in	r0, 0x3f	; 63
     656:	f8 94       	cli
     658:	de bf       	out	0x3e, r29	; 62
     65a:	0f be       	out	0x3f, r0	; 63
     65c:	cd bf       	out	0x3d, r28	; 61
     65e:	df 91       	pop	r29
     660:	cf 91       	pop	r28
     662:	1f 91       	pop	r17
     664:	0f 91       	pop	r16
     666:	ff 90       	pop	r15
     668:	ef 90       	pop	r14
     66a:	df 90       	pop	r13
     66c:	cf 90       	pop	r12
     66e:	bf 90       	pop	r11
     670:	af 90       	pop	r10
     672:	9f 90       	pop	r9
     674:	08 95       	ret

00000676 <can_print_message>:
     676:	ff 92       	push	r15
     678:	0f 93       	push	r16
     67a:	1f 93       	push	r17
     67c:	cf 93       	push	r28
     67e:	df 93       	push	r29
     680:	ec 01       	movw	r28, r24
     682:	88 81       	ld	r24, Y
     684:	99 81       	ldd	r25, Y+1	; 0x01
     686:	8f 3f       	cpi	r24, 0xFF	; 255
     688:	2f ef       	ldi	r18, 0xFF	; 255
     68a:	92 07       	cpc	r25, r18
     68c:	09 f4       	brne	.+2      	; 0x690 <can_print_message+0x1a>
     68e:	41 c0       	rjmp	.+130    	; 0x712 <can_print_message+0x9c>
     690:	2a 81       	ldd	r18, Y+2	; 0x02
     692:	1f 92       	push	r1
     694:	2f 93       	push	r18
     696:	9f 93       	push	r25
     698:	8f 93       	push	r24
     69a:	8c e3       	ldi	r24, 0x3C	; 60
     69c:	92 e0       	ldi	r25, 0x02	; 2
     69e:	9f 93       	push	r25
     6a0:	8f 93       	push	r24
     6a2:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <printf>
     6a6:	2b 81       	ldd	r18, Y+3	; 0x03
     6a8:	82 2f       	mov	r24, r18
     6aa:	99 27       	eor	r25, r25
     6ac:	87 fd       	sbrc	r24, 7
     6ae:	90 95       	com	r25
     6b0:	9f 93       	push	r25
     6b2:	2f 93       	push	r18
     6b4:	8e e5       	ldi	r24, 0x5E	; 94
     6b6:	92 e0       	ldi	r25, 0x02	; 2
     6b8:	9f 93       	push	r25
     6ba:	8f 93       	push	r24
     6bc:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <printf>
     6c0:	8d b7       	in	r24, 0x3d	; 61
     6c2:	9e b7       	in	r25, 0x3e	; 62
     6c4:	0a 96       	adiw	r24, 0x0a	; 10
     6c6:	0f b6       	in	r0, 0x3f	; 63
     6c8:	f8 94       	cli
     6ca:	9e bf       	out	0x3e, r25	; 62
     6cc:	0f be       	out	0x3f, r0	; 63
     6ce:	8d bf       	out	0x3d, r24	; 61
     6d0:	8a 81       	ldd	r24, Y+2	; 0x02
     6d2:	82 30       	cpi	r24, 0x02	; 2
     6d4:	d0 f0       	brcs	.+52     	; 0x70a <can_print_message+0x94>
     6d6:	ff 24       	eor	r15, r15
     6d8:	f3 94       	inc	r15
     6da:	01 e7       	ldi	r16, 0x71	; 113
     6dc:	12 e0       	ldi	r17, 0x02	; 2
     6de:	fe 01       	movw	r30, r28
     6e0:	ef 0d       	add	r30, r15
     6e2:	f1 1d       	adc	r31, r1
     6e4:	23 81       	ldd	r18, Z+3	; 0x03
     6e6:	82 2f       	mov	r24, r18
     6e8:	99 27       	eor	r25, r25
     6ea:	87 fd       	sbrc	r24, 7
     6ec:	90 95       	com	r25
     6ee:	9f 93       	push	r25
     6f0:	2f 93       	push	r18
     6f2:	1f 93       	push	r17
     6f4:	0f 93       	push	r16
     6f6:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <printf>
     6fa:	f3 94       	inc	r15
     6fc:	0f 90       	pop	r0
     6fe:	0f 90       	pop	r0
     700:	0f 90       	pop	r0
     702:	0f 90       	pop	r0
     704:	8a 81       	ldd	r24, Y+2	; 0x02
     706:	f8 16       	cp	r15, r24
     708:	50 f3       	brcs	.-44     	; 0x6de <can_print_message+0x68>
     70a:	86 e7       	ldi	r24, 0x76	; 118
     70c:	92 e0       	ldi	r25, 0x02	; 2
     70e:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <puts>
     712:	df 91       	pop	r29
     714:	cf 91       	pop	r28
     716:	1f 91       	pop	r17
     718:	0f 91       	pop	r16
     71a:	ff 90       	pop	r15
     71c:	08 95       	ret

0000071e <can_interrupt_vector>:
     71e:	cf 93       	push	r28
     720:	df 93       	push	r29
     722:	cd b7       	in	r28, 0x3d	; 61
     724:	de b7       	in	r29, 0x3e	; 62
     726:	2b 97       	sbiw	r28, 0x0b	; 11
     728:	0f b6       	in	r0, 0x3f	; 63
     72a:	f8 94       	cli
     72c:	de bf       	out	0x3e, r29	; 62
     72e:	0f be       	out	0x3f, r0	; 63
     730:	cd bf       	out	0x3d, r28	; 61
     732:	ce 01       	movw	r24, r28
     734:	01 96       	adiw	r24, 0x01	; 1
     736:	36 df       	rcall	.-404    	; 0x5a4 <can_data_receive>
     738:	8b e0       	ldi	r24, 0x0B	; 11
     73a:	fe 01       	movw	r30, r28
     73c:	31 96       	adiw	r30, 0x01	; 1
     73e:	a4 e0       	ldi	r26, 0x04	; 4
     740:	b3 e0       	ldi	r27, 0x03	; 3
     742:	01 90       	ld	r0, Z+
     744:	0d 92       	st	X+, r0
     746:	8a 95       	dec	r24
     748:	e1 f7       	brne	.-8      	; 0x742 <can_interrupt_vector+0x24>
     74a:	84 e0       	ldi	r24, 0x04	; 4
     74c:	93 e0       	ldi	r25, 0x03	; 3
     74e:	93 df       	rcall	.-218    	; 0x676 <can_print_message>
     750:	2b 96       	adiw	r28, 0x0b	; 11
     752:	0f b6       	in	r0, 0x3f	; 63
     754:	f8 94       	cli
     756:	de bf       	out	0x3e, r29	; 62
     758:	0f be       	out	0x3f, r0	; 63
     75a:	cd bf       	out	0x3d, r28	; 61
     75c:	df 91       	pop	r29
     75e:	cf 91       	pop	r28
     760:	08 95       	ret

00000762 <__vector_1>:
     762:	1f 92       	push	r1
     764:	0f 92       	push	r0
     766:	0f b6       	in	r0, 0x3f	; 63
     768:	0f 92       	push	r0
     76a:	11 24       	eor	r1, r1
     76c:	0b b6       	in	r0, 0x3b	; 59
     76e:	0f 92       	push	r0
     770:	2f 93       	push	r18
     772:	3f 93       	push	r19
     774:	4f 93       	push	r20
     776:	5f 93       	push	r21
     778:	6f 93       	push	r22
     77a:	7f 93       	push	r23
     77c:	8f 93       	push	r24
     77e:	9f 93       	push	r25
     780:	af 93       	push	r26
     782:	bf 93       	push	r27
     784:	ef 93       	push	r30
     786:	ff 93       	push	r31
     788:	ca df       	rcall	.-108    	; 0x71e <can_interrupt_vector>
     78a:	ff 91       	pop	r31
     78c:	ef 91       	pop	r30
     78e:	bf 91       	pop	r27
     790:	af 91       	pop	r26
     792:	9f 91       	pop	r25
     794:	8f 91       	pop	r24
     796:	7f 91       	pop	r23
     798:	6f 91       	pop	r22
     79a:	5f 91       	pop	r21
     79c:	4f 91       	pop	r20
     79e:	3f 91       	pop	r19
     7a0:	2f 91       	pop	r18
     7a2:	0f 90       	pop	r0
     7a4:	0b be       	out	0x3b, r0	; 59
     7a6:	0f 90       	pop	r0
     7a8:	0f be       	out	0x3f, r0	; 63
     7aa:	0f 90       	pop	r0
     7ac:	1f 90       	pop	r1
     7ae:	18 95       	reti

000007b0 <can_handle_message>:
	}
}



void can_handle_message(){
     7b0:	cf 93       	push	r28
     7b2:	df 93       	push	r29
     7b4:	cd b7       	in	r28, 0x3d	; 61
     7b6:	de b7       	in	r29, 0x3e	; 62
     7b8:	2b 97       	sbiw	r28, 0x0b	; 11
     7ba:	0f b6       	in	r0, 0x3f	; 63
     7bc:	f8 94       	cli
     7be:	de bf       	out	0x3e, r29	; 62
     7c0:	0f be       	out	0x3f, r0	; 63
     7c2:	cd bf       	out	0x3d, r28	; 61
	static uint8_t solenoid_counter;
	static can_message_t message;
	message = can_data_receive();
     7c4:	ce 01       	movw	r24, r28
     7c6:	01 96       	adiw	r24, 0x01	; 1
     7c8:	ed de       	rcall	.-550    	; 0x5a4 <can_data_receive>
     7ca:	8b e0       	ldi	r24, 0x0B	; 11
     7cc:	fe 01       	movw	r30, r28
     7ce:	31 96       	adiw	r30, 0x01	; 1
     7d0:	a9 ef       	ldi	r26, 0xF9	; 249
     7d2:	b2 e0       	ldi	r27, 0x02	; 2
     7d4:	01 90       	ld	r0, Z+
     7d6:	0d 92       	st	X+, r0
     7d8:	8a 95       	dec	r24
     7da:	e1 f7       	brne	.-8      	; 0x7d4 <can_handle_message+0x24>
	can_data_receive();
     7dc:	ce 01       	movw	r24, r28
     7de:	01 96       	adiw	r24, 0x01	; 1
     7e0:	e1 de       	rcall	.-574    	; 0x5a4 <can_data_receive>
	
	//can_print_message(&message);
	
	
	if(message.id & (1<<JOY_CAN_ID)) {
     7e2:	80 91 f9 02 	lds	r24, 0x02F9
     7e6:	80 ff       	sbrs	r24, 0
     7e8:	07 c0       	rjmp	.+14     	; 0x7f8 <can_handle_message+0x48>
		pwm_set_servo(-message.data[0]);
     7ea:	80 91 fc 02 	lds	r24, 0x02FC
     7ee:	99 27       	eor	r25, r25
     7f0:	81 95       	neg	r24
     7f2:	0c f4       	brge	.+2      	; 0x7f6 <can_handle_message+0x46>
     7f4:	90 95       	com	r25
     7f6:	58 d1       	rcall	.+688    	; 0xaa8 <pwm_set_servo>
	}
			
	if(message.id & (1<<SLIDER_CAN_ID)) {
     7f8:	80 91 f9 02 	lds	r24, 0x02F9
     7fc:	83 ff       	sbrs	r24, 3
     7fe:	03 c0       	rjmp	.+6      	; 0x806 <can_handle_message+0x56>
		pi_update_posref(message.data[2]);
     800:	80 91 fe 02 	lds	r24, 0x02FE
     804:	a5 dd       	rcall	.-1206   	; 0x350 <pi_update_posref>
	}
	
	if(message.id & (1<<BUTTON_CAN_ID)) {
     806:	80 91 f9 02 	lds	r24, 0x02F9
     80a:	82 ff       	sbrs	r24, 2
     80c:	05 c0       	rjmp	.+10     	; 0x818 <can_handle_message+0x68>
		if(message.data[4] == 2) {
     80e:	80 91 00 03 	lds	r24, 0x0300
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	09 f4       	brne	.+2      	; 0x818 <can_handle_message+0x68>
			solenoid_out();
     816:	6b d1       	rcall	.+726    	; 0xaee <solenoid_out>
		}
	}
	
}
     818:	2b 96       	adiw	r28, 0x0b	; 11
     81a:	0f b6       	in	r0, 0x3f	; 63
     81c:	f8 94       	cli
     81e:	de bf       	out	0x3e, r29	; 62
     820:	0f be       	out	0x3f, r0	; 63
     822:	cd bf       	out	0x3d, r28	; 61
     824:	df 91       	pop	r29
     826:	cf 91       	pop	r28
     828:	08 95       	ret

0000082a <can_ir_transmit>:


void can_ir_transmit(){
	static can_message_t ir_message;
	ir_message.length = 1;
     82a:	81 e0       	ldi	r24, 0x01	; 1
     82c:	80 93 f0 02 	sts	0x02F0, r24
	ir_message.id = IR_CAN_ID;
     830:	81 e0       	ldi	r24, 0x01	; 1
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	90 93 ef 02 	sts	0x02EF, r25
     838:	80 93 ee 02 	sts	0x02EE, r24
	ir_message.data[0] = last_ir_val;
     83c:	80 91 49 03 	lds	r24, 0x0349
     840:	80 93 f1 02 	sts	0x02F1, r24
	can_message_send(&ir_message);
     844:	8e ee       	ldi	r24, 0xEE	; 238
     846:	92 e0       	ldi	r25, 0x02	; 2
     848:	77 ce       	rjmp	.-786    	; 0x538 <can_message_send>
     84a:	08 95       	ret

0000084c <max520_init>:

#define  MAX520_TWI_ADDR_BASE 0b01010000

static uint8_t twi_address = 0b000;

void max520_init(uint8_t max520_twi_addr){
     84c:	cf 93       	push	r28
     84e:	c8 2f       	mov	r28, r24
	TWI_Master_Initialise();
     850:	42 d2       	rcall	.+1156   	; 0xcd6 <TWI_Master_Initialise>
	sei();
     852:	78 94       	sei
	twi_address = max520_twi_addr;
     854:	c0 93 0f 03 	sts	0x030F, r28
}
     858:	cf 91       	pop	r28
     85a:	08 95       	ret

0000085c <max520_write>:

void max520_write(uint8_t channel, uint8_t val){
     85c:	cf 93       	push	r28
     85e:	df 93       	push	r29
     860:	00 d0       	rcall	.+0      	; 0x862 <max520_write+0x6>
     862:	cd b7       	in	r28, 0x3d	; 61
     864:	de b7       	in	r29, 0x3e	; 62
	uint8_t message[3] = {	MAX520_TWI_ADDR_BASE | ((twi_address & 0x07) << 1),
     866:	90 91 0f 03 	lds	r25, 0x030F
     86a:	97 70       	andi	r25, 0x07	; 7
     86c:	99 0f       	add	r25, r25
     86e:	90 65       	ori	r25, 0x50	; 80
     870:	99 83       	std	Y+1, r25	; 0x01
     872:	87 70       	andi	r24, 0x07	; 7
     874:	8a 83       	std	Y+2, r24	; 0x02
     876:	6b 83       	std	Y+3, r22	; 0x03
							channel & 0x07,
							val	};
	
	TWI_Start_Transceiver_With_Data(message, 3);
     878:	63 e0       	ldi	r22, 0x03	; 3
     87a:	ce 01       	movw	r24, r28
     87c:	01 96       	adiw	r24, 0x01	; 1
     87e:	35 d2       	rcall	.+1130   	; 0xcea <TWI_Start_Transceiver_With_Data>
}
     880:	0f 90       	pop	r0
     882:	0f 90       	pop	r0
     884:	0f 90       	pop	r0
     886:	df 91       	pop	r29
     888:	cf 91       	pop	r28
     88a:	08 95       	ret

0000088c <mcp2515_write>:
	} else {
		;//printf("MCP2515 is in config mode after reset\n");
	}
}

void mcp2515_write(uint8_t address, uint8_t data){
     88c:	cf 93       	push	r28
     88e:	df 93       	push	r29
     890:	d8 2f       	mov	r29, r24
     892:	c6 2f       	mov	r28, r22
	spi_select();
     894:	44 d1       	rcall	.+648    	; 0xb1e <spi_select>

	spi_send(MCP_WRITE);
     896:	82 e0       	ldi	r24, 0x02	; 2
     898:	36 d1       	rcall	.+620    	; 0xb06 <spi_send>
	spi_send(address);
     89a:	8d 2f       	mov	r24, r29
     89c:	34 d1       	rcall	.+616    	; 0xb06 <spi_send>
	spi_send(data);
     89e:	8c 2f       	mov	r24, r28
     8a0:	32 d1       	rcall	.+612    	; 0xb06 <spi_send>

	spi_deselect();
     8a2:	3f d1       	rcall	.+638    	; 0xb22 <spi_deselect>
}
     8a4:	df 91       	pop	r29
     8a6:	cf 91       	pop	r28
     8a8:	08 95       	ret

000008aa <mcp2515_request_to_send>:

void mcp2515_request_to_send(uint8_t command){
     8aa:	cf 93       	push	r28
	//Check last 3 bits of given command
	if (command <= 7) {
     8ac:	88 30       	cpi	r24, 0x08	; 8
     8ae:	18 f4       	brcc	.+6      	; 0x8b6 <mcp2515_request_to_send+0xc>
		command = MCP_RTS | command;
     8b0:	c8 2f       	mov	r28, r24
     8b2:	c0 68       	ori	r28, 0x80	; 128
     8b4:	01 c0       	rjmp	.+2      	; 0x8b8 <mcp2515_request_to_send+0xe>
	} else {
		command = MCP_RTS;
     8b6:	c0 e8       	ldi	r28, 0x80	; 128
	}

	//Select, send RTS command, then deselect
	spi_select();
     8b8:	32 d1       	rcall	.+612    	; 0xb1e <spi_select>
	spi_send(command);
     8ba:	8c 2f       	mov	r24, r28
     8bc:	24 d1       	rcall	.+584    	; 0xb06 <spi_send>
	spi_deselect();
     8be:	31 d1       	rcall	.+610    	; 0xb22 <spi_deselect>
}
     8c0:	cf 91       	pop	r28
     8c2:	08 95       	ret

000008c4 <mcp2515_bit_modify>:

void mcp2515_bit_modify(uint8_t address, uint8_t mask, uint8_t data){
     8c4:	1f 93       	push	r17
     8c6:	cf 93       	push	r28
     8c8:	df 93       	push	r29
     8ca:	18 2f       	mov	r17, r24
     8cc:	d6 2f       	mov	r29, r22
     8ce:	c4 2f       	mov	r28, r20
	spi_select();
     8d0:	26 d1       	rcall	.+588    	; 0xb1e <spi_select>

	spi_send(MCP_BITMOD);
     8d2:	85 e0       	ldi	r24, 0x05	; 5
     8d4:	18 d1       	rcall	.+560    	; 0xb06 <spi_send>
	spi_send(address);
     8d6:	81 2f       	mov	r24, r17
     8d8:	16 d1       	rcall	.+556    	; 0xb06 <spi_send>
	spi_send(mask);
     8da:	8d 2f       	mov	r24, r29
     8dc:	14 d1       	rcall	.+552    	; 0xb06 <spi_send>
	spi_send(data);
     8de:	8c 2f       	mov	r24, r28
     8e0:	12 d1       	rcall	.+548    	; 0xb06 <spi_send>

	spi_deselect();
     8e2:	1f d1       	rcall	.+574    	; 0xb22 <spi_deselect>
}
     8e4:	df 91       	pop	r29
     8e6:	cf 91       	pop	r28
     8e8:	1f 91       	pop	r17
     8ea:	08 95       	ret

000008ec <mcp2515_reset>:

void mcp2515_reset(){
	spi_select();
     8ec:	18 d1       	rcall	.+560    	; 0xb1e <spi_select>
	spi_send(MCP_RESET);	
     8ee:	80 ec       	ldi	r24, 0xC0	; 192
     8f0:	0a d1       	rcall	.+532    	; 0xb06 <spi_send>
	spi_deselect();
     8f2:	17 c1       	rjmp	.+558    	; 0xb22 <spi_deselect>
     8f4:	08 95       	ret

000008f6 <mcp2515_read>:
}


uint8_t mcp2515_read(uint8_t address){
     8f6:	cf 93       	push	r28
     8f8:	c8 2f       	mov	r28, r24
	uint8_t result;

	spi_select();
     8fa:	11 d1       	rcall	.+546    	; 0xb1e <spi_select>
	
	//Send command and address, then read result
	spi_send(MCP_READ);
     8fc:	83 e0       	ldi	r24, 0x03	; 3
     8fe:	03 d1       	rcall	.+518    	; 0xb06 <spi_send>
	spi_send(address);
     900:	8c 2f       	mov	r24, r28
     902:	01 d1       	rcall	.+514    	; 0xb06 <spi_send>

	result = spi_read();
     904:	05 d1       	rcall	.+522    	; 0xb10 <spi_read>
     906:	c8 2f       	mov	r28, r24
	spi_deselect();
     908:	0c d1       	rcall	.+536    	; 0xb22 <spi_deselect>

	return result;	
}
     90a:	8c 2f       	mov	r24, r28
     90c:	cf 91       	pop	r28
     90e:	08 95       	ret

00000910 <mcp2515_init>:
#include <util/delay.h>
#include "uart_driver.h"
#include "spi_driver.h"
#include "mcp2515_driver.h"

void mcp2515_init() {
     910:	cf 93       	push	r28
     912:	df 93       	push	r29
     914:	1f 92       	push	r1
     916:	cd b7       	in	r28, 0x3d	; 61
     918:	de b7       	in	r29, 0x3e	; 62
	//NO NEED, ALREADY ENABLED
	//Enable interrupt when message is recieved (RX0IE = 1)
	//mcp2515_bit_modify(MCP_CANINTE, 0x01, 0xff);

	//Start SPI driver
	spi_init();
     91a:	ed d0       	rcall	.+474    	; 0xaf6 <spi_init>

	mcp2515_reset();
     91c:	e7 df       	rcall	.-50     	; 0x8ec <mcp2515_reset>
	
	//Testing for correct initialization
	value_check = mcp2515_read(MCP_CANSTAT);
     91e:	8e e0       	ldi	r24, 0x0E	; 14
     920:	ea df       	rcall	.-44     	; 0x8f6 <mcp2515_read>
     922:	89 83       	std	Y+1, r24	; 0x01
	
	if ((value_check & MODE_MASK) != MODE_CONFIG) {
     924:	89 81       	ldd	r24, Y+1	; 0x01
     926:	80 7e       	andi	r24, 0xE0	; 224
     928:	80 38       	cpi	r24, 0x80	; 128
     92a:	21 f0       	breq	.+8      	; 0x934 <mcp2515_init+0x24>
		printf("MCP2515 is not in config mode after reset\n");
     92c:	89 e8       	ldi	r24, 0x89	; 137
     92e:	92 e0       	ldi	r25, 0x02	; 2
     930:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <puts>
	} else {
		;//printf("MCP2515 is in config mode after reset\n");
	}
}
     934:	0f 90       	pop	r0
     936:	df 91       	pop	r29
     938:	cf 91       	pop	r28
     93a:	08 95       	ret

0000093c <motor_output_enable>:
	} else {
		PORTC |= (1<<MOTOR_DIR);
	}
}

void motor_velocity(float velocity){
     93c:	88 23       	and	r24, r24
     93e:	31 f0       	breq	.+12     	; 0x94c <motor_output_enable+0x10>
     940:	47 98       	cbi	0x08, 7	; 8
     942:	8a e6       	ldi	r24, 0x6A	; 106
     944:	8a 95       	dec	r24
     946:	f1 f7       	brne	.-4      	; 0x944 <motor_output_enable+0x8>
     948:	00 c0       	rjmp	.+0      	; 0x94a <motor_output_enable+0xe>
     94a:	08 95       	ret
     94c:	47 9a       	sbi	0x08, 7	; 8
     94e:	08 95       	ret

00000950 <motor_encoder_reset>:
     950:	46 98       	cbi	0x08, 6	; 8
     952:	8a e6       	ldi	r24, 0x6A	; 106
     954:	8a 95       	dec	r24
     956:	f1 f7       	brne	.-4      	; 0x954 <motor_encoder_reset+0x4>
     958:	00 c0       	rjmp	.+0      	; 0x95a <motor_encoder_reset+0xa>
     95a:	46 9a       	sbi	0x08, 6	; 8
     95c:	08 95       	ret

0000095e <motor_encoder_select_byte>:
     95e:	88 23       	and	r24, r24
     960:	11 f0       	breq	.+4      	; 0x966 <motor_encoder_select_byte+0x8>
     962:	45 9a       	sbi	0x08, 5	; 8
     964:	01 c0       	rjmp	.+2      	; 0x968 <motor_encoder_select_byte+0xa>
     966:	45 98       	cbi	0x08, 5	; 8
     968:	8a e6       	ldi	r24, 0x6A	; 106
     96a:	8a 95       	dec	r24
     96c:	f1 f7       	brne	.-4      	; 0x96a <motor_encoder_select_byte+0xc>
     96e:	00 c0       	rjmp	.+0      	; 0x970 <motor_encoder_select_byte+0x12>
     970:	08 95       	ret

00000972 <motor_enable>:
     972:	88 23       	and	r24, r24
     974:	11 f0       	breq	.+4      	; 0x97a <motor_enable+0x8>
     976:	44 9a       	sbi	0x08, 4	; 8
     978:	08 95       	ret
     97a:	44 98       	cbi	0x08, 4	; 8
     97c:	08 95       	ret

0000097e <motor_direction>:
     97e:	81 30       	cpi	r24, 0x01	; 1
     980:	11 f4       	brne	.+4      	; 0x986 <motor_direction+0x8>
     982:	43 98       	cbi	0x08, 3	; 8
     984:	08 95       	ret
     986:	43 9a       	sbi	0x08, 3	; 8
     988:	08 95       	ret

0000098a <motor_speed>:
     98a:	cf 93       	push	r28
     98c:	df 93       	push	r29
     98e:	ec 01       	movw	r28, r24
     990:	18 16       	cp	r1, r24
     992:	19 06       	cpc	r1, r25
     994:	1c f4       	brge	.+6      	; 0x99c <motor_speed+0x12>
     996:	81 e0       	ldi	r24, 0x01	; 1
     998:	f2 df       	rcall	.-28     	; 0x97e <motor_direction>
     99a:	02 c0       	rjmp	.+4      	; 0x9a0 <motor_speed+0x16>
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	ef df       	rcall	.-34     	; 0x97e <motor_direction>
     9a0:	be 01       	movw	r22, r28
     9a2:	dd 23       	and	r29, r29
     9a4:	24 f4       	brge	.+8      	; 0x9ae <motor_speed+0x24>
     9a6:	66 27       	eor	r22, r22
     9a8:	77 27       	eor	r23, r23
     9aa:	6c 1b       	sub	r22, r28
     9ac:	7d 0b       	sbc	r23, r29
     9ae:	65 3b       	cpi	r22, 0xB5	; 181
     9b0:	71 05       	cpc	r23, r1
     9b2:	14 f0       	brlt	.+4      	; 0x9b8 <motor_speed+0x2e>
     9b4:	64 eb       	ldi	r22, 0xB4	; 180
     9b6:	70 e0       	ldi	r23, 0x00	; 0
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	50 df       	rcall	.-352    	; 0x85c <max520_write>
     9bc:	df 91       	pop	r29
     9be:	cf 91       	pop	r28
     9c0:	08 95       	ret

000009c2 <motor_init>:
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	43 df       	rcall	.-378    	; 0x84c <max520_init>
     9c6:	87 b1       	in	r24, 0x07	; 7
     9c8:	88 6f       	ori	r24, 0xF8	; 248
     9ca:	87 b9       	out	0x07, r24	; 7
     9cc:	10 92 07 01 	sts	0x0107, r1
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	b4 df       	rcall	.-152    	; 0x93c <motor_output_enable>
     9d4:	bd df       	rcall	.-134    	; 0x950 <motor_encoder_reset>
     9d6:	80 e0       	ldi	r24, 0x00	; 0
     9d8:	c2 df       	rcall	.-124    	; 0x95e <motor_encoder_select_byte>
     9da:	80 e0       	ldi	r24, 0x00	; 0
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	d5 df       	rcall	.-86     	; 0x98a <motor_speed>
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	c7 cf       	rjmp	.-114    	; 0x972 <motor_enable>
     9e4:	08 95       	ret

000009e6 <reverse_bits>:
	//do something useful
}

uint8_t reverse_bits(uint8_t val) {
	val = ((val & 0x55) << 1) | ((val & 0xaa) >> 1);
     9e6:	28 2f       	mov	r18, r24
     9e8:	2a 7a       	andi	r18, 0xAA	; 170
     9ea:	26 95       	lsr	r18
     9ec:	98 2f       	mov	r25, r24
     9ee:	95 75       	andi	r25, 0x55	; 85
     9f0:	99 0f       	add	r25, r25
     9f2:	92 2b       	or	r25, r18
	val = ((val & 0x33) << 2) | ((val & 0xcc) >> 2);
     9f4:	29 2f       	mov	r18, r25
     9f6:	2c 7c       	andi	r18, 0xCC	; 204
     9f8:	26 95       	lsr	r18
     9fa:	26 95       	lsr	r18
     9fc:	89 2f       	mov	r24, r25
     9fe:	83 73       	andi	r24, 0x33	; 51
     a00:	88 0f       	add	r24, r24
     a02:	88 0f       	add	r24, r24
     a04:	82 2b       	or	r24, r18
	val = ((val & 0x0f) << 4) | ((val & 0xf0) >> 4);
	return val;
}
     a06:	82 95       	swap	r24
     a08:	08 95       	ret

00000a0a <motor_encoder_read>:

int16_t motor_encoder_read(){
     a0a:	1f 93       	push	r17
     a0c:	cf 93       	push	r28
     a0e:	df 93       	push	r29
	motor_output_enable(ENABLE);
     a10:	81 e0       	ldi	r24, 0x01	; 1
     a12:	94 df       	rcall	.-216    	; 0x93c <motor_output_enable>
	
	motor_encoder_select_byte(ENCODER_HIGH);
     a14:	80 e0       	ldi	r24, 0x00	; 0
     a16:	a3 df       	rcall	.-186    	; 0x95e <motor_encoder_select_byte>
	uint8_t msb = reverse_bits(PINK);
     a18:	c6 e0       	ldi	r28, 0x06	; 6
     a1a:	d1 e0       	ldi	r29, 0x01	; 1
     a1c:	88 81       	ld	r24, Y
     a1e:	e3 df       	rcall	.-58     	; 0x9e6 <reverse_bits>
     a20:	18 2f       	mov	r17, r24
	motor_encoder_select_byte(ENCODER_LOW);
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	9c df       	rcall	.-200    	; 0x95e <motor_encoder_select_byte>
	uint8_t lsb = reverse_bits(PINK);	
     a26:	88 81       	ld	r24, Y
     a28:	de df       	rcall	.-68     	; 0x9e6 <reverse_bits>
     a2a:	c8 2f       	mov	r28, r24
	
	motor_output_enable(DISABLE);
     a2c:	80 e0       	ldi	r24, 0x00	; 0
     a2e:	86 df       	rcall	.-244    	; 0x93c <motor_output_enable>
	//motor_encoder_reset();
	//return reverse_bits(PINK); //temporary
	return -((msb << 8) | lsb);
     a30:	2c 2f       	mov	r18, r28
     a32:	30 e0       	ldi	r19, 0x00	; 0
     a34:	c9 01       	movw	r24, r18
     a36:	91 2b       	or	r25, r17
}
     a38:	91 95       	neg	r25
     a3a:	81 95       	neg	r24
     a3c:	91 09       	sbc	r25, r1
     a3e:	df 91       	pop	r29
     a40:	cf 91       	pop	r28
     a42:	1f 91       	pop	r17
     a44:	08 95       	ret

00000a46 <__vector_42>:
		astleynr = 0;
	}*/
}


ISR(TIMER4_COMPA_vect){
     a46:	1f 92       	push	r1
     a48:	0f 92       	push	r0
     a4a:	0f b6       	in	r0, 0x3f	; 63
     a4c:	0f 92       	push	r0
     a4e:	11 24       	eor	r1, r1
	music_set_sample_value();
     a50:	0f 90       	pop	r0
     a52:	0f be       	out	0x3f, r0	; 63
     a54:	0f 90       	pop	r0
     a56:	1f 90       	pop	r1
     a58:	18 95       	reti

00000a5a <pwm_init>:
	ICR3 = DUTY_CYCLE_STEPS;
	pwm_set_value(MID_SERVO);
}

void pwm_set_value(uint16_t val) {
	OCR3A = val;
     a5a:	6b 9a       	sbi	0x0d, 3	; 13
     a5c:	a1 e9       	ldi	r26, 0x91	; 145
     a5e:	b0 e0       	ldi	r27, 0x00	; 0
     a60:	8c 91       	ld	r24, X
     a62:	82 60       	ori	r24, 0x02	; 2
     a64:	8c 93       	st	X, r24
     a66:	8c 91       	ld	r24, X
     a68:	8a 7f       	andi	r24, 0xFA	; 250
     a6a:	8c 93       	st	X, r24
     a6c:	e0 e9       	ldi	r30, 0x90	; 144
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	80 81       	ld	r24, Z
     a72:	82 60       	ori	r24, 0x02	; 2
     a74:	80 83       	st	Z, r24
     a76:	80 81       	ld	r24, Z
     a78:	8e 7f       	andi	r24, 0xFE	; 254
     a7a:	80 83       	st	Z, r24
     a7c:	8c 91       	ld	r24, X
     a7e:	88 61       	ori	r24, 0x18	; 24
     a80:	8c 93       	st	X, r24
     a82:	80 81       	ld	r24, Z
     a84:	80 68       	ori	r24, 0x80	; 128
     a86:	80 83       	st	Z, r24
     a88:	80 81       	ld	r24, Z
     a8a:	8f 7b       	andi	r24, 0xBF	; 191
     a8c:	80 83       	st	Z, r24
     a8e:	80 e4       	ldi	r24, 0x40	; 64
     a90:	9c e9       	ldi	r25, 0x9C	; 156
     a92:	90 93 97 00 	sts	0x0097, r25
     a96:	80 93 96 00 	sts	0x0096, r24
     a9a:	88 eb       	ldi	r24, 0xB8	; 184
     a9c:	9b e0       	ldi	r25, 0x0B	; 11
     a9e:	90 93 99 00 	sts	0x0099, r25
     aa2:	80 93 98 00 	sts	0x0098, r24
     aa6:	08 95       	ret

00000aa8 <pwm_set_servo>:
}

void pwm_set_servo(int16_t val){
	val += 128;
     aa8:	9c 01       	movw	r18, r24
     aaa:	20 58       	subi	r18, 0x80	; 128
     aac:	3f 4f       	sbci	r19, 0xFF	; 255
	//printf("%d\n", val);
	val = (val*(VAL_SCALE/UNDERFLOW_FIX)) / 255 * UNDERFLOW_FIX + MIN_SERVO;
     aae:	4b e4       	ldi	r20, 0x4B	; 75
     ab0:	42 9f       	mul	r20, r18
     ab2:	c0 01       	movw	r24, r0
     ab4:	43 9f       	mul	r20, r19
     ab6:	90 0d       	add	r25, r0
     ab8:	11 24       	eor	r1, r1
     aba:	6f ef       	ldi	r22, 0xFF	; 255
     abc:	70 e0       	ldi	r23, 0x00	; 0
     abe:	30 d7       	rcall	.+3680   	; 0x1920 <__divmodhi4>
     ac0:	66 0f       	add	r22, r22
     ac2:	77 1f       	adc	r23, r23
     ac4:	62 95       	swap	r22
     ac6:	72 95       	swap	r23
     ac8:	70 7f       	andi	r23, 0xF0	; 240
     aca:	76 27       	eor	r23, r22
     acc:	60 7f       	andi	r22, 0xF0	; 240
     ace:	76 27       	eor	r23, r22
     ad0:	68 5f       	subi	r22, 0xF8	; 248
     ad2:	78 4f       	sbci	r23, 0xF8	; 248
	ICR3 = DUTY_CYCLE_STEPS;
	pwm_set_value(MID_SERVO);
}

void pwm_set_value(uint16_t val) {
	OCR3A = val;
     ad4:	70 93 99 00 	sts	0x0099, r23
     ad8:	60 93 98 00 	sts	0x0098, r22
     adc:	08 95       	ret

00000ade <solenoid_init>:

#include <avr/io.h>
#include <avr/delay.h>

void solenoid_init(){
	DDRF |= (1<<PF2);
     ade:	82 9a       	sbi	0x10, 2	; 16
	PORTF |= (1<<PF2);
     ae0:	8a 9a       	sbi	0x11, 2	; 17
	
	//wtf
	TCCR4B &= ~((1<<CS40) | (1<<CS41) | (1<<CS42));
     ae2:	e1 ea       	ldi	r30, 0xA1	; 161
     ae4:	f0 e0       	ldi	r31, 0x00	; 0
     ae6:	80 81       	ld	r24, Z
     ae8:	88 7f       	andi	r24, 0xF8	; 248
     aea:	80 83       	st	Z, r24
     aec:	08 95       	ret

00000aee <solenoid_out>:
}

void solenoid_out(){
	//puts("Solenoid out!");
	PORTF &= ~(1<<PF2);
     aee:	8a 98       	cbi	0x11, 2	; 17
     af0:	08 95       	ret

00000af2 <solenoid_in>:
	//_delay_ms(15);
	
}

void solenoid_in(){
	PORTF |= (1<<PF2);
     af2:	8a 9a       	sbi	0x11, 2	; 17
     af4:	08 95       	ret

00000af6 <spi_init>:
#define SPI_MISO PB3
#define SPI_SCK PB1 

void spi_init(){
	//Set MOSI, SCK and SS as output pins 	
	DDRB |= (1 << SPI_MOSI) | (1 << SPI_SCK) | (1 << SPI_SS);
     af6:	84 b1       	in	r24, 0x04	; 4
     af8:	87 60       	ori	r24, 0x07	; 7
     afa:	84 b9       	out	0x04, r24	; 4
	
	//Set MISO as input pin
	DDRB &= ~(1 << SPI_MISO);
     afc:	23 98       	cbi	0x04, 3	; 4
	
	//Enable SPI in master mode and set clock rate fosc/16
	SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0);
     afe:	8c b5       	in	r24, 0x2c	; 44
     b00:	81 65       	ori	r24, 0x51	; 81
     b02:	8c bd       	out	0x2c, r24	; 44
     b04:	08 95       	ret

00000b06 <spi_send>:
	return SPDR;
}

void spi_send(char data){
	//Start transmission
	SPDR = data;
     b06:	8e bd       	out	0x2e, r24	; 46
	
	//Wait for transmission, checks if register is empty 
	while(!(SPSR & (1 << SPIF)));
     b08:	0d b4       	in	r0, 0x2d	; 45
     b0a:	07 fe       	sbrs	r0, 7
     b0c:	fd cf       	rjmp	.-6      	; 0xb08 <spi_send+0x2>
}
     b0e:	08 95       	ret

00000b10 <spi_read>:
}


uint8_t spi_read(){
	//Dummy send in order to read from slave
	spi_send(0xaa);
     b10:	8a ea       	ldi	r24, 0xAA	; 170
     b12:	f9 df       	rcall	.-14     	; 0xb06 <spi_send>
	
	while(!(SPSR & (1 << SPIF)));
     b14:	0d b4       	in	r0, 0x2d	; 45
     b16:	07 fe       	sbrs	r0, 7
     b18:	fd cf       	rjmp	.-6      	; 0xb14 <spi_read+0x4>

	return SPDR;
     b1a:	8e b5       	in	r24, 0x2e	; 46
}
     b1c:	08 95       	ret

00000b1e <spi_select>:
	while(!(SPSR & (1 << SPIF)));
}

void spi_select(){
	//Set !SS to 0 for selection of slave
	PORTB &= ~(1 << SPI_SS);
     b1e:	28 98       	cbi	0x05, 0	; 5
     b20:	08 95       	ret

00000b22 <spi_deselect>:
}

void spi_deselect(){
	//Set !SS to 1 for deselection of slave
	PORTB |= (1 << SPI_SS);
     b22:	28 9a       	sbi	0x05, 0	; 5
     b24:	08 95       	ret

00000b26 <uart_sendChar>:

}

void uart_sendChar(unsigned char data){
	//Wait for empty transmitter buffer
	while(!(UCSR0A & (1<<UDRE0)));
     b26:	e0 ec       	ldi	r30, 0xC0	; 192
     b28:	f0 e0       	ldi	r31, 0x00	; 0
     b2a:	90 81       	ld	r25, Z
     b2c:	95 ff       	sbrs	r25, 5
     b2e:	fd cf       	rjmp	.-6      	; 0xb2a <uart_sendChar+0x4>
		
	//Put data into buffer, then send the data
	UDR0 = data;
     b30:	80 93 c6 00 	sts	0x00C6, r24
     b34:	08 95       	ret

00000b36 <uart_getChar>:
}


unsigned int uart_getChar(){
	//Wait for the data to be received 
	while(!(UCSR0A & (1<<RXC0))){}
     b36:	e0 ec       	ldi	r30, 0xC0	; 192
     b38:	f0 e0       	ldi	r31, 0x00	; 0
     b3a:	80 81       	ld	r24, Z
     b3c:	88 23       	and	r24, r24
     b3e:	ec f7       	brge	.-6      	; 0xb3a <uart_getChar+0x4>
	
	//Get status and the 9th bit, then data from buffer
	return UDR0;
     b40:	80 91 c6 00 	lds	r24, 0x00C6
}
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	08 95       	ret

00000b48 <uart_init>:

static FILE uart_io = FDEV_SETUP_STREAM(uart_sendChar, uart_getChar, _FDEV_SETUP_RW);

void uart_init(unsigned int ubrr){
	//Set baud rate
	UBRR0L = (unsigned int) ubrr;
     b48:	80 93 c4 00 	sts	0x00C4, r24
	
	//Enable receiver and transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
     b4c:	88 e1       	ldi	r24, 0x18	; 24
     b4e:	80 93 c1 00 	sts	0x00C1, r24
	
	stdout = &uart_io;
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	92 e0       	ldi	r25, 0x02	; 2
     b56:	90 93 4e 03 	sts	0x034E, r25
     b5a:	80 93 4d 03 	sts	0x034D, r24
	stdin = &uart_io;
     b5e:	90 93 4c 03 	sts	0x034C, r25
     b62:	80 93 4b 03 	sts	0x034B, r24
     b66:	08 95       	ret

00000b68 <ir_obstructed>:
	for (uint8_t i = 0; i < FILTER_BUFFER_SIZE; i++ ){
		ir_obstructed();
	}
}

uint8_t ir_obstructed(){
     b68:	cf 93       	push	r28
     b6a:	df 93       	push	r29
	static uint16_t ringbuffer_filter[FILTER_BUFFER_SIZE];
	static uint8_t ringbuffer_index;

	//return adc_read(IR_CHANNEL);

	if (ringbuffer_index >= FILTER_BUFFER_SIZE - 1){
     b6c:	80 91 31 03 	lds	r24, 0x0331
     b70:	8f 30       	cpi	r24, 0x0F	; 15
     b72:	18 f0       	brcs	.+6      	; 0xb7a <ir_obstructed+0x12>
		ringbuffer_index = 0;
     b74:	10 92 31 03 	sts	0x0331, r1
     b78:	03 c0       	rjmp	.+6      	; 0xb80 <ir_obstructed+0x18>
	} else { ringbuffer_index++; }
     b7a:	8f 5f       	subi	r24, 0xFF	; 255
     b7c:	80 93 31 03 	sts	0x0331, r24
			
	ringbuffer_filter[ringbuffer_index] = adc_read(IR_CHANNEL) / FILTER_BUFFER_SIZE;
     b80:	c0 91 31 03 	lds	r28, 0x0331
     b84:	d0 e0       	ldi	r29, 0x00	; 0
     b86:	80 e0       	ldi	r24, 0x00	; 0
     b88:	9c dc       	rcall	.-1736   	; 0x4c2 <adc_read>
     b8a:	cc 0f       	add	r28, r28
     b8c:	dd 1f       	adc	r29, r29
     b8e:	cf 5e       	subi	r28, 0xEF	; 239
     b90:	dc 4f       	sbci	r29, 0xFC	; 252
     b92:	92 95       	swap	r25
     b94:	82 95       	swap	r24
     b96:	8f 70       	andi	r24, 0x0F	; 15
     b98:	89 27       	eor	r24, r25
     b9a:	9f 70       	andi	r25, 0x0F	; 15
     b9c:	89 27       	eor	r24, r25
     b9e:	99 83       	std	Y+1, r25	; 0x01
     ba0:	88 83       	st	Y, r24
     ba2:	e1 e1       	ldi	r30, 0x11	; 17
     ba4:	f3 e0       	ldi	r31, 0x03	; 3
     ba6:	41 e3       	ldi	r20, 0x31	; 49
     ba8:	53 e0       	ldi	r21, 0x03	; 3



	uint16_t avg = 0;
     baa:	20 e0       	ldi	r18, 0x00	; 0
     bac:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t i = 0; i < FILTER_BUFFER_SIZE; i++) {
		avg += ringbuffer_filter[i] ;
     bae:	81 91       	ld	r24, Z+
     bb0:	91 91       	ld	r25, Z+
     bb2:	28 0f       	add	r18, r24
     bb4:	39 1f       	adc	r19, r25
	ringbuffer_filter[ringbuffer_index] = adc_read(IR_CHANNEL) / FILTER_BUFFER_SIZE;



	uint16_t avg = 0;
	for (uint8_t i = 0; i < FILTER_BUFFER_SIZE; i++) {
     bb6:	e4 17       	cp	r30, r20
     bb8:	f5 07       	cpc	r31, r21
     bba:	c9 f7       	brne	.-14     	; 0xbae <ir_obstructed+0x46>
		printf(", %d", ringbuffer_filter[i]);
	}
	printf(" ]\n");*/

	
	if (avg < FILTER_THRESHOLD) {
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	22 33       	cpi	r18, 0x32	; 50
     bc0:	31 05       	cpc	r19, r1
     bc2:	08 f0       	brcs	.+2      	; 0xbc6 <ir_obstructed+0x5e>
     bc4:	80 e0       	ldi	r24, 0x00	; 0
		return 1;
	}

	return 0;
}
     bc6:	df 91       	pop	r29
     bc8:	cf 91       	pop	r28
     bca:	08 95       	ret

00000bcc <ir_filter_init>:
#include "Drivers/uart_driver.h"

#define FILTER_THRESHOLD 50
#define FILTER_BUFFER_SIZE 16

void ir_filter_init() {
     bcc:	cf 93       	push	r28
     bce:	c0 e1       	ldi	r28, 0x10	; 16
	for (uint8_t i = 0; i < FILTER_BUFFER_SIZE; i++ ){
		ir_obstructed();
     bd0:	cb df       	rcall	.-106    	; 0xb68 <ir_obstructed>
     bd2:	c1 50       	subi	r28, 0x01	; 1

#define FILTER_THRESHOLD 50
#define FILTER_BUFFER_SIZE 16

void ir_filter_init() {
	for (uint8_t i = 0; i < FILTER_BUFFER_SIZE; i++ ){
     bd4:	e9 f7       	brne	.-6      	; 0xbd0 <ir_filter_init+0x4>
		ir_obstructed();
	}
}
     bd6:	cf 91       	pop	r28
     bd8:	08 95       	ret

00000bda <ir_edge_detected>:
	return 0;
}

uint8_t ir_edge_detected() {
	static uint8_t current;
	current = ir_obstructed();
     bda:	c6 df       	rcall	.-116    	; 0xb68 <ir_obstructed>
     bdc:	80 93 10 03 	sts	0x0310, r24
	if (last_ir_val != current){
     be0:	90 91 49 03 	lds	r25, 0x0349
     be4:	89 17       	cp	r24, r25
     be6:	21 f0       	breq	.+8      	; 0xbf0 <ir_edge_detected+0x16>
		last_ir_val = current;
     be8:	80 93 49 03 	sts	0x0349, r24
		return 1;
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	08 95       	ret
	}
	return 0;
     bf0:	80 e0       	ldi	r24, 0x00	; 0
     bf2:	08 95       	ret

00000bf4 <main>:
#include "test_node_2.h"
#include "timer.h"
//#include "Drivers/music_driver.h"

int main(void){
	uart_init(MYUBRR);
     bf4:	87 e6       	ldi	r24, 0x67	; 103
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	a7 df       	rcall	.-178    	; 0xb48 <uart_init>
	can_init();
     bfa:	74 dc       	rcall	.-1816   	; 0x4e4 <can_init>
	pwm_init();
     bfc:	2e df       	rcall	.-420    	; 0xa5a <pwm_init>
	printf("ir\n");
     bfe:	8a ee       	ldi	r24, 0xEA	; 234
     c00:	92 e0       	ldi	r25, 0x02	; 2
     c02:	fb d7       	rcall	.+4086   	; 0x1bfa <puts>
	adc_init();
     c04:	50 dc       	rcall	.-1888   	; 0x4a6 <adc_init>
	ir_filter_init();
     c06:	e2 df       	rcall	.-60     	; 0xbcc <ir_filter_init>
	solenoid_init();
     c08:	6a df       	rcall	.-300    	; 0xade <solenoid_init>
	motor_init();
     c0a:	db de       	rcall	.-586    	; 0x9c2 <motor_init>
	pi_init();
     c0c:	ca db       	rcall	.-2156   	; 0x3a2 <pi_init>
     c0e:	2f ef       	ldi	r18, 0xFF	; 255
     c10:	83 ed       	ldi	r24, 0xD3	; 211
     c12:	90 e3       	ldi	r25, 0x30	; 48
     c14:	21 50       	subi	r18, 0x01	; 1
     c16:	80 40       	sbci	r24, 0x00	; 0
     c18:	90 40       	sbci	r25, 0x00	; 0
     c1a:	e1 f7       	brne	.-8      	; 0xc14 <main+0x20>
     c1c:	00 c0       	rjmp	.+0      	; 0xc1e <main+0x2a>
     c1e:	00 00       	nop
	_delay_ms(1000);
	timer_init(); //should be last, starts interrupts
     c20:	0a d0       	rcall	.+20     	; 0xc36 <timer_init>
     c22:	2f ef       	ldi	r18, 0xFF	; 255
     c24:	89 e6       	ldi	r24, 0x69	; 105
     c26:	98 e1       	ldi	r25, 0x18	; 24
     c28:	21 50       	subi	r18, 0x01	; 1
     c2a:	80 40       	sbci	r24, 0x00	; 0
     c2c:	90 40       	sbci	r25, 0x00	; 0
     c2e:	e1 f7       	brne	.-8      	; 0xc28 <main+0x34>
     c30:	00 c0       	rjmp	.+0      	; 0xc32 <main+0x3e>
     c32:	00 00       	nop
     c34:	f6 cf       	rjmp	.-20     	; 0xc22 <main+0x2e>

00000c36 <timer_init>:
#include "Drivers/can_driver.h"
#include "Controller/pi.h"

void timer_init() {
	//CS3{2:0}   = 101  prescaler set to 1024
	TCCR5B |=  (1<<CS52) | (1<<CS50);
     c36:	e1 e2       	ldi	r30, 0x21	; 33
     c38:	f1 e0       	ldi	r31, 0x01	; 1
     c3a:	80 81       	ld	r24, Z
     c3c:	85 60       	ori	r24, 0x05	; 5
     c3e:	80 83       	st	Z, r24
	TCCR5B &= ~(1<<CS51);
     c40:	80 81       	ld	r24, Z
     c42:	8d 7f       	andi	r24, 0xFD	; 253
     c44:	80 83       	st	Z, r24
	
	TCCR5A &= ~(1<<WGM50);
     c46:	a0 e2       	ldi	r26, 0x20	; 32
     c48:	b1 e0       	ldi	r27, 0x01	; 1
     c4a:	8c 91       	ld	r24, X
     c4c:	8e 7f       	andi	r24, 0xFE	; 254
     c4e:	8c 93       	st	X, r24
	TCCR5A &= ~(1<<WGM51);
     c50:	8c 91       	ld	r24, X
     c52:	8d 7f       	andi	r24, 0xFD	; 253
     c54:	8c 93       	st	X, r24
	TCCR5B |=  (1<<WGM52);
     c56:	80 81       	ld	r24, Z
     c58:	88 60       	ori	r24, 0x08	; 8
     c5a:	80 83       	st	Z, r24
	TCCR5B &= ~(1<<WGM53);
     c5c:	80 81       	ld	r24, Z
     c5e:	8f 7e       	andi	r24, 0xEF	; 239
     c60:	80 83       	st	Z, r24
	//TCCR3A |=  (1<<COM3A1) | (1<<COM3A0);
	
	OCR5A = TIMER5_OCRA; // 223 for 70 HZ, 7812 for 2 Hz
     c62:	8f ed       	ldi	r24, 0xDF	; 223
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	90 93 29 01 	sts	0x0129, r25
     c6a:	80 93 28 01 	sts	0x0128, r24
	
	//enable interrupt on OCR3A compare

	TIMSK5 |= (1<<OCIE5A);
     c6e:	e3 e7       	ldi	r30, 0x73	; 115
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	80 81       	ld	r24, Z
     c74:	82 60       	ori	r24, 0x02	; 2
     c76:	80 83       	st	Z, r24
	TIFR5 |= (1<<ICF1);
     c78:	d5 9a       	sbi	0x1a, 5	; 26
	
	sei();
     c7a:	78 94       	sei
     c7c:	08 95       	ret

00000c7e <__vector_47>:
	
}


ISR(TIMER5_COMPA_vect){
     c7e:	1f 92       	push	r1
     c80:	0f 92       	push	r0
     c82:	0f b6       	in	r0, 0x3f	; 63
     c84:	0f 92       	push	r0
     c86:	11 24       	eor	r1, r1
     c88:	0b b6       	in	r0, 0x3b	; 59
     c8a:	0f 92       	push	r0
     c8c:	2f 93       	push	r18
     c8e:	3f 93       	push	r19
     c90:	4f 93       	push	r20
     c92:	5f 93       	push	r21
     c94:	6f 93       	push	r22
     c96:	7f 93       	push	r23
     c98:	8f 93       	push	r24
     c9a:	9f 93       	push	r25
     c9c:	af 93       	push	r26
     c9e:	bf 93       	push	r27
     ca0:	ef 93       	push	r30
     ca2:	ff 93       	push	r31
	//printf("read: %d\n",adc_read(0));
	//printf("edge: %d\n\n",ir_edge_detected());

	solenoid_in();
     ca4:	26 df       	rcall	.-436    	; 0xaf2 <solenoid_in>
	
	if(ir_edge_detected()){
     ca6:	99 df       	rcall	.-206    	; 0xbda <ir_edge_detected>
     ca8:	81 11       	cpse	r24, r1
		can_ir_transmit();	
     caa:	bf dd       	rcall	.-1154   	; 0x82a <can_ir_transmit>
	}
	
	can_handle_message();
     cac:	81 dd       	rcall	.-1278   	; 0x7b0 <can_handle_message>
	pi_update();
     cae:	92 db       	rcall	.-2268   	; 0x3d4 <pi_update>
     cb0:	ff 91       	pop	r31
     cb2:	ef 91       	pop	r30
     cb4:	bf 91       	pop	r27
     cb6:	af 91       	pop	r26
     cb8:	9f 91       	pop	r25
     cba:	8f 91       	pop	r24
     cbc:	7f 91       	pop	r23
     cbe:	6f 91       	pop	r22
     cc0:	5f 91       	pop	r21
     cc2:	4f 91       	pop	r20
     cc4:	3f 91       	pop	r19
     cc6:	2f 91       	pop	r18
     cc8:	0f 90       	pop	r0
     cca:	0b be       	out	0x3b, r0	; 59
     ccc:	0f 90       	pop	r0
     cce:	0f be       	out	0x3f, r0	; 63
     cd0:	0f 90       	pop	r0
     cd2:	1f 90       	pop	r1
     cd4:	18 95       	reti

00000cd6 <TWI_Master_Initialise>:
		{
			msg[ i ] = TWI_buf[ i ];
		}
	}
	return( TWI_statusReg.lastTransOK );
}
     cd6:	8c e0       	ldi	r24, 0x0C	; 12
     cd8:	80 93 b8 00 	sts	0x00B8, r24
     cdc:	8f ef       	ldi	r24, 0xFF	; 255
     cde:	80 93 bb 00 	sts	0x00BB, r24
     ce2:	84 e0       	ldi	r24, 0x04	; 4
     ce4:	80 93 bc 00 	sts	0x00BC, r24
     ce8:	08 95       	ret

00000cea <TWI_Start_Transceiver_With_Data>:
     cea:	ec eb       	ldi	r30, 0xBC	; 188
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	20 81       	ld	r18, Z
     cf0:	20 fd       	sbrc	r18, 0
     cf2:	fd cf       	rjmp	.-6      	; 0xcee <TWI_Start_Transceiver_With_Data+0x4>
     cf4:	60 93 34 03 	sts	0x0334, r22
     cf8:	fc 01       	movw	r30, r24
     cfa:	20 81       	ld	r18, Z
     cfc:	20 93 35 03 	sts	0x0335, r18
     d00:	20 fd       	sbrc	r18, 0
     d02:	0c c0       	rjmp	.+24     	; 0xd1c <TWI_Start_Transceiver_With_Data+0x32>
     d04:	62 30       	cpi	r22, 0x02	; 2
     d06:	50 f0       	brcs	.+20     	; 0xd1c <TWI_Start_Transceiver_With_Data+0x32>
     d08:	dc 01       	movw	r26, r24
     d0a:	11 96       	adiw	r26, 0x01	; 1
     d0c:	e6 e3       	ldi	r30, 0x36	; 54
     d0e:	f3 e0       	ldi	r31, 0x03	; 3
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	9d 91       	ld	r25, X+
     d14:	91 93       	st	Z+, r25
     d16:	8f 5f       	subi	r24, 0xFF	; 255
     d18:	86 13       	cpse	r24, r22
     d1a:	fb cf       	rjmp	.-10     	; 0xd12 <TWI_Start_Transceiver_With_Data+0x28>
     d1c:	10 92 33 03 	sts	0x0333, r1
     d20:	88 ef       	ldi	r24, 0xF8	; 248
     d22:	80 93 0e 02 	sts	0x020E, r24
     d26:	85 ea       	ldi	r24, 0xA5	; 165
     d28:	80 93 bc 00 	sts	0x00BC, r24
     d2c:	08 95       	ret

00000d2e <__vector_39>:
This function is the Interrupt Service Routine (ISR), and called when the TWI interrupt is triggered;
that is whenever a TWI event has occurred. This function should not be called directly from the main
application.
****************************************************************************/
ISR(TWI_vect)
{
     d2e:	1f 92       	push	r1
     d30:	0f 92       	push	r0
     d32:	0f b6       	in	r0, 0x3f	; 63
     d34:	0f 92       	push	r0
     d36:	11 24       	eor	r1, r1
     d38:	0b b6       	in	r0, 0x3b	; 59
     d3a:	0f 92       	push	r0
     d3c:	2f 93       	push	r18
     d3e:	3f 93       	push	r19
     d40:	8f 93       	push	r24
     d42:	9f 93       	push	r25
     d44:	af 93       	push	r26
     d46:	bf 93       	push	r27
     d48:	ef 93       	push	r30
     d4a:	ff 93       	push	r31
	static unsigned char TWI_bufPtr;
	
	switch (TWSR)
     d4c:	80 91 b9 00 	lds	r24, 0x00B9
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	fc 01       	movw	r30, r24
     d54:	38 97       	sbiw	r30, 0x08	; 8
     d56:	e1 35       	cpi	r30, 0x51	; 81
     d58:	f1 05       	cpc	r31, r1
     d5a:	08 f0       	brcs	.+2      	; 0xd5e <__vector_39+0x30>
     d5c:	55 c0       	rjmp	.+170    	; 0xe08 <__vector_39+0xda>
     d5e:	ee 58       	subi	r30, 0x8E	; 142
     d60:	ff 4f       	sbci	r31, 0xFF	; 255
     d62:	f1 c5       	rjmp	.+3042   	; 0x1946 <__tablejump2__>
	{
		case TWI_START:             // START has been transmitted
		case TWI_REP_START:         // Repeated START has been transmitted
		TWI_bufPtr = 0;                                     // Set buffer pointer to the TWI Address location
     d64:	10 92 32 03 	sts	0x0332, r1
		case TWI_MTX_ADR_ACK:       // SLA+W has been tramsmitted and ACK received
		case TWI_MTX_DATA_ACK:      // Data byte has been tramsmitted and ACK received
		if (TWI_bufPtr < TWI_msgSize)
     d68:	e0 91 32 03 	lds	r30, 0x0332
     d6c:	80 91 34 03 	lds	r24, 0x0334
     d70:	e8 17       	cp	r30, r24
     d72:	70 f4       	brcc	.+28     	; 0xd90 <__vector_39+0x62>
		{
			TWDR = TWI_buf[TWI_bufPtr++];
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	8e 0f       	add	r24, r30
     d78:	80 93 32 03 	sts	0x0332, r24
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	eb 5c       	subi	r30, 0xCB	; 203
     d80:	fc 4f       	sbci	r31, 0xFC	; 252
     d82:	80 81       	ld	r24, Z
     d84:	80 93 bb 00 	sts	0x00BB, r24
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     d88:	85 e8       	ldi	r24, 0x85	; 133
     d8a:	80 93 bc 00 	sts	0x00BC, r24
     d8e:	43 c0       	rjmp	.+134    	; 0xe16 <__vector_39+0xe8>
			(1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag to send byte
			(0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           //
			(0<<TWWC);                                 //
		}else                    // Send STOP after last byte
		{
			TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully.
     d90:	80 91 33 03 	lds	r24, 0x0333
     d94:	81 60       	ori	r24, 0x01	; 1
     d96:	80 93 33 03 	sts	0x0333, r24
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     d9a:	84 e9       	ldi	r24, 0x94	; 148
     d9c:	80 93 bc 00 	sts	0x00BC, r24
     da0:	3a c0       	rjmp	.+116    	; 0xe16 <__vector_39+0xe8>
			(0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
			(0<<TWWC);                                 //
		}
		break;
		case TWI_MRX_DATA_ACK:      // Data byte has been received and ACK tramsmitted
		TWI_buf[TWI_bufPtr++] = TWDR;
     da2:	e0 91 32 03 	lds	r30, 0x0332
     da6:	81 e0       	ldi	r24, 0x01	; 1
     da8:	8e 0f       	add	r24, r30
     daa:	80 93 32 03 	sts	0x0332, r24
     dae:	80 91 bb 00 	lds	r24, 0x00BB
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	eb 5c       	subi	r30, 0xCB	; 203
     db6:	fc 4f       	sbci	r31, 0xFC	; 252
     db8:	80 83       	st	Z, r24
		case TWI_MRX_ADR_ACK:       // SLA+R has been tramsmitted and ACK received
		if (TWI_bufPtr < (TWI_msgSize-1) )                  // Detect the last byte to NACK it.
     dba:	20 91 32 03 	lds	r18, 0x0332
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	80 91 34 03 	lds	r24, 0x0334
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	01 97       	sbiw	r24, 0x01	; 1
     dc8:	28 17       	cp	r18, r24
     dca:	39 07       	cpc	r19, r25
     dcc:	24 f4       	brge	.+8      	; 0xdd6 <__vector_39+0xa8>
		{
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     dce:	85 ec       	ldi	r24, 0xC5	; 197
     dd0:	80 93 bc 00 	sts	0x00BC, r24
     dd4:	20 c0       	rjmp	.+64     	; 0xe16 <__vector_39+0xe8>
			(1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag to read next byte
			(1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send ACK after reception
			(0<<TWWC);                                 //
		}else                    // Send NACK after next reception
		{
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     dd6:	85 e8       	ldi	r24, 0x85	; 133
     dd8:	80 93 bc 00 	sts	0x00BC, r24
     ddc:	1c c0       	rjmp	.+56     	; 0xe16 <__vector_39+0xe8>
			(0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send NACK after reception
			(0<<TWWC);                                 //
		}
		break;
		case TWI_MRX_DATA_NACK:     // Data byte has been received and NACK tramsmitted
		TWI_buf[TWI_bufPtr] = TWDR;
     dde:	80 91 bb 00 	lds	r24, 0x00BB
     de2:	e0 91 32 03 	lds	r30, 0x0332
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	eb 5c       	subi	r30, 0xCB	; 203
     dea:	fc 4f       	sbci	r31, 0xFC	; 252
     dec:	80 83       	st	Z, r24
		TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully.
     dee:	80 91 33 03 	lds	r24, 0x0333
     df2:	81 60       	ori	r24, 0x01	; 1
     df4:	80 93 33 03 	sts	0x0333, r24
		TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     df8:	84 e9       	ldi	r24, 0x94	; 148
     dfa:	80 93 bc 00 	sts	0x00BC, r24
		(0<<TWIE)|(1<<TWINT)|                      // Disable TWI Interrupt and clear the flag
		(0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
		(0<<TWWC);                                 //
		break;
     dfe:	0b c0       	rjmp	.+22     	; 0xe16 <__vector_39+0xe8>
		case TWI_ARB_LOST:          // Arbitration lost
		TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     e00:	85 ea       	ldi	r24, 0xA5	; 165
     e02:	80 93 bc 00 	sts	0x00BC, r24
		(1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag
		(0<<TWEA)|(1<<TWSTA)|(0<<TWSTO)|           // Initiate a (RE)START condition.
		(0<<TWWC);                                 //
		break;
     e06:	07 c0       	rjmp	.+14     	; 0xe16 <__vector_39+0xe8>
		case TWI_MRX_ADR_NACK:      // SLA+R has been tramsmitted and NACK received
		case TWI_MTX_DATA_NACK:     // Data byte has been tramsmitted and NACK received
		//    case TWI_NO_STATE              // No relevant state information available; TWINT = ?0?
		case TWI_BUS_ERROR:         // Bus error due to an illegal START or STOP condition
		default:
		TWI_state = TWSR;                                 // Store TWSR and automatically sets clears noErrors bit.
     e08:	80 91 b9 00 	lds	r24, 0x00B9
     e0c:	80 93 0e 02 	sts	0x020E, r24
		// Reset TWI Interface
		TWCR = (1<<TWEN)|                                 // Enable TWI-interface and release TWI pins
     e10:	84 e0       	ldi	r24, 0x04	; 4
     e12:	80 93 bc 00 	sts	0x00BC, r24
		(0<<TWIE)|(0<<TWINT)|                      // Disable Interupt
		(0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // No Signal requests
		(0<<TWWC);                                 //
	}
     e16:	ff 91       	pop	r31
     e18:	ef 91       	pop	r30
     e1a:	bf 91       	pop	r27
     e1c:	af 91       	pop	r26
     e1e:	9f 91       	pop	r25
     e20:	8f 91       	pop	r24
     e22:	3f 91       	pop	r19
     e24:	2f 91       	pop	r18
     e26:	0f 90       	pop	r0
     e28:	0b be       	out	0x3b, r0	; 59
     e2a:	0f 90       	pop	r0
     e2c:	0f be       	out	0x3f, r0	; 63
     e2e:	0f 90       	pop	r0
     e30:	1f 90       	pop	r1
     e32:	18 95       	reti

00000e34 <__subsf3>:
     e34:	50 58       	subi	r21, 0x80	; 128

00000e36 <__addsf3>:
     e36:	bb 27       	eor	r27, r27
     e38:	aa 27       	eor	r26, r26
     e3a:	0e d0       	rcall	.+28     	; 0xe58 <__addsf3x>
     e3c:	4d c1       	rjmp	.+666    	; 0x10d8 <__fp_round>
     e3e:	3e d1       	rcall	.+636    	; 0x10bc <__fp_pscA>
     e40:	30 f0       	brcs	.+12     	; 0xe4e <__addsf3+0x18>
     e42:	43 d1       	rcall	.+646    	; 0x10ca <__fp_pscB>
     e44:	20 f0       	brcs	.+8      	; 0xe4e <__addsf3+0x18>
     e46:	31 f4       	brne	.+12     	; 0xe54 <__addsf3+0x1e>
     e48:	9f 3f       	cpi	r25, 0xFF	; 255
     e4a:	11 f4       	brne	.+4      	; 0xe50 <__addsf3+0x1a>
     e4c:	1e f4       	brtc	.+6      	; 0xe54 <__addsf3+0x1e>
     e4e:	33 c1       	rjmp	.+614    	; 0x10b6 <__fp_nan>
     e50:	0e f4       	brtc	.+2      	; 0xe54 <__addsf3+0x1e>
     e52:	e0 95       	com	r30
     e54:	e7 fb       	bst	r30, 7
     e56:	29 c1       	rjmp	.+594    	; 0x10aa <__fp_inf>

00000e58 <__addsf3x>:
     e58:	e9 2f       	mov	r30, r25
     e5a:	4f d1       	rcall	.+670    	; 0x10fa <__fp_split3>
     e5c:	80 f3       	brcs	.-32     	; 0xe3e <__addsf3+0x8>
     e5e:	ba 17       	cp	r27, r26
     e60:	62 07       	cpc	r22, r18
     e62:	73 07       	cpc	r23, r19
     e64:	84 07       	cpc	r24, r20
     e66:	95 07       	cpc	r25, r21
     e68:	18 f0       	brcs	.+6      	; 0xe70 <__addsf3x+0x18>
     e6a:	71 f4       	brne	.+28     	; 0xe88 <__addsf3x+0x30>
     e6c:	9e f5       	brtc	.+102    	; 0xed4 <__addsf3x+0x7c>
     e6e:	67 c1       	rjmp	.+718    	; 0x113e <__fp_zero>
     e70:	0e f4       	brtc	.+2      	; 0xe74 <__addsf3x+0x1c>
     e72:	e0 95       	com	r30
     e74:	0b 2e       	mov	r0, r27
     e76:	ba 2f       	mov	r27, r26
     e78:	a0 2d       	mov	r26, r0
     e7a:	0b 01       	movw	r0, r22
     e7c:	b9 01       	movw	r22, r18
     e7e:	90 01       	movw	r18, r0
     e80:	0c 01       	movw	r0, r24
     e82:	ca 01       	movw	r24, r20
     e84:	a0 01       	movw	r20, r0
     e86:	11 24       	eor	r1, r1
     e88:	ff 27       	eor	r31, r31
     e8a:	59 1b       	sub	r21, r25
     e8c:	99 f0       	breq	.+38     	; 0xeb4 <__addsf3x+0x5c>
     e8e:	59 3f       	cpi	r21, 0xF9	; 249
     e90:	50 f4       	brcc	.+20     	; 0xea6 <__addsf3x+0x4e>
     e92:	50 3e       	cpi	r21, 0xE0	; 224
     e94:	68 f1       	brcs	.+90     	; 0xef0 <__addsf3x+0x98>
     e96:	1a 16       	cp	r1, r26
     e98:	f0 40       	sbci	r31, 0x00	; 0
     e9a:	a2 2f       	mov	r26, r18
     e9c:	23 2f       	mov	r18, r19
     e9e:	34 2f       	mov	r19, r20
     ea0:	44 27       	eor	r20, r20
     ea2:	58 5f       	subi	r21, 0xF8	; 248
     ea4:	f3 cf       	rjmp	.-26     	; 0xe8c <__addsf3x+0x34>
     ea6:	46 95       	lsr	r20
     ea8:	37 95       	ror	r19
     eaa:	27 95       	ror	r18
     eac:	a7 95       	ror	r26
     eae:	f0 40       	sbci	r31, 0x00	; 0
     eb0:	53 95       	inc	r21
     eb2:	c9 f7       	brne	.-14     	; 0xea6 <__addsf3x+0x4e>
     eb4:	7e f4       	brtc	.+30     	; 0xed4 <__addsf3x+0x7c>
     eb6:	1f 16       	cp	r1, r31
     eb8:	ba 0b       	sbc	r27, r26
     eba:	62 0b       	sbc	r22, r18
     ebc:	73 0b       	sbc	r23, r19
     ebe:	84 0b       	sbc	r24, r20
     ec0:	ba f0       	brmi	.+46     	; 0xef0 <__addsf3x+0x98>
     ec2:	91 50       	subi	r25, 0x01	; 1
     ec4:	a1 f0       	breq	.+40     	; 0xeee <__addsf3x+0x96>
     ec6:	ff 0f       	add	r31, r31
     ec8:	bb 1f       	adc	r27, r27
     eca:	66 1f       	adc	r22, r22
     ecc:	77 1f       	adc	r23, r23
     ece:	88 1f       	adc	r24, r24
     ed0:	c2 f7       	brpl	.-16     	; 0xec2 <__addsf3x+0x6a>
     ed2:	0e c0       	rjmp	.+28     	; 0xef0 <__addsf3x+0x98>
     ed4:	ba 0f       	add	r27, r26
     ed6:	62 1f       	adc	r22, r18
     ed8:	73 1f       	adc	r23, r19
     eda:	84 1f       	adc	r24, r20
     edc:	48 f4       	brcc	.+18     	; 0xef0 <__addsf3x+0x98>
     ede:	87 95       	ror	r24
     ee0:	77 95       	ror	r23
     ee2:	67 95       	ror	r22
     ee4:	b7 95       	ror	r27
     ee6:	f7 95       	ror	r31
     ee8:	9e 3f       	cpi	r25, 0xFE	; 254
     eea:	08 f0       	brcs	.+2      	; 0xeee <__addsf3x+0x96>
     eec:	b3 cf       	rjmp	.-154    	; 0xe54 <__addsf3+0x1e>
     eee:	93 95       	inc	r25
     ef0:	88 0f       	add	r24, r24
     ef2:	08 f0       	brcs	.+2      	; 0xef6 <__addsf3x+0x9e>
     ef4:	99 27       	eor	r25, r25
     ef6:	ee 0f       	add	r30, r30
     ef8:	97 95       	ror	r25
     efa:	87 95       	ror	r24
     efc:	08 95       	ret

00000efe <__divsf3>:
     efe:	0c d0       	rcall	.+24     	; 0xf18 <__divsf3x>
     f00:	eb c0       	rjmp	.+470    	; 0x10d8 <__fp_round>
     f02:	e3 d0       	rcall	.+454    	; 0x10ca <__fp_pscB>
     f04:	40 f0       	brcs	.+16     	; 0xf16 <__divsf3+0x18>
     f06:	da d0       	rcall	.+436    	; 0x10bc <__fp_pscA>
     f08:	30 f0       	brcs	.+12     	; 0xf16 <__divsf3+0x18>
     f0a:	21 f4       	brne	.+8      	; 0xf14 <__divsf3+0x16>
     f0c:	5f 3f       	cpi	r21, 0xFF	; 255
     f0e:	19 f0       	breq	.+6      	; 0xf16 <__divsf3+0x18>
     f10:	cc c0       	rjmp	.+408    	; 0x10aa <__fp_inf>
     f12:	51 11       	cpse	r21, r1
     f14:	15 c1       	rjmp	.+554    	; 0x1140 <__fp_szero>
     f16:	cf c0       	rjmp	.+414    	; 0x10b6 <__fp_nan>

00000f18 <__divsf3x>:
     f18:	f0 d0       	rcall	.+480    	; 0x10fa <__fp_split3>
     f1a:	98 f3       	brcs	.-26     	; 0xf02 <__divsf3+0x4>

00000f1c <__divsf3_pse>:
     f1c:	99 23       	and	r25, r25
     f1e:	c9 f3       	breq	.-14     	; 0xf12 <__divsf3+0x14>
     f20:	55 23       	and	r21, r21
     f22:	b1 f3       	breq	.-20     	; 0xf10 <__divsf3+0x12>
     f24:	95 1b       	sub	r25, r21
     f26:	55 0b       	sbc	r21, r21
     f28:	bb 27       	eor	r27, r27
     f2a:	aa 27       	eor	r26, r26
     f2c:	62 17       	cp	r22, r18
     f2e:	73 07       	cpc	r23, r19
     f30:	84 07       	cpc	r24, r20
     f32:	38 f0       	brcs	.+14     	; 0xf42 <__divsf3_pse+0x26>
     f34:	9f 5f       	subi	r25, 0xFF	; 255
     f36:	5f 4f       	sbci	r21, 0xFF	; 255
     f38:	22 0f       	add	r18, r18
     f3a:	33 1f       	adc	r19, r19
     f3c:	44 1f       	adc	r20, r20
     f3e:	aa 1f       	adc	r26, r26
     f40:	a9 f3       	breq	.-22     	; 0xf2c <__divsf3_pse+0x10>
     f42:	33 d0       	rcall	.+102    	; 0xfaa <__divsf3_pse+0x8e>
     f44:	0e 2e       	mov	r0, r30
     f46:	3a f0       	brmi	.+14     	; 0xf56 <__divsf3_pse+0x3a>
     f48:	e0 e8       	ldi	r30, 0x80	; 128
     f4a:	30 d0       	rcall	.+96     	; 0xfac <__divsf3_pse+0x90>
     f4c:	91 50       	subi	r25, 0x01	; 1
     f4e:	50 40       	sbci	r21, 0x00	; 0
     f50:	e6 95       	lsr	r30
     f52:	00 1c       	adc	r0, r0
     f54:	ca f7       	brpl	.-14     	; 0xf48 <__divsf3_pse+0x2c>
     f56:	29 d0       	rcall	.+82     	; 0xfaa <__divsf3_pse+0x8e>
     f58:	fe 2f       	mov	r31, r30
     f5a:	27 d0       	rcall	.+78     	; 0xfaa <__divsf3_pse+0x8e>
     f5c:	66 0f       	add	r22, r22
     f5e:	77 1f       	adc	r23, r23
     f60:	88 1f       	adc	r24, r24
     f62:	bb 1f       	adc	r27, r27
     f64:	26 17       	cp	r18, r22
     f66:	37 07       	cpc	r19, r23
     f68:	48 07       	cpc	r20, r24
     f6a:	ab 07       	cpc	r26, r27
     f6c:	b0 e8       	ldi	r27, 0x80	; 128
     f6e:	09 f0       	breq	.+2      	; 0xf72 <__divsf3_pse+0x56>
     f70:	bb 0b       	sbc	r27, r27
     f72:	80 2d       	mov	r24, r0
     f74:	bf 01       	movw	r22, r30
     f76:	ff 27       	eor	r31, r31
     f78:	93 58       	subi	r25, 0x83	; 131
     f7a:	5f 4f       	sbci	r21, 0xFF	; 255
     f7c:	2a f0       	brmi	.+10     	; 0xf88 <__divsf3_pse+0x6c>
     f7e:	9e 3f       	cpi	r25, 0xFE	; 254
     f80:	51 05       	cpc	r21, r1
     f82:	68 f0       	brcs	.+26     	; 0xf9e <__divsf3_pse+0x82>
     f84:	92 c0       	rjmp	.+292    	; 0x10aa <__fp_inf>
     f86:	dc c0       	rjmp	.+440    	; 0x1140 <__fp_szero>
     f88:	5f 3f       	cpi	r21, 0xFF	; 255
     f8a:	ec f3       	brlt	.-6      	; 0xf86 <__divsf3_pse+0x6a>
     f8c:	98 3e       	cpi	r25, 0xE8	; 232
     f8e:	dc f3       	brlt	.-10     	; 0xf86 <__divsf3_pse+0x6a>
     f90:	86 95       	lsr	r24
     f92:	77 95       	ror	r23
     f94:	67 95       	ror	r22
     f96:	b7 95       	ror	r27
     f98:	f7 95       	ror	r31
     f9a:	9f 5f       	subi	r25, 0xFF	; 255
     f9c:	c9 f7       	brne	.-14     	; 0xf90 <__divsf3_pse+0x74>
     f9e:	88 0f       	add	r24, r24
     fa0:	91 1d       	adc	r25, r1
     fa2:	96 95       	lsr	r25
     fa4:	87 95       	ror	r24
     fa6:	97 f9       	bld	r25, 7
     fa8:	08 95       	ret
     faa:	e1 e0       	ldi	r30, 0x01	; 1
     fac:	66 0f       	add	r22, r22
     fae:	77 1f       	adc	r23, r23
     fb0:	88 1f       	adc	r24, r24
     fb2:	bb 1f       	adc	r27, r27
     fb4:	62 17       	cp	r22, r18
     fb6:	73 07       	cpc	r23, r19
     fb8:	84 07       	cpc	r24, r20
     fba:	ba 07       	cpc	r27, r26
     fbc:	20 f0       	brcs	.+8      	; 0xfc6 <__divsf3_pse+0xaa>
     fbe:	62 1b       	sub	r22, r18
     fc0:	73 0b       	sbc	r23, r19
     fc2:	84 0b       	sbc	r24, r20
     fc4:	ba 0b       	sbc	r27, r26
     fc6:	ee 1f       	adc	r30, r30
     fc8:	88 f7       	brcc	.-30     	; 0xfac <__divsf3_pse+0x90>
     fca:	e0 95       	com	r30
     fcc:	08 95       	ret

00000fce <__fixsfsi>:
     fce:	04 d0       	rcall	.+8      	; 0xfd8 <__fixunssfsi>
     fd0:	68 94       	set
     fd2:	b1 11       	cpse	r27, r1
     fd4:	b5 c0       	rjmp	.+362    	; 0x1140 <__fp_szero>
     fd6:	08 95       	ret

00000fd8 <__fixunssfsi>:
     fd8:	98 d0       	rcall	.+304    	; 0x110a <__fp_splitA>
     fda:	88 f0       	brcs	.+34     	; 0xffe <__fixunssfsi+0x26>
     fdc:	9f 57       	subi	r25, 0x7F	; 127
     fde:	90 f0       	brcs	.+36     	; 0x1004 <__fixunssfsi+0x2c>
     fe0:	b9 2f       	mov	r27, r25
     fe2:	99 27       	eor	r25, r25
     fe4:	b7 51       	subi	r27, 0x17	; 23
     fe6:	a0 f0       	brcs	.+40     	; 0x1010 <__fixunssfsi+0x38>
     fe8:	d1 f0       	breq	.+52     	; 0x101e <__fixunssfsi+0x46>
     fea:	66 0f       	add	r22, r22
     fec:	77 1f       	adc	r23, r23
     fee:	88 1f       	adc	r24, r24
     ff0:	99 1f       	adc	r25, r25
     ff2:	1a f0       	brmi	.+6      	; 0xffa <__fixunssfsi+0x22>
     ff4:	ba 95       	dec	r27
     ff6:	c9 f7       	brne	.-14     	; 0xfea <__fixunssfsi+0x12>
     ff8:	12 c0       	rjmp	.+36     	; 0x101e <__fixunssfsi+0x46>
     ffa:	b1 30       	cpi	r27, 0x01	; 1
     ffc:	81 f0       	breq	.+32     	; 0x101e <__fixunssfsi+0x46>
     ffe:	9f d0       	rcall	.+318    	; 0x113e <__fp_zero>
    1000:	b1 e0       	ldi	r27, 0x01	; 1
    1002:	08 95       	ret
    1004:	9c c0       	rjmp	.+312    	; 0x113e <__fp_zero>
    1006:	67 2f       	mov	r22, r23
    1008:	78 2f       	mov	r23, r24
    100a:	88 27       	eor	r24, r24
    100c:	b8 5f       	subi	r27, 0xF8	; 248
    100e:	39 f0       	breq	.+14     	; 0x101e <__fixunssfsi+0x46>
    1010:	b9 3f       	cpi	r27, 0xF9	; 249
    1012:	cc f3       	brlt	.-14     	; 0x1006 <__fixunssfsi+0x2e>
    1014:	86 95       	lsr	r24
    1016:	77 95       	ror	r23
    1018:	67 95       	ror	r22
    101a:	b3 95       	inc	r27
    101c:	d9 f7       	brne	.-10     	; 0x1014 <__fixunssfsi+0x3c>
    101e:	3e f4       	brtc	.+14     	; 0x102e <__fixunssfsi+0x56>
    1020:	90 95       	com	r25
    1022:	80 95       	com	r24
    1024:	70 95       	com	r23
    1026:	61 95       	neg	r22
    1028:	7f 4f       	sbci	r23, 0xFF	; 255
    102a:	8f 4f       	sbci	r24, 0xFF	; 255
    102c:	9f 4f       	sbci	r25, 0xFF	; 255
    102e:	08 95       	ret

00001030 <__floatunsisf>:
    1030:	e8 94       	clt
    1032:	09 c0       	rjmp	.+18     	; 0x1046 <__floatsisf+0x12>

00001034 <__floatsisf>:
    1034:	97 fb       	bst	r25, 7
    1036:	3e f4       	brtc	.+14     	; 0x1046 <__floatsisf+0x12>
    1038:	90 95       	com	r25
    103a:	80 95       	com	r24
    103c:	70 95       	com	r23
    103e:	61 95       	neg	r22
    1040:	7f 4f       	sbci	r23, 0xFF	; 255
    1042:	8f 4f       	sbci	r24, 0xFF	; 255
    1044:	9f 4f       	sbci	r25, 0xFF	; 255
    1046:	99 23       	and	r25, r25
    1048:	a9 f0       	breq	.+42     	; 0x1074 <__floatsisf+0x40>
    104a:	f9 2f       	mov	r31, r25
    104c:	96 e9       	ldi	r25, 0x96	; 150
    104e:	bb 27       	eor	r27, r27
    1050:	93 95       	inc	r25
    1052:	f6 95       	lsr	r31
    1054:	87 95       	ror	r24
    1056:	77 95       	ror	r23
    1058:	67 95       	ror	r22
    105a:	b7 95       	ror	r27
    105c:	f1 11       	cpse	r31, r1
    105e:	f8 cf       	rjmp	.-16     	; 0x1050 <__floatsisf+0x1c>
    1060:	fa f4       	brpl	.+62     	; 0x10a0 <__floatsisf+0x6c>
    1062:	bb 0f       	add	r27, r27
    1064:	11 f4       	brne	.+4      	; 0x106a <__floatsisf+0x36>
    1066:	60 ff       	sbrs	r22, 0
    1068:	1b c0       	rjmp	.+54     	; 0x10a0 <__floatsisf+0x6c>
    106a:	6f 5f       	subi	r22, 0xFF	; 255
    106c:	7f 4f       	sbci	r23, 0xFF	; 255
    106e:	8f 4f       	sbci	r24, 0xFF	; 255
    1070:	9f 4f       	sbci	r25, 0xFF	; 255
    1072:	16 c0       	rjmp	.+44     	; 0x10a0 <__floatsisf+0x6c>
    1074:	88 23       	and	r24, r24
    1076:	11 f0       	breq	.+4      	; 0x107c <__floatsisf+0x48>
    1078:	96 e9       	ldi	r25, 0x96	; 150
    107a:	11 c0       	rjmp	.+34     	; 0x109e <__floatsisf+0x6a>
    107c:	77 23       	and	r23, r23
    107e:	21 f0       	breq	.+8      	; 0x1088 <__floatsisf+0x54>
    1080:	9e e8       	ldi	r25, 0x8E	; 142
    1082:	87 2f       	mov	r24, r23
    1084:	76 2f       	mov	r23, r22
    1086:	05 c0       	rjmp	.+10     	; 0x1092 <__floatsisf+0x5e>
    1088:	66 23       	and	r22, r22
    108a:	71 f0       	breq	.+28     	; 0x10a8 <__floatsisf+0x74>
    108c:	96 e8       	ldi	r25, 0x86	; 134
    108e:	86 2f       	mov	r24, r22
    1090:	70 e0       	ldi	r23, 0x00	; 0
    1092:	60 e0       	ldi	r22, 0x00	; 0
    1094:	2a f0       	brmi	.+10     	; 0x10a0 <__floatsisf+0x6c>
    1096:	9a 95       	dec	r25
    1098:	66 0f       	add	r22, r22
    109a:	77 1f       	adc	r23, r23
    109c:	88 1f       	adc	r24, r24
    109e:	da f7       	brpl	.-10     	; 0x1096 <__floatsisf+0x62>
    10a0:	88 0f       	add	r24, r24
    10a2:	96 95       	lsr	r25
    10a4:	87 95       	ror	r24
    10a6:	97 f9       	bld	r25, 7
    10a8:	08 95       	ret

000010aa <__fp_inf>:
    10aa:	97 f9       	bld	r25, 7
    10ac:	9f 67       	ori	r25, 0x7F	; 127
    10ae:	80 e8       	ldi	r24, 0x80	; 128
    10b0:	70 e0       	ldi	r23, 0x00	; 0
    10b2:	60 e0       	ldi	r22, 0x00	; 0
    10b4:	08 95       	ret

000010b6 <__fp_nan>:
    10b6:	9f ef       	ldi	r25, 0xFF	; 255
    10b8:	80 ec       	ldi	r24, 0xC0	; 192
    10ba:	08 95       	ret

000010bc <__fp_pscA>:
    10bc:	00 24       	eor	r0, r0
    10be:	0a 94       	dec	r0
    10c0:	16 16       	cp	r1, r22
    10c2:	17 06       	cpc	r1, r23
    10c4:	18 06       	cpc	r1, r24
    10c6:	09 06       	cpc	r0, r25
    10c8:	08 95       	ret

000010ca <__fp_pscB>:
    10ca:	00 24       	eor	r0, r0
    10cc:	0a 94       	dec	r0
    10ce:	12 16       	cp	r1, r18
    10d0:	13 06       	cpc	r1, r19
    10d2:	14 06       	cpc	r1, r20
    10d4:	05 06       	cpc	r0, r21
    10d6:	08 95       	ret

000010d8 <__fp_round>:
    10d8:	09 2e       	mov	r0, r25
    10da:	03 94       	inc	r0
    10dc:	00 0c       	add	r0, r0
    10de:	11 f4       	brne	.+4      	; 0x10e4 <__fp_round+0xc>
    10e0:	88 23       	and	r24, r24
    10e2:	52 f0       	brmi	.+20     	; 0x10f8 <__fp_round+0x20>
    10e4:	bb 0f       	add	r27, r27
    10e6:	40 f4       	brcc	.+16     	; 0x10f8 <__fp_round+0x20>
    10e8:	bf 2b       	or	r27, r31
    10ea:	11 f4       	brne	.+4      	; 0x10f0 <__fp_round+0x18>
    10ec:	60 ff       	sbrs	r22, 0
    10ee:	04 c0       	rjmp	.+8      	; 0x10f8 <__fp_round+0x20>
    10f0:	6f 5f       	subi	r22, 0xFF	; 255
    10f2:	7f 4f       	sbci	r23, 0xFF	; 255
    10f4:	8f 4f       	sbci	r24, 0xFF	; 255
    10f6:	9f 4f       	sbci	r25, 0xFF	; 255
    10f8:	08 95       	ret

000010fa <__fp_split3>:
    10fa:	57 fd       	sbrc	r21, 7
    10fc:	90 58       	subi	r25, 0x80	; 128
    10fe:	44 0f       	add	r20, r20
    1100:	55 1f       	adc	r21, r21
    1102:	59 f0       	breq	.+22     	; 0x111a <__fp_splitA+0x10>
    1104:	5f 3f       	cpi	r21, 0xFF	; 255
    1106:	71 f0       	breq	.+28     	; 0x1124 <__fp_splitA+0x1a>
    1108:	47 95       	ror	r20

0000110a <__fp_splitA>:
    110a:	88 0f       	add	r24, r24
    110c:	97 fb       	bst	r25, 7
    110e:	99 1f       	adc	r25, r25
    1110:	61 f0       	breq	.+24     	; 0x112a <__fp_splitA+0x20>
    1112:	9f 3f       	cpi	r25, 0xFF	; 255
    1114:	79 f0       	breq	.+30     	; 0x1134 <__fp_splitA+0x2a>
    1116:	87 95       	ror	r24
    1118:	08 95       	ret
    111a:	12 16       	cp	r1, r18
    111c:	13 06       	cpc	r1, r19
    111e:	14 06       	cpc	r1, r20
    1120:	55 1f       	adc	r21, r21
    1122:	f2 cf       	rjmp	.-28     	; 0x1108 <__fp_split3+0xe>
    1124:	46 95       	lsr	r20
    1126:	f1 df       	rcall	.-30     	; 0x110a <__fp_splitA>
    1128:	08 c0       	rjmp	.+16     	; 0x113a <__fp_splitA+0x30>
    112a:	16 16       	cp	r1, r22
    112c:	17 06       	cpc	r1, r23
    112e:	18 06       	cpc	r1, r24
    1130:	99 1f       	adc	r25, r25
    1132:	f1 cf       	rjmp	.-30     	; 0x1116 <__fp_splitA+0xc>
    1134:	86 95       	lsr	r24
    1136:	71 05       	cpc	r23, r1
    1138:	61 05       	cpc	r22, r1
    113a:	08 94       	sec
    113c:	08 95       	ret

0000113e <__fp_zero>:
    113e:	e8 94       	clt

00001140 <__fp_szero>:
    1140:	bb 27       	eor	r27, r27
    1142:	66 27       	eor	r22, r22
    1144:	77 27       	eor	r23, r23
    1146:	cb 01       	movw	r24, r22
    1148:	97 f9       	bld	r25, 7
    114a:	08 95       	ret

0000114c <__mulsf3>:
    114c:	0b d0       	rcall	.+22     	; 0x1164 <__mulsf3x>
    114e:	c4 cf       	rjmp	.-120    	; 0x10d8 <__fp_round>
    1150:	b5 df       	rcall	.-150    	; 0x10bc <__fp_pscA>
    1152:	28 f0       	brcs	.+10     	; 0x115e <__mulsf3+0x12>
    1154:	ba df       	rcall	.-140    	; 0x10ca <__fp_pscB>
    1156:	18 f0       	brcs	.+6      	; 0x115e <__mulsf3+0x12>
    1158:	95 23       	and	r25, r21
    115a:	09 f0       	breq	.+2      	; 0x115e <__mulsf3+0x12>
    115c:	a6 cf       	rjmp	.-180    	; 0x10aa <__fp_inf>
    115e:	ab cf       	rjmp	.-170    	; 0x10b6 <__fp_nan>
    1160:	11 24       	eor	r1, r1
    1162:	ee cf       	rjmp	.-36     	; 0x1140 <__fp_szero>

00001164 <__mulsf3x>:
    1164:	ca df       	rcall	.-108    	; 0x10fa <__fp_split3>
    1166:	a0 f3       	brcs	.-24     	; 0x1150 <__mulsf3+0x4>

00001168 <__mulsf3_pse>:
    1168:	95 9f       	mul	r25, r21
    116a:	d1 f3       	breq	.-12     	; 0x1160 <__mulsf3+0x14>
    116c:	95 0f       	add	r25, r21
    116e:	50 e0       	ldi	r21, 0x00	; 0
    1170:	55 1f       	adc	r21, r21
    1172:	62 9f       	mul	r22, r18
    1174:	f0 01       	movw	r30, r0
    1176:	72 9f       	mul	r23, r18
    1178:	bb 27       	eor	r27, r27
    117a:	f0 0d       	add	r31, r0
    117c:	b1 1d       	adc	r27, r1
    117e:	63 9f       	mul	r22, r19
    1180:	aa 27       	eor	r26, r26
    1182:	f0 0d       	add	r31, r0
    1184:	b1 1d       	adc	r27, r1
    1186:	aa 1f       	adc	r26, r26
    1188:	64 9f       	mul	r22, r20
    118a:	66 27       	eor	r22, r22
    118c:	b0 0d       	add	r27, r0
    118e:	a1 1d       	adc	r26, r1
    1190:	66 1f       	adc	r22, r22
    1192:	82 9f       	mul	r24, r18
    1194:	22 27       	eor	r18, r18
    1196:	b0 0d       	add	r27, r0
    1198:	a1 1d       	adc	r26, r1
    119a:	62 1f       	adc	r22, r18
    119c:	73 9f       	mul	r23, r19
    119e:	b0 0d       	add	r27, r0
    11a0:	a1 1d       	adc	r26, r1
    11a2:	62 1f       	adc	r22, r18
    11a4:	83 9f       	mul	r24, r19
    11a6:	a0 0d       	add	r26, r0
    11a8:	61 1d       	adc	r22, r1
    11aa:	22 1f       	adc	r18, r18
    11ac:	74 9f       	mul	r23, r20
    11ae:	33 27       	eor	r19, r19
    11b0:	a0 0d       	add	r26, r0
    11b2:	61 1d       	adc	r22, r1
    11b4:	23 1f       	adc	r18, r19
    11b6:	84 9f       	mul	r24, r20
    11b8:	60 0d       	add	r22, r0
    11ba:	21 1d       	adc	r18, r1
    11bc:	82 2f       	mov	r24, r18
    11be:	76 2f       	mov	r23, r22
    11c0:	6a 2f       	mov	r22, r26
    11c2:	11 24       	eor	r1, r1
    11c4:	9f 57       	subi	r25, 0x7F	; 127
    11c6:	50 40       	sbci	r21, 0x00	; 0
    11c8:	8a f0       	brmi	.+34     	; 0x11ec <__mulsf3_pse+0x84>
    11ca:	e1 f0       	breq	.+56     	; 0x1204 <__mulsf3_pse+0x9c>
    11cc:	88 23       	and	r24, r24
    11ce:	4a f0       	brmi	.+18     	; 0x11e2 <__mulsf3_pse+0x7a>
    11d0:	ee 0f       	add	r30, r30
    11d2:	ff 1f       	adc	r31, r31
    11d4:	bb 1f       	adc	r27, r27
    11d6:	66 1f       	adc	r22, r22
    11d8:	77 1f       	adc	r23, r23
    11da:	88 1f       	adc	r24, r24
    11dc:	91 50       	subi	r25, 0x01	; 1
    11de:	50 40       	sbci	r21, 0x00	; 0
    11e0:	a9 f7       	brne	.-22     	; 0x11cc <__mulsf3_pse+0x64>
    11e2:	9e 3f       	cpi	r25, 0xFE	; 254
    11e4:	51 05       	cpc	r21, r1
    11e6:	70 f0       	brcs	.+28     	; 0x1204 <__mulsf3_pse+0x9c>
    11e8:	60 cf       	rjmp	.-320    	; 0x10aa <__fp_inf>
    11ea:	aa cf       	rjmp	.-172    	; 0x1140 <__fp_szero>
    11ec:	5f 3f       	cpi	r21, 0xFF	; 255
    11ee:	ec f3       	brlt	.-6      	; 0x11ea <__mulsf3_pse+0x82>
    11f0:	98 3e       	cpi	r25, 0xE8	; 232
    11f2:	dc f3       	brlt	.-10     	; 0x11ea <__mulsf3_pse+0x82>
    11f4:	86 95       	lsr	r24
    11f6:	77 95       	ror	r23
    11f8:	67 95       	ror	r22
    11fa:	b7 95       	ror	r27
    11fc:	f7 95       	ror	r31
    11fe:	e7 95       	ror	r30
    1200:	9f 5f       	subi	r25, 0xFF	; 255
    1202:	c1 f7       	brne	.-16     	; 0x11f4 <__mulsf3_pse+0x8c>
    1204:	fe 2b       	or	r31, r30
    1206:	88 0f       	add	r24, r24
    1208:	91 1d       	adc	r25, r1
    120a:	96 95       	lsr	r25
    120c:	87 95       	ror	r24
    120e:	97 f9       	bld	r25, 7
    1210:	08 95       	ret

00001212 <vfprintf>:
    1212:	2f 92       	push	r2
    1214:	3f 92       	push	r3
    1216:	4f 92       	push	r4
    1218:	5f 92       	push	r5
    121a:	6f 92       	push	r6
    121c:	7f 92       	push	r7
    121e:	8f 92       	push	r8
    1220:	9f 92       	push	r9
    1222:	af 92       	push	r10
    1224:	bf 92       	push	r11
    1226:	cf 92       	push	r12
    1228:	df 92       	push	r13
    122a:	ef 92       	push	r14
    122c:	ff 92       	push	r15
    122e:	0f 93       	push	r16
    1230:	1f 93       	push	r17
    1232:	cf 93       	push	r28
    1234:	df 93       	push	r29
    1236:	cd b7       	in	r28, 0x3d	; 61
    1238:	de b7       	in	r29, 0x3e	; 62
    123a:	63 97       	sbiw	r28, 0x13	; 19
    123c:	0f b6       	in	r0, 0x3f	; 63
    123e:	f8 94       	cli
    1240:	de bf       	out	0x3e, r29	; 62
    1242:	0f be       	out	0x3f, r0	; 63
    1244:	cd bf       	out	0x3d, r28	; 61
    1246:	7c 01       	movw	r14, r24
    1248:	1b 01       	movw	r2, r22
    124a:	6a 01       	movw	r12, r20
    124c:	fc 01       	movw	r30, r24
    124e:	17 82       	std	Z+7, r1	; 0x07
    1250:	16 82       	std	Z+6, r1	; 0x06
    1252:	83 81       	ldd	r24, Z+3	; 0x03
    1254:	81 ff       	sbrs	r24, 1
    1256:	49 c3       	rjmp	.+1682   	; 0x18ea <vfprintf+0x6d8>
    1258:	be 01       	movw	r22, r28
    125a:	6f 5f       	subi	r22, 0xFF	; 255
    125c:	7f 4f       	sbci	r23, 0xFF	; 255
    125e:	4b 01       	movw	r8, r22
    1260:	f7 01       	movw	r30, r14
    1262:	93 81       	ldd	r25, Z+3	; 0x03
    1264:	f1 01       	movw	r30, r2
    1266:	93 fd       	sbrc	r25, 3
    1268:	85 91       	lpm	r24, Z+
    126a:	93 ff       	sbrs	r25, 3
    126c:	81 91       	ld	r24, Z+
    126e:	1f 01       	movw	r2, r30
    1270:	88 23       	and	r24, r24
    1272:	09 f4       	brne	.+2      	; 0x1276 <vfprintf+0x64>
    1274:	36 c3       	rjmp	.+1644   	; 0x18e2 <vfprintf+0x6d0>
    1276:	85 32       	cpi	r24, 0x25	; 37
    1278:	39 f4       	brne	.+14     	; 0x1288 <vfprintf+0x76>
    127a:	93 fd       	sbrc	r25, 3
    127c:	85 91       	lpm	r24, Z+
    127e:	93 ff       	sbrs	r25, 3
    1280:	81 91       	ld	r24, Z+
    1282:	1f 01       	movw	r2, r30
    1284:	85 32       	cpi	r24, 0x25	; 37
    1286:	31 f4       	brne	.+12     	; 0x1294 <vfprintf+0x82>
    1288:	b7 01       	movw	r22, r14
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	73 d4       	rcall	.+2278   	; 0x1b74 <fputc>
    128e:	56 01       	movw	r10, r12
    1290:	65 01       	movw	r12, r10
    1292:	e6 cf       	rjmp	.-52     	; 0x1260 <vfprintf+0x4e>
    1294:	10 e0       	ldi	r17, 0x00	; 0
    1296:	51 2c       	mov	r5, r1
    1298:	20 e0       	ldi	r18, 0x00	; 0
    129a:	20 32       	cpi	r18, 0x20	; 32
    129c:	a0 f4       	brcc	.+40     	; 0x12c6 <vfprintf+0xb4>
    129e:	8b 32       	cpi	r24, 0x2B	; 43
    12a0:	69 f0       	breq	.+26     	; 0x12bc <vfprintf+0xaa>
    12a2:	30 f4       	brcc	.+12     	; 0x12b0 <vfprintf+0x9e>
    12a4:	80 32       	cpi	r24, 0x20	; 32
    12a6:	59 f0       	breq	.+22     	; 0x12be <vfprintf+0xac>
    12a8:	83 32       	cpi	r24, 0x23	; 35
    12aa:	69 f4       	brne	.+26     	; 0x12c6 <vfprintf+0xb4>
    12ac:	20 61       	ori	r18, 0x10	; 16
    12ae:	2c c0       	rjmp	.+88     	; 0x1308 <vfprintf+0xf6>
    12b0:	8d 32       	cpi	r24, 0x2D	; 45
    12b2:	39 f0       	breq	.+14     	; 0x12c2 <vfprintf+0xb0>
    12b4:	80 33       	cpi	r24, 0x30	; 48
    12b6:	39 f4       	brne	.+14     	; 0x12c6 <vfprintf+0xb4>
    12b8:	21 60       	ori	r18, 0x01	; 1
    12ba:	26 c0       	rjmp	.+76     	; 0x1308 <vfprintf+0xf6>
    12bc:	22 60       	ori	r18, 0x02	; 2
    12be:	24 60       	ori	r18, 0x04	; 4
    12c0:	23 c0       	rjmp	.+70     	; 0x1308 <vfprintf+0xf6>
    12c2:	28 60       	ori	r18, 0x08	; 8
    12c4:	21 c0       	rjmp	.+66     	; 0x1308 <vfprintf+0xf6>
    12c6:	27 fd       	sbrc	r18, 7
    12c8:	27 c0       	rjmp	.+78     	; 0x1318 <vfprintf+0x106>
    12ca:	30 ed       	ldi	r19, 0xD0	; 208
    12cc:	38 0f       	add	r19, r24
    12ce:	3a 30       	cpi	r19, 0x0A	; 10
    12d0:	78 f4       	brcc	.+30     	; 0x12f0 <vfprintf+0xde>
    12d2:	26 ff       	sbrs	r18, 6
    12d4:	06 c0       	rjmp	.+12     	; 0x12e2 <vfprintf+0xd0>
    12d6:	fa e0       	ldi	r31, 0x0A	; 10
    12d8:	1f 9f       	mul	r17, r31
    12da:	30 0d       	add	r19, r0
    12dc:	11 24       	eor	r1, r1
    12de:	13 2f       	mov	r17, r19
    12e0:	13 c0       	rjmp	.+38     	; 0x1308 <vfprintf+0xf6>
    12e2:	6a e0       	ldi	r22, 0x0A	; 10
    12e4:	56 9e       	mul	r5, r22
    12e6:	30 0d       	add	r19, r0
    12e8:	11 24       	eor	r1, r1
    12ea:	53 2e       	mov	r5, r19
    12ec:	20 62       	ori	r18, 0x20	; 32
    12ee:	0c c0       	rjmp	.+24     	; 0x1308 <vfprintf+0xf6>
    12f0:	8e 32       	cpi	r24, 0x2E	; 46
    12f2:	21 f4       	brne	.+8      	; 0x12fc <vfprintf+0xea>
    12f4:	26 fd       	sbrc	r18, 6
    12f6:	f5 c2       	rjmp	.+1514   	; 0x18e2 <vfprintf+0x6d0>
    12f8:	20 64       	ori	r18, 0x40	; 64
    12fa:	06 c0       	rjmp	.+12     	; 0x1308 <vfprintf+0xf6>
    12fc:	8c 36       	cpi	r24, 0x6C	; 108
    12fe:	11 f4       	brne	.+4      	; 0x1304 <vfprintf+0xf2>
    1300:	20 68       	ori	r18, 0x80	; 128
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <vfprintf+0xf6>
    1304:	88 36       	cpi	r24, 0x68	; 104
    1306:	41 f4       	brne	.+16     	; 0x1318 <vfprintf+0x106>
    1308:	f1 01       	movw	r30, r2
    130a:	93 fd       	sbrc	r25, 3
    130c:	85 91       	lpm	r24, Z+
    130e:	93 ff       	sbrs	r25, 3
    1310:	81 91       	ld	r24, Z+
    1312:	1f 01       	movw	r2, r30
    1314:	81 11       	cpse	r24, r1
    1316:	c1 cf       	rjmp	.-126    	; 0x129a <vfprintf+0x88>
    1318:	9b eb       	ldi	r25, 0xBB	; 187
    131a:	98 0f       	add	r25, r24
    131c:	93 30       	cpi	r25, 0x03	; 3
    131e:	18 f4       	brcc	.+6      	; 0x1326 <vfprintf+0x114>
    1320:	20 61       	ori	r18, 0x10	; 16
    1322:	80 5e       	subi	r24, 0xE0	; 224
    1324:	06 c0       	rjmp	.+12     	; 0x1332 <vfprintf+0x120>
    1326:	9b e9       	ldi	r25, 0x9B	; 155
    1328:	98 0f       	add	r25, r24
    132a:	93 30       	cpi	r25, 0x03	; 3
    132c:	08 f0       	brcs	.+2      	; 0x1330 <vfprintf+0x11e>
    132e:	9a c1       	rjmp	.+820    	; 0x1664 <vfprintf+0x452>
    1330:	2f 7e       	andi	r18, 0xEF	; 239
    1332:	26 ff       	sbrs	r18, 6
    1334:	16 e0       	ldi	r17, 0x06	; 6
    1336:	2f 73       	andi	r18, 0x3F	; 63
    1338:	72 2e       	mov	r7, r18
    133a:	85 36       	cpi	r24, 0x65	; 101
    133c:	21 f4       	brne	.+8      	; 0x1346 <vfprintf+0x134>
    133e:	f2 2f       	mov	r31, r18
    1340:	f0 64       	ori	r31, 0x40	; 64
    1342:	7f 2e       	mov	r7, r31
    1344:	08 c0       	rjmp	.+16     	; 0x1356 <vfprintf+0x144>
    1346:	86 36       	cpi	r24, 0x66	; 102
    1348:	21 f4       	brne	.+8      	; 0x1352 <vfprintf+0x140>
    134a:	62 2f       	mov	r22, r18
    134c:	60 68       	ori	r22, 0x80	; 128
    134e:	76 2e       	mov	r7, r22
    1350:	02 c0       	rjmp	.+4      	; 0x1356 <vfprintf+0x144>
    1352:	11 11       	cpse	r17, r1
    1354:	11 50       	subi	r17, 0x01	; 1
    1356:	77 fe       	sbrs	r7, 7
    1358:	07 c0       	rjmp	.+14     	; 0x1368 <vfprintf+0x156>
    135a:	1c 33       	cpi	r17, 0x3C	; 60
    135c:	48 f4       	brcc	.+18     	; 0x1370 <vfprintf+0x15e>
    135e:	44 24       	eor	r4, r4
    1360:	43 94       	inc	r4
    1362:	41 0e       	add	r4, r17
    1364:	27 e0       	ldi	r18, 0x07	; 7
    1366:	0b c0       	rjmp	.+22     	; 0x137e <vfprintf+0x16c>
    1368:	18 30       	cpi	r17, 0x08	; 8
    136a:	30 f4       	brcc	.+12     	; 0x1378 <vfprintf+0x166>
    136c:	21 2f       	mov	r18, r17
    136e:	06 c0       	rjmp	.+12     	; 0x137c <vfprintf+0x16a>
    1370:	27 e0       	ldi	r18, 0x07	; 7
    1372:	4c e3       	ldi	r20, 0x3C	; 60
    1374:	44 2e       	mov	r4, r20
    1376:	03 c0       	rjmp	.+6      	; 0x137e <vfprintf+0x16c>
    1378:	27 e0       	ldi	r18, 0x07	; 7
    137a:	17 e0       	ldi	r17, 0x07	; 7
    137c:	41 2c       	mov	r4, r1
    137e:	56 01       	movw	r10, r12
    1380:	74 e0       	ldi	r23, 0x04	; 4
    1382:	a7 0e       	add	r10, r23
    1384:	b1 1c       	adc	r11, r1
    1386:	f6 01       	movw	r30, r12
    1388:	60 81       	ld	r22, Z
    138a:	71 81       	ldd	r23, Z+1	; 0x01
    138c:	82 81       	ldd	r24, Z+2	; 0x02
    138e:	93 81       	ldd	r25, Z+3	; 0x03
    1390:	04 2d       	mov	r16, r4
    1392:	a4 01       	movw	r20, r8
    1394:	01 d3       	rcall	.+1538   	; 0x1998 <__ftoa_engine>
    1396:	6c 01       	movw	r12, r24
    1398:	09 81       	ldd	r16, Y+1	; 0x01
    139a:	00 ff       	sbrs	r16, 0
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <vfprintf+0x190>
    139e:	03 ff       	sbrs	r16, 3
    13a0:	06 c0       	rjmp	.+12     	; 0x13ae <vfprintf+0x19c>
    13a2:	71 fc       	sbrc	r7, 1
    13a4:	07 c0       	rjmp	.+14     	; 0x13b4 <vfprintf+0x1a2>
    13a6:	72 fc       	sbrc	r7, 2
    13a8:	08 c0       	rjmp	.+16     	; 0x13ba <vfprintf+0x1a8>
    13aa:	61 2c       	mov	r6, r1
    13ac:	08 c0       	rjmp	.+16     	; 0x13be <vfprintf+0x1ac>
    13ae:	3d e2       	ldi	r19, 0x2D	; 45
    13b0:	63 2e       	mov	r6, r19
    13b2:	05 c0       	rjmp	.+10     	; 0x13be <vfprintf+0x1ac>
    13b4:	2b e2       	ldi	r18, 0x2B	; 43
    13b6:	62 2e       	mov	r6, r18
    13b8:	02 c0       	rjmp	.+4      	; 0x13be <vfprintf+0x1ac>
    13ba:	90 e2       	ldi	r25, 0x20	; 32
    13bc:	69 2e       	mov	r6, r25
    13be:	80 2f       	mov	r24, r16
    13c0:	8c 70       	andi	r24, 0x0C	; 12
    13c2:	81 f1       	breq	.+96     	; 0x1424 <vfprintf+0x212>
    13c4:	66 20       	and	r6, r6
    13c6:	11 f0       	breq	.+4      	; 0x13cc <vfprintf+0x1ba>
    13c8:	84 e0       	ldi	r24, 0x04	; 4
    13ca:	01 c0       	rjmp	.+2      	; 0x13ce <vfprintf+0x1bc>
    13cc:	83 e0       	ldi	r24, 0x03	; 3
    13ce:	85 15       	cp	r24, r5
    13d0:	10 f0       	brcs	.+4      	; 0x13d6 <vfprintf+0x1c4>
    13d2:	51 2c       	mov	r5, r1
    13d4:	0a c0       	rjmp	.+20     	; 0x13ea <vfprintf+0x1d8>
    13d6:	58 1a       	sub	r5, r24
    13d8:	73 fc       	sbrc	r7, 3
    13da:	07 c0       	rjmp	.+14     	; 0x13ea <vfprintf+0x1d8>
    13dc:	b7 01       	movw	r22, r14
    13de:	80 e2       	ldi	r24, 0x20	; 32
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	c8 d3       	rcall	.+1936   	; 0x1b74 <fputc>
    13e4:	5a 94       	dec	r5
    13e6:	d1 f7       	brne	.-12     	; 0x13dc <vfprintf+0x1ca>
    13e8:	f4 cf       	rjmp	.-24     	; 0x13d2 <vfprintf+0x1c0>
    13ea:	66 20       	and	r6, r6
    13ec:	21 f0       	breq	.+8      	; 0x13f6 <vfprintf+0x1e4>
    13ee:	b7 01       	movw	r22, r14
    13f0:	86 2d       	mov	r24, r6
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	bf d3       	rcall	.+1918   	; 0x1b74 <fputc>
    13f6:	03 fd       	sbrc	r16, 3
    13f8:	03 c0       	rjmp	.+6      	; 0x1400 <vfprintf+0x1ee>
    13fa:	0a e8       	ldi	r16, 0x8A	; 138
    13fc:	11 e0       	ldi	r17, 0x01	; 1
    13fe:	02 c0       	rjmp	.+4      	; 0x1404 <vfprintf+0x1f2>
    1400:	06 e8       	ldi	r16, 0x86	; 134
    1402:	11 e0       	ldi	r17, 0x01	; 1
    1404:	f7 2d       	mov	r31, r7
    1406:	f0 71       	andi	r31, 0x10	; 16
    1408:	7f 2e       	mov	r7, r31
    140a:	f8 01       	movw	r30, r16
    140c:	84 91       	lpm	r24, Z
    140e:	88 23       	and	r24, r24
    1410:	09 f4       	brne	.+2      	; 0x1414 <vfprintf+0x202>
    1412:	5e c2       	rjmp	.+1212   	; 0x18d0 <vfprintf+0x6be>
    1414:	71 10       	cpse	r7, r1
    1416:	80 52       	subi	r24, 0x20	; 32
    1418:	b7 01       	movw	r22, r14
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	ab d3       	rcall	.+1878   	; 0x1b74 <fputc>
    141e:	0f 5f       	subi	r16, 0xFF	; 255
    1420:	1f 4f       	sbci	r17, 0xFF	; 255
    1422:	f3 cf       	rjmp	.-26     	; 0x140a <vfprintf+0x1f8>
    1424:	77 fe       	sbrs	r7, 7
    1426:	0f c0       	rjmp	.+30     	; 0x1446 <vfprintf+0x234>
    1428:	4c 0c       	add	r4, r12
    142a:	04 ff       	sbrs	r16, 4
    142c:	04 c0       	rjmp	.+8      	; 0x1436 <vfprintf+0x224>
    142e:	8a 81       	ldd	r24, Y+2	; 0x02
    1430:	81 33       	cpi	r24, 0x31	; 49
    1432:	09 f4       	brne	.+2      	; 0x1436 <vfprintf+0x224>
    1434:	4a 94       	dec	r4
    1436:	14 14       	cp	r1, r4
    1438:	74 f5       	brge	.+92     	; 0x1496 <vfprintf+0x284>
    143a:	f8 e0       	ldi	r31, 0x08	; 8
    143c:	f4 15       	cp	r31, r4
    143e:	78 f5       	brcc	.+94     	; 0x149e <vfprintf+0x28c>
    1440:	88 e0       	ldi	r24, 0x08	; 8
    1442:	48 2e       	mov	r4, r24
    1444:	2c c0       	rjmp	.+88     	; 0x149e <vfprintf+0x28c>
    1446:	76 fc       	sbrc	r7, 6
    1448:	2a c0       	rjmp	.+84     	; 0x149e <vfprintf+0x28c>
    144a:	81 2f       	mov	r24, r17
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	8c 15       	cp	r24, r12
    1450:	9d 05       	cpc	r25, r13
    1452:	9c f0       	brlt	.+38     	; 0x147a <vfprintf+0x268>
    1454:	6c ef       	ldi	r22, 0xFC	; 252
    1456:	c6 16       	cp	r12, r22
    1458:	6f ef       	ldi	r22, 0xFF	; 255
    145a:	d6 06       	cpc	r13, r22
    145c:	74 f0       	brlt	.+28     	; 0x147a <vfprintf+0x268>
    145e:	77 2d       	mov	r23, r7
    1460:	70 68       	ori	r23, 0x80	; 128
    1462:	77 2e       	mov	r7, r23
    1464:	0a c0       	rjmp	.+20     	; 0x147a <vfprintf+0x268>
    1466:	e2 e0       	ldi	r30, 0x02	; 2
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	ec 0f       	add	r30, r28
    146c:	fd 1f       	adc	r31, r29
    146e:	e1 0f       	add	r30, r17
    1470:	f1 1d       	adc	r31, r1
    1472:	80 81       	ld	r24, Z
    1474:	80 33       	cpi	r24, 0x30	; 48
    1476:	19 f4       	brne	.+6      	; 0x147e <vfprintf+0x26c>
    1478:	11 50       	subi	r17, 0x01	; 1
    147a:	11 11       	cpse	r17, r1
    147c:	f4 cf       	rjmp	.-24     	; 0x1466 <vfprintf+0x254>
    147e:	77 fe       	sbrs	r7, 7
    1480:	0e c0       	rjmp	.+28     	; 0x149e <vfprintf+0x28c>
    1482:	44 24       	eor	r4, r4
    1484:	43 94       	inc	r4
    1486:	41 0e       	add	r4, r17
    1488:	81 2f       	mov	r24, r17
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	c8 16       	cp	r12, r24
    148e:	d9 06       	cpc	r13, r25
    1490:	2c f4       	brge	.+10     	; 0x149c <vfprintf+0x28a>
    1492:	1c 19       	sub	r17, r12
    1494:	04 c0       	rjmp	.+8      	; 0x149e <vfprintf+0x28c>
    1496:	44 24       	eor	r4, r4
    1498:	43 94       	inc	r4
    149a:	01 c0       	rjmp	.+2      	; 0x149e <vfprintf+0x28c>
    149c:	10 e0       	ldi	r17, 0x00	; 0
    149e:	77 fe       	sbrs	r7, 7
    14a0:	07 c0       	rjmp	.+14     	; 0x14b0 <vfprintf+0x29e>
    14a2:	1c 14       	cp	r1, r12
    14a4:	1d 04       	cpc	r1, r13
    14a6:	3c f4       	brge	.+14     	; 0x14b6 <vfprintf+0x2a4>
    14a8:	96 01       	movw	r18, r12
    14aa:	2f 5f       	subi	r18, 0xFF	; 255
    14ac:	3f 4f       	sbci	r19, 0xFF	; 255
    14ae:	05 c0       	rjmp	.+10     	; 0x14ba <vfprintf+0x2a8>
    14b0:	25 e0       	ldi	r18, 0x05	; 5
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	02 c0       	rjmp	.+4      	; 0x14ba <vfprintf+0x2a8>
    14b6:	21 e0       	ldi	r18, 0x01	; 1
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	66 20       	and	r6, r6
    14bc:	11 f0       	breq	.+4      	; 0x14c2 <vfprintf+0x2b0>
    14be:	2f 5f       	subi	r18, 0xFF	; 255
    14c0:	3f 4f       	sbci	r19, 0xFF	; 255
    14c2:	11 23       	and	r17, r17
    14c4:	31 f0       	breq	.+12     	; 0x14d2 <vfprintf+0x2c0>
    14c6:	41 2f       	mov	r20, r17
    14c8:	50 e0       	ldi	r21, 0x00	; 0
    14ca:	4f 5f       	subi	r20, 0xFF	; 255
    14cc:	5f 4f       	sbci	r21, 0xFF	; 255
    14ce:	24 0f       	add	r18, r20
    14d0:	35 1f       	adc	r19, r21
    14d2:	45 2d       	mov	r20, r5
    14d4:	50 e0       	ldi	r21, 0x00	; 0
    14d6:	24 17       	cp	r18, r20
    14d8:	35 07       	cpc	r19, r21
    14da:	14 f4       	brge	.+4      	; 0x14e0 <vfprintf+0x2ce>
    14dc:	52 1a       	sub	r5, r18
    14de:	01 c0       	rjmp	.+2      	; 0x14e2 <vfprintf+0x2d0>
    14e0:	51 2c       	mov	r5, r1
    14e2:	87 2d       	mov	r24, r7
    14e4:	89 70       	andi	r24, 0x09	; 9
    14e6:	41 f4       	brne	.+16     	; 0x14f8 <vfprintf+0x2e6>
    14e8:	55 20       	and	r5, r5
    14ea:	31 f0       	breq	.+12     	; 0x14f8 <vfprintf+0x2e6>
    14ec:	b7 01       	movw	r22, r14
    14ee:	80 e2       	ldi	r24, 0x20	; 32
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	40 d3       	rcall	.+1664   	; 0x1b74 <fputc>
    14f4:	5a 94       	dec	r5
    14f6:	f8 cf       	rjmp	.-16     	; 0x14e8 <vfprintf+0x2d6>
    14f8:	66 20       	and	r6, r6
    14fa:	21 f0       	breq	.+8      	; 0x1504 <vfprintf+0x2f2>
    14fc:	b7 01       	movw	r22, r14
    14fe:	86 2d       	mov	r24, r6
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	38 d3       	rcall	.+1648   	; 0x1b74 <fputc>
    1504:	73 fc       	sbrc	r7, 3
    1506:	08 c0       	rjmp	.+16     	; 0x1518 <vfprintf+0x306>
    1508:	55 20       	and	r5, r5
    150a:	31 f0       	breq	.+12     	; 0x1518 <vfprintf+0x306>
    150c:	b7 01       	movw	r22, r14
    150e:	80 e3       	ldi	r24, 0x30	; 48
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	30 d3       	rcall	.+1632   	; 0x1b74 <fputc>
    1514:	5a 94       	dec	r5
    1516:	f8 cf       	rjmp	.-16     	; 0x1508 <vfprintf+0x2f6>
    1518:	77 fe       	sbrs	r7, 7
    151a:	5d c0       	rjmp	.+186    	; 0x15d6 <vfprintf+0x3c4>
    151c:	9c 2d       	mov	r25, r12
    151e:	8d 2d       	mov	r24, r13
    1520:	d7 fe       	sbrs	r13, 7
    1522:	02 c0       	rjmp	.+4      	; 0x1528 <vfprintf+0x316>
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	80 e0       	ldi	r24, 0x00	; 0
    1528:	69 2e       	mov	r6, r25
    152a:	78 2e       	mov	r7, r24
    152c:	40 e0       	ldi	r20, 0x00	; 0
    152e:	50 e0       	ldi	r21, 0x00	; 0
    1530:	c6 01       	movw	r24, r12
    1532:	84 19       	sub	r24, r4
    1534:	91 09       	sbc	r25, r1
    1536:	9d 87       	std	Y+13, r25	; 0x0d
    1538:	8c 87       	std	Y+12, r24	; 0x0c
    153a:	96 01       	movw	r18, r12
    153c:	26 19       	sub	r18, r6
    153e:	37 09       	sbc	r19, r7
    1540:	28 0d       	add	r18, r8
    1542:	39 1d       	adc	r19, r9
    1544:	81 2f       	mov	r24, r17
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	ee 27       	eor	r30, r30
    154a:	ff 27       	eor	r31, r31
    154c:	e8 1b       	sub	r30, r24
    154e:	f9 0b       	sbc	r31, r25
    1550:	ff 87       	std	Y+15, r31	; 0x0f
    1552:	ee 87       	std	Y+14, r30	; 0x0e
    1554:	ff ef       	ldi	r31, 0xFF	; 255
    1556:	6f 16       	cp	r6, r31
    1558:	7f 06       	cpc	r7, r31
    155a:	61 f4       	brne	.+24     	; 0x1574 <vfprintf+0x362>
    155c:	b7 01       	movw	r22, r14
    155e:	8e e2       	ldi	r24, 0x2E	; 46
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	2b 8b       	std	Y+19, r18	; 0x13
    1564:	3a 8b       	std	Y+18, r19	; 0x12
    1566:	48 8b       	std	Y+16, r20	; 0x10
    1568:	59 8b       	std	Y+17, r21	; 0x11
    156a:	04 d3       	rcall	.+1544   	; 0x1b74 <fputc>
    156c:	59 89       	ldd	r21, Y+17	; 0x11
    156e:	48 89       	ldd	r20, Y+16	; 0x10
    1570:	3a 89       	ldd	r19, Y+18	; 0x12
    1572:	2b 89       	ldd	r18, Y+19	; 0x13
    1574:	c6 14       	cp	r12, r6
    1576:	d7 04       	cpc	r13, r7
    1578:	54 f0       	brlt	.+20     	; 0x158e <vfprintf+0x37c>
    157a:	6c 85       	ldd	r22, Y+12	; 0x0c
    157c:	7d 85       	ldd	r23, Y+13	; 0x0d
    157e:	66 15       	cp	r22, r6
    1580:	77 05       	cpc	r23, r7
    1582:	2c f4       	brge	.+10     	; 0x158e <vfprintf+0x37c>
    1584:	f9 01       	movw	r30, r18
    1586:	e4 0f       	add	r30, r20
    1588:	f5 1f       	adc	r31, r21
    158a:	81 81       	ldd	r24, Z+1	; 0x01
    158c:	01 c0       	rjmp	.+2      	; 0x1590 <vfprintf+0x37e>
    158e:	80 e3       	ldi	r24, 0x30	; 48
    1590:	71 e0       	ldi	r23, 0x01	; 1
    1592:	67 1a       	sub	r6, r23
    1594:	71 08       	sbc	r7, r1
    1596:	4f 5f       	subi	r20, 0xFF	; 255
    1598:	5f 4f       	sbci	r21, 0xFF	; 255
    159a:	ee 85       	ldd	r30, Y+14	; 0x0e
    159c:	ff 85       	ldd	r31, Y+15	; 0x0f
    159e:	6e 16       	cp	r6, r30
    15a0:	7f 06       	cpc	r7, r31
    15a2:	64 f0       	brlt	.+24     	; 0x15bc <vfprintf+0x3aa>
    15a4:	b7 01       	movw	r22, r14
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	2b 8b       	std	Y+19, r18	; 0x13
    15aa:	3a 8b       	std	Y+18, r19	; 0x12
    15ac:	48 8b       	std	Y+16, r20	; 0x10
    15ae:	59 8b       	std	Y+17, r21	; 0x11
    15b0:	e1 d2       	rcall	.+1474   	; 0x1b74 <fputc>
    15b2:	2b 89       	ldd	r18, Y+19	; 0x13
    15b4:	3a 89       	ldd	r19, Y+18	; 0x12
    15b6:	48 89       	ldd	r20, Y+16	; 0x10
    15b8:	59 89       	ldd	r21, Y+17	; 0x11
    15ba:	cc cf       	rjmp	.-104    	; 0x1554 <vfprintf+0x342>
    15bc:	6c 14       	cp	r6, r12
    15be:	7d 04       	cpc	r7, r13
    15c0:	39 f4       	brne	.+14     	; 0x15d0 <vfprintf+0x3be>
    15c2:	9a 81       	ldd	r25, Y+2	; 0x02
    15c4:	96 33       	cpi	r25, 0x36	; 54
    15c6:	18 f4       	brcc	.+6      	; 0x15ce <vfprintf+0x3bc>
    15c8:	95 33       	cpi	r25, 0x35	; 53
    15ca:	11 f4       	brne	.+4      	; 0x15d0 <vfprintf+0x3be>
    15cc:	04 ff       	sbrs	r16, 4
    15ce:	81 e3       	ldi	r24, 0x31	; 49
    15d0:	b7 01       	movw	r22, r14
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	45 c0       	rjmp	.+138    	; 0x1660 <vfprintf+0x44e>
    15d6:	8a 81       	ldd	r24, Y+2	; 0x02
    15d8:	81 33       	cpi	r24, 0x31	; 49
    15da:	09 f0       	breq	.+2      	; 0x15de <vfprintf+0x3cc>
    15dc:	0f 7e       	andi	r16, 0xEF	; 239
    15de:	b7 01       	movw	r22, r14
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	c8 d2       	rcall	.+1424   	; 0x1b74 <fputc>
    15e4:	11 11       	cpse	r17, r1
    15e6:	05 c0       	rjmp	.+10     	; 0x15f2 <vfprintf+0x3e0>
    15e8:	74 fe       	sbrs	r7, 4
    15ea:	16 c0       	rjmp	.+44     	; 0x1618 <vfprintf+0x406>
    15ec:	85 e4       	ldi	r24, 0x45	; 69
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	15 c0       	rjmp	.+42     	; 0x161c <vfprintf+0x40a>
    15f2:	b7 01       	movw	r22, r14
    15f4:	8e e2       	ldi	r24, 0x2E	; 46
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	bd d2       	rcall	.+1402   	; 0x1b74 <fputc>
    15fa:	82 e0       	ldi	r24, 0x02	; 2
    15fc:	66 24       	eor	r6, r6
    15fe:	63 94       	inc	r6
    1600:	68 0e       	add	r6, r24
    1602:	f4 01       	movw	r30, r8
    1604:	e8 0f       	add	r30, r24
    1606:	f1 1d       	adc	r31, r1
    1608:	80 81       	ld	r24, Z
    160a:	b7 01       	movw	r22, r14
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	b2 d2       	rcall	.+1380   	; 0x1b74 <fputc>
    1610:	11 50       	subi	r17, 0x01	; 1
    1612:	51 f3       	breq	.-44     	; 0x15e8 <vfprintf+0x3d6>
    1614:	86 2d       	mov	r24, r6
    1616:	f2 cf       	rjmp	.-28     	; 0x15fc <vfprintf+0x3ea>
    1618:	85 e6       	ldi	r24, 0x65	; 101
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	b7 01       	movw	r22, r14
    161e:	aa d2       	rcall	.+1364   	; 0x1b74 <fputc>
    1620:	d7 fc       	sbrc	r13, 7
    1622:	05 c0       	rjmp	.+10     	; 0x162e <vfprintf+0x41c>
    1624:	c1 14       	cp	r12, r1
    1626:	d1 04       	cpc	r13, r1
    1628:	39 f4       	brne	.+14     	; 0x1638 <vfprintf+0x426>
    162a:	04 ff       	sbrs	r16, 4
    162c:	05 c0       	rjmp	.+10     	; 0x1638 <vfprintf+0x426>
    162e:	d1 94       	neg	r13
    1630:	c1 94       	neg	r12
    1632:	d1 08       	sbc	r13, r1
    1634:	8d e2       	ldi	r24, 0x2D	; 45
    1636:	01 c0       	rjmp	.+2      	; 0x163a <vfprintf+0x428>
    1638:	8b e2       	ldi	r24, 0x2B	; 43
    163a:	b7 01       	movw	r22, r14
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	9a d2       	rcall	.+1332   	; 0x1b74 <fputc>
    1640:	80 e3       	ldi	r24, 0x30	; 48
    1642:	6a e0       	ldi	r22, 0x0A	; 10
    1644:	c6 16       	cp	r12, r22
    1646:	d1 04       	cpc	r13, r1
    1648:	2c f0       	brlt	.+10     	; 0x1654 <vfprintf+0x442>
    164a:	8f 5f       	subi	r24, 0xFF	; 255
    164c:	fa e0       	ldi	r31, 0x0A	; 10
    164e:	cf 1a       	sub	r12, r31
    1650:	d1 08       	sbc	r13, r1
    1652:	f7 cf       	rjmp	.-18     	; 0x1642 <vfprintf+0x430>
    1654:	b7 01       	movw	r22, r14
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	8d d2       	rcall	.+1306   	; 0x1b74 <fputc>
    165a:	b7 01       	movw	r22, r14
    165c:	c6 01       	movw	r24, r12
    165e:	c0 96       	adiw	r24, 0x30	; 48
    1660:	89 d2       	rcall	.+1298   	; 0x1b74 <fputc>
    1662:	36 c1       	rjmp	.+620    	; 0x18d0 <vfprintf+0x6be>
    1664:	83 36       	cpi	r24, 0x63	; 99
    1666:	31 f0       	breq	.+12     	; 0x1674 <vfprintf+0x462>
    1668:	83 37       	cpi	r24, 0x73	; 115
    166a:	79 f0       	breq	.+30     	; 0x168a <vfprintf+0x478>
    166c:	83 35       	cpi	r24, 0x53	; 83
    166e:	09 f0       	breq	.+2      	; 0x1672 <vfprintf+0x460>
    1670:	54 c0       	rjmp	.+168    	; 0x171a <vfprintf+0x508>
    1672:	20 c0       	rjmp	.+64     	; 0x16b4 <vfprintf+0x4a2>
    1674:	56 01       	movw	r10, r12
    1676:	72 e0       	ldi	r23, 0x02	; 2
    1678:	a7 0e       	add	r10, r23
    167a:	b1 1c       	adc	r11, r1
    167c:	f6 01       	movw	r30, r12
    167e:	80 81       	ld	r24, Z
    1680:	89 83       	std	Y+1, r24	; 0x01
    1682:	01 e0       	ldi	r16, 0x01	; 1
    1684:	10 e0       	ldi	r17, 0x00	; 0
    1686:	64 01       	movw	r12, r8
    1688:	13 c0       	rjmp	.+38     	; 0x16b0 <vfprintf+0x49e>
    168a:	56 01       	movw	r10, r12
    168c:	f2 e0       	ldi	r31, 0x02	; 2
    168e:	af 0e       	add	r10, r31
    1690:	b1 1c       	adc	r11, r1
    1692:	f6 01       	movw	r30, r12
    1694:	c0 80       	ld	r12, Z
    1696:	d1 80       	ldd	r13, Z+1	; 0x01
    1698:	26 ff       	sbrs	r18, 6
    169a:	03 c0       	rjmp	.+6      	; 0x16a2 <vfprintf+0x490>
    169c:	61 2f       	mov	r22, r17
    169e:	70 e0       	ldi	r23, 0x00	; 0
    16a0:	02 c0       	rjmp	.+4      	; 0x16a6 <vfprintf+0x494>
    16a2:	6f ef       	ldi	r22, 0xFF	; 255
    16a4:	7f ef       	ldi	r23, 0xFF	; 255
    16a6:	c6 01       	movw	r24, r12
    16a8:	2b 8b       	std	Y+19, r18	; 0x13
    16aa:	59 d2       	rcall	.+1202   	; 0x1b5e <strnlen>
    16ac:	8c 01       	movw	r16, r24
    16ae:	2b 89       	ldd	r18, Y+19	; 0x13
    16b0:	2f 77       	andi	r18, 0x7F	; 127
    16b2:	14 c0       	rjmp	.+40     	; 0x16dc <vfprintf+0x4ca>
    16b4:	56 01       	movw	r10, r12
    16b6:	f2 e0       	ldi	r31, 0x02	; 2
    16b8:	af 0e       	add	r10, r31
    16ba:	b1 1c       	adc	r11, r1
    16bc:	f6 01       	movw	r30, r12
    16be:	c0 80       	ld	r12, Z
    16c0:	d1 80       	ldd	r13, Z+1	; 0x01
    16c2:	26 ff       	sbrs	r18, 6
    16c4:	03 c0       	rjmp	.+6      	; 0x16cc <vfprintf+0x4ba>
    16c6:	61 2f       	mov	r22, r17
    16c8:	70 e0       	ldi	r23, 0x00	; 0
    16ca:	02 c0       	rjmp	.+4      	; 0x16d0 <vfprintf+0x4be>
    16cc:	6f ef       	ldi	r22, 0xFF	; 255
    16ce:	7f ef       	ldi	r23, 0xFF	; 255
    16d0:	c6 01       	movw	r24, r12
    16d2:	2b 8b       	std	Y+19, r18	; 0x13
    16d4:	39 d2       	rcall	.+1138   	; 0x1b48 <strnlen_P>
    16d6:	8c 01       	movw	r16, r24
    16d8:	2b 89       	ldd	r18, Y+19	; 0x13
    16da:	20 68       	ori	r18, 0x80	; 128
    16dc:	72 2e       	mov	r7, r18
    16de:	23 fd       	sbrc	r18, 3
    16e0:	18 c0       	rjmp	.+48     	; 0x1712 <vfprintf+0x500>
    16e2:	85 2d       	mov	r24, r5
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	08 17       	cp	r16, r24
    16e8:	19 07       	cpc	r17, r25
    16ea:	98 f4       	brcc	.+38     	; 0x1712 <vfprintf+0x500>
    16ec:	b7 01       	movw	r22, r14
    16ee:	80 e2       	ldi	r24, 0x20	; 32
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	40 d2       	rcall	.+1152   	; 0x1b74 <fputc>
    16f4:	5a 94       	dec	r5
    16f6:	f5 cf       	rjmp	.-22     	; 0x16e2 <vfprintf+0x4d0>
    16f8:	f6 01       	movw	r30, r12
    16fa:	77 fc       	sbrc	r7, 7
    16fc:	85 91       	lpm	r24, Z+
    16fe:	77 fe       	sbrs	r7, 7
    1700:	81 91       	ld	r24, Z+
    1702:	6f 01       	movw	r12, r30
    1704:	b7 01       	movw	r22, r14
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	35 d2       	rcall	.+1130   	; 0x1b74 <fputc>
    170a:	51 10       	cpse	r5, r1
    170c:	5a 94       	dec	r5
    170e:	01 50       	subi	r16, 0x01	; 1
    1710:	11 09       	sbc	r17, r1
    1712:	01 15       	cp	r16, r1
    1714:	11 05       	cpc	r17, r1
    1716:	81 f7       	brne	.-32     	; 0x16f8 <vfprintf+0x4e6>
    1718:	db c0       	rjmp	.+438    	; 0x18d0 <vfprintf+0x6be>
    171a:	84 36       	cpi	r24, 0x64	; 100
    171c:	11 f0       	breq	.+4      	; 0x1722 <vfprintf+0x510>
    171e:	89 36       	cpi	r24, 0x69	; 105
    1720:	49 f5       	brne	.+82     	; 0x1774 <vfprintf+0x562>
    1722:	56 01       	movw	r10, r12
    1724:	27 ff       	sbrs	r18, 7
    1726:	09 c0       	rjmp	.+18     	; 0x173a <vfprintf+0x528>
    1728:	f4 e0       	ldi	r31, 0x04	; 4
    172a:	af 0e       	add	r10, r31
    172c:	b1 1c       	adc	r11, r1
    172e:	f6 01       	movw	r30, r12
    1730:	60 81       	ld	r22, Z
    1732:	71 81       	ldd	r23, Z+1	; 0x01
    1734:	82 81       	ldd	r24, Z+2	; 0x02
    1736:	93 81       	ldd	r25, Z+3	; 0x03
    1738:	0a c0       	rjmp	.+20     	; 0x174e <vfprintf+0x53c>
    173a:	f2 e0       	ldi	r31, 0x02	; 2
    173c:	af 0e       	add	r10, r31
    173e:	b1 1c       	adc	r11, r1
    1740:	f6 01       	movw	r30, r12
    1742:	60 81       	ld	r22, Z
    1744:	71 81       	ldd	r23, Z+1	; 0x01
    1746:	88 27       	eor	r24, r24
    1748:	77 fd       	sbrc	r23, 7
    174a:	80 95       	com	r24
    174c:	98 2f       	mov	r25, r24
    174e:	02 2f       	mov	r16, r18
    1750:	0f 76       	andi	r16, 0x6F	; 111
    1752:	97 ff       	sbrs	r25, 7
    1754:	08 c0       	rjmp	.+16     	; 0x1766 <vfprintf+0x554>
    1756:	90 95       	com	r25
    1758:	80 95       	com	r24
    175a:	70 95       	com	r23
    175c:	61 95       	neg	r22
    175e:	7f 4f       	sbci	r23, 0xFF	; 255
    1760:	8f 4f       	sbci	r24, 0xFF	; 255
    1762:	9f 4f       	sbci	r25, 0xFF	; 255
    1764:	00 68       	ori	r16, 0x80	; 128
    1766:	2a e0       	ldi	r18, 0x0A	; 10
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	a4 01       	movw	r20, r8
    176c:	73 d2       	rcall	.+1254   	; 0x1c54 <__ultoa_invert>
    176e:	c8 2e       	mov	r12, r24
    1770:	c8 18       	sub	r12, r8
    1772:	3d c0       	rjmp	.+122    	; 0x17ee <vfprintf+0x5dc>
    1774:	02 2f       	mov	r16, r18
    1776:	85 37       	cpi	r24, 0x75	; 117
    1778:	21 f4       	brne	.+8      	; 0x1782 <vfprintf+0x570>
    177a:	0f 7e       	andi	r16, 0xEF	; 239
    177c:	2a e0       	ldi	r18, 0x0A	; 10
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	1d c0       	rjmp	.+58     	; 0x17bc <vfprintf+0x5aa>
    1782:	09 7f       	andi	r16, 0xF9	; 249
    1784:	8f 36       	cpi	r24, 0x6F	; 111
    1786:	91 f0       	breq	.+36     	; 0x17ac <vfprintf+0x59a>
    1788:	18 f4       	brcc	.+6      	; 0x1790 <vfprintf+0x57e>
    178a:	88 35       	cpi	r24, 0x58	; 88
    178c:	59 f0       	breq	.+22     	; 0x17a4 <vfprintf+0x592>
    178e:	a9 c0       	rjmp	.+338    	; 0x18e2 <vfprintf+0x6d0>
    1790:	80 37       	cpi	r24, 0x70	; 112
    1792:	19 f0       	breq	.+6      	; 0x179a <vfprintf+0x588>
    1794:	88 37       	cpi	r24, 0x78	; 120
    1796:	11 f0       	breq	.+4      	; 0x179c <vfprintf+0x58a>
    1798:	a4 c0       	rjmp	.+328    	; 0x18e2 <vfprintf+0x6d0>
    179a:	00 61       	ori	r16, 0x10	; 16
    179c:	04 ff       	sbrs	r16, 4
    179e:	09 c0       	rjmp	.+18     	; 0x17b2 <vfprintf+0x5a0>
    17a0:	04 60       	ori	r16, 0x04	; 4
    17a2:	07 c0       	rjmp	.+14     	; 0x17b2 <vfprintf+0x5a0>
    17a4:	24 ff       	sbrs	r18, 4
    17a6:	08 c0       	rjmp	.+16     	; 0x17b8 <vfprintf+0x5a6>
    17a8:	06 60       	ori	r16, 0x06	; 6
    17aa:	06 c0       	rjmp	.+12     	; 0x17b8 <vfprintf+0x5a6>
    17ac:	28 e0       	ldi	r18, 0x08	; 8
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	05 c0       	rjmp	.+10     	; 0x17bc <vfprintf+0x5aa>
    17b2:	20 e1       	ldi	r18, 0x10	; 16
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	02 c0       	rjmp	.+4      	; 0x17bc <vfprintf+0x5aa>
    17b8:	20 e1       	ldi	r18, 0x10	; 16
    17ba:	32 e0       	ldi	r19, 0x02	; 2
    17bc:	56 01       	movw	r10, r12
    17be:	07 ff       	sbrs	r16, 7
    17c0:	09 c0       	rjmp	.+18     	; 0x17d4 <vfprintf+0x5c2>
    17c2:	f4 e0       	ldi	r31, 0x04	; 4
    17c4:	af 0e       	add	r10, r31
    17c6:	b1 1c       	adc	r11, r1
    17c8:	f6 01       	movw	r30, r12
    17ca:	60 81       	ld	r22, Z
    17cc:	71 81       	ldd	r23, Z+1	; 0x01
    17ce:	82 81       	ldd	r24, Z+2	; 0x02
    17d0:	93 81       	ldd	r25, Z+3	; 0x03
    17d2:	08 c0       	rjmp	.+16     	; 0x17e4 <vfprintf+0x5d2>
    17d4:	f2 e0       	ldi	r31, 0x02	; 2
    17d6:	af 0e       	add	r10, r31
    17d8:	b1 1c       	adc	r11, r1
    17da:	f6 01       	movw	r30, r12
    17dc:	60 81       	ld	r22, Z
    17de:	71 81       	ldd	r23, Z+1	; 0x01
    17e0:	80 e0       	ldi	r24, 0x00	; 0
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	a4 01       	movw	r20, r8
    17e6:	36 d2       	rcall	.+1132   	; 0x1c54 <__ultoa_invert>
    17e8:	c8 2e       	mov	r12, r24
    17ea:	c8 18       	sub	r12, r8
    17ec:	0f 77       	andi	r16, 0x7F	; 127
    17ee:	06 ff       	sbrs	r16, 6
    17f0:	0b c0       	rjmp	.+22     	; 0x1808 <vfprintf+0x5f6>
    17f2:	20 2f       	mov	r18, r16
    17f4:	2e 7f       	andi	r18, 0xFE	; 254
    17f6:	c1 16       	cp	r12, r17
    17f8:	50 f4       	brcc	.+20     	; 0x180e <vfprintf+0x5fc>
    17fa:	04 ff       	sbrs	r16, 4
    17fc:	0a c0       	rjmp	.+20     	; 0x1812 <vfprintf+0x600>
    17fe:	02 fd       	sbrc	r16, 2
    1800:	08 c0       	rjmp	.+16     	; 0x1812 <vfprintf+0x600>
    1802:	20 2f       	mov	r18, r16
    1804:	2e 7e       	andi	r18, 0xEE	; 238
    1806:	05 c0       	rjmp	.+10     	; 0x1812 <vfprintf+0x600>
    1808:	dc 2c       	mov	r13, r12
    180a:	20 2f       	mov	r18, r16
    180c:	03 c0       	rjmp	.+6      	; 0x1814 <vfprintf+0x602>
    180e:	dc 2c       	mov	r13, r12
    1810:	01 c0       	rjmp	.+2      	; 0x1814 <vfprintf+0x602>
    1812:	d1 2e       	mov	r13, r17
    1814:	24 ff       	sbrs	r18, 4
    1816:	0d c0       	rjmp	.+26     	; 0x1832 <vfprintf+0x620>
    1818:	fe 01       	movw	r30, r28
    181a:	ec 0d       	add	r30, r12
    181c:	f1 1d       	adc	r31, r1
    181e:	80 81       	ld	r24, Z
    1820:	80 33       	cpi	r24, 0x30	; 48
    1822:	11 f4       	brne	.+4      	; 0x1828 <vfprintf+0x616>
    1824:	29 7e       	andi	r18, 0xE9	; 233
    1826:	09 c0       	rjmp	.+18     	; 0x183a <vfprintf+0x628>
    1828:	22 ff       	sbrs	r18, 2
    182a:	06 c0       	rjmp	.+12     	; 0x1838 <vfprintf+0x626>
    182c:	d3 94       	inc	r13
    182e:	d3 94       	inc	r13
    1830:	04 c0       	rjmp	.+8      	; 0x183a <vfprintf+0x628>
    1832:	82 2f       	mov	r24, r18
    1834:	86 78       	andi	r24, 0x86	; 134
    1836:	09 f0       	breq	.+2      	; 0x183a <vfprintf+0x628>
    1838:	d3 94       	inc	r13
    183a:	23 fd       	sbrc	r18, 3
    183c:	12 c0       	rjmp	.+36     	; 0x1862 <vfprintf+0x650>
    183e:	20 ff       	sbrs	r18, 0
    1840:	06 c0       	rjmp	.+12     	; 0x184e <vfprintf+0x63c>
    1842:	1c 2d       	mov	r17, r12
    1844:	d5 14       	cp	r13, r5
    1846:	18 f4       	brcc	.+6      	; 0x184e <vfprintf+0x63c>
    1848:	15 0d       	add	r17, r5
    184a:	1d 19       	sub	r17, r13
    184c:	d5 2c       	mov	r13, r5
    184e:	d5 14       	cp	r13, r5
    1850:	60 f4       	brcc	.+24     	; 0x186a <vfprintf+0x658>
    1852:	b7 01       	movw	r22, r14
    1854:	80 e2       	ldi	r24, 0x20	; 32
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	2b 8b       	std	Y+19, r18	; 0x13
    185a:	8c d1       	rcall	.+792    	; 0x1b74 <fputc>
    185c:	d3 94       	inc	r13
    185e:	2b 89       	ldd	r18, Y+19	; 0x13
    1860:	f6 cf       	rjmp	.-20     	; 0x184e <vfprintf+0x63c>
    1862:	d5 14       	cp	r13, r5
    1864:	10 f4       	brcc	.+4      	; 0x186a <vfprintf+0x658>
    1866:	5d 18       	sub	r5, r13
    1868:	01 c0       	rjmp	.+2      	; 0x186c <vfprintf+0x65a>
    186a:	51 2c       	mov	r5, r1
    186c:	24 ff       	sbrs	r18, 4
    186e:	11 c0       	rjmp	.+34     	; 0x1892 <vfprintf+0x680>
    1870:	b7 01       	movw	r22, r14
    1872:	80 e3       	ldi	r24, 0x30	; 48
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	2b 8b       	std	Y+19, r18	; 0x13
    1878:	7d d1       	rcall	.+762    	; 0x1b74 <fputc>
    187a:	2b 89       	ldd	r18, Y+19	; 0x13
    187c:	22 ff       	sbrs	r18, 2
    187e:	16 c0       	rjmp	.+44     	; 0x18ac <vfprintf+0x69a>
    1880:	21 ff       	sbrs	r18, 1
    1882:	03 c0       	rjmp	.+6      	; 0x188a <vfprintf+0x678>
    1884:	88 e5       	ldi	r24, 0x58	; 88
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	02 c0       	rjmp	.+4      	; 0x188e <vfprintf+0x67c>
    188a:	88 e7       	ldi	r24, 0x78	; 120
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	b7 01       	movw	r22, r14
    1890:	0c c0       	rjmp	.+24     	; 0x18aa <vfprintf+0x698>
    1892:	82 2f       	mov	r24, r18
    1894:	86 78       	andi	r24, 0x86	; 134
    1896:	51 f0       	breq	.+20     	; 0x18ac <vfprintf+0x69a>
    1898:	21 fd       	sbrc	r18, 1
    189a:	02 c0       	rjmp	.+4      	; 0x18a0 <vfprintf+0x68e>
    189c:	80 e2       	ldi	r24, 0x20	; 32
    189e:	01 c0       	rjmp	.+2      	; 0x18a2 <vfprintf+0x690>
    18a0:	8b e2       	ldi	r24, 0x2B	; 43
    18a2:	27 fd       	sbrc	r18, 7
    18a4:	8d e2       	ldi	r24, 0x2D	; 45
    18a6:	b7 01       	movw	r22, r14
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	64 d1       	rcall	.+712    	; 0x1b74 <fputc>
    18ac:	c1 16       	cp	r12, r17
    18ae:	30 f4       	brcc	.+12     	; 0x18bc <vfprintf+0x6aa>
    18b0:	b7 01       	movw	r22, r14
    18b2:	80 e3       	ldi	r24, 0x30	; 48
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	5e d1       	rcall	.+700    	; 0x1b74 <fputc>
    18b8:	11 50       	subi	r17, 0x01	; 1
    18ba:	f8 cf       	rjmp	.-16     	; 0x18ac <vfprintf+0x69a>
    18bc:	ca 94       	dec	r12
    18be:	f4 01       	movw	r30, r8
    18c0:	ec 0d       	add	r30, r12
    18c2:	f1 1d       	adc	r31, r1
    18c4:	80 81       	ld	r24, Z
    18c6:	b7 01       	movw	r22, r14
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	54 d1       	rcall	.+680    	; 0x1b74 <fputc>
    18cc:	c1 10       	cpse	r12, r1
    18ce:	f6 cf       	rjmp	.-20     	; 0x18bc <vfprintf+0x6aa>
    18d0:	55 20       	and	r5, r5
    18d2:	09 f4       	brne	.+2      	; 0x18d6 <vfprintf+0x6c4>
    18d4:	dd cc       	rjmp	.-1606   	; 0x1290 <vfprintf+0x7e>
    18d6:	b7 01       	movw	r22, r14
    18d8:	80 e2       	ldi	r24, 0x20	; 32
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	4b d1       	rcall	.+662    	; 0x1b74 <fputc>
    18de:	5a 94       	dec	r5
    18e0:	f7 cf       	rjmp	.-18     	; 0x18d0 <vfprintf+0x6be>
    18e2:	f7 01       	movw	r30, r14
    18e4:	86 81       	ldd	r24, Z+6	; 0x06
    18e6:	97 81       	ldd	r25, Z+7	; 0x07
    18e8:	02 c0       	rjmp	.+4      	; 0x18ee <vfprintf+0x6dc>
    18ea:	8f ef       	ldi	r24, 0xFF	; 255
    18ec:	9f ef       	ldi	r25, 0xFF	; 255
    18ee:	63 96       	adiw	r28, 0x13	; 19
    18f0:	0f b6       	in	r0, 0x3f	; 63
    18f2:	f8 94       	cli
    18f4:	de bf       	out	0x3e, r29	; 62
    18f6:	0f be       	out	0x3f, r0	; 63
    18f8:	cd bf       	out	0x3d, r28	; 61
    18fa:	df 91       	pop	r29
    18fc:	cf 91       	pop	r28
    18fe:	1f 91       	pop	r17
    1900:	0f 91       	pop	r16
    1902:	ff 90       	pop	r15
    1904:	ef 90       	pop	r14
    1906:	df 90       	pop	r13
    1908:	cf 90       	pop	r12
    190a:	bf 90       	pop	r11
    190c:	af 90       	pop	r10
    190e:	9f 90       	pop	r9
    1910:	8f 90       	pop	r8
    1912:	7f 90       	pop	r7
    1914:	6f 90       	pop	r6
    1916:	5f 90       	pop	r5
    1918:	4f 90       	pop	r4
    191a:	3f 90       	pop	r3
    191c:	2f 90       	pop	r2
    191e:	08 95       	ret

00001920 <__divmodhi4>:
    1920:	97 fb       	bst	r25, 7
    1922:	07 2e       	mov	r0, r23
    1924:	16 f4       	brtc	.+4      	; 0x192a <__divmodhi4+0xa>
    1926:	00 94       	com	r0
    1928:	06 d0       	rcall	.+12     	; 0x1936 <__divmodhi4_neg1>
    192a:	77 fd       	sbrc	r23, 7
    192c:	08 d0       	rcall	.+16     	; 0x193e <__divmodhi4_neg2>
    192e:	20 d0       	rcall	.+64     	; 0x1970 <__udivmodhi4>
    1930:	07 fc       	sbrc	r0, 7
    1932:	05 d0       	rcall	.+10     	; 0x193e <__divmodhi4_neg2>
    1934:	3e f4       	brtc	.+14     	; 0x1944 <__divmodhi4_exit>

00001936 <__divmodhi4_neg1>:
    1936:	90 95       	com	r25
    1938:	81 95       	neg	r24
    193a:	9f 4f       	sbci	r25, 0xFF	; 255
    193c:	08 95       	ret

0000193e <__divmodhi4_neg2>:
    193e:	70 95       	com	r23
    1940:	61 95       	neg	r22
    1942:	7f 4f       	sbci	r23, 0xFF	; 255

00001944 <__divmodhi4_exit>:
    1944:	08 95       	ret

00001946 <__tablejump2__>:
    1946:	ee 0f       	add	r30, r30
    1948:	ff 1f       	adc	r31, r31

0000194a <__tablejump__>:
    194a:	05 90       	lpm	r0, Z+
    194c:	f4 91       	lpm	r31, Z
    194e:	e0 2d       	mov	r30, r0
    1950:	19 94       	eijmp

00001952 <__umulhisi3>:
    1952:	a2 9f       	mul	r26, r18
    1954:	b0 01       	movw	r22, r0
    1956:	b3 9f       	mul	r27, r19
    1958:	c0 01       	movw	r24, r0
    195a:	a3 9f       	mul	r26, r19
    195c:	70 0d       	add	r23, r0
    195e:	81 1d       	adc	r24, r1
    1960:	11 24       	eor	r1, r1
    1962:	91 1d       	adc	r25, r1
    1964:	b2 9f       	mul	r27, r18
    1966:	70 0d       	add	r23, r0
    1968:	81 1d       	adc	r24, r1
    196a:	11 24       	eor	r1, r1
    196c:	91 1d       	adc	r25, r1
    196e:	08 95       	ret

00001970 <__udivmodhi4>:
    1970:	aa 1b       	sub	r26, r26
    1972:	bb 1b       	sub	r27, r27
    1974:	51 e1       	ldi	r21, 0x11	; 17
    1976:	07 c0       	rjmp	.+14     	; 0x1986 <__udivmodhi4_ep>

00001978 <__udivmodhi4_loop>:
    1978:	aa 1f       	adc	r26, r26
    197a:	bb 1f       	adc	r27, r27
    197c:	a6 17       	cp	r26, r22
    197e:	b7 07       	cpc	r27, r23
    1980:	10 f0       	brcs	.+4      	; 0x1986 <__udivmodhi4_ep>
    1982:	a6 1b       	sub	r26, r22
    1984:	b7 0b       	sbc	r27, r23

00001986 <__udivmodhi4_ep>:
    1986:	88 1f       	adc	r24, r24
    1988:	99 1f       	adc	r25, r25
    198a:	5a 95       	dec	r21
    198c:	a9 f7       	brne	.-22     	; 0x1978 <__udivmodhi4_loop>
    198e:	80 95       	com	r24
    1990:	90 95       	com	r25
    1992:	bc 01       	movw	r22, r24
    1994:	cd 01       	movw	r24, r26
    1996:	08 95       	ret

00001998 <__ftoa_engine>:
    1998:	28 30       	cpi	r18, 0x08	; 8
    199a:	08 f0       	brcs	.+2      	; 0x199e <__ftoa_engine+0x6>
    199c:	27 e0       	ldi	r18, 0x07	; 7
    199e:	33 27       	eor	r19, r19
    19a0:	da 01       	movw	r26, r20
    19a2:	99 0f       	add	r25, r25
    19a4:	31 1d       	adc	r19, r1
    19a6:	87 fd       	sbrc	r24, 7
    19a8:	91 60       	ori	r25, 0x01	; 1
    19aa:	00 96       	adiw	r24, 0x00	; 0
    19ac:	61 05       	cpc	r22, r1
    19ae:	71 05       	cpc	r23, r1
    19b0:	39 f4       	brne	.+14     	; 0x19c0 <__ftoa_engine+0x28>
    19b2:	32 60       	ori	r19, 0x02	; 2
    19b4:	2e 5f       	subi	r18, 0xFE	; 254
    19b6:	3d 93       	st	X+, r19
    19b8:	30 e3       	ldi	r19, 0x30	; 48
    19ba:	2a 95       	dec	r18
    19bc:	e1 f7       	brne	.-8      	; 0x19b6 <__ftoa_engine+0x1e>
    19be:	08 95       	ret
    19c0:	9f 3f       	cpi	r25, 0xFF	; 255
    19c2:	30 f0       	brcs	.+12     	; 0x19d0 <__ftoa_engine+0x38>
    19c4:	80 38       	cpi	r24, 0x80	; 128
    19c6:	71 05       	cpc	r23, r1
    19c8:	61 05       	cpc	r22, r1
    19ca:	09 f0       	breq	.+2      	; 0x19ce <__ftoa_engine+0x36>
    19cc:	3c 5f       	subi	r19, 0xFC	; 252
    19ce:	3c 5f       	subi	r19, 0xFC	; 252
    19d0:	3d 93       	st	X+, r19
    19d2:	91 30       	cpi	r25, 0x01	; 1
    19d4:	08 f0       	brcs	.+2      	; 0x19d8 <__ftoa_engine+0x40>
    19d6:	80 68       	ori	r24, 0x80	; 128
    19d8:	91 1d       	adc	r25, r1
    19da:	df 93       	push	r29
    19dc:	cf 93       	push	r28
    19de:	1f 93       	push	r17
    19e0:	0f 93       	push	r16
    19e2:	ff 92       	push	r15
    19e4:	ef 92       	push	r14
    19e6:	19 2f       	mov	r17, r25
    19e8:	98 7f       	andi	r25, 0xF8	; 248
    19ea:	96 95       	lsr	r25
    19ec:	e9 2f       	mov	r30, r25
    19ee:	96 95       	lsr	r25
    19f0:	96 95       	lsr	r25
    19f2:	e9 0f       	add	r30, r25
    19f4:	ff 27       	eor	r31, r31
    19f6:	e8 51       	subi	r30, 0x18	; 24
    19f8:	fe 4f       	sbci	r31, 0xFE	; 254
    19fa:	99 27       	eor	r25, r25
    19fc:	33 27       	eor	r19, r19
    19fe:	ee 24       	eor	r14, r14
    1a00:	ff 24       	eor	r15, r15
    1a02:	a7 01       	movw	r20, r14
    1a04:	e7 01       	movw	r28, r14
    1a06:	05 90       	lpm	r0, Z+
    1a08:	08 94       	sec
    1a0a:	07 94       	ror	r0
    1a0c:	28 f4       	brcc	.+10     	; 0x1a18 <__ftoa_engine+0x80>
    1a0e:	36 0f       	add	r19, r22
    1a10:	e7 1e       	adc	r14, r23
    1a12:	f8 1e       	adc	r15, r24
    1a14:	49 1f       	adc	r20, r25
    1a16:	51 1d       	adc	r21, r1
    1a18:	66 0f       	add	r22, r22
    1a1a:	77 1f       	adc	r23, r23
    1a1c:	88 1f       	adc	r24, r24
    1a1e:	99 1f       	adc	r25, r25
    1a20:	06 94       	lsr	r0
    1a22:	a1 f7       	brne	.-24     	; 0x1a0c <__ftoa_engine+0x74>
    1a24:	05 90       	lpm	r0, Z+
    1a26:	07 94       	ror	r0
    1a28:	28 f4       	brcc	.+10     	; 0x1a34 <__ftoa_engine+0x9c>
    1a2a:	e7 0e       	add	r14, r23
    1a2c:	f8 1e       	adc	r15, r24
    1a2e:	49 1f       	adc	r20, r25
    1a30:	56 1f       	adc	r21, r22
    1a32:	c1 1d       	adc	r28, r1
    1a34:	77 0f       	add	r23, r23
    1a36:	88 1f       	adc	r24, r24
    1a38:	99 1f       	adc	r25, r25
    1a3a:	66 1f       	adc	r22, r22
    1a3c:	06 94       	lsr	r0
    1a3e:	a1 f7       	brne	.-24     	; 0x1a28 <__ftoa_engine+0x90>
    1a40:	05 90       	lpm	r0, Z+
    1a42:	07 94       	ror	r0
    1a44:	28 f4       	brcc	.+10     	; 0x1a50 <__ftoa_engine+0xb8>
    1a46:	f8 0e       	add	r15, r24
    1a48:	49 1f       	adc	r20, r25
    1a4a:	56 1f       	adc	r21, r22
    1a4c:	c7 1f       	adc	r28, r23
    1a4e:	d1 1d       	adc	r29, r1
    1a50:	88 0f       	add	r24, r24
    1a52:	99 1f       	adc	r25, r25
    1a54:	66 1f       	adc	r22, r22
    1a56:	77 1f       	adc	r23, r23
    1a58:	06 94       	lsr	r0
    1a5a:	a1 f7       	brne	.-24     	; 0x1a44 <__ftoa_engine+0xac>
    1a5c:	05 90       	lpm	r0, Z+
    1a5e:	07 94       	ror	r0
    1a60:	20 f4       	brcc	.+8      	; 0x1a6a <__ftoa_engine+0xd2>
    1a62:	49 0f       	add	r20, r25
    1a64:	56 1f       	adc	r21, r22
    1a66:	c7 1f       	adc	r28, r23
    1a68:	d8 1f       	adc	r29, r24
    1a6a:	99 0f       	add	r25, r25
    1a6c:	66 1f       	adc	r22, r22
    1a6e:	77 1f       	adc	r23, r23
    1a70:	88 1f       	adc	r24, r24
    1a72:	06 94       	lsr	r0
    1a74:	a9 f7       	brne	.-22     	; 0x1a60 <__ftoa_engine+0xc8>
    1a76:	84 91       	lpm	r24, Z
    1a78:	10 95       	com	r17
    1a7a:	17 70       	andi	r17, 0x07	; 7
    1a7c:	41 f0       	breq	.+16     	; 0x1a8e <__ftoa_engine+0xf6>
    1a7e:	d6 95       	lsr	r29
    1a80:	c7 95       	ror	r28
    1a82:	57 95       	ror	r21
    1a84:	47 95       	ror	r20
    1a86:	f7 94       	ror	r15
    1a88:	e7 94       	ror	r14
    1a8a:	1a 95       	dec	r17
    1a8c:	c1 f7       	brne	.-16     	; 0x1a7e <__ftoa_engine+0xe6>
    1a8e:	ee e8       	ldi	r30, 0x8E	; 142
    1a90:	f1 e0       	ldi	r31, 0x01	; 1
    1a92:	68 94       	set
    1a94:	15 90       	lpm	r1, Z+
    1a96:	15 91       	lpm	r17, Z+
    1a98:	35 91       	lpm	r19, Z+
    1a9a:	65 91       	lpm	r22, Z+
    1a9c:	95 91       	lpm	r25, Z+
    1a9e:	05 90       	lpm	r0, Z+
    1aa0:	7f e2       	ldi	r23, 0x2F	; 47
    1aa2:	73 95       	inc	r23
    1aa4:	e1 18       	sub	r14, r1
    1aa6:	f1 0a       	sbc	r15, r17
    1aa8:	43 0b       	sbc	r20, r19
    1aaa:	56 0b       	sbc	r21, r22
    1aac:	c9 0b       	sbc	r28, r25
    1aae:	d0 09       	sbc	r29, r0
    1ab0:	c0 f7       	brcc	.-16     	; 0x1aa2 <__ftoa_engine+0x10a>
    1ab2:	e1 0c       	add	r14, r1
    1ab4:	f1 1e       	adc	r15, r17
    1ab6:	43 1f       	adc	r20, r19
    1ab8:	56 1f       	adc	r21, r22
    1aba:	c9 1f       	adc	r28, r25
    1abc:	d0 1d       	adc	r29, r0
    1abe:	7e f4       	brtc	.+30     	; 0x1ade <__ftoa_engine+0x146>
    1ac0:	70 33       	cpi	r23, 0x30	; 48
    1ac2:	11 f4       	brne	.+4      	; 0x1ac8 <__ftoa_engine+0x130>
    1ac4:	8a 95       	dec	r24
    1ac6:	e6 cf       	rjmp	.-52     	; 0x1a94 <__ftoa_engine+0xfc>
    1ac8:	e8 94       	clt
    1aca:	01 50       	subi	r16, 0x01	; 1
    1acc:	30 f0       	brcs	.+12     	; 0x1ada <__ftoa_engine+0x142>
    1ace:	08 0f       	add	r16, r24
    1ad0:	0a f4       	brpl	.+2      	; 0x1ad4 <__ftoa_engine+0x13c>
    1ad2:	00 27       	eor	r16, r16
    1ad4:	02 17       	cp	r16, r18
    1ad6:	08 f4       	brcc	.+2      	; 0x1ada <__ftoa_engine+0x142>
    1ad8:	20 2f       	mov	r18, r16
    1ada:	23 95       	inc	r18
    1adc:	02 2f       	mov	r16, r18
    1ade:	7a 33       	cpi	r23, 0x3A	; 58
    1ae0:	28 f0       	brcs	.+10     	; 0x1aec <__ftoa_engine+0x154>
    1ae2:	79 e3       	ldi	r23, 0x39	; 57
    1ae4:	7d 93       	st	X+, r23
    1ae6:	2a 95       	dec	r18
    1ae8:	e9 f7       	brne	.-6      	; 0x1ae4 <__ftoa_engine+0x14c>
    1aea:	10 c0       	rjmp	.+32     	; 0x1b0c <__ftoa_engine+0x174>
    1aec:	7d 93       	st	X+, r23
    1aee:	2a 95       	dec	r18
    1af0:	89 f6       	brne	.-94     	; 0x1a94 <__ftoa_engine+0xfc>
    1af2:	06 94       	lsr	r0
    1af4:	97 95       	ror	r25
    1af6:	67 95       	ror	r22
    1af8:	37 95       	ror	r19
    1afa:	17 95       	ror	r17
    1afc:	17 94       	ror	r1
    1afe:	e1 18       	sub	r14, r1
    1b00:	f1 0a       	sbc	r15, r17
    1b02:	43 0b       	sbc	r20, r19
    1b04:	56 0b       	sbc	r21, r22
    1b06:	c9 0b       	sbc	r28, r25
    1b08:	d0 09       	sbc	r29, r0
    1b0a:	98 f0       	brcs	.+38     	; 0x1b32 <__ftoa_engine+0x19a>
    1b0c:	23 95       	inc	r18
    1b0e:	7e 91       	ld	r23, -X
    1b10:	73 95       	inc	r23
    1b12:	7a 33       	cpi	r23, 0x3A	; 58
    1b14:	08 f0       	brcs	.+2      	; 0x1b18 <__ftoa_engine+0x180>
    1b16:	70 e3       	ldi	r23, 0x30	; 48
    1b18:	7c 93       	st	X, r23
    1b1a:	20 13       	cpse	r18, r16
    1b1c:	b8 f7       	brcc	.-18     	; 0x1b0c <__ftoa_engine+0x174>
    1b1e:	7e 91       	ld	r23, -X
    1b20:	70 61       	ori	r23, 0x10	; 16
    1b22:	7d 93       	st	X+, r23
    1b24:	30 f0       	brcs	.+12     	; 0x1b32 <__ftoa_engine+0x19a>
    1b26:	83 95       	inc	r24
    1b28:	71 e3       	ldi	r23, 0x31	; 49
    1b2a:	7d 93       	st	X+, r23
    1b2c:	70 e3       	ldi	r23, 0x30	; 48
    1b2e:	2a 95       	dec	r18
    1b30:	e1 f7       	brne	.-8      	; 0x1b2a <__ftoa_engine+0x192>
    1b32:	11 24       	eor	r1, r1
    1b34:	ef 90       	pop	r14
    1b36:	ff 90       	pop	r15
    1b38:	0f 91       	pop	r16
    1b3a:	1f 91       	pop	r17
    1b3c:	cf 91       	pop	r28
    1b3e:	df 91       	pop	r29
    1b40:	99 27       	eor	r25, r25
    1b42:	87 fd       	sbrc	r24, 7
    1b44:	90 95       	com	r25
    1b46:	08 95       	ret

00001b48 <strnlen_P>:
    1b48:	fc 01       	movw	r30, r24
    1b4a:	05 90       	lpm	r0, Z+
    1b4c:	61 50       	subi	r22, 0x01	; 1
    1b4e:	70 40       	sbci	r23, 0x00	; 0
    1b50:	01 10       	cpse	r0, r1
    1b52:	d8 f7       	brcc	.-10     	; 0x1b4a <strnlen_P+0x2>
    1b54:	80 95       	com	r24
    1b56:	90 95       	com	r25
    1b58:	8e 0f       	add	r24, r30
    1b5a:	9f 1f       	adc	r25, r31
    1b5c:	08 95       	ret

00001b5e <strnlen>:
    1b5e:	fc 01       	movw	r30, r24
    1b60:	61 50       	subi	r22, 0x01	; 1
    1b62:	70 40       	sbci	r23, 0x00	; 0
    1b64:	01 90       	ld	r0, Z+
    1b66:	01 10       	cpse	r0, r1
    1b68:	d8 f7       	brcc	.-10     	; 0x1b60 <strnlen+0x2>
    1b6a:	80 95       	com	r24
    1b6c:	90 95       	com	r25
    1b6e:	8e 0f       	add	r24, r30
    1b70:	9f 1f       	adc	r25, r31
    1b72:	08 95       	ret

00001b74 <fputc>:
    1b74:	0f 93       	push	r16
    1b76:	1f 93       	push	r17
    1b78:	cf 93       	push	r28
    1b7a:	df 93       	push	r29
    1b7c:	18 2f       	mov	r17, r24
    1b7e:	09 2f       	mov	r16, r25
    1b80:	eb 01       	movw	r28, r22
    1b82:	8b 81       	ldd	r24, Y+3	; 0x03
    1b84:	81 fd       	sbrc	r24, 1
    1b86:	03 c0       	rjmp	.+6      	; 0x1b8e <fputc+0x1a>
    1b88:	8f ef       	ldi	r24, 0xFF	; 255
    1b8a:	9f ef       	ldi	r25, 0xFF	; 255
    1b8c:	20 c0       	rjmp	.+64     	; 0x1bce <fputc+0x5a>
    1b8e:	82 ff       	sbrs	r24, 2
    1b90:	10 c0       	rjmp	.+32     	; 0x1bb2 <fputc+0x3e>
    1b92:	4e 81       	ldd	r20, Y+6	; 0x06
    1b94:	5f 81       	ldd	r21, Y+7	; 0x07
    1b96:	2c 81       	ldd	r18, Y+4	; 0x04
    1b98:	3d 81       	ldd	r19, Y+5	; 0x05
    1b9a:	42 17       	cp	r20, r18
    1b9c:	53 07       	cpc	r21, r19
    1b9e:	7c f4       	brge	.+30     	; 0x1bbe <fputc+0x4a>
    1ba0:	e8 81       	ld	r30, Y
    1ba2:	f9 81       	ldd	r31, Y+1	; 0x01
    1ba4:	9f 01       	movw	r18, r30
    1ba6:	2f 5f       	subi	r18, 0xFF	; 255
    1ba8:	3f 4f       	sbci	r19, 0xFF	; 255
    1baa:	39 83       	std	Y+1, r19	; 0x01
    1bac:	28 83       	st	Y, r18
    1bae:	10 83       	st	Z, r17
    1bb0:	06 c0       	rjmp	.+12     	; 0x1bbe <fputc+0x4a>
    1bb2:	e8 85       	ldd	r30, Y+8	; 0x08
    1bb4:	f9 85       	ldd	r31, Y+9	; 0x09
    1bb6:	81 2f       	mov	r24, r17
    1bb8:	19 95       	eicall
    1bba:	89 2b       	or	r24, r25
    1bbc:	29 f7       	brne	.-54     	; 0x1b88 <fputc+0x14>
    1bbe:	2e 81       	ldd	r18, Y+6	; 0x06
    1bc0:	3f 81       	ldd	r19, Y+7	; 0x07
    1bc2:	2f 5f       	subi	r18, 0xFF	; 255
    1bc4:	3f 4f       	sbci	r19, 0xFF	; 255
    1bc6:	3f 83       	std	Y+7, r19	; 0x07
    1bc8:	2e 83       	std	Y+6, r18	; 0x06
    1bca:	81 2f       	mov	r24, r17
    1bcc:	90 2f       	mov	r25, r16
    1bce:	df 91       	pop	r29
    1bd0:	cf 91       	pop	r28
    1bd2:	1f 91       	pop	r17
    1bd4:	0f 91       	pop	r16
    1bd6:	08 95       	ret

00001bd8 <printf>:
    1bd8:	cf 93       	push	r28
    1bda:	df 93       	push	r29
    1bdc:	cd b7       	in	r28, 0x3d	; 61
    1bde:	de b7       	in	r29, 0x3e	; 62
    1be0:	fe 01       	movw	r30, r28
    1be2:	36 96       	adiw	r30, 0x06	; 6
    1be4:	61 91       	ld	r22, Z+
    1be6:	71 91       	ld	r23, Z+
    1be8:	af 01       	movw	r20, r30
    1bea:	80 91 4d 03 	lds	r24, 0x034D
    1bee:	90 91 4e 03 	lds	r25, 0x034E
    1bf2:	0f db       	rcall	.-2530   	; 0x1212 <vfprintf>
    1bf4:	df 91       	pop	r29
    1bf6:	cf 91       	pop	r28
    1bf8:	08 95       	ret

00001bfa <puts>:
    1bfa:	0f 93       	push	r16
    1bfc:	1f 93       	push	r17
    1bfe:	cf 93       	push	r28
    1c00:	df 93       	push	r29
    1c02:	e0 91 4d 03 	lds	r30, 0x034D
    1c06:	f0 91 4e 03 	lds	r31, 0x034E
    1c0a:	23 81       	ldd	r18, Z+3	; 0x03
    1c0c:	21 ff       	sbrs	r18, 1
    1c0e:	1b c0       	rjmp	.+54     	; 0x1c46 <puts+0x4c>
    1c10:	ec 01       	movw	r28, r24
    1c12:	00 e0       	ldi	r16, 0x00	; 0
    1c14:	10 e0       	ldi	r17, 0x00	; 0
    1c16:	89 91       	ld	r24, Y+
    1c18:	60 91 4d 03 	lds	r22, 0x034D
    1c1c:	70 91 4e 03 	lds	r23, 0x034E
    1c20:	db 01       	movw	r26, r22
    1c22:	18 96       	adiw	r26, 0x08	; 8
    1c24:	ed 91       	ld	r30, X+
    1c26:	fc 91       	ld	r31, X
    1c28:	19 97       	sbiw	r26, 0x09	; 9
    1c2a:	88 23       	and	r24, r24
    1c2c:	31 f0       	breq	.+12     	; 0x1c3a <puts+0x40>
    1c2e:	19 95       	eicall
    1c30:	89 2b       	or	r24, r25
    1c32:	89 f3       	breq	.-30     	; 0x1c16 <puts+0x1c>
    1c34:	0f ef       	ldi	r16, 0xFF	; 255
    1c36:	1f ef       	ldi	r17, 0xFF	; 255
    1c38:	ee cf       	rjmp	.-36     	; 0x1c16 <puts+0x1c>
    1c3a:	8a e0       	ldi	r24, 0x0A	; 10
    1c3c:	19 95       	eicall
    1c3e:	89 2b       	or	r24, r25
    1c40:	11 f4       	brne	.+4      	; 0x1c46 <puts+0x4c>
    1c42:	c8 01       	movw	r24, r16
    1c44:	02 c0       	rjmp	.+4      	; 0x1c4a <puts+0x50>
    1c46:	8f ef       	ldi	r24, 0xFF	; 255
    1c48:	9f ef       	ldi	r25, 0xFF	; 255
    1c4a:	df 91       	pop	r29
    1c4c:	cf 91       	pop	r28
    1c4e:	1f 91       	pop	r17
    1c50:	0f 91       	pop	r16
    1c52:	08 95       	ret

00001c54 <__ultoa_invert>:
    1c54:	fa 01       	movw	r30, r20
    1c56:	aa 27       	eor	r26, r26
    1c58:	28 30       	cpi	r18, 0x08	; 8
    1c5a:	51 f1       	breq	.+84     	; 0x1cb0 <__ultoa_invert+0x5c>
    1c5c:	20 31       	cpi	r18, 0x10	; 16
    1c5e:	81 f1       	breq	.+96     	; 0x1cc0 <__ultoa_invert+0x6c>
    1c60:	e8 94       	clt
    1c62:	6f 93       	push	r22
    1c64:	6e 7f       	andi	r22, 0xFE	; 254
    1c66:	6e 5f       	subi	r22, 0xFE	; 254
    1c68:	7f 4f       	sbci	r23, 0xFF	; 255
    1c6a:	8f 4f       	sbci	r24, 0xFF	; 255
    1c6c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c6e:	af 4f       	sbci	r26, 0xFF	; 255
    1c70:	b1 e0       	ldi	r27, 0x01	; 1
    1c72:	3e d0       	rcall	.+124    	; 0x1cf0 <__ultoa_invert+0x9c>
    1c74:	b4 e0       	ldi	r27, 0x04	; 4
    1c76:	3c d0       	rcall	.+120    	; 0x1cf0 <__ultoa_invert+0x9c>
    1c78:	67 0f       	add	r22, r23
    1c7a:	78 1f       	adc	r23, r24
    1c7c:	89 1f       	adc	r24, r25
    1c7e:	9a 1f       	adc	r25, r26
    1c80:	a1 1d       	adc	r26, r1
    1c82:	68 0f       	add	r22, r24
    1c84:	79 1f       	adc	r23, r25
    1c86:	8a 1f       	adc	r24, r26
    1c88:	91 1d       	adc	r25, r1
    1c8a:	a1 1d       	adc	r26, r1
    1c8c:	6a 0f       	add	r22, r26
    1c8e:	71 1d       	adc	r23, r1
    1c90:	81 1d       	adc	r24, r1
    1c92:	91 1d       	adc	r25, r1
    1c94:	a1 1d       	adc	r26, r1
    1c96:	20 d0       	rcall	.+64     	; 0x1cd8 <__ultoa_invert+0x84>
    1c98:	09 f4       	brne	.+2      	; 0x1c9c <__ultoa_invert+0x48>
    1c9a:	68 94       	set
    1c9c:	3f 91       	pop	r19
    1c9e:	2a e0       	ldi	r18, 0x0A	; 10
    1ca0:	26 9f       	mul	r18, r22
    1ca2:	11 24       	eor	r1, r1
    1ca4:	30 19       	sub	r19, r0
    1ca6:	30 5d       	subi	r19, 0xD0	; 208
    1ca8:	31 93       	st	Z+, r19
    1caa:	de f6       	brtc	.-74     	; 0x1c62 <__ultoa_invert+0xe>
    1cac:	cf 01       	movw	r24, r30
    1cae:	08 95       	ret
    1cb0:	46 2f       	mov	r20, r22
    1cb2:	47 70       	andi	r20, 0x07	; 7
    1cb4:	40 5d       	subi	r20, 0xD0	; 208
    1cb6:	41 93       	st	Z+, r20
    1cb8:	b3 e0       	ldi	r27, 0x03	; 3
    1cba:	0f d0       	rcall	.+30     	; 0x1cda <__ultoa_invert+0x86>
    1cbc:	c9 f7       	brne	.-14     	; 0x1cb0 <__ultoa_invert+0x5c>
    1cbe:	f6 cf       	rjmp	.-20     	; 0x1cac <__ultoa_invert+0x58>
    1cc0:	46 2f       	mov	r20, r22
    1cc2:	4f 70       	andi	r20, 0x0F	; 15
    1cc4:	40 5d       	subi	r20, 0xD0	; 208
    1cc6:	4a 33       	cpi	r20, 0x3A	; 58
    1cc8:	18 f0       	brcs	.+6      	; 0x1cd0 <__ultoa_invert+0x7c>
    1cca:	49 5d       	subi	r20, 0xD9	; 217
    1ccc:	31 fd       	sbrc	r19, 1
    1cce:	40 52       	subi	r20, 0x20	; 32
    1cd0:	41 93       	st	Z+, r20
    1cd2:	02 d0       	rcall	.+4      	; 0x1cd8 <__ultoa_invert+0x84>
    1cd4:	a9 f7       	brne	.-22     	; 0x1cc0 <__ultoa_invert+0x6c>
    1cd6:	ea cf       	rjmp	.-44     	; 0x1cac <__ultoa_invert+0x58>
    1cd8:	b4 e0       	ldi	r27, 0x04	; 4
    1cda:	a6 95       	lsr	r26
    1cdc:	97 95       	ror	r25
    1cde:	87 95       	ror	r24
    1ce0:	77 95       	ror	r23
    1ce2:	67 95       	ror	r22
    1ce4:	ba 95       	dec	r27
    1ce6:	c9 f7       	brne	.-14     	; 0x1cda <__ultoa_invert+0x86>
    1ce8:	00 97       	sbiw	r24, 0x00	; 0
    1cea:	61 05       	cpc	r22, r1
    1cec:	71 05       	cpc	r23, r1
    1cee:	08 95       	ret
    1cf0:	9b 01       	movw	r18, r22
    1cf2:	ac 01       	movw	r20, r24
    1cf4:	0a 2e       	mov	r0, r26
    1cf6:	06 94       	lsr	r0
    1cf8:	57 95       	ror	r21
    1cfa:	47 95       	ror	r20
    1cfc:	37 95       	ror	r19
    1cfe:	27 95       	ror	r18
    1d00:	ba 95       	dec	r27
    1d02:	c9 f7       	brne	.-14     	; 0x1cf6 <__ultoa_invert+0xa2>
    1d04:	62 0f       	add	r22, r18
    1d06:	73 1f       	adc	r23, r19
    1d08:	84 1f       	adc	r24, r20
    1d0a:	95 1f       	adc	r25, r21
    1d0c:	a0 1d       	adc	r26, r0
    1d0e:	08 95       	ret

00001d10 <_exit>:
    1d10:	f8 94       	cli

00001d12 <__stop_program>:
    1d12:	ff cf       	rjmp	.-2      	; 0x1d12 <__stop_program>
