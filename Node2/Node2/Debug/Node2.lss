
Node2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011a  00800200  00001b78  00001c0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b78  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004c  0080031a  0080031a  00001d26  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001d26  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000358  00000000  00000000  00001d82  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002354  00000000  00000000  000020da  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000011eb  00000000  00000000  0000442e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001aba  00000000  00000000  00005619  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000007c0  00000000  00000000  000070d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007f2  00000000  00000000  00007894  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000fb0  00000000  00000000  00008086  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000278  00000000  00000000  00009036  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	43 c1       	rjmp	.+646    	; 0x288 <__ctors_end>
       2:	00 00       	nop
       4:	af c3       	rjmp	.+1886   	; 0x764 <__vector_1>
       6:	00 00       	nop
       8:	5f c1       	rjmp	.+702    	; 0x2c8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c1       	rjmp	.+698    	; 0x2c8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c1       	rjmp	.+694    	; 0x2c8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c1       	rjmp	.+690    	; 0x2c8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c1       	rjmp	.+686    	; 0x2c8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c1       	rjmp	.+682    	; 0x2c8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c1       	rjmp	.+678    	; 0x2c8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c1       	rjmp	.+674    	; 0x2c8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c1       	rjmp	.+670    	; 0x2c8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c1       	rjmp	.+666    	; 0x2c8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c1       	rjmp	.+662    	; 0x2c8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c1       	rjmp	.+658    	; 0x2c8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c1       	rjmp	.+654    	; 0x2c8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c1       	rjmp	.+650    	; 0x2c8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c1       	rjmp	.+646    	; 0x2c8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c1       	rjmp	.+642    	; 0x2c8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c1       	rjmp	.+638    	; 0x2c8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c1       	rjmp	.+634    	; 0x2c8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c1       	rjmp	.+630    	; 0x2c8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c1       	rjmp	.+626    	; 0x2c8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c1       	rjmp	.+622    	; 0x2c8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c1       	rjmp	.+618    	; 0x2c8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c1       	rjmp	.+614    	; 0x2c8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c1       	rjmp	.+610    	; 0x2c8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c1       	rjmp	.+606    	; 0x2c8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c1       	rjmp	.+602    	; 0x2c8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c1       	rjmp	.+598    	; 0x2c8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c1       	rjmp	.+594    	; 0x2c8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c1       	rjmp	.+590    	; 0x2c8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c1       	rjmp	.+586    	; 0x2c8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c1       	rjmp	.+582    	; 0x2c8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c1       	rjmp	.+578    	; 0x2c8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c1       	rjmp	.+574    	; 0x2c8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	1d c1       	rjmp	.+570    	; 0x2c8 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1b c1       	rjmp	.+566    	; 0x2c8 <__bad_interrupt>
      92:	00 00       	nop
      94:	19 c1       	rjmp	.+562    	; 0x2c8 <__bad_interrupt>
      96:	00 00       	nop
      98:	17 c1       	rjmp	.+558    	; 0x2c8 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	88 c5       	rjmp	.+2832   	; 0xbae <__vector_39>
      9e:	00 00       	nop
      a0:	13 c1       	rjmp	.+550    	; 0x2c8 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	11 c1       	rjmp	.+546    	; 0x2c8 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	2c c5       	rjmp	.+2648   	; 0xb02 <__vector_42>
      aa:	00 00       	nop
      ac:	0d c1       	rjmp	.+538    	; 0x2c8 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	0b c1       	rjmp	.+534    	; 0x2c8 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	09 c1       	rjmp	.+530    	; 0x2c8 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	07 c1       	rjmp	.+526    	; 0x2c8 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	05 c1       	rjmp	.+522    	; 0x2c8 <__bad_interrupt>
      be:	00 00       	nop
      c0:	03 c1       	rjmp	.+518    	; 0x2c8 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	01 c1       	rjmp	.+514    	; 0x2c8 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	ff c0       	rjmp	.+510    	; 0x2c8 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	fd c0       	rjmp	.+506    	; 0x2c8 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	fb c0       	rjmp	.+502    	; 0x2c8 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	f9 c0       	rjmp	.+498    	; 0x2c8 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	f7 c0       	rjmp	.+494    	; 0x2c8 <__bad_interrupt>
      da:	00 00       	nop
      dc:	f5 c0       	rjmp	.+490    	; 0x2c8 <__bad_interrupt>
      de:	00 00       	nop
      e0:	f3 c0       	rjmp	.+486    	; 0x2c8 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	f2 05       	cpc	r31, r2
      e6:	44 06       	cpc	r4, r20
      e8:	44 06       	cpc	r4, r20
      ea:	44 06       	cpc	r4, r20
      ec:	44 06       	cpc	r4, r20
      ee:	44 06       	cpc	r4, r20
      f0:	44 06       	cpc	r4, r20
      f2:	44 06       	cpc	r4, r20
      f4:	f2 05       	cpc	r31, r2
      f6:	44 06       	cpc	r4, r20
      f8:	44 06       	cpc	r4, r20
      fa:	44 06       	cpc	r4, r20
      fc:	44 06       	cpc	r4, r20
      fe:	44 06       	cpc	r4, r20
     100:	44 06       	cpc	r4, r20
     102:	44 06       	cpc	r4, r20
     104:	f4 05       	cpc	r31, r4
     106:	44 06       	cpc	r4, r20
     108:	44 06       	cpc	r4, r20
     10a:	44 06       	cpc	r4, r20
     10c:	44 06       	cpc	r4, r20
     10e:	44 06       	cpc	r4, r20
     110:	44 06       	cpc	r4, r20
     112:	44 06       	cpc	r4, r20
     114:	44 06       	cpc	r4, r20
     116:	44 06       	cpc	r4, r20
     118:	44 06       	cpc	r4, r20
     11a:	44 06       	cpc	r4, r20
     11c:	44 06       	cpc	r4, r20
     11e:	44 06       	cpc	r4, r20
     120:	44 06       	cpc	r4, r20
     122:	44 06       	cpc	r4, r20
     124:	f4 05       	cpc	r31, r4
     126:	44 06       	cpc	r4, r20
     128:	44 06       	cpc	r4, r20
     12a:	44 06       	cpc	r4, r20
     12c:	44 06       	cpc	r4, r20
     12e:	44 06       	cpc	r4, r20
     130:	44 06       	cpc	r4, r20
     132:	44 06       	cpc	r4, r20
     134:	44 06       	cpc	r4, r20
     136:	44 06       	cpc	r4, r20
     138:	44 06       	cpc	r4, r20
     13a:	44 06       	cpc	r4, r20
     13c:	44 06       	cpc	r4, r20
     13e:	44 06       	cpc	r4, r20
     140:	44 06       	cpc	r4, r20
     142:	44 06       	cpc	r4, r20
     144:	40 06       	cpc	r4, r16
     146:	44 06       	cpc	r4, r20
     148:	44 06       	cpc	r4, r20
     14a:	44 06       	cpc	r4, r20
     14c:	44 06       	cpc	r4, r20
     14e:	44 06       	cpc	r4, r20
     150:	44 06       	cpc	r4, r20
     152:	44 06       	cpc	r4, r20
     154:	1d 06       	cpc	r1, r29
     156:	44 06       	cpc	r4, r20
     158:	44 06       	cpc	r4, r20
     15a:	44 06       	cpc	r4, r20
     15c:	44 06       	cpc	r4, r20
     15e:	44 06       	cpc	r4, r20
     160:	44 06       	cpc	r4, r20
     162:	44 06       	cpc	r4, r20
     164:	44 06       	cpc	r4, r20
     166:	44 06       	cpc	r4, r20
     168:	44 06       	cpc	r4, r20
     16a:	44 06       	cpc	r4, r20
     16c:	44 06       	cpc	r4, r20
     16e:	44 06       	cpc	r4, r20
     170:	44 06       	cpc	r4, r20
     172:	44 06       	cpc	r4, r20
     174:	11 06       	cpc	r1, r17
     176:	44 06       	cpc	r4, r20
     178:	44 06       	cpc	r4, r20
     17a:	44 06       	cpc	r4, r20
     17c:	44 06       	cpc	r4, r20
     17e:	44 06       	cpc	r4, r20
     180:	44 06       	cpc	r4, r20
     182:	44 06       	cpc	r4, r20
     184:	2f 06       	cpc	r2, r31

00000186 <__trampolines_end>:
     186:	6e 61       	ori	r22, 0x1E	; 30
     188:	6e 00       	.word	0x006e	; ????

0000018a <__c.2159>:
     18a:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     19a:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1aa:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1ba:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1ca:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1da:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1ea:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1fa:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     20a:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     21a:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     22a:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     23a:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     24a:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     25a:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     26a:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     27a:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000288 <__ctors_end>:
     288:	11 24       	eor	r1, r1
     28a:	1f be       	out	0x3f, r1	; 63
     28c:	cf ef       	ldi	r28, 0xFF	; 255
     28e:	d1 e2       	ldi	r29, 0x21	; 33
     290:	de bf       	out	0x3e, r29	; 62
     292:	cd bf       	out	0x3d, r28	; 61
     294:	00 e0       	ldi	r16, 0x00	; 0
     296:	0c bf       	out	0x3c, r16	; 60

00000298 <__do_copy_data>:
     298:	13 e0       	ldi	r17, 0x03	; 3
     29a:	a0 e0       	ldi	r26, 0x00	; 0
     29c:	b2 e0       	ldi	r27, 0x02	; 2
     29e:	e8 e7       	ldi	r30, 0x78	; 120
     2a0:	fb e1       	ldi	r31, 0x1B	; 27
     2a2:	00 e0       	ldi	r16, 0x00	; 0
     2a4:	0b bf       	out	0x3b, r16	; 59
     2a6:	02 c0       	rjmp	.+4      	; 0x2ac <__do_copy_data+0x14>
     2a8:	07 90       	elpm	r0, Z+
     2aa:	0d 92       	st	X+, r0
     2ac:	aa 31       	cpi	r26, 0x1A	; 26
     2ae:	b1 07       	cpc	r27, r17
     2b0:	d9 f7       	brne	.-10     	; 0x2a8 <__do_copy_data+0x10>

000002b2 <__do_clear_bss>:
     2b2:	23 e0       	ldi	r18, 0x03	; 3
     2b4:	aa e1       	ldi	r26, 0x1A	; 26
     2b6:	b3 e0       	ldi	r27, 0x03	; 3
     2b8:	01 c0       	rjmp	.+2      	; 0x2bc <.do_clear_bss_start>

000002ba <.do_clear_bss_loop>:
     2ba:	1d 92       	st	X+, r1

000002bc <.do_clear_bss_start>:
     2bc:	a6 36       	cpi	r26, 0x66	; 102
     2be:	b2 07       	cpc	r27, r18
     2c0:	e1 f7       	brne	.-8      	; 0x2ba <.do_clear_bss_loop>
     2c2:	e3 d3       	rcall	.+1990   	; 0xa8a <main>
     2c4:	0c 94 ba 0d 	jmp	0x1b74	; 0x1b74 <_exit>

000002c8 <__bad_interrupt>:
     2c8:	9b ce       	rjmp	.-714    	; 0x0 <__vectors>

000002ca <pi_calibrate>:
uint16_t max_position;

uint8_t printvar;

void pi_calibrate() {
	motor_direction(MOTOR_LEFT);
     2ca:	81 e0       	ldi	r24, 0x01	; 1
     2cc:	04 d3       	rcall	.+1544   	; 0x8d6 <motor_direction>
	motor_speed(80);
     2ce:	80 e5       	ldi	r24, 0x50	; 80
     2d0:	ed d2       	rcall	.+1498   	; 0x8ac <motor_speed>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2d2:	2f ef       	ldi	r18, 0xFF	; 255
     2d4:	87 ea       	ldi	r24, 0xA7	; 167
     2d6:	91 e6       	ldi	r25, 0x61	; 97
     2d8:	21 50       	subi	r18, 0x01	; 1
     2da:	80 40       	sbci	r24, 0x00	; 0
     2dc:	90 40       	sbci	r25, 0x00	; 0
     2de:	e1 f7       	brne	.-8      	; 0x2d8 <pi_calibrate+0xe>
     2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <pi_calibrate+0x18>
     2e2:	00 00       	nop
	_delay_ms(2000);
	motor_speed(0);
     2e4:	80 e0       	ldi	r24, 0x00	; 0
     2e6:	e2 d2       	rcall	.+1476   	; 0x8ac <motor_speed>
     2e8:	2f ef       	ldi	r18, 0xFF	; 255
     2ea:	80 e7       	ldi	r24, 0x70	; 112
     2ec:	92 e0       	ldi	r25, 0x02	; 2
     2ee:	21 50       	subi	r18, 0x01	; 1
     2f0:	80 40       	sbci	r24, 0x00	; 0
     2f2:	90 40       	sbci	r25, 0x00	; 0
     2f4:	e1 f7       	brne	.-8      	; 0x2ee <pi_calibrate+0x24>
     2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <pi_calibrate+0x2e>
     2f8:	00 00       	nop
	_delay_ms(50);
	motor_encoder_reset();
     2fa:	c1 d2       	rcall	.+1410   	; 0x87e <motor_encoder_reset>

	motor_direction(MOTOR_RIGHT);
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	eb d2       	rcall	.+1494   	; 0x8d6 <motor_direction>
	motor_speed(80);
     300:	80 e5       	ldi	r24, 0x50	; 80
     302:	d4 d2       	rcall	.+1448   	; 0x8ac <motor_speed>
     304:	2f ef       	ldi	r18, 0xFF	; 255
     306:	87 ea       	ldi	r24, 0xA7	; 167
     308:	91 e6       	ldi	r25, 0x61	; 97
     30a:	21 50       	subi	r18, 0x01	; 1
     30c:	80 40       	sbci	r24, 0x00	; 0
     30e:	90 40       	sbci	r25, 0x00	; 0
     310:	e1 f7       	brne	.-8      	; 0x30a <pi_calibrate+0x40>
     312:	00 c0       	rjmp	.+0      	; 0x314 <pi_calibrate+0x4a>
     314:	00 00       	nop
	_delay_ms(2000);
	motor_speed(0);
     316:	80 e0       	ldi	r24, 0x00	; 0
     318:	c9 d2       	rcall	.+1426   	; 0x8ac <motor_speed>
     31a:	2f ef       	ldi	r18, 0xFF	; 255
     31c:	80 e7       	ldi	r24, 0x70	; 112
     31e:	92 e0       	ldi	r25, 0x02	; 2
     320:	21 50       	subi	r18, 0x01	; 1
     322:	80 40       	sbci	r24, 0x00	; 0
     324:	90 40       	sbci	r25, 0x00	; 0
     326:	e1 f7       	brne	.-8      	; 0x320 <pi_calibrate+0x56>
     328:	00 c0       	rjmp	.+0      	; 0x32a <pi_calibrate+0x60>
     32a:	00 00       	nop
	_delay_ms(50);
	
	max_position = motor_encoder_read();
     32c:	ec d2       	rcall	.+1496   	; 0x906 <motor_encoder_read>
     32e:	80 93 4e 03 	sts	0x034E, r24
     332:	90 93 4f 03 	sts	0x034F, r25
	//motor_encoder_reset();
	printf("max pos: %d\n\n", max_position);
     336:	9f 93       	push	r25
     338:	8f 93       	push	r24
     33a:	8f e0       	ldi	r24, 0x0F	; 15
     33c:	92 e0       	ldi	r25, 0x02	; 2
     33e:	9f 93       	push	r25
     340:	8f 93       	push	r24
     342:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <printf>
     346:	0f 90       	pop	r0
     348:	0f 90       	pop	r0
     34a:	0f 90       	pop	r0
     34c:	0f 90       	pop	r0
     34e:	08 95       	ret

00000350 <pi_init>:
}

void pi_init() {
	direction = MOTOR_LEFT;
     350:	81 e0       	ldi	r24, 0x01	; 1
     352:	80 93 54 03 	sts	0x0354, r24
	
	integral = 0;
     356:	10 92 5a 03 	sts	0x035A, r1
     35a:	10 92 5b 03 	sts	0x035B, r1
     35e:	10 92 5c 03 	sts	0x035C, r1
     362:	10 92 5d 03 	sts	0x035D, r1

	printvar = 0;
     366:	10 92 55 03 	sts	0x0355, r1

	pi_calibrate();
     36a:	af df       	rcall	.-162    	; 0x2ca <pi_calibrate>
	position = max_position;
     36c:	60 91 4e 03 	lds	r22, 0x034E
     370:	70 91 4f 03 	lds	r23, 0x034F
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	9f d5       	rcall	.+2878   	; 0xeb8 <__floatunsisf>
     37a:	60 93 50 03 	sts	0x0350, r22
     37e:	70 93 51 03 	sts	0x0351, r23
     382:	80 93 52 03 	sts	0x0352, r24
     386:	90 93 53 03 	sts	0x0353, r25
     38a:	08 95       	ret

0000038c <pi_update_position>:
}

void pi_update_position() {
	//PORTC |= (1<<MOTOR_RST);
	position = motor_encoder_read();
     38c:	bc d2       	rcall	.+1400   	; 0x906 <motor_encoder_read>
     38e:	bc 01       	movw	r22, r24
     390:	88 27       	eor	r24, r24
     392:	77 fd       	sbrc	r23, 7
     394:	80 95       	com	r24
     396:	98 2f       	mov	r25, r24
     398:	91 d5       	rcall	.+2850   	; 0xebc <__floatsisf>
     39a:	60 93 50 03 	sts	0x0350, r22
     39e:	70 93 51 03 	sts	0x0351, r23
     3a2:	80 93 52 03 	sts	0x0352, r24
     3a6:	90 93 53 03 	sts	0x0353, r25
     3aa:	08 95       	ret

000003ac <pi_update>:
	//motor_encoder_reset();
}

void pi_update(int16_t posref) {
     3ac:	4f 92       	push	r4
     3ae:	5f 92       	push	r5
     3b0:	6f 92       	push	r6
     3b2:	7f 92       	push	r7
     3b4:	8f 92       	push	r8
     3b6:	9f 92       	push	r9
     3b8:	af 92       	push	r10
     3ba:	bf 92       	push	r11
     3bc:	cf 92       	push	r12
     3be:	df 92       	push	r13
     3c0:	ef 92       	push	r14
     3c2:	ff 92       	push	r15
     3c4:	1f 93       	push	r17
     3c6:	cf 93       	push	r28
     3c8:	df 93       	push	r29
     3ca:	cd b7       	in	r28, 0x3d	; 61
     3cc:	de b7       	in	r29, 0x3e	; 62
     3ce:	28 97       	sbiw	r28, 0x08	; 8
     3d0:	0f b6       	in	r0, 0x3f	; 63
     3d2:	f8 94       	cli
     3d4:	de bf       	out	0x3e, r29	; 62
     3d6:	0f be       	out	0x3f, r0	; 63
     3d8:	cd bf       	out	0x3d, r28	; 61
	//PORTC |= (1<<MOTOR_RST);
	
	
	int16_t error = (position - posref);
     3da:	20 91 50 03 	lds	r18, 0x0350
     3de:	30 91 51 03 	lds	r19, 0x0351
     3e2:	40 91 52 03 	lds	r20, 0x0352
     3e6:	50 91 53 03 	lds	r21, 0x0353
     3ea:	2d 83       	std	Y+5, r18	; 0x05
     3ec:	3e 83       	std	Y+6, r19	; 0x06
     3ee:	4f 83       	std	Y+7, r20	; 0x07
     3f0:	58 87       	std	Y+8, r21	; 0x08
     3f2:	bc 01       	movw	r22, r24
     3f4:	88 27       	eor	r24, r24
     3f6:	77 fd       	sbrc	r23, 7
     3f8:	80 95       	com	r24
     3fa:	98 2f       	mov	r25, r24
     3fc:	5f d5       	rcall	.+2750   	; 0xebc <__floatsisf>
     3fe:	6b 01       	movw	r12, r22
     400:	7c 01       	movw	r14, r24
     402:	9b 01       	movw	r18, r22
     404:	ac 01       	movw	r20, r24
     406:	6d 81       	ldd	r22, Y+5	; 0x05
     408:	7e 81       	ldd	r23, Y+6	; 0x06
     40a:	8f 81       	ldd	r24, Y+7	; 0x07
     40c:	98 85       	ldd	r25, Y+8	; 0x08
     40e:	52 d4       	rcall	.+2212   	; 0xcb4 <__subsf3>
     410:	22 d5       	rcall	.+2628   	; 0xe56 <__fixsfsi>
     412:	69 83       	std	Y+1, r22	; 0x01
     414:	7a 83       	std	Y+2, r23	; 0x02
     416:	8b 83       	std	Y+3, r24	; 0x03
     418:	9c 83       	std	Y+4, r25	; 0x04
	
	integral += ((float)error * (float)TIMER4_OCRA / (float)F_CPU)*1024; //unit of integral is seconds  
     41a:	49 81       	ldd	r20, Y+1	; 0x01
     41c:	5a 81       	ldd	r21, Y+2	; 0x02
     41e:	ba 01       	movw	r22, r20
     420:	88 27       	eor	r24, r24
     422:	77 fd       	sbrc	r23, 7
     424:	80 95       	com	r24
     426:	98 2f       	mov	r25, r24
     428:	49 d5       	rcall	.+2706   	; 0xebc <__floatsisf>
     42a:	2b 01       	movw	r4, r22
     42c:	3c 01       	movw	r6, r24
     42e:	20 e0       	ldi	r18, 0x00	; 0
     430:	30 e4       	ldi	r19, 0x40	; 64
     432:	43 e4       	ldi	r20, 0x43	; 67
     434:	54 e4       	ldi	r21, 0x44	; 68
     436:	f2 d5       	rcall	.+3044   	; 0x101c <__mulsf3>
     438:	20 e0       	ldi	r18, 0x00	; 0
     43a:	34 e2       	ldi	r19, 0x24	; 36
     43c:	44 e7       	ldi	r20, 0x74	; 116
     43e:	5b e4       	ldi	r21, 0x4B	; 75
     440:	a2 d4       	rcall	.+2372   	; 0xd86 <__divsf3>
     442:	20 e0       	ldi	r18, 0x00	; 0
     444:	30 e0       	ldi	r19, 0x00	; 0
     446:	40 e8       	ldi	r20, 0x80	; 128
     448:	54 e4       	ldi	r21, 0x44	; 68
     44a:	e8 d5       	rcall	.+3024   	; 0x101c <__mulsf3>
     44c:	20 91 5a 03 	lds	r18, 0x035A
     450:	30 91 5b 03 	lds	r19, 0x035B
     454:	40 91 5c 03 	lds	r20, 0x035C
     458:	50 91 5d 03 	lds	r21, 0x035D
     45c:	2c d4       	rcall	.+2136   	; 0xcb6 <__addsf3>
     45e:	4b 01       	movw	r8, r22
     460:	5c 01       	movw	r10, r24
     462:	60 93 5a 03 	sts	0x035A, r22
     466:	70 93 5b 03 	sts	0x035B, r23
     46a:	80 93 5c 03 	sts	0x035C, r24
     46e:	90 93 5d 03 	sts	0x035D, r25

	uint8_t speed = (float)K_P * (float)error + fabs(integral * K_I) + 40;
     472:	2a e0       	ldi	r18, 0x0A	; 10
     474:	37 ed       	ldi	r19, 0xD7	; 215
     476:	43 e2       	ldi	r20, 0x23	; 35
     478:	5d e3       	ldi	r21, 0x3D	; 61
     47a:	c3 01       	movw	r24, r6
     47c:	b2 01       	movw	r22, r4
     47e:	ce d5       	rcall	.+2972   	; 0x101c <__mulsf3>
     480:	2b 01       	movw	r4, r22
     482:	3c 01       	movw	r6, r24
     484:	20 e0       	ldi	r18, 0x00	; 0
     486:	30 e0       	ldi	r19, 0x00	; 0
     488:	a9 01       	movw	r20, r18
     48a:	c5 01       	movw	r24, r10
     48c:	b4 01       	movw	r22, r8
     48e:	c6 d5       	rcall	.+2956   	; 0x101c <__mulsf3>
     490:	9b 01       	movw	r18, r22
     492:	ac 01       	movw	r20, r24
     494:	5f 77       	andi	r21, 0x7F	; 127
     496:	c3 01       	movw	r24, r6
     498:	b2 01       	movw	r22, r4
     49a:	0d d4       	rcall	.+2074   	; 0xcb6 <__addsf3>
     49c:	20 e0       	ldi	r18, 0x00	; 0
     49e:	30 e0       	ldi	r19, 0x00	; 0
     4a0:	40 e2       	ldi	r20, 0x20	; 32
     4a2:	52 e4       	ldi	r21, 0x42	; 66
     4a4:	08 d4       	rcall	.+2064   	; 0xcb6 <__addsf3>
     4a6:	dc d4       	rcall	.+2488   	; 0xe60 <__fixunssfsi>
     4a8:	16 2f       	mov	r17, r22
     4aa:	69 37       	cpi	r22, 0x79	; 121
     4ac:	08 f0       	brcs	.+2      	; 0x4b0 <pi_update+0x104>
     4ae:	18 e7       	ldi	r17, 0x78	; 120

	if (speed > MAX_SPEED)	{ speed = MAX_SPEED; } 
	//else if (speed < MIN_SPEED && speed ){ }

	if(position < posref) {
     4b0:	a7 01       	movw	r20, r14
     4b2:	96 01       	movw	r18, r12
     4b4:	6d 81       	ldd	r22, Y+5	; 0x05
     4b6:	7e 81       	ldd	r23, Y+6	; 0x06
     4b8:	8f 81       	ldd	r24, Y+7	; 0x07
     4ba:	98 85       	ldd	r25, Y+8	; 0x08
     4bc:	60 d4       	rcall	.+2240   	; 0xd7e <__cmpsf2>
     4be:	88 23       	and	r24, r24
     4c0:	1c f4       	brge	.+6      	; 0x4c8 <pi_update+0x11c>
		motor_direction(MOTOR_RIGHT);
     4c2:	80 e0       	ldi	r24, 0x00	; 0
     4c4:	08 d2       	rcall	.+1040   	; 0x8d6 <motor_direction>
     4c6:	02 c0       	rjmp	.+4      	; 0x4cc <pi_update+0x120>
	} else {
		motor_direction(MOTOR_LEFT);
     4c8:	81 e0       	ldi	r24, 0x01	; 1
     4ca:	05 d2       	rcall	.+1034   	; 0x8d6 <motor_direction>
	}

	motor_speed(speed);
     4cc:	81 2f       	mov	r24, r17
     4ce:	ee d1       	rcall	.+988    	; 0x8ac <motor_speed>
 

	printf("speed: %d\nerror: %d\n\n", speed, error);
     4d0:	5a 81       	ldd	r21, Y+2	; 0x02
     4d2:	5f 93       	push	r21
     4d4:	89 81       	ldd	r24, Y+1	; 0x01
     4d6:	8f 93       	push	r24
     4d8:	1f 92       	push	r1
     4da:	1f 93       	push	r17
     4dc:	8d e1       	ldi	r24, 0x1D	; 29
     4de:	92 e0       	ldi	r25, 0x02	; 2
     4e0:	9f 93       	push	r25
     4e2:	8f 93       	push	r24
     4e4:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <printf>
     4e8:	0f 90       	pop	r0
     4ea:	0f 90       	pop	r0
     4ec:	0f 90       	pop	r0
     4ee:	0f 90       	pop	r0
     4f0:	0f 90       	pop	r0
     4f2:	0f 90       	pop	r0

     4f4:	28 96       	adiw	r28, 0x08	; 8
     4f6:	0f b6       	in	r0, 0x3f	; 63
     4f8:	f8 94       	cli
     4fa:	de bf       	out	0x3e, r29	; 62
     4fc:	0f be       	out	0x3f, r0	; 63
     4fe:	cd bf       	out	0x3d, r28	; 61
     500:	df 91       	pop	r29
     502:	cf 91       	pop	r28
     504:	1f 91       	pop	r17
     506:	ff 90       	pop	r15
     508:	ef 90       	pop	r14
     50a:	df 90       	pop	r13
     50c:	cf 90       	pop	r12
     50e:	bf 90       	pop	r11
     510:	af 90       	pop	r10
     512:	9f 90       	pop	r9
     514:	8f 90       	pop	r8
     516:	7f 90       	pop	r7
     518:	6f 90       	pop	r6
     51a:	5f 90       	pop	r5
     51c:	4f 90       	pop	r4
     51e:	08 95       	ret

00000520 <adc_init>:
#include <util/delay.h>
#include "adc_driver.h"


void adc_init(){
	ADCSRA	|= (1 << ADEN) | (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);
     520:	ea e7       	ldi	r30, 0x7A	; 122
     522:	f0 e0       	ldi	r31, 0x00	; 0
     524:	80 81       	ld	r24, Z
     526:	87 68       	ori	r24, 0x87	; 135
     528:	80 83       	st	Z, r24
	ADMUX	|= (1<<REFS0);
     52a:	ec e7       	ldi	r30, 0x7C	; 124
     52c:	f0 e0       	ldi	r31, 0x00	; 0
     52e:	80 81       	ld	r24, Z
     530:	80 64       	ori	r24, 0x40	; 64
     532:	80 83       	st	Z, r24
	ADMUX	&= ~(1<<REFS1); 
     534:	80 81       	ld	r24, Z
     536:	8f 77       	andi	r24, 0x7F	; 127
     538:	80 83       	st	Z, r24
     53a:	08 95       	ret

0000053c <adc_read>:
}

uint16_t adc_read(uint8_t channel){
	ADMUX	= (1<<REFS0) | (channel & 0x03);
     53c:	83 70       	andi	r24, 0x03	; 3
     53e:	80 64       	ori	r24, 0x40	; 64
     540:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA	|= (1 << ADSC);
     544:	ea e7       	ldi	r30, 0x7A	; 122
     546:	f0 e0       	ldi	r31, 0x00	; 0
     548:	80 81       	ld	r24, Z
     54a:	80 64       	ori	r24, 0x40	; 64
     54c:	80 83       	st	Z, r24

	while((ADCSRA & (1<<ADSC))){ ; }
     54e:	80 81       	ld	r24, Z
     550:	86 fd       	sbrc	r24, 6
     552:	fd cf       	rjmp	.-6      	; 0x54e <adc_read+0x12>

	return ADC;
     554:	80 91 78 00 	lds	r24, 0x0078
     558:	90 91 79 00 	lds	r25, 0x0079
}
     55c:	08 95       	ret

0000055e <can_init>:
	for (uint8_t i = 0; i < message->length; i++) {
		mcp2515_write(MCP_TXB0D0 + i, message->data[i]);
	}

	mcp2515_request_to_send(1);
}
     55e:	6f d1       	rcall	.+734    	; 0x83e <mcp2515_init>
     560:	8f e0       	ldi	r24, 0x0F	; 15
     562:	60 d1       	rcall	.+704    	; 0x824 <mcp2515_read>
     564:	1f 92       	push	r1
     566:	8f 93       	push	r24
     568:	83 e3       	ldi	r24, 0x33	; 51
     56a:	92 e0       	ldi	r25, 0x02	; 2
     56c:	9f 93       	push	r25
     56e:	8f 93       	push	r24
     570:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <printf>
     574:	4f ef       	ldi	r20, 0xFF	; 255
     576:	60 e6       	ldi	r22, 0x60	; 96
     578:	80 e6       	ldi	r24, 0x60	; 96
     57a:	3b d1       	rcall	.+630    	; 0x7f2 <mcp2515_bit_modify>
     57c:	40 e0       	ldi	r20, 0x00	; 0
     57e:	64 e0       	ldi	r22, 0x04	; 4
     580:	80 e6       	ldi	r24, 0x60	; 96
     582:	37 d1       	rcall	.+622    	; 0x7f2 <mcp2515_bit_modify>
     584:	4f ef       	ldi	r20, 0xFF	; 255
     586:	61 e0       	ldi	r22, 0x01	; 1
     588:	8b e2       	ldi	r24, 0x2B	; 43
     58a:	33 d1       	rcall	.+614    	; 0x7f2 <mcp2515_bit_modify>
     58c:	40 e0       	ldi	r20, 0x00	; 0
     58e:	60 ee       	ldi	r22, 0xE0	; 224
     590:	8f e0       	ldi	r24, 0x0F	; 15
     592:	2f d1       	rcall	.+606    	; 0x7f2 <mcp2515_bit_modify>
     594:	0f 90       	pop	r0
     596:	0f 90       	pop	r0
     598:	0f 90       	pop	r0
     59a:	0f 90       	pop	r0
     59c:	08 95       	ret

0000059e <can_data_receive>:
	static can_message_t message;
	message = can_data_receive();
	can_print_message(&message);
}

can_message_t can_data_receive(){
     59e:	9f 92       	push	r9
     5a0:	af 92       	push	r10
     5a2:	bf 92       	push	r11
     5a4:	cf 92       	push	r12
     5a6:	df 92       	push	r13
     5a8:	ef 92       	push	r14
     5aa:	ff 92       	push	r15
     5ac:	0f 93       	push	r16
     5ae:	1f 93       	push	r17
     5b0:	cf 93       	push	r28
     5b2:	df 93       	push	r29
     5b4:	cd b7       	in	r28, 0x3d	; 61
     5b6:	de b7       	in	r29, 0x3e	; 62
     5b8:	2b 97       	sbiw	r28, 0x0b	; 11
     5ba:	0f b6       	in	r0, 0x3f	; 63
     5bc:	f8 94       	cli
     5be:	de bf       	out	0x3e, r29	; 62
     5c0:	0f be       	out	0x3f, r0	; 63
     5c2:	cd bf       	out	0x3d, r28	; 61
     5c4:	7c 01       	movw	r14, r24
	can_message_t message;
	
	//Check if RX buffer have message
	//if (rx_flag == 1) {
	if (mcp2515_read(MCP_CANINTF) & MCP_RX0IF) {
     5c6:	8c e2       	ldi	r24, 0x2C	; 44
     5c8:	2d d1       	rcall	.+602    	; 0x824 <mcp2515_read>
     5ca:	80 ff       	sbrs	r24, 0
     5cc:	30 c0       	rjmp	.+96     	; 0x62e <can_data_receive+0x90>
		//Get ID if message
		message.id = (mcp2515_read(MCP_RXB0SIDH) << 3) | (mcp2515_read(MCP_RXB0SIDL) >> 5);
     5ce:	81 e6       	ldi	r24, 0x61	; 97
     5d0:	29 d1       	rcall	.+594    	; 0x824 <mcp2515_read>
     5d2:	c8 2e       	mov	r12, r24
     5d4:	82 e6       	ldi	r24, 0x62	; 98
     5d6:	26 d1       	rcall	.+588    	; 0x824 <mcp2515_read>
     5d8:	82 95       	swap	r24
     5da:	86 95       	lsr	r24
     5dc:	87 70       	andi	r24, 0x07	; 7
     5de:	d1 2c       	mov	r13, r1
     5e0:	cc 0c       	add	r12, r12
     5e2:	dd 1c       	adc	r13, r13
     5e4:	cc 0c       	add	r12, r12
     5e6:	dd 1c       	adc	r13, r13
     5e8:	cc 0c       	add	r12, r12
     5ea:	dd 1c       	adc	r13, r13
     5ec:	c8 2a       	or	r12, r24

		//Get lenght of message
		message.length = (0x0F) & (mcp2515_read(MCP_RXB0DLC));
     5ee:	85 e6       	ldi	r24, 0x65	; 101
     5f0:	19 d1       	rcall	.+562    	; 0x824 <mcp2515_read>
     5f2:	8f 70       	andi	r24, 0x0F	; 15
     5f4:	98 2e       	mov	r9, r24

		//Get message data
		for(uint8_t i = 0; i < message.length; i++){
     5f6:	a1 f0       	breq	.+40     	; 0x620 <can_data_receive+0x82>
     5f8:	8e 01       	movw	r16, r28
     5fa:	0c 5f       	subi	r16, 0xFC	; 252
     5fc:	1f 4f       	sbci	r17, 0xFF	; 255
     5fe:	0f 2e       	mov	r0, r31
     600:	f6 e6       	ldi	r31, 0x66	; 102
     602:	af 2e       	mov	r10, r31
     604:	f0 2d       	mov	r31, r0
     606:	a8 0e       	add	r10, r24
     608:	0f 2e       	mov	r0, r31
     60a:	f6 e6       	ldi	r31, 0x66	; 102
     60c:	bf 2e       	mov	r11, r31
     60e:	f0 2d       	mov	r31, r0
			message.data[i] = mcp2515_read(MCP_RXB0D0 + i);
     610:	8b 2d       	mov	r24, r11
     612:	08 d1       	rcall	.+528    	; 0x824 <mcp2515_read>
     614:	f8 01       	movw	r30, r16
     616:	81 93       	st	Z+, r24
     618:	8f 01       	movw	r16, r30
     61a:	b3 94       	inc	r11

		//Get lenght of message
		message.length = (0x0F) & (mcp2515_read(MCP_RXB0DLC));

		//Get message data
		for(uint8_t i = 0; i < message.length; i++){
     61c:	ba 10       	cpse	r11, r10
     61e:	f8 cf       	rjmp	.-16     	; 0x610 <can_data_receive+0x72>
			message.data[i] = mcp2515_read(MCP_RXB0D0 + i);
		}

		//Clear flag
		rx_flag = 0;
     620:	10 92 5f 03 	sts	0x035F, r1
		mcp2515_bit_modify(MCP_CANINTF, MCP_RX0IF, 0);
     624:	40 e0       	ldi	r20, 0x00	; 0
     626:	61 e0       	ldi	r22, 0x01	; 1
     628:	8c e2       	ldi	r24, 0x2C	; 44
     62a:	e3 d0       	rcall	.+454    	; 0x7f2 <mcp2515_bit_modify>
     62c:	03 c0       	rjmp	.+6      	; 0x634 <can_data_receive+0x96>
	} else {
		message.id = -1;
     62e:	cc 24       	eor	r12, r12
     630:	ca 94       	dec	r12
     632:	dc 2c       	mov	r13, r12
	}

	return message;
     634:	da 82       	std	Y+2, r13	; 0x02
     636:	c9 82       	std	Y+1, r12	; 0x01
     638:	9b 82       	std	Y+3, r9	; 0x03
     63a:	8b e0       	ldi	r24, 0x0B	; 11
     63c:	fe 01       	movw	r30, r28
     63e:	31 96       	adiw	r30, 0x01	; 1
     640:	d7 01       	movw	r26, r14
     642:	01 90       	ld	r0, Z+
     644:	0d 92       	st	X+, r0
     646:	8a 95       	dec	r24
     648:	e1 f7       	brne	.-8      	; 0x642 <can_data_receive+0xa4>
}
     64a:	c7 01       	movw	r24, r14
     64c:	2b 96       	adiw	r28, 0x0b	; 11
     64e:	0f b6       	in	r0, 0x3f	; 63
     650:	f8 94       	cli
     652:	de bf       	out	0x3e, r29	; 62
     654:	0f be       	out	0x3f, r0	; 63
     656:	cd bf       	out	0x3d, r28	; 61
     658:	df 91       	pop	r29
     65a:	cf 91       	pop	r28
     65c:	1f 91       	pop	r17
     65e:	0f 91       	pop	r16
     660:	ff 90       	pop	r15
     662:	ef 90       	pop	r14
     664:	df 90       	pop	r13
     666:	cf 90       	pop	r12
     668:	bf 90       	pop	r11
     66a:	af 90       	pop	r10
     66c:	9f 90       	pop	r9
     66e:	08 95       	ret

00000670 <can_print_message>:
		testmessage.id++;*/
		_delay_ms(600);
	}
}

void can_print_message(const can_message_t *message) {
     670:	ff 92       	push	r15
     672:	0f 93       	push	r16
     674:	1f 93       	push	r17
     676:	cf 93       	push	r28
     678:	df 93       	push	r29
     67a:	ec 01       	movw	r28, r24
	if (message->id == -1) {
     67c:	88 81       	ld	r24, Y
     67e:	99 81       	ldd	r25, Y+1	; 0x01
     680:	8f 3f       	cpi	r24, 0xFF	; 255
     682:	2f ef       	ldi	r18, 0xFF	; 255
     684:	92 07       	cpc	r25, r18
     686:	29 f4       	brne	.+10     	; 0x692 <can_print_message+0x22>
		printf("No message in buffer\n\n");
     688:	82 e5       	ldi	r24, 0x52	; 82
     68a:	92 e0       	ldi	r25, 0x02	; 2
     68c:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <puts>
     690:	41 c0       	rjmp	.+130    	; 0x714 <can_print_message+0xa4>
	} else {
		printf("Message id: %d\nMessage length %d\n", message->id, message->length);
     692:	2a 81       	ldd	r18, Y+2	; 0x02
     694:	1f 92       	push	r1
     696:	2f 93       	push	r18
     698:	9f 93       	push	r25
     69a:	8f 93       	push	r24
     69c:	88 e6       	ldi	r24, 0x68	; 104
     69e:	92 e0       	ldi	r25, 0x02	; 2
     6a0:	9f 93       	push	r25
     6a2:	8f 93       	push	r24
     6a4:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <printf>
		printf("Message data: [ %d", message->data[0]);
     6a8:	2b 81       	ldd	r18, Y+3	; 0x03
     6aa:	82 2f       	mov	r24, r18
     6ac:	99 27       	eor	r25, r25
     6ae:	87 fd       	sbrc	r24, 7
     6b0:	90 95       	com	r25
     6b2:	9f 93       	push	r25
     6b4:	2f 93       	push	r18
     6b6:	8a e8       	ldi	r24, 0x8A	; 138
     6b8:	92 e0       	ldi	r25, 0x02	; 2
     6ba:	9f 93       	push	r25
     6bc:	8f 93       	push	r24
     6be:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <printf>
		for(uint8_t i = 1; i < message->length; i++) {
     6c2:	8d b7       	in	r24, 0x3d	; 61
     6c4:	9e b7       	in	r25, 0x3e	; 62
     6c6:	0a 96       	adiw	r24, 0x0a	; 10
     6c8:	0f b6       	in	r0, 0x3f	; 63
     6ca:	f8 94       	cli
     6cc:	9e bf       	out	0x3e, r25	; 62
     6ce:	0f be       	out	0x3f, r0	; 63
     6d0:	8d bf       	out	0x3d, r24	; 61
     6d2:	8a 81       	ldd	r24, Y+2	; 0x02
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	d0 f0       	brcs	.+52     	; 0x70c <can_print_message+0x9c>
     6d8:	ff 24       	eor	r15, r15
     6da:	f3 94       	inc	r15
			printf(", %d",message->data[i]);
     6dc:	0d e9       	ldi	r16, 0x9D	; 157
     6de:	12 e0       	ldi	r17, 0x02	; 2
     6e0:	fe 01       	movw	r30, r28
     6e2:	ef 0d       	add	r30, r15
     6e4:	f1 1d       	adc	r31, r1
     6e6:	23 81       	ldd	r18, Z+3	; 0x03
     6e8:	82 2f       	mov	r24, r18
     6ea:	99 27       	eor	r25, r25
     6ec:	87 fd       	sbrc	r24, 7
     6ee:	90 95       	com	r25
     6f0:	9f 93       	push	r25
     6f2:	2f 93       	push	r18
     6f4:	1f 93       	push	r17
     6f6:	0f 93       	push	r16
     6f8:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <printf>
	if (message->id == -1) {
		printf("No message in buffer\n\n");
	} else {
		printf("Message id: %d\nMessage length %d\n", message->id, message->length);
		printf("Message data: [ %d", message->data[0]);
		for(uint8_t i = 1; i < message->length; i++) {
     6fc:	f3 94       	inc	r15
     6fe:	0f 90       	pop	r0
     700:	0f 90       	pop	r0
     702:	0f 90       	pop	r0
     704:	0f 90       	pop	r0
     706:	8a 81       	ldd	r24, Y+2	; 0x02
     708:	f8 16       	cp	r15, r24
     70a:	50 f3       	brcs	.-44     	; 0x6e0 <can_print_message+0x70>
			printf(", %d",message->data[i]);
		}
		printf(" ]\n\n");
     70c:	82 ea       	ldi	r24, 0xA2	; 162
     70e:	92 e0       	ldi	r25, 0x02	; 2
     710:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <puts>
	}
}
     714:	df 91       	pop	r29
     716:	cf 91       	pop	r28
     718:	1f 91       	pop	r17
     71a:	0f 91       	pop	r16
     71c:	ff 90       	pop	r15
     71e:	08 95       	ret

00000720 <can_interrupt_vector>:
	} else {
		return 1;
	 }
}

void can_interrupt_vector(){
     720:	cf 93       	push	r28
     722:	df 93       	push	r29
     724:	cd b7       	in	r28, 0x3d	; 61
     726:	de b7       	in	r29, 0x3e	; 62
     728:	2b 97       	sbiw	r28, 0x0b	; 11
     72a:	0f b6       	in	r0, 0x3f	; 63
     72c:	f8 94       	cli
     72e:	de bf       	out	0x3e, r29	; 62
     730:	0f be       	out	0x3f, r0	; 63
     732:	cd bf       	out	0x3d, r28	; 61
	//Clear interrupt flag
	static can_message_t message;
	message = can_data_receive();
     734:	ce 01       	movw	r24, r28
     736:	01 96       	adiw	r24, 0x01	; 1
     738:	32 df       	rcall	.-412    	; 0x59e <can_data_receive>
     73a:	8b e0       	ldi	r24, 0x0B	; 11
     73c:	fe 01       	movw	r30, r28
     73e:	31 96       	adiw	r30, 0x01	; 1
     740:	aa e1       	ldi	r26, 0x1A	; 26
     742:	b3 e0       	ldi	r27, 0x03	; 3
     744:	01 90       	ld	r0, Z+
     746:	0d 92       	st	X+, r0
     748:	8a 95       	dec	r24
     74a:	e1 f7       	brne	.-8      	; 0x744 <can_interrupt_vector+0x24>
	can_print_message(&message);
     74c:	8a e1       	ldi	r24, 0x1A	; 26
     74e:	93 e0       	ldi	r25, 0x03	; 3
     750:	8f df       	rcall	.-226    	; 0x670 <can_print_message>
}
     752:	2b 96       	adiw	r28, 0x0b	; 11
     754:	0f b6       	in	r0, 0x3f	; 63
     756:	f8 94       	cli
     758:	de bf       	out	0x3e, r29	; 62
     75a:	0f be       	out	0x3f, r0	; 63
     75c:	cd bf       	out	0x3d, r28	; 61
     75e:	df 91       	pop	r29
     760:	cf 91       	pop	r28
     762:	08 95       	ret

00000764 <__vector_1>:

	return message;
}

//Interrupt routine for CAN bus
ISR(INT0_vect){
     764:	1f 92       	push	r1
     766:	0f 92       	push	r0
     768:	0f b6       	in	r0, 0x3f	; 63
     76a:	0f 92       	push	r0
     76c:	11 24       	eor	r1, r1
     76e:	0b b6       	in	r0, 0x3b	; 59
     770:	0f 92       	push	r0
     772:	2f 93       	push	r18
     774:	3f 93       	push	r19
     776:	4f 93       	push	r20
     778:	5f 93       	push	r21
     77a:	6f 93       	push	r22
     77c:	7f 93       	push	r23
     77e:	8f 93       	push	r24
     780:	9f 93       	push	r25
     782:	af 93       	push	r26
     784:	bf 93       	push	r27
     786:	ef 93       	push	r30
     788:	ff 93       	push	r31
	can_interrupt_vector();
     78a:	ca df       	rcall	.-108    	; 0x720 <can_interrupt_vector>
}
     78c:	ff 91       	pop	r31
     78e:	ef 91       	pop	r30
     790:	bf 91       	pop	r27
     792:	af 91       	pop	r26
     794:	9f 91       	pop	r25
     796:	8f 91       	pop	r24
     798:	7f 91       	pop	r23
     79a:	6f 91       	pop	r22
     79c:	5f 91       	pop	r21
     79e:	4f 91       	pop	r20
     7a0:	3f 91       	pop	r19
     7a2:	2f 91       	pop	r18
     7a4:	0f 90       	pop	r0
     7a6:	0b be       	out	0x3b, r0	; 59
     7a8:	0f 90       	pop	r0
     7aa:	0f be       	out	0x3f, r0	; 63
     7ac:	0f 90       	pop	r0
     7ae:	1f 90       	pop	r1
     7b0:	18 95       	reti

000007b2 <max520_init>:

#define  MAX520_TWI_ADDR_BASE 0b01010000

static uint8_t twi_address = 0b000;

void max520_init(uint8_t max520_twi_addr){
     7b2:	cf 93       	push	r28
     7b4:	c8 2f       	mov	r28, r24
	TWI_Master_Initialise();
     7b6:	cf d1       	rcall	.+926    	; 0xb56 <TWI_Master_Initialise>
	sei();
     7b8:	78 94       	sei
	twi_address = max520_twi_addr;
     7ba:	c0 93 25 03 	sts	0x0325, r28
}
     7be:	cf 91       	pop	r28
     7c0:	08 95       	ret

000007c2 <max520_write>:

void max520_write(uint8_t channel, uint8_t val){
     7c2:	cf 93       	push	r28
     7c4:	df 93       	push	r29
     7c6:	00 d0       	rcall	.+0      	; 0x7c8 <max520_write+0x6>
     7c8:	cd b7       	in	r28, 0x3d	; 61
     7ca:	de b7       	in	r29, 0x3e	; 62
	uint8_t message[3] = {	MAX520_TWI_ADDR_BASE | ((twi_address & 0x07) << 1),
     7cc:	90 91 25 03 	lds	r25, 0x0325
     7d0:	97 70       	andi	r25, 0x07	; 7
     7d2:	99 0f       	add	r25, r25
     7d4:	90 65       	ori	r25, 0x50	; 80
     7d6:	99 83       	std	Y+1, r25	; 0x01
     7d8:	87 70       	andi	r24, 0x07	; 7
     7da:	8a 83       	std	Y+2, r24	; 0x02
     7dc:	6b 83       	std	Y+3, r22	; 0x03
							channel & 0x07,
							val	};
	
	TWI_Start_Transceiver_With_Data(message, 3);
     7de:	63 e0       	ldi	r22, 0x03	; 3
     7e0:	ce 01       	movw	r24, r28
     7e2:	01 96       	adiw	r24, 0x01	; 1
     7e4:	c2 d1       	rcall	.+900    	; 0xb6a <TWI_Start_Transceiver_With_Data>
}
     7e6:	0f 90       	pop	r0
     7e8:	0f 90       	pop	r0
     7ea:	0f 90       	pop	r0
     7ec:	df 91       	pop	r29
     7ee:	cf 91       	pop	r28
     7f0:	08 95       	ret

000007f2 <mcp2515_bit_modify>:
	spi_select();
	spi_send(command);
	spi_deselect();
}

void mcp2515_bit_modify(uint8_t address, uint8_t mask, uint8_t data){
     7f2:	1f 93       	push	r17
     7f4:	cf 93       	push	r28
     7f6:	df 93       	push	r29
     7f8:	18 2f       	mov	r17, r24
     7fa:	d6 2f       	mov	r29, r22
     7fc:	c4 2f       	mov	r28, r20
	spi_select();
     7fe:	e7 d0       	rcall	.+462    	; 0x9ce <spi_select>

	spi_send(MCP_BITMOD);
     800:	85 e0       	ldi	r24, 0x05	; 5
     802:	d9 d0       	rcall	.+434    	; 0x9b6 <spi_send>
	spi_send(address);
     804:	81 2f       	mov	r24, r17
     806:	d7 d0       	rcall	.+430    	; 0x9b6 <spi_send>
	spi_send(mask);
     808:	8d 2f       	mov	r24, r29
     80a:	d5 d0       	rcall	.+426    	; 0x9b6 <spi_send>
	spi_send(data);
     80c:	8c 2f       	mov	r24, r28
     80e:	d3 d0       	rcall	.+422    	; 0x9b6 <spi_send>

	spi_deselect();
     810:	e0 d0       	rcall	.+448    	; 0x9d2 <spi_deselect>
}
     812:	df 91       	pop	r29
     814:	cf 91       	pop	r28
     816:	1f 91       	pop	r17
     818:	08 95       	ret

0000081a <mcp2515_reset>:

void mcp2515_reset(){
	spi_select();
     81a:	d9 d0       	rcall	.+434    	; 0x9ce <spi_select>
	spi_send(MCP_RESET);	
     81c:	80 ec       	ldi	r24, 0xC0	; 192
     81e:	cb d0       	rcall	.+406    	; 0x9b6 <spi_send>
	spi_deselect();
     820:	d8 c0       	rjmp	.+432    	; 0x9d2 <spi_deselect>
     822:	08 95       	ret

00000824 <mcp2515_read>:
}


uint8_t mcp2515_read(uint8_t address){
     824:	cf 93       	push	r28
     826:	c8 2f       	mov	r28, r24
	uint8_t result;

	spi_select();
     828:	d2 d0       	rcall	.+420    	; 0x9ce <spi_select>
	
	//Send command and address, then read result
	spi_send(MCP_READ);
     82a:	83 e0       	ldi	r24, 0x03	; 3
     82c:	c4 d0       	rcall	.+392    	; 0x9b6 <spi_send>
	spi_send(address);
     82e:	8c 2f       	mov	r24, r28
     830:	c2 d0       	rcall	.+388    	; 0x9b6 <spi_send>

	result = spi_read();
     832:	c6 d0       	rcall	.+396    	; 0x9c0 <spi_read>
     834:	c8 2f       	mov	r28, r24
	spi_deselect();
     836:	cd d0       	rcall	.+410    	; 0x9d2 <spi_deselect>

	return result;	
}
     838:	8c 2f       	mov	r24, r28
     83a:	cf 91       	pop	r28
     83c:	08 95       	ret

0000083e <mcp2515_init>:
#include <util/delay.h>
#include "uart_driver.h"
#include "spi_driver.h"
#include "mcp2515_driver.h"

void mcp2515_init() {
     83e:	cf 93       	push	r28
     840:	df 93       	push	r29
     842:	1f 92       	push	r1
     844:	cd b7       	in	r28, 0x3d	; 61
     846:	de b7       	in	r29, 0x3e	; 62
	//NO NEED, ALREADY ENABLED
	//Enable interrupt when message is recieved (RX0IE = 1)
	//mcp2515_bit_modify(MCP_CANINTE, 0x01, 0xff);

	//Start SPI driver
	spi_init();
     848:	ae d0       	rcall	.+348    	; 0x9a6 <spi_init>

	mcp2515_reset();
     84a:	e7 df       	rcall	.-50     	; 0x81a <mcp2515_reset>
	
	//Testing for correct initialization
	value_check = mcp2515_read(MCP_CANSTAT);
     84c:	8e e0       	ldi	r24, 0x0E	; 14
     84e:	ea df       	rcall	.-44     	; 0x824 <mcp2515_read>
     850:	89 83       	std	Y+1, r24	; 0x01
	
	if ((value_check & MODE_MASK) != MODE_CONFIG) {
     852:	89 81       	ldd	r24, Y+1	; 0x01
     854:	80 7e       	andi	r24, 0xE0	; 224
     856:	80 38       	cpi	r24, 0x80	; 128
     858:	21 f0       	breq	.+8      	; 0x862 <mcp2515_init+0x24>
		printf("MCP2515 is not in config mode after reset\n");
     85a:	85 eb       	ldi	r24, 0xB5	; 181
     85c:	92 e0       	ldi	r25, 0x02	; 2
     85e:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <puts>
	} else {
		;//printf("MCP2515 is in config mode after reset\n");
	}
}
     862:	0f 90       	pop	r0
     864:	df 91       	pop	r29
     866:	cf 91       	pop	r28
     868:	08 95       	ret

0000086a <motor_output_enable>:
	} else {
		PORTC |= (1<<MOTOR_DIR);
	}
}

void motor_velocity(float velocity){
     86a:	88 23       	and	r24, r24
     86c:	31 f0       	breq	.+12     	; 0x87a <motor_output_enable+0x10>
     86e:	47 98       	cbi	0x08, 7	; 8
     870:	8a e6       	ldi	r24, 0x6A	; 106
     872:	8a 95       	dec	r24
     874:	f1 f7       	brne	.-4      	; 0x872 <motor_output_enable+0x8>
     876:	00 c0       	rjmp	.+0      	; 0x878 <motor_output_enable+0xe>
     878:	08 95       	ret
     87a:	47 9a       	sbi	0x08, 7	; 8
     87c:	08 95       	ret

0000087e <motor_encoder_reset>:
     87e:	46 98       	cbi	0x08, 6	; 8
     880:	8a e6       	ldi	r24, 0x6A	; 106
     882:	8a 95       	dec	r24
     884:	f1 f7       	brne	.-4      	; 0x882 <motor_encoder_reset+0x4>
     886:	00 c0       	rjmp	.+0      	; 0x888 <motor_encoder_reset+0xa>
     888:	46 9a       	sbi	0x08, 6	; 8
     88a:	08 95       	ret

0000088c <motor_encoder_select_byte>:
     88c:	88 23       	and	r24, r24
     88e:	11 f0       	breq	.+4      	; 0x894 <motor_encoder_select_byte+0x8>
     890:	45 9a       	sbi	0x08, 5	; 8
     892:	01 c0       	rjmp	.+2      	; 0x896 <motor_encoder_select_byte+0xa>
     894:	45 98       	cbi	0x08, 5	; 8
     896:	8a e6       	ldi	r24, 0x6A	; 106
     898:	8a 95       	dec	r24
     89a:	f1 f7       	brne	.-4      	; 0x898 <motor_encoder_select_byte+0xc>
     89c:	00 c0       	rjmp	.+0      	; 0x89e <motor_encoder_select_byte+0x12>
     89e:	08 95       	ret

000008a0 <motor_enable>:
     8a0:	88 23       	and	r24, r24
     8a2:	11 f0       	breq	.+4      	; 0x8a8 <motor_enable+0x8>
     8a4:	44 9a       	sbi	0x08, 4	; 8
     8a6:	08 95       	ret
     8a8:	44 98       	cbi	0x08, 4	; 8
     8aa:	08 95       	ret

000008ac <motor_speed>:
     8ac:	68 2f       	mov	r22, r24
     8ae:	80 e0       	ldi	r24, 0x00	; 0
     8b0:	88 cf       	rjmp	.-240    	; 0x7c2 <max520_write>
     8b2:	08 95       	ret

000008b4 <motor_init>:
     8b4:	80 e0       	ldi	r24, 0x00	; 0
     8b6:	7d df       	rcall	.-262    	; 0x7b2 <max520_init>
     8b8:	87 b1       	in	r24, 0x07	; 7
     8ba:	88 6f       	ori	r24, 0xF8	; 248
     8bc:	87 b9       	out	0x07, r24	; 7
     8be:	10 92 07 01 	sts	0x0107, r1
     8c2:	81 e0       	ldi	r24, 0x01	; 1
     8c4:	d2 df       	rcall	.-92     	; 0x86a <motor_output_enable>
     8c6:	db df       	rcall	.-74     	; 0x87e <motor_encoder_reset>
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	e0 df       	rcall	.-64     	; 0x88c <motor_encoder_select_byte>
     8cc:	80 e0       	ldi	r24, 0x00	; 0
     8ce:	ee df       	rcall	.-36     	; 0x8ac <motor_speed>
     8d0:	81 e0       	ldi	r24, 0x01	; 1
     8d2:	e6 cf       	rjmp	.-52     	; 0x8a0 <motor_enable>
     8d4:	08 95       	ret

000008d6 <motor_direction>:
     8d6:	81 30       	cpi	r24, 0x01	; 1
     8d8:	11 f4       	brne	.+4      	; 0x8de <motor_direction+0x8>
     8da:	43 98       	cbi	0x08, 3	; 8
     8dc:	08 95       	ret
     8de:	43 9a       	sbi	0x08, 3	; 8
     8e0:	08 95       	ret

000008e2 <reverse_bits>:
	//do something useful
}

uint8_t reverse_bits(uint8_t val) {
	val = ((val & 0x55) << 1) | ((val & 0xaa) >> 1);
     8e2:	28 2f       	mov	r18, r24
     8e4:	2a 7a       	andi	r18, 0xAA	; 170
     8e6:	26 95       	lsr	r18
     8e8:	98 2f       	mov	r25, r24
     8ea:	95 75       	andi	r25, 0x55	; 85
     8ec:	99 0f       	add	r25, r25
     8ee:	92 2b       	or	r25, r18
	val = ((val & 0x33) << 2) | ((val & 0xcc) >> 2);
     8f0:	29 2f       	mov	r18, r25
     8f2:	2c 7c       	andi	r18, 0xCC	; 204
     8f4:	26 95       	lsr	r18
     8f6:	26 95       	lsr	r18
     8f8:	89 2f       	mov	r24, r25
     8fa:	83 73       	andi	r24, 0x33	; 51
     8fc:	88 0f       	add	r24, r24
     8fe:	88 0f       	add	r24, r24
     900:	82 2b       	or	r24, r18
	val = ((val & 0x0f) << 4) | ((val & 0xf0) >> 4);
	return val;
}
     902:	82 95       	swap	r24
     904:	08 95       	ret

00000906 <motor_encoder_read>:

int16_t motor_encoder_read(){
     906:	1f 93       	push	r17
     908:	cf 93       	push	r28
     90a:	df 93       	push	r29
	motor_output_enable(ENABLE);
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	ad df       	rcall	.-166    	; 0x86a <motor_output_enable>
	
	motor_encoder_select_byte(ENCODER_HIGH);
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	bc df       	rcall	.-136    	; 0x88c <motor_encoder_select_byte>
	uint8_t msb = reverse_bits(PINK);
     914:	c6 e0       	ldi	r28, 0x06	; 6
     916:	d1 e0       	ldi	r29, 0x01	; 1
     918:	88 81       	ld	r24, Y
     91a:	e3 df       	rcall	.-58     	; 0x8e2 <reverse_bits>
     91c:	18 2f       	mov	r17, r24
	motor_encoder_select_byte(ENCODER_LOW);
     91e:	81 e0       	ldi	r24, 0x01	; 1
     920:	b5 df       	rcall	.-150    	; 0x88c <motor_encoder_select_byte>
	uint8_t lsb = reverse_bits(PINK);	
     922:	88 81       	ld	r24, Y
     924:	de df       	rcall	.-68     	; 0x8e2 <reverse_bits>
     926:	c8 2f       	mov	r28, r24
	
	motor_output_enable(DISABLE);
     928:	80 e0       	ldi	r24, 0x00	; 0
     92a:	9f df       	rcall	.-194    	; 0x86a <motor_output_enable>
	//motor_encoder_reset();
	//return reverse_bits(PINK); //temporary
	return -((msb << 8) | lsb);
     92c:	2c 2f       	mov	r18, r28
     92e:	30 e0       	ldi	r19, 0x00	; 0
     930:	c9 01       	movw	r24, r18
     932:	91 2b       	or	r25, r17
}
     934:	91 95       	neg	r25
     936:	81 95       	neg	r24
     938:	91 09       	sbc	r25, r1
     93a:	df 91       	pop	r29
     93c:	cf 91       	pop	r28
     93e:	1f 91       	pop	r17
     940:	08 95       	ret

00000942 <pwm_init>:
#define UNDERFLOW_FIX 32
#define VAL_SCALE (MAX_SERVO - MIN_SERVO) 

void pwm_init(){
	//PWM output active (pin5)
	DDRE   |=  (1<<PE3);
     942:	6b 9a       	sbi	0x0d, 3	; 13
/*
	TCCR3B |=  (1<<CS30) | (1 << CS31);
	TCCR3B &= ~(1<<CS32);*/

	//CS3{2:0}   = 010  prescaler set to 8
	TCCR3B |=   (1<<CS31);
     944:	a1 e9       	ldi	r26, 0x91	; 145
     946:	b0 e0       	ldi	r27, 0x00	; 0
     948:	8c 91       	ld	r24, X
     94a:	82 60       	ori	r24, 0x02	; 2
     94c:	8c 93       	st	X, r24
	TCCR3B &= ~((1<<CS32) | (1<<CS30));
     94e:	8c 91       	ld	r24, X
     950:	8a 7f       	andi	r24, 0xFA	; 250
     952:	8c 93       	st	X, r24
	
	//WGM3{3:0}  = 1110 mode set to fast PWM
	TCCR3A |=  (1<<WGM31);
     954:	e0 e9       	ldi	r30, 0x90	; 144
     956:	f0 e0       	ldi	r31, 0x00	; 0
     958:	80 81       	ld	r24, Z
     95a:	82 60       	ori	r24, 0x02	; 2
     95c:	80 83       	st	Z, r24
	TCCR3A &= ~(1<<WGM30);
     95e:	80 81       	ld	r24, Z
     960:	8e 7f       	andi	r24, 0xFE	; 254
     962:	80 83       	st	Z, r24
	TCCR3B |=  (1<<WGM33) | (1<<WGM32);
     964:	8c 91       	ld	r24, X
     966:	88 61       	ori	r24, 0x18	; 24
     968:	8c 93       	st	X, r24
	
	//COM3A{1:0} = 10   clear bit on ICR3 compare
	TCCR3A |=  (1<<COM3A1);
     96a:	80 81       	ld	r24, Z
     96c:	80 68       	ori	r24, 0x80	; 128
     96e:	80 83       	st	Z, r24
	TCCR3A &= ~(1<<COM3A0);
     970:	80 81       	ld	r24, Z
     972:	8f 7b       	andi	r24, 0xBF	; 191
     974:	80 83       	st	Z, r24
	
	//Setting ICR3 to DUTY_CYCLE_STEPS (20ms)
	ICR3 = DUTY_CYCLE_STEPS;
     976:	80 e4       	ldi	r24, 0x40	; 64
     978:	9c e9       	ldi	r25, 0x9C	; 156
     97a:	90 93 97 00 	sts	0x0097, r25
     97e:	80 93 96 00 	sts	0x0096, r24
	pwm_set_value(MID_SERVO);
}

void pwm_set_value(uint16_t val) {
	OCR3A = val;
     982:	88 eb       	ldi	r24, 0xB8	; 184
     984:	9b e0       	ldi	r25, 0x0B	; 11
     986:	90 93 99 00 	sts	0x0099, r25
     98a:	80 93 98 00 	sts	0x0098, r24
     98e:	08 95       	ret

00000990 <solenoid_init>:

#include <avr/io.h>
#include <avr/delay.h>

void solenoid_init(){
	DDRH |= (1<<PH3);
     990:	e1 e0       	ldi	r30, 0x01	; 1
     992:	f1 e0       	ldi	r31, 0x01	; 1
     994:	80 81       	ld	r24, Z
     996:	88 60       	ori	r24, 0x08	; 8
     998:	80 83       	st	Z, r24
	PORTH |= (1<<PH3);
     99a:	e2 e0       	ldi	r30, 0x02	; 2
     99c:	f1 e0       	ldi	r31, 0x01	; 1
     99e:	80 81       	ld	r24, Z
     9a0:	88 60       	ori	r24, 0x08	; 8
     9a2:	80 83       	st	Z, r24
     9a4:	08 95       	ret

000009a6 <spi_init>:
#define SPI_MISO PB3
#define SPI_SCK PB1 

void spi_init(){
	//Set MOSI, SCK and SS as output pins 	
	DDRB |= (1 << SPI_MOSI) | (1 << SPI_SCK) | (1 << SPI_SS);
     9a6:	84 b1       	in	r24, 0x04	; 4
     9a8:	87 60       	ori	r24, 0x07	; 7
     9aa:	84 b9       	out	0x04, r24	; 4
	
	//Set MISO as input pin
	DDRB &= ~(1 << SPI_MISO);
     9ac:	23 98       	cbi	0x04, 3	; 4
	
	//Enable SPI in master mode and set clock rate fosc/16
	SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0);
     9ae:	8c b5       	in	r24, 0x2c	; 44
     9b0:	81 65       	ori	r24, 0x51	; 81
     9b2:	8c bd       	out	0x2c, r24	; 44
     9b4:	08 95       	ret

000009b6 <spi_send>:
	return SPDR;
}

void spi_send(char data){
	//Start transmission
	SPDR = data;
     9b6:	8e bd       	out	0x2e, r24	; 46
	
	//Wait for transmission, checks if register is empty 
	while(!(SPSR & (1 << SPIF)));
     9b8:	0d b4       	in	r0, 0x2d	; 45
     9ba:	07 fe       	sbrs	r0, 7
     9bc:	fd cf       	rjmp	.-6      	; 0x9b8 <spi_send+0x2>
}
     9be:	08 95       	ret

000009c0 <spi_read>:
}


uint8_t spi_read(){
	//Dummy send in order to read from slave
	spi_send(0xaa);
     9c0:	8a ea       	ldi	r24, 0xAA	; 170
     9c2:	f9 df       	rcall	.-14     	; 0x9b6 <spi_send>
	
	while(!(SPSR & (1 << SPIF)));
     9c4:	0d b4       	in	r0, 0x2d	; 45
     9c6:	07 fe       	sbrs	r0, 7
     9c8:	fd cf       	rjmp	.-6      	; 0x9c4 <spi_read+0x4>

	return SPDR;
     9ca:	8e b5       	in	r24, 0x2e	; 46
}
     9cc:	08 95       	ret

000009ce <spi_select>:
	while(!(SPSR & (1 << SPIF)));
}

void spi_select(){
	//Set !SS to 0 for selection of slave
	PORTB &= ~(1 << SPI_SS);
     9ce:	28 98       	cbi	0x05, 0	; 5
     9d0:	08 95       	ret

000009d2 <spi_deselect>:
}

void spi_deselect(){
	//Set !SS to 1 for deselection of slave
	PORTB |= (1 << SPI_SS);
     9d2:	28 9a       	sbi	0x05, 0	; 5
     9d4:	08 95       	ret

000009d6 <uart_sendChar>:

}

void uart_sendChar(unsigned char data){
	//Wait for empty transmitter buffer
	while(!(UCSR0A & (1<<UDRE0)));
     9d6:	e0 ec       	ldi	r30, 0xC0	; 192
     9d8:	f0 e0       	ldi	r31, 0x00	; 0
     9da:	90 81       	ld	r25, Z
     9dc:	95 ff       	sbrs	r25, 5
     9de:	fd cf       	rjmp	.-6      	; 0x9da <uart_sendChar+0x4>
		
	//Put data into buffer, then send the data
	UDR0 = data;
     9e0:	80 93 c6 00 	sts	0x00C6, r24
     9e4:	08 95       	ret

000009e6 <uart_getChar>:
}


unsigned int uart_getChar(){
	//Wait for the data to be received 
	while(!(UCSR0A & (1<<RXC0))){}
     9e6:	e0 ec       	ldi	r30, 0xC0	; 192
     9e8:	f0 e0       	ldi	r31, 0x00	; 0
     9ea:	80 81       	ld	r24, Z
     9ec:	88 23       	and	r24, r24
     9ee:	ec f7       	brge	.-6      	; 0x9ea <uart_getChar+0x4>
	
	//Get status and the 9th bit, then data from buffer
	return UDR0;
     9f0:	80 91 c6 00 	lds	r24, 0x00C6
}
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	08 95       	ret

000009f8 <uart_init>:

static FILE uart_io = FDEV_SETUP_STREAM(uart_sendChar, uart_getChar, _FDEV_SETUP_RW);

void uart_init(unsigned int ubrr){
	//Set baud rate
	UBRR0L = (unsigned int) ubrr;
     9f8:	80 93 c4 00 	sts	0x00C4, r24
	
	//Enable receiver and transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
     9fc:	88 e1       	ldi	r24, 0x18	; 24
     9fe:	80 93 c1 00 	sts	0x00C1, r24
	
	stdout = &uart_io;
     a02:	80 e0       	ldi	r24, 0x00	; 0
     a04:	92 e0       	ldi	r25, 0x02	; 2
     a06:	90 93 63 03 	sts	0x0363, r25
     a0a:	80 93 62 03 	sts	0x0362, r24
	stdin = &uart_io;
     a0e:	90 93 61 03 	sts	0x0361, r25
     a12:	80 93 60 03 	sts	0x0360, r24
     a16:	08 95       	ret

00000a18 <ir_obstructed>:
	for (uint8_t i = 0; i < FILTER_BUFFER_SIZE; i++ ){
		ir_obstructed();
	}
}

uint8_t ir_obstructed(){
     a18:	cf 93       	push	r28
     a1a:	df 93       	push	r29
	static uint16_t ringbuffer_filter[FILTER_BUFFER_SIZE];
	static uint8_t ringbuffer_index;

	//return adc_read(IR_CHANNEL);

	if (ringbuffer_index >= FILTER_BUFFER_SIZE - 1){
     a1c:	80 91 46 03 	lds	r24, 0x0346
     a20:	8f 30       	cpi	r24, 0x0F	; 15
     a22:	18 f0       	brcs	.+6      	; 0xa2a <ir_obstructed+0x12>
		ringbuffer_index = 0;
     a24:	10 92 46 03 	sts	0x0346, r1
     a28:	03 c0       	rjmp	.+6      	; 0xa30 <ir_obstructed+0x18>
	} else { ringbuffer_index++; }
     a2a:	8f 5f       	subi	r24, 0xFF	; 255
     a2c:	80 93 46 03 	sts	0x0346, r24
			
	ringbuffer_filter[ringbuffer_index] = adc_read(IR_CHANNEL) / FILTER_BUFFER_SIZE;
     a30:	c0 91 46 03 	lds	r28, 0x0346
     a34:	d0 e0       	ldi	r29, 0x00	; 0
     a36:	80 e0       	ldi	r24, 0x00	; 0
     a38:	81 dd       	rcall	.-1278   	; 0x53c <adc_read>
     a3a:	cc 0f       	add	r28, r28
     a3c:	dd 1f       	adc	r29, r29
     a3e:	ca 5d       	subi	r28, 0xDA	; 218
     a40:	dc 4f       	sbci	r29, 0xFC	; 252
     a42:	92 95       	swap	r25
     a44:	82 95       	swap	r24
     a46:	8f 70       	andi	r24, 0x0F	; 15
     a48:	89 27       	eor	r24, r25
     a4a:	9f 70       	andi	r25, 0x0F	; 15
     a4c:	89 27       	eor	r24, r25
     a4e:	99 83       	std	Y+1, r25	; 0x01
     a50:	88 83       	st	Y, r24
     a52:	e6 e2       	ldi	r30, 0x26	; 38
     a54:	f3 e0       	ldi	r31, 0x03	; 3
     a56:	46 e4       	ldi	r20, 0x46	; 70
     a58:	53 e0       	ldi	r21, 0x03	; 3



	uint16_t avg = 0;
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t i = 0; i < FILTER_BUFFER_SIZE; i++) {
		avg += ringbuffer_filter[i] ;
     a5e:	81 91       	ld	r24, Z+
     a60:	91 91       	ld	r25, Z+
     a62:	28 0f       	add	r18, r24
     a64:	39 1f       	adc	r19, r25
	ringbuffer_filter[ringbuffer_index] = adc_read(IR_CHANNEL) / FILTER_BUFFER_SIZE;



	uint16_t avg = 0;
	for (uint8_t i = 0; i < FILTER_BUFFER_SIZE; i++) {
     a66:	e4 17       	cp	r30, r20
     a68:	f5 07       	cpc	r31, r21
     a6a:	c9 f7       	brne	.-14     	; 0xa5e <ir_obstructed+0x46>
		printf(", %d", ringbuffer_filter[i]);
	}
	printf(" ]\n");*/

	
	if (avg < FILTER_THRESHOLD) {
     a6c:	81 e0       	ldi	r24, 0x01	; 1
     a6e:	22 33       	cpi	r18, 0x32	; 50
     a70:	31 05       	cpc	r19, r1
     a72:	08 f0       	brcs	.+2      	; 0xa76 <ir_obstructed+0x5e>
     a74:	80 e0       	ldi	r24, 0x00	; 0
		return 1;
	}

	return 0;
}
     a76:	df 91       	pop	r29
     a78:	cf 91       	pop	r28
     a7a:	08 95       	ret

00000a7c <ir_filter_init>:
#include "Drivers/uart_driver.h"

#define FILTER_THRESHOLD 50
#define FILTER_BUFFER_SIZE 16

void ir_filter_init() {
     a7c:	cf 93       	push	r28
     a7e:	c0 e1       	ldi	r28, 0x10	; 16
	for (uint8_t i = 0; i < FILTER_BUFFER_SIZE; i++ ){
		ir_obstructed();
     a80:	cb df       	rcall	.-106    	; 0xa18 <ir_obstructed>
     a82:	c1 50       	subi	r28, 0x01	; 1

#define FILTER_THRESHOLD 50
#define FILTER_BUFFER_SIZE 16

void ir_filter_init() {
	for (uint8_t i = 0; i < FILTER_BUFFER_SIZE; i++ ){
     a84:	e9 f7       	brne	.-6      	; 0xa80 <ir_filter_init+0x4>
		ir_obstructed();
	}
}
     a86:	cf 91       	pop	r28
     a88:	08 95       	ret

00000a8a <main>:
#include "ir.h"
#include "test_node_2.h"
#include "timer.h"

int main(void){
	uart_init(MYUBRR);
     a8a:	87 e6       	ldi	r24, 0x67	; 103
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	b4 df       	rcall	.-152    	; 0x9f8 <uart_init>
	can_init();
     a90:	66 dd       	rcall	.-1332   	; 0x55e <can_init>
	pwm_init();
     a92:	57 df       	rcall	.-338    	; 0x942 <pwm_init>
	printf("ir\n");
     a94:	86 e1       	ldi	r24, 0x16	; 22
     a96:	93 e0       	ldi	r25, 0x03	; 3
     a98:	e2 d7       	rcall	.+4036   	; 0x1a5e <puts>
	adc_init();
     a9a:	42 dd       	rcall	.-1404   	; 0x520 <adc_init>
	ir_filter_init();
     a9c:	ef df       	rcall	.-34     	; 0xa7c <ir_filter_init>
	solenoid_init();
     a9e:	78 df       	rcall	.-272    	; 0x990 <solenoid_init>
	motor_init();
     aa0:	09 df       	rcall	.-494    	; 0x8b4 <motor_init>
	pi_init();
     aa2:	56 dc       	rcall	.-1876   	; 0x350 <pi_init>
     aa4:	2f ef       	ldi	r18, 0xFF	; 255
     aa6:	83 ed       	ldi	r24, 0xD3	; 211
     aa8:	90 e3       	ldi	r25, 0x30	; 48
     aaa:	21 50       	subi	r18, 0x01	; 1
     aac:	80 40       	sbci	r24, 0x00	; 0
     aae:	90 40       	sbci	r25, 0x00	; 0
     ab0:	e1 f7       	brne	.-8      	; 0xaaa <main+0x20>
     ab2:	00 c0       	rjmp	.+0      	; 0xab4 <main+0x2a>
     ab4:	00 00       	nop
	_delay_ms(1000);
	timer_init(); //should be last, starts interrupts
     ab6:	01 d0       	rcall	.+2      	; 0xaba <timer_init>
     ab8:	ff cf       	rjmp	.-2      	; 0xab8 <main+0x2e>

00000aba <timer_init>:
#include "Drivers/can_driver.h"
#include "Controller/pi.h"

void timer_init() {
	//CS3{2:0}   = 101  prescaler set to 1024
	TCCR4B |=  (1<<CS42) | (1<<CS40);
     aba:	e1 ea       	ldi	r30, 0xA1	; 161
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	80 81       	ld	r24, Z
     ac0:	85 60       	ori	r24, 0x05	; 5
     ac2:	80 83       	st	Z, r24
	TCCR4B &= ~(1<<CS41);
     ac4:	80 81       	ld	r24, Z
     ac6:	8d 7f       	andi	r24, 0xFD	; 253
     ac8:	80 83       	st	Z, r24
	
	TCCR4A &= ~(1<<WGM40);
     aca:	a0 ea       	ldi	r26, 0xA0	; 160
     acc:	b0 e0       	ldi	r27, 0x00	; 0
     ace:	8c 91       	ld	r24, X
     ad0:	8e 7f       	andi	r24, 0xFE	; 254
     ad2:	8c 93       	st	X, r24
	TCCR4A &= ~(1<<WGM41);
     ad4:	8c 91       	ld	r24, X
     ad6:	8d 7f       	andi	r24, 0xFD	; 253
     ad8:	8c 93       	st	X, r24
	TCCR4B |=  (1<<WGM42);
     ada:	80 81       	ld	r24, Z
     adc:	88 60       	ori	r24, 0x08	; 8
     ade:	80 83       	st	Z, r24
	TCCR4B &= ~(1<<WGM43);
     ae0:	80 81       	ld	r24, Z
     ae2:	8f 7e       	andi	r24, 0xEF	; 239
     ae4:	80 83       	st	Z, r24
	//TCCR3A |=  (1<<COM3A1) | (1<<COM3A0);
	
	OCR4A = TIMER4_OCRA; // 223 for 70 HZ, 7812 for 2 Hz
     ae6:	8d e0       	ldi	r24, 0x0D	; 13
     ae8:	93 e0       	ldi	r25, 0x03	; 3
     aea:	90 93 a9 00 	sts	0x00A9, r25
     aee:	80 93 a8 00 	sts	0x00A8, r24
	
	//enable interrupt on OCR3A compare

	TIMSK4 |= (1<<OCIE4A);
     af2:	e2 e7       	ldi	r30, 0x72	; 114
     af4:	f0 e0       	ldi	r31, 0x00	; 0
     af6:	80 81       	ld	r24, Z
     af8:	82 60       	ori	r24, 0x02	; 2
     afa:	80 83       	st	Z, r24
	TIFR4 |= (1<<ICF1);
     afc:	cd 9a       	sbi	0x19, 5	; 25
	
	
	sei();
     afe:	78 94       	sei
     b00:	08 95       	ret

00000b02 <__vector_42>:
	
}


ISR(TIMER4_COMPA_vect){
     b02:	1f 92       	push	r1
     b04:	0f 92       	push	r0
     b06:	0f b6       	in	r0, 0x3f	; 63
     b08:	0f 92       	push	r0
     b0a:	11 24       	eor	r1, r1
     b0c:	0b b6       	in	r0, 0x3b	; 59
     b0e:	0f 92       	push	r0
     b10:	2f 93       	push	r18
     b12:	3f 93       	push	r19
     b14:	4f 93       	push	r20
     b16:	5f 93       	push	r21
     b18:	6f 93       	push	r22
     b1a:	7f 93       	push	r23
     b1c:	8f 93       	push	r24
     b1e:	9f 93       	push	r25
     b20:	af 93       	push	r26
     b22:	bf 93       	push	r27
     b24:	ef 93       	push	r30
     b26:	ff 93       	push	r31
		can_ir_transmit();
		
	}
	
	can_handle_message();*/
	pi_update_position();
     b28:	31 dc       	rcall	.-1950   	; 0x38c <pi_update_position>
	pi_update(0);
     b2a:	80 e0       	ldi	r24, 0x00	; 0
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	3e dc       	rcall	.-1924   	; 0x3ac <pi_update>
     b30:	ff 91       	pop	r31
     b32:	ef 91       	pop	r30
     b34:	bf 91       	pop	r27
     b36:	af 91       	pop	r26
     b38:	9f 91       	pop	r25
     b3a:	8f 91       	pop	r24
     b3c:	7f 91       	pop	r23
     b3e:	6f 91       	pop	r22
     b40:	5f 91       	pop	r21
     b42:	4f 91       	pop	r20
     b44:	3f 91       	pop	r19
     b46:	2f 91       	pop	r18
     b48:	0f 90       	pop	r0
     b4a:	0b be       	out	0x3b, r0	; 59
     b4c:	0f 90       	pop	r0
     b4e:	0f be       	out	0x3f, r0	; 63
     b50:	0f 90       	pop	r0
     b52:	1f 90       	pop	r1
     b54:	18 95       	reti

00000b56 <TWI_Master_Initialise>:
		{
			msg[ i ] = TWI_buf[ i ];
		}
	}
	return( TWI_statusReg.lastTransOK );
}
     b56:	8c e0       	ldi	r24, 0x0C	; 12
     b58:	80 93 b8 00 	sts	0x00B8, r24
     b5c:	8f ef       	ldi	r24, 0xFF	; 255
     b5e:	80 93 bb 00 	sts	0x00BB, r24
     b62:	84 e0       	ldi	r24, 0x04	; 4
     b64:	80 93 bc 00 	sts	0x00BC, r24
     b68:	08 95       	ret

00000b6a <TWI_Start_Transceiver_With_Data>:
     b6a:	ec eb       	ldi	r30, 0xBC	; 188
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	20 81       	ld	r18, Z
     b70:	20 fd       	sbrc	r18, 0
     b72:	fd cf       	rjmp	.-6      	; 0xb6e <TWI_Start_Transceiver_With_Data+0x4>
     b74:	60 93 49 03 	sts	0x0349, r22
     b78:	fc 01       	movw	r30, r24
     b7a:	20 81       	ld	r18, Z
     b7c:	20 93 4a 03 	sts	0x034A, r18
     b80:	20 fd       	sbrc	r18, 0
     b82:	0c c0       	rjmp	.+24     	; 0xb9c <TWI_Start_Transceiver_With_Data+0x32>
     b84:	62 30       	cpi	r22, 0x02	; 2
     b86:	50 f0       	brcs	.+20     	; 0xb9c <TWI_Start_Transceiver_With_Data+0x32>
     b88:	dc 01       	movw	r26, r24
     b8a:	11 96       	adiw	r26, 0x01	; 1
     b8c:	eb e4       	ldi	r30, 0x4B	; 75
     b8e:	f3 e0       	ldi	r31, 0x03	; 3
     b90:	81 e0       	ldi	r24, 0x01	; 1
     b92:	9d 91       	ld	r25, X+
     b94:	91 93       	st	Z+, r25
     b96:	8f 5f       	subi	r24, 0xFF	; 255
     b98:	86 13       	cpse	r24, r22
     b9a:	fb cf       	rjmp	.-10     	; 0xb92 <TWI_Start_Transceiver_With_Data+0x28>
     b9c:	10 92 48 03 	sts	0x0348, r1
     ba0:	88 ef       	ldi	r24, 0xF8	; 248
     ba2:	80 93 0e 02 	sts	0x020E, r24
     ba6:	85 ea       	ldi	r24, 0xA5	; 165
     ba8:	80 93 bc 00 	sts	0x00BC, r24
     bac:	08 95       	ret

00000bae <__vector_39>:
This function is the Interrupt Service Routine (ISR), and called when the TWI interrupt is triggered;
that is whenever a TWI event has occurred. This function should not be called directly from the main
application.
****************************************************************************/
ISR(TWI_vect)
{
     bae:	1f 92       	push	r1
     bb0:	0f 92       	push	r0
     bb2:	0f b6       	in	r0, 0x3f	; 63
     bb4:	0f 92       	push	r0
     bb6:	11 24       	eor	r1, r1
     bb8:	0b b6       	in	r0, 0x3b	; 59
     bba:	0f 92       	push	r0
     bbc:	2f 93       	push	r18
     bbe:	3f 93       	push	r19
     bc0:	8f 93       	push	r24
     bc2:	9f 93       	push	r25
     bc4:	af 93       	push	r26
     bc6:	bf 93       	push	r27
     bc8:	ef 93       	push	r30
     bca:	ff 93       	push	r31
	static unsigned char TWI_bufPtr;
	
	switch (TWSR)
     bcc:	80 91 b9 00 	lds	r24, 0x00B9
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	fc 01       	movw	r30, r24
     bd4:	38 97       	sbiw	r30, 0x08	; 8
     bd6:	e1 35       	cpi	r30, 0x51	; 81
     bd8:	f1 05       	cpc	r31, r1
     bda:	08 f0       	brcs	.+2      	; 0xbde <__vector_39+0x30>
     bdc:	55 c0       	rjmp	.+170    	; 0xc88 <__vector_39+0xda>
     bde:	ee 58       	subi	r30, 0x8E	; 142
     be0:	ff 4f       	sbci	r31, 0xFF	; 255
     be2:	06 c6       	rjmp	.+3084   	; 0x17f0 <__tablejump2__>
	{
		case TWI_START:             // START has been transmitted
		case TWI_REP_START:         // Repeated START has been transmitted
		TWI_bufPtr = 0;                                     // Set buffer pointer to the TWI Address location
     be4:	10 92 47 03 	sts	0x0347, r1
		case TWI_MTX_ADR_ACK:       // SLA+W has been tramsmitted and ACK received
		case TWI_MTX_DATA_ACK:      // Data byte has been tramsmitted and ACK received
		if (TWI_bufPtr < TWI_msgSize)
     be8:	e0 91 47 03 	lds	r30, 0x0347
     bec:	80 91 49 03 	lds	r24, 0x0349
     bf0:	e8 17       	cp	r30, r24
     bf2:	70 f4       	brcc	.+28     	; 0xc10 <__vector_39+0x62>
		{
			TWDR = TWI_buf[TWI_bufPtr++];
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	8e 0f       	add	r24, r30
     bf8:	80 93 47 03 	sts	0x0347, r24
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	e6 5b       	subi	r30, 0xB6	; 182
     c00:	fc 4f       	sbci	r31, 0xFC	; 252
     c02:	80 81       	ld	r24, Z
     c04:	80 93 bb 00 	sts	0x00BB, r24
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     c08:	85 e8       	ldi	r24, 0x85	; 133
     c0a:	80 93 bc 00 	sts	0x00BC, r24
     c0e:	43 c0       	rjmp	.+134    	; 0xc96 <__vector_39+0xe8>
			(1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag to send byte
			(0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           //
			(0<<TWWC);                                 //
		}else                    // Send STOP after last byte
		{
			TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully.
     c10:	80 91 48 03 	lds	r24, 0x0348
     c14:	81 60       	ori	r24, 0x01	; 1
     c16:	80 93 48 03 	sts	0x0348, r24
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     c1a:	84 e9       	ldi	r24, 0x94	; 148
     c1c:	80 93 bc 00 	sts	0x00BC, r24
     c20:	3a c0       	rjmp	.+116    	; 0xc96 <__vector_39+0xe8>
			(0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
			(0<<TWWC);                                 //
		}
		break;
		case TWI_MRX_DATA_ACK:      // Data byte has been received and ACK tramsmitted
		TWI_buf[TWI_bufPtr++] = TWDR;
     c22:	e0 91 47 03 	lds	r30, 0x0347
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	8e 0f       	add	r24, r30
     c2a:	80 93 47 03 	sts	0x0347, r24
     c2e:	80 91 bb 00 	lds	r24, 0x00BB
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	e6 5b       	subi	r30, 0xB6	; 182
     c36:	fc 4f       	sbci	r31, 0xFC	; 252
     c38:	80 83       	st	Z, r24
		case TWI_MRX_ADR_ACK:       // SLA+R has been tramsmitted and ACK received
		if (TWI_bufPtr < (TWI_msgSize-1) )                  // Detect the last byte to NACK it.
     c3a:	20 91 47 03 	lds	r18, 0x0347
     c3e:	30 e0       	ldi	r19, 0x00	; 0
     c40:	80 91 49 03 	lds	r24, 0x0349
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	01 97       	sbiw	r24, 0x01	; 1
     c48:	28 17       	cp	r18, r24
     c4a:	39 07       	cpc	r19, r25
     c4c:	24 f4       	brge	.+8      	; 0xc56 <__vector_39+0xa8>
		{
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     c4e:	85 ec       	ldi	r24, 0xC5	; 197
     c50:	80 93 bc 00 	sts	0x00BC, r24
     c54:	20 c0       	rjmp	.+64     	; 0xc96 <__vector_39+0xe8>
			(1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag to read next byte
			(1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send ACK after reception
			(0<<TWWC);                                 //
		}else                    // Send NACK after next reception
		{
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     c56:	85 e8       	ldi	r24, 0x85	; 133
     c58:	80 93 bc 00 	sts	0x00BC, r24
     c5c:	1c c0       	rjmp	.+56     	; 0xc96 <__vector_39+0xe8>
			(0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send NACK after reception
			(0<<TWWC);                                 //
		}
		break;
		case TWI_MRX_DATA_NACK:     // Data byte has been received and NACK tramsmitted
		TWI_buf[TWI_bufPtr] = TWDR;
     c5e:	80 91 bb 00 	lds	r24, 0x00BB
     c62:	e0 91 47 03 	lds	r30, 0x0347
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	e6 5b       	subi	r30, 0xB6	; 182
     c6a:	fc 4f       	sbci	r31, 0xFC	; 252
     c6c:	80 83       	st	Z, r24
		TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully.
     c6e:	80 91 48 03 	lds	r24, 0x0348
     c72:	81 60       	ori	r24, 0x01	; 1
     c74:	80 93 48 03 	sts	0x0348, r24
		TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     c78:	84 e9       	ldi	r24, 0x94	; 148
     c7a:	80 93 bc 00 	sts	0x00BC, r24
		(0<<TWIE)|(1<<TWINT)|                      // Disable TWI Interrupt and clear the flag
		(0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
		(0<<TWWC);                                 //
		break;
     c7e:	0b c0       	rjmp	.+22     	; 0xc96 <__vector_39+0xe8>
		case TWI_ARB_LOST:          // Arbitration lost
		TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     c80:	85 ea       	ldi	r24, 0xA5	; 165
     c82:	80 93 bc 00 	sts	0x00BC, r24
		(1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag
		(0<<TWEA)|(1<<TWSTA)|(0<<TWSTO)|           // Initiate a (RE)START condition.
		(0<<TWWC);                                 //
		break;
     c86:	07 c0       	rjmp	.+14     	; 0xc96 <__vector_39+0xe8>
		case TWI_MRX_ADR_NACK:      // SLA+R has been tramsmitted and NACK received
		case TWI_MTX_DATA_NACK:     // Data byte has been tramsmitted and NACK received
		//    case TWI_NO_STATE              // No relevant state information available; TWINT = ?0?
		case TWI_BUS_ERROR:         // Bus error due to an illegal START or STOP condition
		default:
		TWI_state = TWSR;                                 // Store TWSR and automatically sets clears noErrors bit.
     c88:	80 91 b9 00 	lds	r24, 0x00B9
     c8c:	80 93 0e 02 	sts	0x020E, r24
		// Reset TWI Interface
		TWCR = (1<<TWEN)|                                 // Enable TWI-interface and release TWI pins
     c90:	84 e0       	ldi	r24, 0x04	; 4
     c92:	80 93 bc 00 	sts	0x00BC, r24
		(0<<TWIE)|(0<<TWINT)|                      // Disable Interupt
		(0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // No Signal requests
		(0<<TWWC);                                 //
	}
     c96:	ff 91       	pop	r31
     c98:	ef 91       	pop	r30
     c9a:	bf 91       	pop	r27
     c9c:	af 91       	pop	r26
     c9e:	9f 91       	pop	r25
     ca0:	8f 91       	pop	r24
     ca2:	3f 91       	pop	r19
     ca4:	2f 91       	pop	r18
     ca6:	0f 90       	pop	r0
     ca8:	0b be       	out	0x3b, r0	; 59
     caa:	0f 90       	pop	r0
     cac:	0f be       	out	0x3f, r0	; 63
     cae:	0f 90       	pop	r0
     cb0:	1f 90       	pop	r1
     cb2:	18 95       	reti

00000cb4 <__subsf3>:
     cb4:	50 58       	subi	r21, 0x80	; 128

00000cb6 <__addsf3>:
     cb6:	bb 27       	eor	r27, r27
     cb8:	aa 27       	eor	r26, r26
     cba:	0e d0       	rcall	.+28     	; 0xcd8 <__addsf3x>
     cbc:	75 c1       	rjmp	.+746    	; 0xfa8 <__fp_round>
     cbe:	66 d1       	rcall	.+716    	; 0xf8c <__fp_pscA>
     cc0:	30 f0       	brcs	.+12     	; 0xcce <__addsf3+0x18>
     cc2:	6b d1       	rcall	.+726    	; 0xf9a <__fp_pscB>
     cc4:	20 f0       	brcs	.+8      	; 0xcce <__addsf3+0x18>
     cc6:	31 f4       	brne	.+12     	; 0xcd4 <__addsf3+0x1e>
     cc8:	9f 3f       	cpi	r25, 0xFF	; 255
     cca:	11 f4       	brne	.+4      	; 0xcd0 <__addsf3+0x1a>
     ccc:	1e f4       	brtc	.+6      	; 0xcd4 <__addsf3+0x1e>
     cce:	5b c1       	rjmp	.+694    	; 0xf86 <__fp_nan>
     cd0:	0e f4       	brtc	.+2      	; 0xcd4 <__addsf3+0x1e>
     cd2:	e0 95       	com	r30
     cd4:	e7 fb       	bst	r30, 7
     cd6:	51 c1       	rjmp	.+674    	; 0xf7a <__fp_inf>

00000cd8 <__addsf3x>:
     cd8:	e9 2f       	mov	r30, r25
     cda:	77 d1       	rcall	.+750    	; 0xfca <__fp_split3>
     cdc:	80 f3       	brcs	.-32     	; 0xcbe <__addsf3+0x8>
     cde:	ba 17       	cp	r27, r26
     ce0:	62 07       	cpc	r22, r18
     ce2:	73 07       	cpc	r23, r19
     ce4:	84 07       	cpc	r24, r20
     ce6:	95 07       	cpc	r25, r21
     ce8:	18 f0       	brcs	.+6      	; 0xcf0 <__addsf3x+0x18>
     cea:	71 f4       	brne	.+28     	; 0xd08 <__addsf3x+0x30>
     cec:	9e f5       	brtc	.+102    	; 0xd54 <__addsf3x+0x7c>
     cee:	8f c1       	rjmp	.+798    	; 0x100e <__fp_zero>
     cf0:	0e f4       	brtc	.+2      	; 0xcf4 <__addsf3x+0x1c>
     cf2:	e0 95       	com	r30
     cf4:	0b 2e       	mov	r0, r27
     cf6:	ba 2f       	mov	r27, r26
     cf8:	a0 2d       	mov	r26, r0
     cfa:	0b 01       	movw	r0, r22
     cfc:	b9 01       	movw	r22, r18
     cfe:	90 01       	movw	r18, r0
     d00:	0c 01       	movw	r0, r24
     d02:	ca 01       	movw	r24, r20
     d04:	a0 01       	movw	r20, r0
     d06:	11 24       	eor	r1, r1
     d08:	ff 27       	eor	r31, r31
     d0a:	59 1b       	sub	r21, r25
     d0c:	99 f0       	breq	.+38     	; 0xd34 <__addsf3x+0x5c>
     d0e:	59 3f       	cpi	r21, 0xF9	; 249
     d10:	50 f4       	brcc	.+20     	; 0xd26 <__addsf3x+0x4e>
     d12:	50 3e       	cpi	r21, 0xE0	; 224
     d14:	68 f1       	brcs	.+90     	; 0xd70 <__addsf3x+0x98>
     d16:	1a 16       	cp	r1, r26
     d18:	f0 40       	sbci	r31, 0x00	; 0
     d1a:	a2 2f       	mov	r26, r18
     d1c:	23 2f       	mov	r18, r19
     d1e:	34 2f       	mov	r19, r20
     d20:	44 27       	eor	r20, r20
     d22:	58 5f       	subi	r21, 0xF8	; 248
     d24:	f3 cf       	rjmp	.-26     	; 0xd0c <__addsf3x+0x34>
     d26:	46 95       	lsr	r20
     d28:	37 95       	ror	r19
     d2a:	27 95       	ror	r18
     d2c:	a7 95       	ror	r26
     d2e:	f0 40       	sbci	r31, 0x00	; 0
     d30:	53 95       	inc	r21
     d32:	c9 f7       	brne	.-14     	; 0xd26 <__addsf3x+0x4e>
     d34:	7e f4       	brtc	.+30     	; 0xd54 <__addsf3x+0x7c>
     d36:	1f 16       	cp	r1, r31
     d38:	ba 0b       	sbc	r27, r26
     d3a:	62 0b       	sbc	r22, r18
     d3c:	73 0b       	sbc	r23, r19
     d3e:	84 0b       	sbc	r24, r20
     d40:	ba f0       	brmi	.+46     	; 0xd70 <__addsf3x+0x98>
     d42:	91 50       	subi	r25, 0x01	; 1
     d44:	a1 f0       	breq	.+40     	; 0xd6e <__addsf3x+0x96>
     d46:	ff 0f       	add	r31, r31
     d48:	bb 1f       	adc	r27, r27
     d4a:	66 1f       	adc	r22, r22
     d4c:	77 1f       	adc	r23, r23
     d4e:	88 1f       	adc	r24, r24
     d50:	c2 f7       	brpl	.-16     	; 0xd42 <__addsf3x+0x6a>
     d52:	0e c0       	rjmp	.+28     	; 0xd70 <__addsf3x+0x98>
     d54:	ba 0f       	add	r27, r26
     d56:	62 1f       	adc	r22, r18
     d58:	73 1f       	adc	r23, r19
     d5a:	84 1f       	adc	r24, r20
     d5c:	48 f4       	brcc	.+18     	; 0xd70 <__addsf3x+0x98>
     d5e:	87 95       	ror	r24
     d60:	77 95       	ror	r23
     d62:	67 95       	ror	r22
     d64:	b7 95       	ror	r27
     d66:	f7 95       	ror	r31
     d68:	9e 3f       	cpi	r25, 0xFE	; 254
     d6a:	08 f0       	brcs	.+2      	; 0xd6e <__addsf3x+0x96>
     d6c:	b3 cf       	rjmp	.-154    	; 0xcd4 <__addsf3+0x1e>
     d6e:	93 95       	inc	r25
     d70:	88 0f       	add	r24, r24
     d72:	08 f0       	brcs	.+2      	; 0xd76 <__addsf3x+0x9e>
     d74:	99 27       	eor	r25, r25
     d76:	ee 0f       	add	r30, r30
     d78:	97 95       	ror	r25
     d7a:	87 95       	ror	r24
     d7c:	08 95       	ret

00000d7e <__cmpsf2>:
     d7e:	d9 d0       	rcall	.+434    	; 0xf32 <__fp_cmp>
     d80:	08 f4       	brcc	.+2      	; 0xd84 <__cmpsf2+0x6>
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	08 95       	ret

00000d86 <__divsf3>:
     d86:	0c d0       	rcall	.+24     	; 0xda0 <__divsf3x>
     d88:	0f c1       	rjmp	.+542    	; 0xfa8 <__fp_round>
     d8a:	07 d1       	rcall	.+526    	; 0xf9a <__fp_pscB>
     d8c:	40 f0       	brcs	.+16     	; 0xd9e <__divsf3+0x18>
     d8e:	fe d0       	rcall	.+508    	; 0xf8c <__fp_pscA>
     d90:	30 f0       	brcs	.+12     	; 0xd9e <__divsf3+0x18>
     d92:	21 f4       	brne	.+8      	; 0xd9c <__divsf3+0x16>
     d94:	5f 3f       	cpi	r21, 0xFF	; 255
     d96:	19 f0       	breq	.+6      	; 0xd9e <__divsf3+0x18>
     d98:	f0 c0       	rjmp	.+480    	; 0xf7a <__fp_inf>
     d9a:	51 11       	cpse	r21, r1
     d9c:	39 c1       	rjmp	.+626    	; 0x1010 <__fp_szero>
     d9e:	f3 c0       	rjmp	.+486    	; 0xf86 <__fp_nan>

00000da0 <__divsf3x>:
     da0:	14 d1       	rcall	.+552    	; 0xfca <__fp_split3>
     da2:	98 f3       	brcs	.-26     	; 0xd8a <__divsf3+0x4>

00000da4 <__divsf3_pse>:
     da4:	99 23       	and	r25, r25
     da6:	c9 f3       	breq	.-14     	; 0xd9a <__divsf3+0x14>
     da8:	55 23       	and	r21, r21
     daa:	b1 f3       	breq	.-20     	; 0xd98 <__divsf3+0x12>
     dac:	95 1b       	sub	r25, r21
     dae:	55 0b       	sbc	r21, r21
     db0:	bb 27       	eor	r27, r27
     db2:	aa 27       	eor	r26, r26
     db4:	62 17       	cp	r22, r18
     db6:	73 07       	cpc	r23, r19
     db8:	84 07       	cpc	r24, r20
     dba:	38 f0       	brcs	.+14     	; 0xdca <__divsf3_pse+0x26>
     dbc:	9f 5f       	subi	r25, 0xFF	; 255
     dbe:	5f 4f       	sbci	r21, 0xFF	; 255
     dc0:	22 0f       	add	r18, r18
     dc2:	33 1f       	adc	r19, r19
     dc4:	44 1f       	adc	r20, r20
     dc6:	aa 1f       	adc	r26, r26
     dc8:	a9 f3       	breq	.-22     	; 0xdb4 <__divsf3_pse+0x10>
     dca:	33 d0       	rcall	.+102    	; 0xe32 <__divsf3_pse+0x8e>
     dcc:	0e 2e       	mov	r0, r30
     dce:	3a f0       	brmi	.+14     	; 0xdde <__divsf3_pse+0x3a>
     dd0:	e0 e8       	ldi	r30, 0x80	; 128
     dd2:	30 d0       	rcall	.+96     	; 0xe34 <__divsf3_pse+0x90>
     dd4:	91 50       	subi	r25, 0x01	; 1
     dd6:	50 40       	sbci	r21, 0x00	; 0
     dd8:	e6 95       	lsr	r30
     dda:	00 1c       	adc	r0, r0
     ddc:	ca f7       	brpl	.-14     	; 0xdd0 <__divsf3_pse+0x2c>
     dde:	29 d0       	rcall	.+82     	; 0xe32 <__divsf3_pse+0x8e>
     de0:	fe 2f       	mov	r31, r30
     de2:	27 d0       	rcall	.+78     	; 0xe32 <__divsf3_pse+0x8e>
     de4:	66 0f       	add	r22, r22
     de6:	77 1f       	adc	r23, r23
     de8:	88 1f       	adc	r24, r24
     dea:	bb 1f       	adc	r27, r27
     dec:	26 17       	cp	r18, r22
     dee:	37 07       	cpc	r19, r23
     df0:	48 07       	cpc	r20, r24
     df2:	ab 07       	cpc	r26, r27
     df4:	b0 e8       	ldi	r27, 0x80	; 128
     df6:	09 f0       	breq	.+2      	; 0xdfa <__divsf3_pse+0x56>
     df8:	bb 0b       	sbc	r27, r27
     dfa:	80 2d       	mov	r24, r0
     dfc:	bf 01       	movw	r22, r30
     dfe:	ff 27       	eor	r31, r31
     e00:	93 58       	subi	r25, 0x83	; 131
     e02:	5f 4f       	sbci	r21, 0xFF	; 255
     e04:	2a f0       	brmi	.+10     	; 0xe10 <__divsf3_pse+0x6c>
     e06:	9e 3f       	cpi	r25, 0xFE	; 254
     e08:	51 05       	cpc	r21, r1
     e0a:	68 f0       	brcs	.+26     	; 0xe26 <__divsf3_pse+0x82>
     e0c:	b6 c0       	rjmp	.+364    	; 0xf7a <__fp_inf>
     e0e:	00 c1       	rjmp	.+512    	; 0x1010 <__fp_szero>
     e10:	5f 3f       	cpi	r21, 0xFF	; 255
     e12:	ec f3       	brlt	.-6      	; 0xe0e <__divsf3_pse+0x6a>
     e14:	98 3e       	cpi	r25, 0xE8	; 232
     e16:	dc f3       	brlt	.-10     	; 0xe0e <__divsf3_pse+0x6a>
     e18:	86 95       	lsr	r24
     e1a:	77 95       	ror	r23
     e1c:	67 95       	ror	r22
     e1e:	b7 95       	ror	r27
     e20:	f7 95       	ror	r31
     e22:	9f 5f       	subi	r25, 0xFF	; 255
     e24:	c9 f7       	brne	.-14     	; 0xe18 <__divsf3_pse+0x74>
     e26:	88 0f       	add	r24, r24
     e28:	91 1d       	adc	r25, r1
     e2a:	96 95       	lsr	r25
     e2c:	87 95       	ror	r24
     e2e:	97 f9       	bld	r25, 7
     e30:	08 95       	ret
     e32:	e1 e0       	ldi	r30, 0x01	; 1
     e34:	66 0f       	add	r22, r22
     e36:	77 1f       	adc	r23, r23
     e38:	88 1f       	adc	r24, r24
     e3a:	bb 1f       	adc	r27, r27
     e3c:	62 17       	cp	r22, r18
     e3e:	73 07       	cpc	r23, r19
     e40:	84 07       	cpc	r24, r20
     e42:	ba 07       	cpc	r27, r26
     e44:	20 f0       	brcs	.+8      	; 0xe4e <__divsf3_pse+0xaa>
     e46:	62 1b       	sub	r22, r18
     e48:	73 0b       	sbc	r23, r19
     e4a:	84 0b       	sbc	r24, r20
     e4c:	ba 0b       	sbc	r27, r26
     e4e:	ee 1f       	adc	r30, r30
     e50:	88 f7       	brcc	.-30     	; 0xe34 <__divsf3_pse+0x90>
     e52:	e0 95       	com	r30
     e54:	08 95       	ret

00000e56 <__fixsfsi>:
     e56:	04 d0       	rcall	.+8      	; 0xe60 <__fixunssfsi>
     e58:	68 94       	set
     e5a:	b1 11       	cpse	r27, r1
     e5c:	d9 c0       	rjmp	.+434    	; 0x1010 <__fp_szero>
     e5e:	08 95       	ret

00000e60 <__fixunssfsi>:
     e60:	bc d0       	rcall	.+376    	; 0xfda <__fp_splitA>
     e62:	88 f0       	brcs	.+34     	; 0xe86 <__fixunssfsi+0x26>
     e64:	9f 57       	subi	r25, 0x7F	; 127
     e66:	90 f0       	brcs	.+36     	; 0xe8c <__fixunssfsi+0x2c>
     e68:	b9 2f       	mov	r27, r25
     e6a:	99 27       	eor	r25, r25
     e6c:	b7 51       	subi	r27, 0x17	; 23
     e6e:	a0 f0       	brcs	.+40     	; 0xe98 <__fixunssfsi+0x38>
     e70:	d1 f0       	breq	.+52     	; 0xea6 <__fixunssfsi+0x46>
     e72:	66 0f       	add	r22, r22
     e74:	77 1f       	adc	r23, r23
     e76:	88 1f       	adc	r24, r24
     e78:	99 1f       	adc	r25, r25
     e7a:	1a f0       	brmi	.+6      	; 0xe82 <__fixunssfsi+0x22>
     e7c:	ba 95       	dec	r27
     e7e:	c9 f7       	brne	.-14     	; 0xe72 <__fixunssfsi+0x12>
     e80:	12 c0       	rjmp	.+36     	; 0xea6 <__fixunssfsi+0x46>
     e82:	b1 30       	cpi	r27, 0x01	; 1
     e84:	81 f0       	breq	.+32     	; 0xea6 <__fixunssfsi+0x46>
     e86:	c3 d0       	rcall	.+390    	; 0x100e <__fp_zero>
     e88:	b1 e0       	ldi	r27, 0x01	; 1
     e8a:	08 95       	ret
     e8c:	c0 c0       	rjmp	.+384    	; 0x100e <__fp_zero>
     e8e:	67 2f       	mov	r22, r23
     e90:	78 2f       	mov	r23, r24
     e92:	88 27       	eor	r24, r24
     e94:	b8 5f       	subi	r27, 0xF8	; 248
     e96:	39 f0       	breq	.+14     	; 0xea6 <__fixunssfsi+0x46>
     e98:	b9 3f       	cpi	r27, 0xF9	; 249
     e9a:	cc f3       	brlt	.-14     	; 0xe8e <__fixunssfsi+0x2e>
     e9c:	86 95       	lsr	r24
     e9e:	77 95       	ror	r23
     ea0:	67 95       	ror	r22
     ea2:	b3 95       	inc	r27
     ea4:	d9 f7       	brne	.-10     	; 0xe9c <__fixunssfsi+0x3c>
     ea6:	3e f4       	brtc	.+14     	; 0xeb6 <__fixunssfsi+0x56>
     ea8:	90 95       	com	r25
     eaa:	80 95       	com	r24
     eac:	70 95       	com	r23
     eae:	61 95       	neg	r22
     eb0:	7f 4f       	sbci	r23, 0xFF	; 255
     eb2:	8f 4f       	sbci	r24, 0xFF	; 255
     eb4:	9f 4f       	sbci	r25, 0xFF	; 255
     eb6:	08 95       	ret

00000eb8 <__floatunsisf>:
     eb8:	e8 94       	clt
     eba:	09 c0       	rjmp	.+18     	; 0xece <__floatsisf+0x12>

00000ebc <__floatsisf>:
     ebc:	97 fb       	bst	r25, 7
     ebe:	3e f4       	brtc	.+14     	; 0xece <__floatsisf+0x12>
     ec0:	90 95       	com	r25
     ec2:	80 95       	com	r24
     ec4:	70 95       	com	r23
     ec6:	61 95       	neg	r22
     ec8:	7f 4f       	sbci	r23, 0xFF	; 255
     eca:	8f 4f       	sbci	r24, 0xFF	; 255
     ecc:	9f 4f       	sbci	r25, 0xFF	; 255
     ece:	99 23       	and	r25, r25
     ed0:	a9 f0       	breq	.+42     	; 0xefc <__floatsisf+0x40>
     ed2:	f9 2f       	mov	r31, r25
     ed4:	96 e9       	ldi	r25, 0x96	; 150
     ed6:	bb 27       	eor	r27, r27
     ed8:	93 95       	inc	r25
     eda:	f6 95       	lsr	r31
     edc:	87 95       	ror	r24
     ede:	77 95       	ror	r23
     ee0:	67 95       	ror	r22
     ee2:	b7 95       	ror	r27
     ee4:	f1 11       	cpse	r31, r1
     ee6:	f8 cf       	rjmp	.-16     	; 0xed8 <__floatsisf+0x1c>
     ee8:	fa f4       	brpl	.+62     	; 0xf28 <__floatsisf+0x6c>
     eea:	bb 0f       	add	r27, r27
     eec:	11 f4       	brne	.+4      	; 0xef2 <__floatsisf+0x36>
     eee:	60 ff       	sbrs	r22, 0
     ef0:	1b c0       	rjmp	.+54     	; 0xf28 <__floatsisf+0x6c>
     ef2:	6f 5f       	subi	r22, 0xFF	; 255
     ef4:	7f 4f       	sbci	r23, 0xFF	; 255
     ef6:	8f 4f       	sbci	r24, 0xFF	; 255
     ef8:	9f 4f       	sbci	r25, 0xFF	; 255
     efa:	16 c0       	rjmp	.+44     	; 0xf28 <__floatsisf+0x6c>
     efc:	88 23       	and	r24, r24
     efe:	11 f0       	breq	.+4      	; 0xf04 <__floatsisf+0x48>
     f00:	96 e9       	ldi	r25, 0x96	; 150
     f02:	11 c0       	rjmp	.+34     	; 0xf26 <__floatsisf+0x6a>
     f04:	77 23       	and	r23, r23
     f06:	21 f0       	breq	.+8      	; 0xf10 <__floatsisf+0x54>
     f08:	9e e8       	ldi	r25, 0x8E	; 142
     f0a:	87 2f       	mov	r24, r23
     f0c:	76 2f       	mov	r23, r22
     f0e:	05 c0       	rjmp	.+10     	; 0xf1a <__floatsisf+0x5e>
     f10:	66 23       	and	r22, r22
     f12:	71 f0       	breq	.+28     	; 0xf30 <__floatsisf+0x74>
     f14:	96 e8       	ldi	r25, 0x86	; 134
     f16:	86 2f       	mov	r24, r22
     f18:	70 e0       	ldi	r23, 0x00	; 0
     f1a:	60 e0       	ldi	r22, 0x00	; 0
     f1c:	2a f0       	brmi	.+10     	; 0xf28 <__floatsisf+0x6c>
     f1e:	9a 95       	dec	r25
     f20:	66 0f       	add	r22, r22
     f22:	77 1f       	adc	r23, r23
     f24:	88 1f       	adc	r24, r24
     f26:	da f7       	brpl	.-10     	; 0xf1e <__floatsisf+0x62>
     f28:	88 0f       	add	r24, r24
     f2a:	96 95       	lsr	r25
     f2c:	87 95       	ror	r24
     f2e:	97 f9       	bld	r25, 7
     f30:	08 95       	ret

00000f32 <__fp_cmp>:
     f32:	99 0f       	add	r25, r25
     f34:	00 08       	sbc	r0, r0
     f36:	55 0f       	add	r21, r21
     f38:	aa 0b       	sbc	r26, r26
     f3a:	e0 e8       	ldi	r30, 0x80	; 128
     f3c:	fe ef       	ldi	r31, 0xFE	; 254
     f3e:	16 16       	cp	r1, r22
     f40:	17 06       	cpc	r1, r23
     f42:	e8 07       	cpc	r30, r24
     f44:	f9 07       	cpc	r31, r25
     f46:	c0 f0       	brcs	.+48     	; 0xf78 <__fp_cmp+0x46>
     f48:	12 16       	cp	r1, r18
     f4a:	13 06       	cpc	r1, r19
     f4c:	e4 07       	cpc	r30, r20
     f4e:	f5 07       	cpc	r31, r21
     f50:	98 f0       	brcs	.+38     	; 0xf78 <__fp_cmp+0x46>
     f52:	62 1b       	sub	r22, r18
     f54:	73 0b       	sbc	r23, r19
     f56:	84 0b       	sbc	r24, r20
     f58:	95 0b       	sbc	r25, r21
     f5a:	39 f4       	brne	.+14     	; 0xf6a <__fp_cmp+0x38>
     f5c:	0a 26       	eor	r0, r26
     f5e:	61 f0       	breq	.+24     	; 0xf78 <__fp_cmp+0x46>
     f60:	23 2b       	or	r18, r19
     f62:	24 2b       	or	r18, r20
     f64:	25 2b       	or	r18, r21
     f66:	21 f4       	brne	.+8      	; 0xf70 <__fp_cmp+0x3e>
     f68:	08 95       	ret
     f6a:	0a 26       	eor	r0, r26
     f6c:	09 f4       	brne	.+2      	; 0xf70 <__fp_cmp+0x3e>
     f6e:	a1 40       	sbci	r26, 0x01	; 1
     f70:	a6 95       	lsr	r26
     f72:	8f ef       	ldi	r24, 0xFF	; 255
     f74:	81 1d       	adc	r24, r1
     f76:	81 1d       	adc	r24, r1
     f78:	08 95       	ret

00000f7a <__fp_inf>:
     f7a:	97 f9       	bld	r25, 7
     f7c:	9f 67       	ori	r25, 0x7F	; 127
     f7e:	80 e8       	ldi	r24, 0x80	; 128
     f80:	70 e0       	ldi	r23, 0x00	; 0
     f82:	60 e0       	ldi	r22, 0x00	; 0
     f84:	08 95       	ret

00000f86 <__fp_nan>:
     f86:	9f ef       	ldi	r25, 0xFF	; 255
     f88:	80 ec       	ldi	r24, 0xC0	; 192
     f8a:	08 95       	ret

00000f8c <__fp_pscA>:
     f8c:	00 24       	eor	r0, r0
     f8e:	0a 94       	dec	r0
     f90:	16 16       	cp	r1, r22
     f92:	17 06       	cpc	r1, r23
     f94:	18 06       	cpc	r1, r24
     f96:	09 06       	cpc	r0, r25
     f98:	08 95       	ret

00000f9a <__fp_pscB>:
     f9a:	00 24       	eor	r0, r0
     f9c:	0a 94       	dec	r0
     f9e:	12 16       	cp	r1, r18
     fa0:	13 06       	cpc	r1, r19
     fa2:	14 06       	cpc	r1, r20
     fa4:	05 06       	cpc	r0, r21
     fa6:	08 95       	ret

00000fa8 <__fp_round>:
     fa8:	09 2e       	mov	r0, r25
     faa:	03 94       	inc	r0
     fac:	00 0c       	add	r0, r0
     fae:	11 f4       	brne	.+4      	; 0xfb4 <__fp_round+0xc>
     fb0:	88 23       	and	r24, r24
     fb2:	52 f0       	brmi	.+20     	; 0xfc8 <__fp_round+0x20>
     fb4:	bb 0f       	add	r27, r27
     fb6:	40 f4       	brcc	.+16     	; 0xfc8 <__fp_round+0x20>
     fb8:	bf 2b       	or	r27, r31
     fba:	11 f4       	brne	.+4      	; 0xfc0 <__fp_round+0x18>
     fbc:	60 ff       	sbrs	r22, 0
     fbe:	04 c0       	rjmp	.+8      	; 0xfc8 <__fp_round+0x20>
     fc0:	6f 5f       	subi	r22, 0xFF	; 255
     fc2:	7f 4f       	sbci	r23, 0xFF	; 255
     fc4:	8f 4f       	sbci	r24, 0xFF	; 255
     fc6:	9f 4f       	sbci	r25, 0xFF	; 255
     fc8:	08 95       	ret

00000fca <__fp_split3>:
     fca:	57 fd       	sbrc	r21, 7
     fcc:	90 58       	subi	r25, 0x80	; 128
     fce:	44 0f       	add	r20, r20
     fd0:	55 1f       	adc	r21, r21
     fd2:	59 f0       	breq	.+22     	; 0xfea <__fp_splitA+0x10>
     fd4:	5f 3f       	cpi	r21, 0xFF	; 255
     fd6:	71 f0       	breq	.+28     	; 0xff4 <__fp_splitA+0x1a>
     fd8:	47 95       	ror	r20

00000fda <__fp_splitA>:
     fda:	88 0f       	add	r24, r24
     fdc:	97 fb       	bst	r25, 7
     fde:	99 1f       	adc	r25, r25
     fe0:	61 f0       	breq	.+24     	; 0xffa <__fp_splitA+0x20>
     fe2:	9f 3f       	cpi	r25, 0xFF	; 255
     fe4:	79 f0       	breq	.+30     	; 0x1004 <__fp_splitA+0x2a>
     fe6:	87 95       	ror	r24
     fe8:	08 95       	ret
     fea:	12 16       	cp	r1, r18
     fec:	13 06       	cpc	r1, r19
     fee:	14 06       	cpc	r1, r20
     ff0:	55 1f       	adc	r21, r21
     ff2:	f2 cf       	rjmp	.-28     	; 0xfd8 <__fp_split3+0xe>
     ff4:	46 95       	lsr	r20
     ff6:	f1 df       	rcall	.-30     	; 0xfda <__fp_splitA>
     ff8:	08 c0       	rjmp	.+16     	; 0x100a <__fp_splitA+0x30>
     ffa:	16 16       	cp	r1, r22
     ffc:	17 06       	cpc	r1, r23
     ffe:	18 06       	cpc	r1, r24
    1000:	99 1f       	adc	r25, r25
    1002:	f1 cf       	rjmp	.-30     	; 0xfe6 <__fp_splitA+0xc>
    1004:	86 95       	lsr	r24
    1006:	71 05       	cpc	r23, r1
    1008:	61 05       	cpc	r22, r1
    100a:	08 94       	sec
    100c:	08 95       	ret

0000100e <__fp_zero>:
    100e:	e8 94       	clt

00001010 <__fp_szero>:
    1010:	bb 27       	eor	r27, r27
    1012:	66 27       	eor	r22, r22
    1014:	77 27       	eor	r23, r23
    1016:	cb 01       	movw	r24, r22
    1018:	97 f9       	bld	r25, 7
    101a:	08 95       	ret

0000101c <__mulsf3>:
    101c:	0b d0       	rcall	.+22     	; 0x1034 <__mulsf3x>
    101e:	c4 cf       	rjmp	.-120    	; 0xfa8 <__fp_round>
    1020:	b5 df       	rcall	.-150    	; 0xf8c <__fp_pscA>
    1022:	28 f0       	brcs	.+10     	; 0x102e <__mulsf3+0x12>
    1024:	ba df       	rcall	.-140    	; 0xf9a <__fp_pscB>
    1026:	18 f0       	brcs	.+6      	; 0x102e <__mulsf3+0x12>
    1028:	95 23       	and	r25, r21
    102a:	09 f0       	breq	.+2      	; 0x102e <__mulsf3+0x12>
    102c:	a6 cf       	rjmp	.-180    	; 0xf7a <__fp_inf>
    102e:	ab cf       	rjmp	.-170    	; 0xf86 <__fp_nan>
    1030:	11 24       	eor	r1, r1
    1032:	ee cf       	rjmp	.-36     	; 0x1010 <__fp_szero>

00001034 <__mulsf3x>:
    1034:	ca df       	rcall	.-108    	; 0xfca <__fp_split3>
    1036:	a0 f3       	brcs	.-24     	; 0x1020 <__mulsf3+0x4>

00001038 <__mulsf3_pse>:
    1038:	95 9f       	mul	r25, r21
    103a:	d1 f3       	breq	.-12     	; 0x1030 <__mulsf3+0x14>
    103c:	95 0f       	add	r25, r21
    103e:	50 e0       	ldi	r21, 0x00	; 0
    1040:	55 1f       	adc	r21, r21
    1042:	62 9f       	mul	r22, r18
    1044:	f0 01       	movw	r30, r0
    1046:	72 9f       	mul	r23, r18
    1048:	bb 27       	eor	r27, r27
    104a:	f0 0d       	add	r31, r0
    104c:	b1 1d       	adc	r27, r1
    104e:	63 9f       	mul	r22, r19
    1050:	aa 27       	eor	r26, r26
    1052:	f0 0d       	add	r31, r0
    1054:	b1 1d       	adc	r27, r1
    1056:	aa 1f       	adc	r26, r26
    1058:	64 9f       	mul	r22, r20
    105a:	66 27       	eor	r22, r22
    105c:	b0 0d       	add	r27, r0
    105e:	a1 1d       	adc	r26, r1
    1060:	66 1f       	adc	r22, r22
    1062:	82 9f       	mul	r24, r18
    1064:	22 27       	eor	r18, r18
    1066:	b0 0d       	add	r27, r0
    1068:	a1 1d       	adc	r26, r1
    106a:	62 1f       	adc	r22, r18
    106c:	73 9f       	mul	r23, r19
    106e:	b0 0d       	add	r27, r0
    1070:	a1 1d       	adc	r26, r1
    1072:	62 1f       	adc	r22, r18
    1074:	83 9f       	mul	r24, r19
    1076:	a0 0d       	add	r26, r0
    1078:	61 1d       	adc	r22, r1
    107a:	22 1f       	adc	r18, r18
    107c:	74 9f       	mul	r23, r20
    107e:	33 27       	eor	r19, r19
    1080:	a0 0d       	add	r26, r0
    1082:	61 1d       	adc	r22, r1
    1084:	23 1f       	adc	r18, r19
    1086:	84 9f       	mul	r24, r20
    1088:	60 0d       	add	r22, r0
    108a:	21 1d       	adc	r18, r1
    108c:	82 2f       	mov	r24, r18
    108e:	76 2f       	mov	r23, r22
    1090:	6a 2f       	mov	r22, r26
    1092:	11 24       	eor	r1, r1
    1094:	9f 57       	subi	r25, 0x7F	; 127
    1096:	50 40       	sbci	r21, 0x00	; 0
    1098:	8a f0       	brmi	.+34     	; 0x10bc <__mulsf3_pse+0x84>
    109a:	e1 f0       	breq	.+56     	; 0x10d4 <__mulsf3_pse+0x9c>
    109c:	88 23       	and	r24, r24
    109e:	4a f0       	brmi	.+18     	; 0x10b2 <__mulsf3_pse+0x7a>
    10a0:	ee 0f       	add	r30, r30
    10a2:	ff 1f       	adc	r31, r31
    10a4:	bb 1f       	adc	r27, r27
    10a6:	66 1f       	adc	r22, r22
    10a8:	77 1f       	adc	r23, r23
    10aa:	88 1f       	adc	r24, r24
    10ac:	91 50       	subi	r25, 0x01	; 1
    10ae:	50 40       	sbci	r21, 0x00	; 0
    10b0:	a9 f7       	brne	.-22     	; 0x109c <__mulsf3_pse+0x64>
    10b2:	9e 3f       	cpi	r25, 0xFE	; 254
    10b4:	51 05       	cpc	r21, r1
    10b6:	70 f0       	brcs	.+28     	; 0x10d4 <__mulsf3_pse+0x9c>
    10b8:	60 cf       	rjmp	.-320    	; 0xf7a <__fp_inf>
    10ba:	aa cf       	rjmp	.-172    	; 0x1010 <__fp_szero>
    10bc:	5f 3f       	cpi	r21, 0xFF	; 255
    10be:	ec f3       	brlt	.-6      	; 0x10ba <__mulsf3_pse+0x82>
    10c0:	98 3e       	cpi	r25, 0xE8	; 232
    10c2:	dc f3       	brlt	.-10     	; 0x10ba <__mulsf3_pse+0x82>
    10c4:	86 95       	lsr	r24
    10c6:	77 95       	ror	r23
    10c8:	67 95       	ror	r22
    10ca:	b7 95       	ror	r27
    10cc:	f7 95       	ror	r31
    10ce:	e7 95       	ror	r30
    10d0:	9f 5f       	subi	r25, 0xFF	; 255
    10d2:	c1 f7       	brne	.-16     	; 0x10c4 <__mulsf3_pse+0x8c>
    10d4:	fe 2b       	or	r31, r30
    10d6:	88 0f       	add	r24, r24
    10d8:	91 1d       	adc	r25, r1
    10da:	96 95       	lsr	r25
    10dc:	87 95       	ror	r24
    10de:	97 f9       	bld	r25, 7
    10e0:	08 95       	ret

000010e2 <vfprintf>:
    10e2:	2f 92       	push	r2
    10e4:	3f 92       	push	r3
    10e6:	4f 92       	push	r4
    10e8:	5f 92       	push	r5
    10ea:	6f 92       	push	r6
    10ec:	7f 92       	push	r7
    10ee:	8f 92       	push	r8
    10f0:	9f 92       	push	r9
    10f2:	af 92       	push	r10
    10f4:	bf 92       	push	r11
    10f6:	cf 92       	push	r12
    10f8:	df 92       	push	r13
    10fa:	ef 92       	push	r14
    10fc:	ff 92       	push	r15
    10fe:	0f 93       	push	r16
    1100:	1f 93       	push	r17
    1102:	cf 93       	push	r28
    1104:	df 93       	push	r29
    1106:	cd b7       	in	r28, 0x3d	; 61
    1108:	de b7       	in	r29, 0x3e	; 62
    110a:	63 97       	sbiw	r28, 0x13	; 19
    110c:	0f b6       	in	r0, 0x3f	; 63
    110e:	f8 94       	cli
    1110:	de bf       	out	0x3e, r29	; 62
    1112:	0f be       	out	0x3f, r0	; 63
    1114:	cd bf       	out	0x3d, r28	; 61
    1116:	7c 01       	movw	r14, r24
    1118:	1b 01       	movw	r2, r22
    111a:	6a 01       	movw	r12, r20
    111c:	fc 01       	movw	r30, r24
    111e:	17 82       	std	Z+7, r1	; 0x07
    1120:	16 82       	std	Z+6, r1	; 0x06
    1122:	83 81       	ldd	r24, Z+3	; 0x03
    1124:	81 ff       	sbrs	r24, 1
    1126:	49 c3       	rjmp	.+1682   	; 0x17ba <vfprintf+0x6d8>
    1128:	be 01       	movw	r22, r28
    112a:	6f 5f       	subi	r22, 0xFF	; 255
    112c:	7f 4f       	sbci	r23, 0xFF	; 255
    112e:	4b 01       	movw	r8, r22
    1130:	f7 01       	movw	r30, r14
    1132:	93 81       	ldd	r25, Z+3	; 0x03
    1134:	f1 01       	movw	r30, r2
    1136:	93 fd       	sbrc	r25, 3
    1138:	85 91       	lpm	r24, Z+
    113a:	93 ff       	sbrs	r25, 3
    113c:	81 91       	ld	r24, Z+
    113e:	1f 01       	movw	r2, r30
    1140:	88 23       	and	r24, r24
    1142:	09 f4       	brne	.+2      	; 0x1146 <vfprintf+0x64>
    1144:	36 c3       	rjmp	.+1644   	; 0x17b2 <vfprintf+0x6d0>
    1146:	85 32       	cpi	r24, 0x25	; 37
    1148:	39 f4       	brne	.+14     	; 0x1158 <vfprintf+0x76>
    114a:	93 fd       	sbrc	r25, 3
    114c:	85 91       	lpm	r24, Z+
    114e:	93 ff       	sbrs	r25, 3
    1150:	81 91       	ld	r24, Z+
    1152:	1f 01       	movw	r2, r30
    1154:	85 32       	cpi	r24, 0x25	; 37
    1156:	31 f4       	brne	.+12     	; 0x1164 <vfprintf+0x82>
    1158:	b7 01       	movw	r22, r14
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	3d d4       	rcall	.+2170   	; 0x19d8 <fputc>
    115e:	56 01       	movw	r10, r12
    1160:	65 01       	movw	r12, r10
    1162:	e6 cf       	rjmp	.-52     	; 0x1130 <vfprintf+0x4e>
    1164:	10 e0       	ldi	r17, 0x00	; 0
    1166:	51 2c       	mov	r5, r1
    1168:	20 e0       	ldi	r18, 0x00	; 0
    116a:	20 32       	cpi	r18, 0x20	; 32
    116c:	a0 f4       	brcc	.+40     	; 0x1196 <vfprintf+0xb4>
    116e:	8b 32       	cpi	r24, 0x2B	; 43
    1170:	69 f0       	breq	.+26     	; 0x118c <vfprintf+0xaa>
    1172:	30 f4       	brcc	.+12     	; 0x1180 <vfprintf+0x9e>
    1174:	80 32       	cpi	r24, 0x20	; 32
    1176:	59 f0       	breq	.+22     	; 0x118e <vfprintf+0xac>
    1178:	83 32       	cpi	r24, 0x23	; 35
    117a:	69 f4       	brne	.+26     	; 0x1196 <vfprintf+0xb4>
    117c:	20 61       	ori	r18, 0x10	; 16
    117e:	2c c0       	rjmp	.+88     	; 0x11d8 <vfprintf+0xf6>
    1180:	8d 32       	cpi	r24, 0x2D	; 45
    1182:	39 f0       	breq	.+14     	; 0x1192 <vfprintf+0xb0>
    1184:	80 33       	cpi	r24, 0x30	; 48
    1186:	39 f4       	brne	.+14     	; 0x1196 <vfprintf+0xb4>
    1188:	21 60       	ori	r18, 0x01	; 1
    118a:	26 c0       	rjmp	.+76     	; 0x11d8 <vfprintf+0xf6>
    118c:	22 60       	ori	r18, 0x02	; 2
    118e:	24 60       	ori	r18, 0x04	; 4
    1190:	23 c0       	rjmp	.+70     	; 0x11d8 <vfprintf+0xf6>
    1192:	28 60       	ori	r18, 0x08	; 8
    1194:	21 c0       	rjmp	.+66     	; 0x11d8 <vfprintf+0xf6>
    1196:	27 fd       	sbrc	r18, 7
    1198:	27 c0       	rjmp	.+78     	; 0x11e8 <vfprintf+0x106>
    119a:	30 ed       	ldi	r19, 0xD0	; 208
    119c:	38 0f       	add	r19, r24
    119e:	3a 30       	cpi	r19, 0x0A	; 10
    11a0:	78 f4       	brcc	.+30     	; 0x11c0 <vfprintf+0xde>
    11a2:	26 ff       	sbrs	r18, 6
    11a4:	06 c0       	rjmp	.+12     	; 0x11b2 <vfprintf+0xd0>
    11a6:	fa e0       	ldi	r31, 0x0A	; 10
    11a8:	1f 9f       	mul	r17, r31
    11aa:	30 0d       	add	r19, r0
    11ac:	11 24       	eor	r1, r1
    11ae:	13 2f       	mov	r17, r19
    11b0:	13 c0       	rjmp	.+38     	; 0x11d8 <vfprintf+0xf6>
    11b2:	6a e0       	ldi	r22, 0x0A	; 10
    11b4:	56 9e       	mul	r5, r22
    11b6:	30 0d       	add	r19, r0
    11b8:	11 24       	eor	r1, r1
    11ba:	53 2e       	mov	r5, r19
    11bc:	20 62       	ori	r18, 0x20	; 32
    11be:	0c c0       	rjmp	.+24     	; 0x11d8 <vfprintf+0xf6>
    11c0:	8e 32       	cpi	r24, 0x2E	; 46
    11c2:	21 f4       	brne	.+8      	; 0x11cc <vfprintf+0xea>
    11c4:	26 fd       	sbrc	r18, 6
    11c6:	f5 c2       	rjmp	.+1514   	; 0x17b2 <vfprintf+0x6d0>
    11c8:	20 64       	ori	r18, 0x40	; 64
    11ca:	06 c0       	rjmp	.+12     	; 0x11d8 <vfprintf+0xf6>
    11cc:	8c 36       	cpi	r24, 0x6C	; 108
    11ce:	11 f4       	brne	.+4      	; 0x11d4 <vfprintf+0xf2>
    11d0:	20 68       	ori	r18, 0x80	; 128
    11d2:	02 c0       	rjmp	.+4      	; 0x11d8 <vfprintf+0xf6>
    11d4:	88 36       	cpi	r24, 0x68	; 104
    11d6:	41 f4       	brne	.+16     	; 0x11e8 <vfprintf+0x106>
    11d8:	f1 01       	movw	r30, r2
    11da:	93 fd       	sbrc	r25, 3
    11dc:	85 91       	lpm	r24, Z+
    11de:	93 ff       	sbrs	r25, 3
    11e0:	81 91       	ld	r24, Z+
    11e2:	1f 01       	movw	r2, r30
    11e4:	81 11       	cpse	r24, r1
    11e6:	c1 cf       	rjmp	.-126    	; 0x116a <vfprintf+0x88>
    11e8:	9b eb       	ldi	r25, 0xBB	; 187
    11ea:	98 0f       	add	r25, r24
    11ec:	93 30       	cpi	r25, 0x03	; 3
    11ee:	18 f4       	brcc	.+6      	; 0x11f6 <vfprintf+0x114>
    11f0:	20 61       	ori	r18, 0x10	; 16
    11f2:	80 5e       	subi	r24, 0xE0	; 224
    11f4:	06 c0       	rjmp	.+12     	; 0x1202 <vfprintf+0x120>
    11f6:	9b e9       	ldi	r25, 0x9B	; 155
    11f8:	98 0f       	add	r25, r24
    11fa:	93 30       	cpi	r25, 0x03	; 3
    11fc:	08 f0       	brcs	.+2      	; 0x1200 <vfprintf+0x11e>
    11fe:	9a c1       	rjmp	.+820    	; 0x1534 <vfprintf+0x452>
    1200:	2f 7e       	andi	r18, 0xEF	; 239
    1202:	26 ff       	sbrs	r18, 6
    1204:	16 e0       	ldi	r17, 0x06	; 6
    1206:	2f 73       	andi	r18, 0x3F	; 63
    1208:	72 2e       	mov	r7, r18
    120a:	85 36       	cpi	r24, 0x65	; 101
    120c:	21 f4       	brne	.+8      	; 0x1216 <vfprintf+0x134>
    120e:	f2 2f       	mov	r31, r18
    1210:	f0 64       	ori	r31, 0x40	; 64
    1212:	7f 2e       	mov	r7, r31
    1214:	08 c0       	rjmp	.+16     	; 0x1226 <vfprintf+0x144>
    1216:	86 36       	cpi	r24, 0x66	; 102
    1218:	21 f4       	brne	.+8      	; 0x1222 <vfprintf+0x140>
    121a:	62 2f       	mov	r22, r18
    121c:	60 68       	ori	r22, 0x80	; 128
    121e:	76 2e       	mov	r7, r22
    1220:	02 c0       	rjmp	.+4      	; 0x1226 <vfprintf+0x144>
    1222:	11 11       	cpse	r17, r1
    1224:	11 50       	subi	r17, 0x01	; 1
    1226:	77 fe       	sbrs	r7, 7
    1228:	07 c0       	rjmp	.+14     	; 0x1238 <vfprintf+0x156>
    122a:	1c 33       	cpi	r17, 0x3C	; 60
    122c:	48 f4       	brcc	.+18     	; 0x1240 <vfprintf+0x15e>
    122e:	44 24       	eor	r4, r4
    1230:	43 94       	inc	r4
    1232:	41 0e       	add	r4, r17
    1234:	27 e0       	ldi	r18, 0x07	; 7
    1236:	0b c0       	rjmp	.+22     	; 0x124e <vfprintf+0x16c>
    1238:	18 30       	cpi	r17, 0x08	; 8
    123a:	30 f4       	brcc	.+12     	; 0x1248 <vfprintf+0x166>
    123c:	21 2f       	mov	r18, r17
    123e:	06 c0       	rjmp	.+12     	; 0x124c <vfprintf+0x16a>
    1240:	27 e0       	ldi	r18, 0x07	; 7
    1242:	4c e3       	ldi	r20, 0x3C	; 60
    1244:	44 2e       	mov	r4, r20
    1246:	03 c0       	rjmp	.+6      	; 0x124e <vfprintf+0x16c>
    1248:	27 e0       	ldi	r18, 0x07	; 7
    124a:	17 e0       	ldi	r17, 0x07	; 7
    124c:	41 2c       	mov	r4, r1
    124e:	56 01       	movw	r10, r12
    1250:	74 e0       	ldi	r23, 0x04	; 4
    1252:	a7 0e       	add	r10, r23
    1254:	b1 1c       	adc	r11, r1
    1256:	f6 01       	movw	r30, r12
    1258:	60 81       	ld	r22, Z
    125a:	71 81       	ldd	r23, Z+1	; 0x01
    125c:	82 81       	ldd	r24, Z+2	; 0x02
    125e:	93 81       	ldd	r25, Z+3	; 0x03
    1260:	04 2d       	mov	r16, r4
    1262:	a4 01       	movw	r20, r8
    1264:	cb d2       	rcall	.+1430   	; 0x17fc <__ftoa_engine>
    1266:	6c 01       	movw	r12, r24
    1268:	09 81       	ldd	r16, Y+1	; 0x01
    126a:	00 ff       	sbrs	r16, 0
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <vfprintf+0x190>
    126e:	03 ff       	sbrs	r16, 3
    1270:	06 c0       	rjmp	.+12     	; 0x127e <vfprintf+0x19c>
    1272:	71 fc       	sbrc	r7, 1
    1274:	07 c0       	rjmp	.+14     	; 0x1284 <vfprintf+0x1a2>
    1276:	72 fc       	sbrc	r7, 2
    1278:	08 c0       	rjmp	.+16     	; 0x128a <vfprintf+0x1a8>
    127a:	61 2c       	mov	r6, r1
    127c:	08 c0       	rjmp	.+16     	; 0x128e <vfprintf+0x1ac>
    127e:	3d e2       	ldi	r19, 0x2D	; 45
    1280:	63 2e       	mov	r6, r19
    1282:	05 c0       	rjmp	.+10     	; 0x128e <vfprintf+0x1ac>
    1284:	2b e2       	ldi	r18, 0x2B	; 43
    1286:	62 2e       	mov	r6, r18
    1288:	02 c0       	rjmp	.+4      	; 0x128e <vfprintf+0x1ac>
    128a:	90 e2       	ldi	r25, 0x20	; 32
    128c:	69 2e       	mov	r6, r25
    128e:	80 2f       	mov	r24, r16
    1290:	8c 70       	andi	r24, 0x0C	; 12
    1292:	81 f1       	breq	.+96     	; 0x12f4 <vfprintf+0x212>
    1294:	66 20       	and	r6, r6
    1296:	11 f0       	breq	.+4      	; 0x129c <vfprintf+0x1ba>
    1298:	84 e0       	ldi	r24, 0x04	; 4
    129a:	01 c0       	rjmp	.+2      	; 0x129e <vfprintf+0x1bc>
    129c:	83 e0       	ldi	r24, 0x03	; 3
    129e:	85 15       	cp	r24, r5
    12a0:	10 f0       	brcs	.+4      	; 0x12a6 <vfprintf+0x1c4>
    12a2:	51 2c       	mov	r5, r1
    12a4:	0a c0       	rjmp	.+20     	; 0x12ba <vfprintf+0x1d8>
    12a6:	58 1a       	sub	r5, r24
    12a8:	73 fc       	sbrc	r7, 3
    12aa:	07 c0       	rjmp	.+14     	; 0x12ba <vfprintf+0x1d8>
    12ac:	b7 01       	movw	r22, r14
    12ae:	80 e2       	ldi	r24, 0x20	; 32
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	92 d3       	rcall	.+1828   	; 0x19d8 <fputc>
    12b4:	5a 94       	dec	r5
    12b6:	d1 f7       	brne	.-12     	; 0x12ac <vfprintf+0x1ca>
    12b8:	f4 cf       	rjmp	.-24     	; 0x12a2 <vfprintf+0x1c0>
    12ba:	66 20       	and	r6, r6
    12bc:	21 f0       	breq	.+8      	; 0x12c6 <vfprintf+0x1e4>
    12be:	b7 01       	movw	r22, r14
    12c0:	86 2d       	mov	r24, r6
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	89 d3       	rcall	.+1810   	; 0x19d8 <fputc>
    12c6:	03 fd       	sbrc	r16, 3
    12c8:	03 c0       	rjmp	.+6      	; 0x12d0 <vfprintf+0x1ee>
    12ca:	0a e8       	ldi	r16, 0x8A	; 138
    12cc:	11 e0       	ldi	r17, 0x01	; 1
    12ce:	02 c0       	rjmp	.+4      	; 0x12d4 <vfprintf+0x1f2>
    12d0:	06 e8       	ldi	r16, 0x86	; 134
    12d2:	11 e0       	ldi	r17, 0x01	; 1
    12d4:	f7 2d       	mov	r31, r7
    12d6:	f0 71       	andi	r31, 0x10	; 16
    12d8:	7f 2e       	mov	r7, r31
    12da:	f8 01       	movw	r30, r16
    12dc:	84 91       	lpm	r24, Z
    12de:	88 23       	and	r24, r24
    12e0:	09 f4       	brne	.+2      	; 0x12e4 <vfprintf+0x202>
    12e2:	5e c2       	rjmp	.+1212   	; 0x17a0 <vfprintf+0x6be>
    12e4:	71 10       	cpse	r7, r1
    12e6:	80 52       	subi	r24, 0x20	; 32
    12e8:	b7 01       	movw	r22, r14
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	75 d3       	rcall	.+1770   	; 0x19d8 <fputc>
    12ee:	0f 5f       	subi	r16, 0xFF	; 255
    12f0:	1f 4f       	sbci	r17, 0xFF	; 255
    12f2:	f3 cf       	rjmp	.-26     	; 0x12da <vfprintf+0x1f8>
    12f4:	77 fe       	sbrs	r7, 7
    12f6:	0f c0       	rjmp	.+30     	; 0x1316 <vfprintf+0x234>
    12f8:	4c 0c       	add	r4, r12
    12fa:	04 ff       	sbrs	r16, 4
    12fc:	04 c0       	rjmp	.+8      	; 0x1306 <vfprintf+0x224>
    12fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1300:	81 33       	cpi	r24, 0x31	; 49
    1302:	09 f4       	brne	.+2      	; 0x1306 <vfprintf+0x224>
    1304:	4a 94       	dec	r4
    1306:	14 14       	cp	r1, r4
    1308:	74 f5       	brge	.+92     	; 0x1366 <vfprintf+0x284>
    130a:	f8 e0       	ldi	r31, 0x08	; 8
    130c:	f4 15       	cp	r31, r4
    130e:	78 f5       	brcc	.+94     	; 0x136e <vfprintf+0x28c>
    1310:	88 e0       	ldi	r24, 0x08	; 8
    1312:	48 2e       	mov	r4, r24
    1314:	2c c0       	rjmp	.+88     	; 0x136e <vfprintf+0x28c>
    1316:	76 fc       	sbrc	r7, 6
    1318:	2a c0       	rjmp	.+84     	; 0x136e <vfprintf+0x28c>
    131a:	81 2f       	mov	r24, r17
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	8c 15       	cp	r24, r12
    1320:	9d 05       	cpc	r25, r13
    1322:	9c f0       	brlt	.+38     	; 0x134a <vfprintf+0x268>
    1324:	6c ef       	ldi	r22, 0xFC	; 252
    1326:	c6 16       	cp	r12, r22
    1328:	6f ef       	ldi	r22, 0xFF	; 255
    132a:	d6 06       	cpc	r13, r22
    132c:	74 f0       	brlt	.+28     	; 0x134a <vfprintf+0x268>
    132e:	77 2d       	mov	r23, r7
    1330:	70 68       	ori	r23, 0x80	; 128
    1332:	77 2e       	mov	r7, r23
    1334:	0a c0       	rjmp	.+20     	; 0x134a <vfprintf+0x268>
    1336:	e2 e0       	ldi	r30, 0x02	; 2
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	ec 0f       	add	r30, r28
    133c:	fd 1f       	adc	r31, r29
    133e:	e1 0f       	add	r30, r17
    1340:	f1 1d       	adc	r31, r1
    1342:	80 81       	ld	r24, Z
    1344:	80 33       	cpi	r24, 0x30	; 48
    1346:	19 f4       	brne	.+6      	; 0x134e <vfprintf+0x26c>
    1348:	11 50       	subi	r17, 0x01	; 1
    134a:	11 11       	cpse	r17, r1
    134c:	f4 cf       	rjmp	.-24     	; 0x1336 <vfprintf+0x254>
    134e:	77 fe       	sbrs	r7, 7
    1350:	0e c0       	rjmp	.+28     	; 0x136e <vfprintf+0x28c>
    1352:	44 24       	eor	r4, r4
    1354:	43 94       	inc	r4
    1356:	41 0e       	add	r4, r17
    1358:	81 2f       	mov	r24, r17
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	c8 16       	cp	r12, r24
    135e:	d9 06       	cpc	r13, r25
    1360:	2c f4       	brge	.+10     	; 0x136c <vfprintf+0x28a>
    1362:	1c 19       	sub	r17, r12
    1364:	04 c0       	rjmp	.+8      	; 0x136e <vfprintf+0x28c>
    1366:	44 24       	eor	r4, r4
    1368:	43 94       	inc	r4
    136a:	01 c0       	rjmp	.+2      	; 0x136e <vfprintf+0x28c>
    136c:	10 e0       	ldi	r17, 0x00	; 0
    136e:	77 fe       	sbrs	r7, 7
    1370:	07 c0       	rjmp	.+14     	; 0x1380 <vfprintf+0x29e>
    1372:	1c 14       	cp	r1, r12
    1374:	1d 04       	cpc	r1, r13
    1376:	3c f4       	brge	.+14     	; 0x1386 <vfprintf+0x2a4>
    1378:	96 01       	movw	r18, r12
    137a:	2f 5f       	subi	r18, 0xFF	; 255
    137c:	3f 4f       	sbci	r19, 0xFF	; 255
    137e:	05 c0       	rjmp	.+10     	; 0x138a <vfprintf+0x2a8>
    1380:	25 e0       	ldi	r18, 0x05	; 5
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	02 c0       	rjmp	.+4      	; 0x138a <vfprintf+0x2a8>
    1386:	21 e0       	ldi	r18, 0x01	; 1
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	66 20       	and	r6, r6
    138c:	11 f0       	breq	.+4      	; 0x1392 <vfprintf+0x2b0>
    138e:	2f 5f       	subi	r18, 0xFF	; 255
    1390:	3f 4f       	sbci	r19, 0xFF	; 255
    1392:	11 23       	and	r17, r17
    1394:	31 f0       	breq	.+12     	; 0x13a2 <vfprintf+0x2c0>
    1396:	41 2f       	mov	r20, r17
    1398:	50 e0       	ldi	r21, 0x00	; 0
    139a:	4f 5f       	subi	r20, 0xFF	; 255
    139c:	5f 4f       	sbci	r21, 0xFF	; 255
    139e:	24 0f       	add	r18, r20
    13a0:	35 1f       	adc	r19, r21
    13a2:	45 2d       	mov	r20, r5
    13a4:	50 e0       	ldi	r21, 0x00	; 0
    13a6:	24 17       	cp	r18, r20
    13a8:	35 07       	cpc	r19, r21
    13aa:	14 f4       	brge	.+4      	; 0x13b0 <vfprintf+0x2ce>
    13ac:	52 1a       	sub	r5, r18
    13ae:	01 c0       	rjmp	.+2      	; 0x13b2 <vfprintf+0x2d0>
    13b0:	51 2c       	mov	r5, r1
    13b2:	87 2d       	mov	r24, r7
    13b4:	89 70       	andi	r24, 0x09	; 9
    13b6:	41 f4       	brne	.+16     	; 0x13c8 <vfprintf+0x2e6>
    13b8:	55 20       	and	r5, r5
    13ba:	31 f0       	breq	.+12     	; 0x13c8 <vfprintf+0x2e6>
    13bc:	b7 01       	movw	r22, r14
    13be:	80 e2       	ldi	r24, 0x20	; 32
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	0a d3       	rcall	.+1556   	; 0x19d8 <fputc>
    13c4:	5a 94       	dec	r5
    13c6:	f8 cf       	rjmp	.-16     	; 0x13b8 <vfprintf+0x2d6>
    13c8:	66 20       	and	r6, r6
    13ca:	21 f0       	breq	.+8      	; 0x13d4 <vfprintf+0x2f2>
    13cc:	b7 01       	movw	r22, r14
    13ce:	86 2d       	mov	r24, r6
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	02 d3       	rcall	.+1540   	; 0x19d8 <fputc>
    13d4:	73 fc       	sbrc	r7, 3
    13d6:	08 c0       	rjmp	.+16     	; 0x13e8 <vfprintf+0x306>
    13d8:	55 20       	and	r5, r5
    13da:	31 f0       	breq	.+12     	; 0x13e8 <vfprintf+0x306>
    13dc:	b7 01       	movw	r22, r14
    13de:	80 e3       	ldi	r24, 0x30	; 48
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	fa d2       	rcall	.+1524   	; 0x19d8 <fputc>
    13e4:	5a 94       	dec	r5
    13e6:	f8 cf       	rjmp	.-16     	; 0x13d8 <vfprintf+0x2f6>
    13e8:	77 fe       	sbrs	r7, 7
    13ea:	5d c0       	rjmp	.+186    	; 0x14a6 <vfprintf+0x3c4>
    13ec:	9c 2d       	mov	r25, r12
    13ee:	8d 2d       	mov	r24, r13
    13f0:	d7 fe       	sbrs	r13, 7
    13f2:	02 c0       	rjmp	.+4      	; 0x13f8 <vfprintf+0x316>
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	69 2e       	mov	r6, r25
    13fa:	78 2e       	mov	r7, r24
    13fc:	40 e0       	ldi	r20, 0x00	; 0
    13fe:	50 e0       	ldi	r21, 0x00	; 0
    1400:	c6 01       	movw	r24, r12
    1402:	84 19       	sub	r24, r4
    1404:	91 09       	sbc	r25, r1
    1406:	9d 87       	std	Y+13, r25	; 0x0d
    1408:	8c 87       	std	Y+12, r24	; 0x0c
    140a:	96 01       	movw	r18, r12
    140c:	26 19       	sub	r18, r6
    140e:	37 09       	sbc	r19, r7
    1410:	28 0d       	add	r18, r8
    1412:	39 1d       	adc	r19, r9
    1414:	81 2f       	mov	r24, r17
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	ee 27       	eor	r30, r30
    141a:	ff 27       	eor	r31, r31
    141c:	e8 1b       	sub	r30, r24
    141e:	f9 0b       	sbc	r31, r25
    1420:	ff 87       	std	Y+15, r31	; 0x0f
    1422:	ee 87       	std	Y+14, r30	; 0x0e
    1424:	ff ef       	ldi	r31, 0xFF	; 255
    1426:	6f 16       	cp	r6, r31
    1428:	7f 06       	cpc	r7, r31
    142a:	61 f4       	brne	.+24     	; 0x1444 <vfprintf+0x362>
    142c:	b7 01       	movw	r22, r14
    142e:	8e e2       	ldi	r24, 0x2E	; 46
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	2b 8b       	std	Y+19, r18	; 0x13
    1434:	3a 8b       	std	Y+18, r19	; 0x12
    1436:	48 8b       	std	Y+16, r20	; 0x10
    1438:	59 8b       	std	Y+17, r21	; 0x11
    143a:	ce d2       	rcall	.+1436   	; 0x19d8 <fputc>
    143c:	59 89       	ldd	r21, Y+17	; 0x11
    143e:	48 89       	ldd	r20, Y+16	; 0x10
    1440:	3a 89       	ldd	r19, Y+18	; 0x12
    1442:	2b 89       	ldd	r18, Y+19	; 0x13
    1444:	c6 14       	cp	r12, r6
    1446:	d7 04       	cpc	r13, r7
    1448:	54 f0       	brlt	.+20     	; 0x145e <vfprintf+0x37c>
    144a:	6c 85       	ldd	r22, Y+12	; 0x0c
    144c:	7d 85       	ldd	r23, Y+13	; 0x0d
    144e:	66 15       	cp	r22, r6
    1450:	77 05       	cpc	r23, r7
    1452:	2c f4       	brge	.+10     	; 0x145e <vfprintf+0x37c>
    1454:	f9 01       	movw	r30, r18
    1456:	e4 0f       	add	r30, r20
    1458:	f5 1f       	adc	r31, r21
    145a:	81 81       	ldd	r24, Z+1	; 0x01
    145c:	01 c0       	rjmp	.+2      	; 0x1460 <vfprintf+0x37e>
    145e:	80 e3       	ldi	r24, 0x30	; 48
    1460:	71 e0       	ldi	r23, 0x01	; 1
    1462:	67 1a       	sub	r6, r23
    1464:	71 08       	sbc	r7, r1
    1466:	4f 5f       	subi	r20, 0xFF	; 255
    1468:	5f 4f       	sbci	r21, 0xFF	; 255
    146a:	ee 85       	ldd	r30, Y+14	; 0x0e
    146c:	ff 85       	ldd	r31, Y+15	; 0x0f
    146e:	6e 16       	cp	r6, r30
    1470:	7f 06       	cpc	r7, r31
    1472:	64 f0       	brlt	.+24     	; 0x148c <vfprintf+0x3aa>
    1474:	b7 01       	movw	r22, r14
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	2b 8b       	std	Y+19, r18	; 0x13
    147a:	3a 8b       	std	Y+18, r19	; 0x12
    147c:	48 8b       	std	Y+16, r20	; 0x10
    147e:	59 8b       	std	Y+17, r21	; 0x11
    1480:	ab d2       	rcall	.+1366   	; 0x19d8 <fputc>
    1482:	2b 89       	ldd	r18, Y+19	; 0x13
    1484:	3a 89       	ldd	r19, Y+18	; 0x12
    1486:	48 89       	ldd	r20, Y+16	; 0x10
    1488:	59 89       	ldd	r21, Y+17	; 0x11
    148a:	cc cf       	rjmp	.-104    	; 0x1424 <vfprintf+0x342>
    148c:	6c 14       	cp	r6, r12
    148e:	7d 04       	cpc	r7, r13
    1490:	39 f4       	brne	.+14     	; 0x14a0 <vfprintf+0x3be>
    1492:	9a 81       	ldd	r25, Y+2	; 0x02
    1494:	96 33       	cpi	r25, 0x36	; 54
    1496:	18 f4       	brcc	.+6      	; 0x149e <vfprintf+0x3bc>
    1498:	95 33       	cpi	r25, 0x35	; 53
    149a:	11 f4       	brne	.+4      	; 0x14a0 <vfprintf+0x3be>
    149c:	04 ff       	sbrs	r16, 4
    149e:	81 e3       	ldi	r24, 0x31	; 49
    14a0:	b7 01       	movw	r22, r14
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	45 c0       	rjmp	.+138    	; 0x1530 <vfprintf+0x44e>
    14a6:	8a 81       	ldd	r24, Y+2	; 0x02
    14a8:	81 33       	cpi	r24, 0x31	; 49
    14aa:	09 f0       	breq	.+2      	; 0x14ae <vfprintf+0x3cc>
    14ac:	0f 7e       	andi	r16, 0xEF	; 239
    14ae:	b7 01       	movw	r22, r14
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	92 d2       	rcall	.+1316   	; 0x19d8 <fputc>
    14b4:	11 11       	cpse	r17, r1
    14b6:	05 c0       	rjmp	.+10     	; 0x14c2 <vfprintf+0x3e0>
    14b8:	74 fe       	sbrs	r7, 4
    14ba:	16 c0       	rjmp	.+44     	; 0x14e8 <vfprintf+0x406>
    14bc:	85 e4       	ldi	r24, 0x45	; 69
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	15 c0       	rjmp	.+42     	; 0x14ec <vfprintf+0x40a>
    14c2:	b7 01       	movw	r22, r14
    14c4:	8e e2       	ldi	r24, 0x2E	; 46
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	87 d2       	rcall	.+1294   	; 0x19d8 <fputc>
    14ca:	82 e0       	ldi	r24, 0x02	; 2
    14cc:	66 24       	eor	r6, r6
    14ce:	63 94       	inc	r6
    14d0:	68 0e       	add	r6, r24
    14d2:	f4 01       	movw	r30, r8
    14d4:	e8 0f       	add	r30, r24
    14d6:	f1 1d       	adc	r31, r1
    14d8:	80 81       	ld	r24, Z
    14da:	b7 01       	movw	r22, r14
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	7c d2       	rcall	.+1272   	; 0x19d8 <fputc>
    14e0:	11 50       	subi	r17, 0x01	; 1
    14e2:	51 f3       	breq	.-44     	; 0x14b8 <vfprintf+0x3d6>
    14e4:	86 2d       	mov	r24, r6
    14e6:	f2 cf       	rjmp	.-28     	; 0x14cc <vfprintf+0x3ea>
    14e8:	85 e6       	ldi	r24, 0x65	; 101
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	b7 01       	movw	r22, r14
    14ee:	74 d2       	rcall	.+1256   	; 0x19d8 <fputc>
    14f0:	d7 fc       	sbrc	r13, 7
    14f2:	05 c0       	rjmp	.+10     	; 0x14fe <vfprintf+0x41c>
    14f4:	c1 14       	cp	r12, r1
    14f6:	d1 04       	cpc	r13, r1
    14f8:	39 f4       	brne	.+14     	; 0x1508 <vfprintf+0x426>
    14fa:	04 ff       	sbrs	r16, 4
    14fc:	05 c0       	rjmp	.+10     	; 0x1508 <vfprintf+0x426>
    14fe:	d1 94       	neg	r13
    1500:	c1 94       	neg	r12
    1502:	d1 08       	sbc	r13, r1
    1504:	8d e2       	ldi	r24, 0x2D	; 45
    1506:	01 c0       	rjmp	.+2      	; 0x150a <vfprintf+0x428>
    1508:	8b e2       	ldi	r24, 0x2B	; 43
    150a:	b7 01       	movw	r22, r14
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	64 d2       	rcall	.+1224   	; 0x19d8 <fputc>
    1510:	80 e3       	ldi	r24, 0x30	; 48
    1512:	6a e0       	ldi	r22, 0x0A	; 10
    1514:	c6 16       	cp	r12, r22
    1516:	d1 04       	cpc	r13, r1
    1518:	2c f0       	brlt	.+10     	; 0x1524 <vfprintf+0x442>
    151a:	8f 5f       	subi	r24, 0xFF	; 255
    151c:	fa e0       	ldi	r31, 0x0A	; 10
    151e:	cf 1a       	sub	r12, r31
    1520:	d1 08       	sbc	r13, r1
    1522:	f7 cf       	rjmp	.-18     	; 0x1512 <vfprintf+0x430>
    1524:	b7 01       	movw	r22, r14
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	57 d2       	rcall	.+1198   	; 0x19d8 <fputc>
    152a:	b7 01       	movw	r22, r14
    152c:	c6 01       	movw	r24, r12
    152e:	c0 96       	adiw	r24, 0x30	; 48
    1530:	53 d2       	rcall	.+1190   	; 0x19d8 <fputc>
    1532:	36 c1       	rjmp	.+620    	; 0x17a0 <vfprintf+0x6be>
    1534:	83 36       	cpi	r24, 0x63	; 99
    1536:	31 f0       	breq	.+12     	; 0x1544 <vfprintf+0x462>
    1538:	83 37       	cpi	r24, 0x73	; 115
    153a:	79 f0       	breq	.+30     	; 0x155a <vfprintf+0x478>
    153c:	83 35       	cpi	r24, 0x53	; 83
    153e:	09 f0       	breq	.+2      	; 0x1542 <vfprintf+0x460>
    1540:	54 c0       	rjmp	.+168    	; 0x15ea <vfprintf+0x508>
    1542:	20 c0       	rjmp	.+64     	; 0x1584 <vfprintf+0x4a2>
    1544:	56 01       	movw	r10, r12
    1546:	72 e0       	ldi	r23, 0x02	; 2
    1548:	a7 0e       	add	r10, r23
    154a:	b1 1c       	adc	r11, r1
    154c:	f6 01       	movw	r30, r12
    154e:	80 81       	ld	r24, Z
    1550:	89 83       	std	Y+1, r24	; 0x01
    1552:	01 e0       	ldi	r16, 0x01	; 1
    1554:	10 e0       	ldi	r17, 0x00	; 0
    1556:	64 01       	movw	r12, r8
    1558:	13 c0       	rjmp	.+38     	; 0x1580 <vfprintf+0x49e>
    155a:	56 01       	movw	r10, r12
    155c:	f2 e0       	ldi	r31, 0x02	; 2
    155e:	af 0e       	add	r10, r31
    1560:	b1 1c       	adc	r11, r1
    1562:	f6 01       	movw	r30, r12
    1564:	c0 80       	ld	r12, Z
    1566:	d1 80       	ldd	r13, Z+1	; 0x01
    1568:	26 ff       	sbrs	r18, 6
    156a:	03 c0       	rjmp	.+6      	; 0x1572 <vfprintf+0x490>
    156c:	61 2f       	mov	r22, r17
    156e:	70 e0       	ldi	r23, 0x00	; 0
    1570:	02 c0       	rjmp	.+4      	; 0x1576 <vfprintf+0x494>
    1572:	6f ef       	ldi	r22, 0xFF	; 255
    1574:	7f ef       	ldi	r23, 0xFF	; 255
    1576:	c6 01       	movw	r24, r12
    1578:	2b 8b       	std	Y+19, r18	; 0x13
    157a:	23 d2       	rcall	.+1094   	; 0x19c2 <strnlen>
    157c:	8c 01       	movw	r16, r24
    157e:	2b 89       	ldd	r18, Y+19	; 0x13
    1580:	2f 77       	andi	r18, 0x7F	; 127
    1582:	14 c0       	rjmp	.+40     	; 0x15ac <vfprintf+0x4ca>
    1584:	56 01       	movw	r10, r12
    1586:	f2 e0       	ldi	r31, 0x02	; 2
    1588:	af 0e       	add	r10, r31
    158a:	b1 1c       	adc	r11, r1
    158c:	f6 01       	movw	r30, r12
    158e:	c0 80       	ld	r12, Z
    1590:	d1 80       	ldd	r13, Z+1	; 0x01
    1592:	26 ff       	sbrs	r18, 6
    1594:	03 c0       	rjmp	.+6      	; 0x159c <vfprintf+0x4ba>
    1596:	61 2f       	mov	r22, r17
    1598:	70 e0       	ldi	r23, 0x00	; 0
    159a:	02 c0       	rjmp	.+4      	; 0x15a0 <vfprintf+0x4be>
    159c:	6f ef       	ldi	r22, 0xFF	; 255
    159e:	7f ef       	ldi	r23, 0xFF	; 255
    15a0:	c6 01       	movw	r24, r12
    15a2:	2b 8b       	std	Y+19, r18	; 0x13
    15a4:	03 d2       	rcall	.+1030   	; 0x19ac <strnlen_P>
    15a6:	8c 01       	movw	r16, r24
    15a8:	2b 89       	ldd	r18, Y+19	; 0x13
    15aa:	20 68       	ori	r18, 0x80	; 128
    15ac:	72 2e       	mov	r7, r18
    15ae:	23 fd       	sbrc	r18, 3
    15b0:	18 c0       	rjmp	.+48     	; 0x15e2 <vfprintf+0x500>
    15b2:	85 2d       	mov	r24, r5
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	08 17       	cp	r16, r24
    15b8:	19 07       	cpc	r17, r25
    15ba:	98 f4       	brcc	.+38     	; 0x15e2 <vfprintf+0x500>
    15bc:	b7 01       	movw	r22, r14
    15be:	80 e2       	ldi	r24, 0x20	; 32
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	0a d2       	rcall	.+1044   	; 0x19d8 <fputc>
    15c4:	5a 94       	dec	r5
    15c6:	f5 cf       	rjmp	.-22     	; 0x15b2 <vfprintf+0x4d0>
    15c8:	f6 01       	movw	r30, r12
    15ca:	77 fc       	sbrc	r7, 7
    15cc:	85 91       	lpm	r24, Z+
    15ce:	77 fe       	sbrs	r7, 7
    15d0:	81 91       	ld	r24, Z+
    15d2:	6f 01       	movw	r12, r30
    15d4:	b7 01       	movw	r22, r14
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	ff d1       	rcall	.+1022   	; 0x19d8 <fputc>
    15da:	51 10       	cpse	r5, r1
    15dc:	5a 94       	dec	r5
    15de:	01 50       	subi	r16, 0x01	; 1
    15e0:	11 09       	sbc	r17, r1
    15e2:	01 15       	cp	r16, r1
    15e4:	11 05       	cpc	r17, r1
    15e6:	81 f7       	brne	.-32     	; 0x15c8 <vfprintf+0x4e6>
    15e8:	db c0       	rjmp	.+438    	; 0x17a0 <vfprintf+0x6be>
    15ea:	84 36       	cpi	r24, 0x64	; 100
    15ec:	11 f0       	breq	.+4      	; 0x15f2 <vfprintf+0x510>
    15ee:	89 36       	cpi	r24, 0x69	; 105
    15f0:	49 f5       	brne	.+82     	; 0x1644 <vfprintf+0x562>
    15f2:	56 01       	movw	r10, r12
    15f4:	27 ff       	sbrs	r18, 7
    15f6:	09 c0       	rjmp	.+18     	; 0x160a <vfprintf+0x528>
    15f8:	f4 e0       	ldi	r31, 0x04	; 4
    15fa:	af 0e       	add	r10, r31
    15fc:	b1 1c       	adc	r11, r1
    15fe:	f6 01       	movw	r30, r12
    1600:	60 81       	ld	r22, Z
    1602:	71 81       	ldd	r23, Z+1	; 0x01
    1604:	82 81       	ldd	r24, Z+2	; 0x02
    1606:	93 81       	ldd	r25, Z+3	; 0x03
    1608:	0a c0       	rjmp	.+20     	; 0x161e <vfprintf+0x53c>
    160a:	f2 e0       	ldi	r31, 0x02	; 2
    160c:	af 0e       	add	r10, r31
    160e:	b1 1c       	adc	r11, r1
    1610:	f6 01       	movw	r30, r12
    1612:	60 81       	ld	r22, Z
    1614:	71 81       	ldd	r23, Z+1	; 0x01
    1616:	88 27       	eor	r24, r24
    1618:	77 fd       	sbrc	r23, 7
    161a:	80 95       	com	r24
    161c:	98 2f       	mov	r25, r24
    161e:	02 2f       	mov	r16, r18
    1620:	0f 76       	andi	r16, 0x6F	; 111
    1622:	97 ff       	sbrs	r25, 7
    1624:	08 c0       	rjmp	.+16     	; 0x1636 <vfprintf+0x554>
    1626:	90 95       	com	r25
    1628:	80 95       	com	r24
    162a:	70 95       	com	r23
    162c:	61 95       	neg	r22
    162e:	7f 4f       	sbci	r23, 0xFF	; 255
    1630:	8f 4f       	sbci	r24, 0xFF	; 255
    1632:	9f 4f       	sbci	r25, 0xFF	; 255
    1634:	00 68       	ori	r16, 0x80	; 128
    1636:	2a e0       	ldi	r18, 0x0A	; 10
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	a4 01       	movw	r20, r8
    163c:	3d d2       	rcall	.+1146   	; 0x1ab8 <__ultoa_invert>
    163e:	c8 2e       	mov	r12, r24
    1640:	c8 18       	sub	r12, r8
    1642:	3d c0       	rjmp	.+122    	; 0x16be <vfprintf+0x5dc>
    1644:	02 2f       	mov	r16, r18
    1646:	85 37       	cpi	r24, 0x75	; 117
    1648:	21 f4       	brne	.+8      	; 0x1652 <vfprintf+0x570>
    164a:	0f 7e       	andi	r16, 0xEF	; 239
    164c:	2a e0       	ldi	r18, 0x0A	; 10
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	1d c0       	rjmp	.+58     	; 0x168c <vfprintf+0x5aa>
    1652:	09 7f       	andi	r16, 0xF9	; 249
    1654:	8f 36       	cpi	r24, 0x6F	; 111
    1656:	91 f0       	breq	.+36     	; 0x167c <vfprintf+0x59a>
    1658:	18 f4       	brcc	.+6      	; 0x1660 <vfprintf+0x57e>
    165a:	88 35       	cpi	r24, 0x58	; 88
    165c:	59 f0       	breq	.+22     	; 0x1674 <vfprintf+0x592>
    165e:	a9 c0       	rjmp	.+338    	; 0x17b2 <vfprintf+0x6d0>
    1660:	80 37       	cpi	r24, 0x70	; 112
    1662:	19 f0       	breq	.+6      	; 0x166a <vfprintf+0x588>
    1664:	88 37       	cpi	r24, 0x78	; 120
    1666:	11 f0       	breq	.+4      	; 0x166c <vfprintf+0x58a>
    1668:	a4 c0       	rjmp	.+328    	; 0x17b2 <vfprintf+0x6d0>
    166a:	00 61       	ori	r16, 0x10	; 16
    166c:	04 ff       	sbrs	r16, 4
    166e:	09 c0       	rjmp	.+18     	; 0x1682 <vfprintf+0x5a0>
    1670:	04 60       	ori	r16, 0x04	; 4
    1672:	07 c0       	rjmp	.+14     	; 0x1682 <vfprintf+0x5a0>
    1674:	24 ff       	sbrs	r18, 4
    1676:	08 c0       	rjmp	.+16     	; 0x1688 <vfprintf+0x5a6>
    1678:	06 60       	ori	r16, 0x06	; 6
    167a:	06 c0       	rjmp	.+12     	; 0x1688 <vfprintf+0x5a6>
    167c:	28 e0       	ldi	r18, 0x08	; 8
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	05 c0       	rjmp	.+10     	; 0x168c <vfprintf+0x5aa>
    1682:	20 e1       	ldi	r18, 0x10	; 16
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	02 c0       	rjmp	.+4      	; 0x168c <vfprintf+0x5aa>
    1688:	20 e1       	ldi	r18, 0x10	; 16
    168a:	32 e0       	ldi	r19, 0x02	; 2
    168c:	56 01       	movw	r10, r12
    168e:	07 ff       	sbrs	r16, 7
    1690:	09 c0       	rjmp	.+18     	; 0x16a4 <vfprintf+0x5c2>
    1692:	f4 e0       	ldi	r31, 0x04	; 4
    1694:	af 0e       	add	r10, r31
    1696:	b1 1c       	adc	r11, r1
    1698:	f6 01       	movw	r30, r12
    169a:	60 81       	ld	r22, Z
    169c:	71 81       	ldd	r23, Z+1	; 0x01
    169e:	82 81       	ldd	r24, Z+2	; 0x02
    16a0:	93 81       	ldd	r25, Z+3	; 0x03
    16a2:	08 c0       	rjmp	.+16     	; 0x16b4 <vfprintf+0x5d2>
    16a4:	f2 e0       	ldi	r31, 0x02	; 2
    16a6:	af 0e       	add	r10, r31
    16a8:	b1 1c       	adc	r11, r1
    16aa:	f6 01       	movw	r30, r12
    16ac:	60 81       	ld	r22, Z
    16ae:	71 81       	ldd	r23, Z+1	; 0x01
    16b0:	80 e0       	ldi	r24, 0x00	; 0
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	a4 01       	movw	r20, r8
    16b6:	00 d2       	rcall	.+1024   	; 0x1ab8 <__ultoa_invert>
    16b8:	c8 2e       	mov	r12, r24
    16ba:	c8 18       	sub	r12, r8
    16bc:	0f 77       	andi	r16, 0x7F	; 127
    16be:	06 ff       	sbrs	r16, 6
    16c0:	0b c0       	rjmp	.+22     	; 0x16d8 <vfprintf+0x5f6>
    16c2:	20 2f       	mov	r18, r16
    16c4:	2e 7f       	andi	r18, 0xFE	; 254
    16c6:	c1 16       	cp	r12, r17
    16c8:	50 f4       	brcc	.+20     	; 0x16de <vfprintf+0x5fc>
    16ca:	04 ff       	sbrs	r16, 4
    16cc:	0a c0       	rjmp	.+20     	; 0x16e2 <vfprintf+0x600>
    16ce:	02 fd       	sbrc	r16, 2
    16d0:	08 c0       	rjmp	.+16     	; 0x16e2 <vfprintf+0x600>
    16d2:	20 2f       	mov	r18, r16
    16d4:	2e 7e       	andi	r18, 0xEE	; 238
    16d6:	05 c0       	rjmp	.+10     	; 0x16e2 <vfprintf+0x600>
    16d8:	dc 2c       	mov	r13, r12
    16da:	20 2f       	mov	r18, r16
    16dc:	03 c0       	rjmp	.+6      	; 0x16e4 <vfprintf+0x602>
    16de:	dc 2c       	mov	r13, r12
    16e0:	01 c0       	rjmp	.+2      	; 0x16e4 <vfprintf+0x602>
    16e2:	d1 2e       	mov	r13, r17
    16e4:	24 ff       	sbrs	r18, 4
    16e6:	0d c0       	rjmp	.+26     	; 0x1702 <vfprintf+0x620>
    16e8:	fe 01       	movw	r30, r28
    16ea:	ec 0d       	add	r30, r12
    16ec:	f1 1d       	adc	r31, r1
    16ee:	80 81       	ld	r24, Z
    16f0:	80 33       	cpi	r24, 0x30	; 48
    16f2:	11 f4       	brne	.+4      	; 0x16f8 <vfprintf+0x616>
    16f4:	29 7e       	andi	r18, 0xE9	; 233
    16f6:	09 c0       	rjmp	.+18     	; 0x170a <vfprintf+0x628>
    16f8:	22 ff       	sbrs	r18, 2
    16fa:	06 c0       	rjmp	.+12     	; 0x1708 <vfprintf+0x626>
    16fc:	d3 94       	inc	r13
    16fe:	d3 94       	inc	r13
    1700:	04 c0       	rjmp	.+8      	; 0x170a <vfprintf+0x628>
    1702:	82 2f       	mov	r24, r18
    1704:	86 78       	andi	r24, 0x86	; 134
    1706:	09 f0       	breq	.+2      	; 0x170a <vfprintf+0x628>
    1708:	d3 94       	inc	r13
    170a:	23 fd       	sbrc	r18, 3
    170c:	12 c0       	rjmp	.+36     	; 0x1732 <vfprintf+0x650>
    170e:	20 ff       	sbrs	r18, 0
    1710:	06 c0       	rjmp	.+12     	; 0x171e <vfprintf+0x63c>
    1712:	1c 2d       	mov	r17, r12
    1714:	d5 14       	cp	r13, r5
    1716:	18 f4       	brcc	.+6      	; 0x171e <vfprintf+0x63c>
    1718:	15 0d       	add	r17, r5
    171a:	1d 19       	sub	r17, r13
    171c:	d5 2c       	mov	r13, r5
    171e:	d5 14       	cp	r13, r5
    1720:	60 f4       	brcc	.+24     	; 0x173a <vfprintf+0x658>
    1722:	b7 01       	movw	r22, r14
    1724:	80 e2       	ldi	r24, 0x20	; 32
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	2b 8b       	std	Y+19, r18	; 0x13
    172a:	56 d1       	rcall	.+684    	; 0x19d8 <fputc>
    172c:	d3 94       	inc	r13
    172e:	2b 89       	ldd	r18, Y+19	; 0x13
    1730:	f6 cf       	rjmp	.-20     	; 0x171e <vfprintf+0x63c>
    1732:	d5 14       	cp	r13, r5
    1734:	10 f4       	brcc	.+4      	; 0x173a <vfprintf+0x658>
    1736:	5d 18       	sub	r5, r13
    1738:	01 c0       	rjmp	.+2      	; 0x173c <vfprintf+0x65a>
    173a:	51 2c       	mov	r5, r1
    173c:	24 ff       	sbrs	r18, 4
    173e:	11 c0       	rjmp	.+34     	; 0x1762 <vfprintf+0x680>
    1740:	b7 01       	movw	r22, r14
    1742:	80 e3       	ldi	r24, 0x30	; 48
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	2b 8b       	std	Y+19, r18	; 0x13
    1748:	47 d1       	rcall	.+654    	; 0x19d8 <fputc>
    174a:	2b 89       	ldd	r18, Y+19	; 0x13
    174c:	22 ff       	sbrs	r18, 2
    174e:	16 c0       	rjmp	.+44     	; 0x177c <vfprintf+0x69a>
    1750:	21 ff       	sbrs	r18, 1
    1752:	03 c0       	rjmp	.+6      	; 0x175a <vfprintf+0x678>
    1754:	88 e5       	ldi	r24, 0x58	; 88
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	02 c0       	rjmp	.+4      	; 0x175e <vfprintf+0x67c>
    175a:	88 e7       	ldi	r24, 0x78	; 120
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	b7 01       	movw	r22, r14
    1760:	0c c0       	rjmp	.+24     	; 0x177a <vfprintf+0x698>
    1762:	82 2f       	mov	r24, r18
    1764:	86 78       	andi	r24, 0x86	; 134
    1766:	51 f0       	breq	.+20     	; 0x177c <vfprintf+0x69a>
    1768:	21 fd       	sbrc	r18, 1
    176a:	02 c0       	rjmp	.+4      	; 0x1770 <vfprintf+0x68e>
    176c:	80 e2       	ldi	r24, 0x20	; 32
    176e:	01 c0       	rjmp	.+2      	; 0x1772 <vfprintf+0x690>
    1770:	8b e2       	ldi	r24, 0x2B	; 43
    1772:	27 fd       	sbrc	r18, 7
    1774:	8d e2       	ldi	r24, 0x2D	; 45
    1776:	b7 01       	movw	r22, r14
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	2e d1       	rcall	.+604    	; 0x19d8 <fputc>
    177c:	c1 16       	cp	r12, r17
    177e:	30 f4       	brcc	.+12     	; 0x178c <vfprintf+0x6aa>
    1780:	b7 01       	movw	r22, r14
    1782:	80 e3       	ldi	r24, 0x30	; 48
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	28 d1       	rcall	.+592    	; 0x19d8 <fputc>
    1788:	11 50       	subi	r17, 0x01	; 1
    178a:	f8 cf       	rjmp	.-16     	; 0x177c <vfprintf+0x69a>
    178c:	ca 94       	dec	r12
    178e:	f4 01       	movw	r30, r8
    1790:	ec 0d       	add	r30, r12
    1792:	f1 1d       	adc	r31, r1
    1794:	80 81       	ld	r24, Z
    1796:	b7 01       	movw	r22, r14
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	1e d1       	rcall	.+572    	; 0x19d8 <fputc>
    179c:	c1 10       	cpse	r12, r1
    179e:	f6 cf       	rjmp	.-20     	; 0x178c <vfprintf+0x6aa>
    17a0:	55 20       	and	r5, r5
    17a2:	09 f4       	brne	.+2      	; 0x17a6 <vfprintf+0x6c4>
    17a4:	dd cc       	rjmp	.-1606   	; 0x1160 <vfprintf+0x7e>
    17a6:	b7 01       	movw	r22, r14
    17a8:	80 e2       	ldi	r24, 0x20	; 32
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	15 d1       	rcall	.+554    	; 0x19d8 <fputc>
    17ae:	5a 94       	dec	r5
    17b0:	f7 cf       	rjmp	.-18     	; 0x17a0 <vfprintf+0x6be>
    17b2:	f7 01       	movw	r30, r14
    17b4:	86 81       	ldd	r24, Z+6	; 0x06
    17b6:	97 81       	ldd	r25, Z+7	; 0x07
    17b8:	02 c0       	rjmp	.+4      	; 0x17be <vfprintf+0x6dc>
    17ba:	8f ef       	ldi	r24, 0xFF	; 255
    17bc:	9f ef       	ldi	r25, 0xFF	; 255
    17be:	63 96       	adiw	r28, 0x13	; 19
    17c0:	0f b6       	in	r0, 0x3f	; 63
    17c2:	f8 94       	cli
    17c4:	de bf       	out	0x3e, r29	; 62
    17c6:	0f be       	out	0x3f, r0	; 63
    17c8:	cd bf       	out	0x3d, r28	; 61
    17ca:	df 91       	pop	r29
    17cc:	cf 91       	pop	r28
    17ce:	1f 91       	pop	r17
    17d0:	0f 91       	pop	r16
    17d2:	ff 90       	pop	r15
    17d4:	ef 90       	pop	r14
    17d6:	df 90       	pop	r13
    17d8:	cf 90       	pop	r12
    17da:	bf 90       	pop	r11
    17dc:	af 90       	pop	r10
    17de:	9f 90       	pop	r9
    17e0:	8f 90       	pop	r8
    17e2:	7f 90       	pop	r7
    17e4:	6f 90       	pop	r6
    17e6:	5f 90       	pop	r5
    17e8:	4f 90       	pop	r4
    17ea:	3f 90       	pop	r3
    17ec:	2f 90       	pop	r2
    17ee:	08 95       	ret

000017f0 <__tablejump2__>:
    17f0:	ee 0f       	add	r30, r30
    17f2:	ff 1f       	adc	r31, r31

000017f4 <__tablejump__>:
    17f4:	05 90       	lpm	r0, Z+
    17f6:	f4 91       	lpm	r31, Z
    17f8:	e0 2d       	mov	r30, r0
    17fa:	19 94       	eijmp

000017fc <__ftoa_engine>:
    17fc:	28 30       	cpi	r18, 0x08	; 8
    17fe:	08 f0       	brcs	.+2      	; 0x1802 <__ftoa_engine+0x6>
    1800:	27 e0       	ldi	r18, 0x07	; 7
    1802:	33 27       	eor	r19, r19
    1804:	da 01       	movw	r26, r20
    1806:	99 0f       	add	r25, r25
    1808:	31 1d       	adc	r19, r1
    180a:	87 fd       	sbrc	r24, 7
    180c:	91 60       	ori	r25, 0x01	; 1
    180e:	00 96       	adiw	r24, 0x00	; 0
    1810:	61 05       	cpc	r22, r1
    1812:	71 05       	cpc	r23, r1
    1814:	39 f4       	brne	.+14     	; 0x1824 <__ftoa_engine+0x28>
    1816:	32 60       	ori	r19, 0x02	; 2
    1818:	2e 5f       	subi	r18, 0xFE	; 254
    181a:	3d 93       	st	X+, r19
    181c:	30 e3       	ldi	r19, 0x30	; 48
    181e:	2a 95       	dec	r18
    1820:	e1 f7       	brne	.-8      	; 0x181a <__ftoa_engine+0x1e>
    1822:	08 95       	ret
    1824:	9f 3f       	cpi	r25, 0xFF	; 255
    1826:	30 f0       	brcs	.+12     	; 0x1834 <__ftoa_engine+0x38>
    1828:	80 38       	cpi	r24, 0x80	; 128
    182a:	71 05       	cpc	r23, r1
    182c:	61 05       	cpc	r22, r1
    182e:	09 f0       	breq	.+2      	; 0x1832 <__ftoa_engine+0x36>
    1830:	3c 5f       	subi	r19, 0xFC	; 252
    1832:	3c 5f       	subi	r19, 0xFC	; 252
    1834:	3d 93       	st	X+, r19
    1836:	91 30       	cpi	r25, 0x01	; 1
    1838:	08 f0       	brcs	.+2      	; 0x183c <__ftoa_engine+0x40>
    183a:	80 68       	ori	r24, 0x80	; 128
    183c:	91 1d       	adc	r25, r1
    183e:	df 93       	push	r29
    1840:	cf 93       	push	r28
    1842:	1f 93       	push	r17
    1844:	0f 93       	push	r16
    1846:	ff 92       	push	r15
    1848:	ef 92       	push	r14
    184a:	19 2f       	mov	r17, r25
    184c:	98 7f       	andi	r25, 0xF8	; 248
    184e:	96 95       	lsr	r25
    1850:	e9 2f       	mov	r30, r25
    1852:	96 95       	lsr	r25
    1854:	96 95       	lsr	r25
    1856:	e9 0f       	add	r30, r25
    1858:	ff 27       	eor	r31, r31
    185a:	e8 51       	subi	r30, 0x18	; 24
    185c:	fe 4f       	sbci	r31, 0xFE	; 254
    185e:	99 27       	eor	r25, r25
    1860:	33 27       	eor	r19, r19
    1862:	ee 24       	eor	r14, r14
    1864:	ff 24       	eor	r15, r15
    1866:	a7 01       	movw	r20, r14
    1868:	e7 01       	movw	r28, r14
    186a:	05 90       	lpm	r0, Z+
    186c:	08 94       	sec
    186e:	07 94       	ror	r0
    1870:	28 f4       	brcc	.+10     	; 0x187c <__ftoa_engine+0x80>
    1872:	36 0f       	add	r19, r22
    1874:	e7 1e       	adc	r14, r23
    1876:	f8 1e       	adc	r15, r24
    1878:	49 1f       	adc	r20, r25
    187a:	51 1d       	adc	r21, r1
    187c:	66 0f       	add	r22, r22
    187e:	77 1f       	adc	r23, r23
    1880:	88 1f       	adc	r24, r24
    1882:	99 1f       	adc	r25, r25
    1884:	06 94       	lsr	r0
    1886:	a1 f7       	brne	.-24     	; 0x1870 <__ftoa_engine+0x74>
    1888:	05 90       	lpm	r0, Z+
    188a:	07 94       	ror	r0
    188c:	28 f4       	brcc	.+10     	; 0x1898 <__ftoa_engine+0x9c>
    188e:	e7 0e       	add	r14, r23
    1890:	f8 1e       	adc	r15, r24
    1892:	49 1f       	adc	r20, r25
    1894:	56 1f       	adc	r21, r22
    1896:	c1 1d       	adc	r28, r1
    1898:	77 0f       	add	r23, r23
    189a:	88 1f       	adc	r24, r24
    189c:	99 1f       	adc	r25, r25
    189e:	66 1f       	adc	r22, r22
    18a0:	06 94       	lsr	r0
    18a2:	a1 f7       	brne	.-24     	; 0x188c <__ftoa_engine+0x90>
    18a4:	05 90       	lpm	r0, Z+
    18a6:	07 94       	ror	r0
    18a8:	28 f4       	brcc	.+10     	; 0x18b4 <__ftoa_engine+0xb8>
    18aa:	f8 0e       	add	r15, r24
    18ac:	49 1f       	adc	r20, r25
    18ae:	56 1f       	adc	r21, r22
    18b0:	c7 1f       	adc	r28, r23
    18b2:	d1 1d       	adc	r29, r1
    18b4:	88 0f       	add	r24, r24
    18b6:	99 1f       	adc	r25, r25
    18b8:	66 1f       	adc	r22, r22
    18ba:	77 1f       	adc	r23, r23
    18bc:	06 94       	lsr	r0
    18be:	a1 f7       	brne	.-24     	; 0x18a8 <__ftoa_engine+0xac>
    18c0:	05 90       	lpm	r0, Z+
    18c2:	07 94       	ror	r0
    18c4:	20 f4       	brcc	.+8      	; 0x18ce <__ftoa_engine+0xd2>
    18c6:	49 0f       	add	r20, r25
    18c8:	56 1f       	adc	r21, r22
    18ca:	c7 1f       	adc	r28, r23
    18cc:	d8 1f       	adc	r29, r24
    18ce:	99 0f       	add	r25, r25
    18d0:	66 1f       	adc	r22, r22
    18d2:	77 1f       	adc	r23, r23
    18d4:	88 1f       	adc	r24, r24
    18d6:	06 94       	lsr	r0
    18d8:	a9 f7       	brne	.-22     	; 0x18c4 <__ftoa_engine+0xc8>
    18da:	84 91       	lpm	r24, Z
    18dc:	10 95       	com	r17
    18de:	17 70       	andi	r17, 0x07	; 7
    18e0:	41 f0       	breq	.+16     	; 0x18f2 <__ftoa_engine+0xf6>
    18e2:	d6 95       	lsr	r29
    18e4:	c7 95       	ror	r28
    18e6:	57 95       	ror	r21
    18e8:	47 95       	ror	r20
    18ea:	f7 94       	ror	r15
    18ec:	e7 94       	ror	r14
    18ee:	1a 95       	dec	r17
    18f0:	c1 f7       	brne	.-16     	; 0x18e2 <__ftoa_engine+0xe6>
    18f2:	ee e8       	ldi	r30, 0x8E	; 142
    18f4:	f1 e0       	ldi	r31, 0x01	; 1
    18f6:	68 94       	set
    18f8:	15 90       	lpm	r1, Z+
    18fa:	15 91       	lpm	r17, Z+
    18fc:	35 91       	lpm	r19, Z+
    18fe:	65 91       	lpm	r22, Z+
    1900:	95 91       	lpm	r25, Z+
    1902:	05 90       	lpm	r0, Z+
    1904:	7f e2       	ldi	r23, 0x2F	; 47
    1906:	73 95       	inc	r23
    1908:	e1 18       	sub	r14, r1
    190a:	f1 0a       	sbc	r15, r17
    190c:	43 0b       	sbc	r20, r19
    190e:	56 0b       	sbc	r21, r22
    1910:	c9 0b       	sbc	r28, r25
    1912:	d0 09       	sbc	r29, r0
    1914:	c0 f7       	brcc	.-16     	; 0x1906 <__ftoa_engine+0x10a>
    1916:	e1 0c       	add	r14, r1
    1918:	f1 1e       	adc	r15, r17
    191a:	43 1f       	adc	r20, r19
    191c:	56 1f       	adc	r21, r22
    191e:	c9 1f       	adc	r28, r25
    1920:	d0 1d       	adc	r29, r0
    1922:	7e f4       	brtc	.+30     	; 0x1942 <__ftoa_engine+0x146>
    1924:	70 33       	cpi	r23, 0x30	; 48
    1926:	11 f4       	brne	.+4      	; 0x192c <__ftoa_engine+0x130>
    1928:	8a 95       	dec	r24
    192a:	e6 cf       	rjmp	.-52     	; 0x18f8 <__ftoa_engine+0xfc>
    192c:	e8 94       	clt
    192e:	01 50       	subi	r16, 0x01	; 1
    1930:	30 f0       	brcs	.+12     	; 0x193e <__ftoa_engine+0x142>
    1932:	08 0f       	add	r16, r24
    1934:	0a f4       	brpl	.+2      	; 0x1938 <__ftoa_engine+0x13c>
    1936:	00 27       	eor	r16, r16
    1938:	02 17       	cp	r16, r18
    193a:	08 f4       	brcc	.+2      	; 0x193e <__ftoa_engine+0x142>
    193c:	20 2f       	mov	r18, r16
    193e:	23 95       	inc	r18
    1940:	02 2f       	mov	r16, r18
    1942:	7a 33       	cpi	r23, 0x3A	; 58
    1944:	28 f0       	brcs	.+10     	; 0x1950 <__ftoa_engine+0x154>
    1946:	79 e3       	ldi	r23, 0x39	; 57
    1948:	7d 93       	st	X+, r23
    194a:	2a 95       	dec	r18
    194c:	e9 f7       	brne	.-6      	; 0x1948 <__ftoa_engine+0x14c>
    194e:	10 c0       	rjmp	.+32     	; 0x1970 <__ftoa_engine+0x174>
    1950:	7d 93       	st	X+, r23
    1952:	2a 95       	dec	r18
    1954:	89 f6       	brne	.-94     	; 0x18f8 <__ftoa_engine+0xfc>
    1956:	06 94       	lsr	r0
    1958:	97 95       	ror	r25
    195a:	67 95       	ror	r22
    195c:	37 95       	ror	r19
    195e:	17 95       	ror	r17
    1960:	17 94       	ror	r1
    1962:	e1 18       	sub	r14, r1
    1964:	f1 0a       	sbc	r15, r17
    1966:	43 0b       	sbc	r20, r19
    1968:	56 0b       	sbc	r21, r22
    196a:	c9 0b       	sbc	r28, r25
    196c:	d0 09       	sbc	r29, r0
    196e:	98 f0       	brcs	.+38     	; 0x1996 <__ftoa_engine+0x19a>
    1970:	23 95       	inc	r18
    1972:	7e 91       	ld	r23, -X
    1974:	73 95       	inc	r23
    1976:	7a 33       	cpi	r23, 0x3A	; 58
    1978:	08 f0       	brcs	.+2      	; 0x197c <__ftoa_engine+0x180>
    197a:	70 e3       	ldi	r23, 0x30	; 48
    197c:	7c 93       	st	X, r23
    197e:	20 13       	cpse	r18, r16
    1980:	b8 f7       	brcc	.-18     	; 0x1970 <__ftoa_engine+0x174>
    1982:	7e 91       	ld	r23, -X
    1984:	70 61       	ori	r23, 0x10	; 16
    1986:	7d 93       	st	X+, r23
    1988:	30 f0       	brcs	.+12     	; 0x1996 <__ftoa_engine+0x19a>
    198a:	83 95       	inc	r24
    198c:	71 e3       	ldi	r23, 0x31	; 49
    198e:	7d 93       	st	X+, r23
    1990:	70 e3       	ldi	r23, 0x30	; 48
    1992:	2a 95       	dec	r18
    1994:	e1 f7       	brne	.-8      	; 0x198e <__ftoa_engine+0x192>
    1996:	11 24       	eor	r1, r1
    1998:	ef 90       	pop	r14
    199a:	ff 90       	pop	r15
    199c:	0f 91       	pop	r16
    199e:	1f 91       	pop	r17
    19a0:	cf 91       	pop	r28
    19a2:	df 91       	pop	r29
    19a4:	99 27       	eor	r25, r25
    19a6:	87 fd       	sbrc	r24, 7
    19a8:	90 95       	com	r25
    19aa:	08 95       	ret

000019ac <strnlen_P>:
    19ac:	fc 01       	movw	r30, r24
    19ae:	05 90       	lpm	r0, Z+
    19b0:	61 50       	subi	r22, 0x01	; 1
    19b2:	70 40       	sbci	r23, 0x00	; 0
    19b4:	01 10       	cpse	r0, r1
    19b6:	d8 f7       	brcc	.-10     	; 0x19ae <strnlen_P+0x2>
    19b8:	80 95       	com	r24
    19ba:	90 95       	com	r25
    19bc:	8e 0f       	add	r24, r30
    19be:	9f 1f       	adc	r25, r31
    19c0:	08 95       	ret

000019c2 <strnlen>:
    19c2:	fc 01       	movw	r30, r24
    19c4:	61 50       	subi	r22, 0x01	; 1
    19c6:	70 40       	sbci	r23, 0x00	; 0
    19c8:	01 90       	ld	r0, Z+
    19ca:	01 10       	cpse	r0, r1
    19cc:	d8 f7       	brcc	.-10     	; 0x19c4 <strnlen+0x2>
    19ce:	80 95       	com	r24
    19d0:	90 95       	com	r25
    19d2:	8e 0f       	add	r24, r30
    19d4:	9f 1f       	adc	r25, r31
    19d6:	08 95       	ret

000019d8 <fputc>:
    19d8:	0f 93       	push	r16
    19da:	1f 93       	push	r17
    19dc:	cf 93       	push	r28
    19de:	df 93       	push	r29
    19e0:	18 2f       	mov	r17, r24
    19e2:	09 2f       	mov	r16, r25
    19e4:	eb 01       	movw	r28, r22
    19e6:	8b 81       	ldd	r24, Y+3	; 0x03
    19e8:	81 fd       	sbrc	r24, 1
    19ea:	03 c0       	rjmp	.+6      	; 0x19f2 <fputc+0x1a>
    19ec:	8f ef       	ldi	r24, 0xFF	; 255
    19ee:	9f ef       	ldi	r25, 0xFF	; 255
    19f0:	20 c0       	rjmp	.+64     	; 0x1a32 <fputc+0x5a>
    19f2:	82 ff       	sbrs	r24, 2
    19f4:	10 c0       	rjmp	.+32     	; 0x1a16 <fputc+0x3e>
    19f6:	4e 81       	ldd	r20, Y+6	; 0x06
    19f8:	5f 81       	ldd	r21, Y+7	; 0x07
    19fa:	2c 81       	ldd	r18, Y+4	; 0x04
    19fc:	3d 81       	ldd	r19, Y+5	; 0x05
    19fe:	42 17       	cp	r20, r18
    1a00:	53 07       	cpc	r21, r19
    1a02:	7c f4       	brge	.+30     	; 0x1a22 <fputc+0x4a>
    1a04:	e8 81       	ld	r30, Y
    1a06:	f9 81       	ldd	r31, Y+1	; 0x01
    1a08:	9f 01       	movw	r18, r30
    1a0a:	2f 5f       	subi	r18, 0xFF	; 255
    1a0c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a0e:	39 83       	std	Y+1, r19	; 0x01
    1a10:	28 83       	st	Y, r18
    1a12:	10 83       	st	Z, r17
    1a14:	06 c0       	rjmp	.+12     	; 0x1a22 <fputc+0x4a>
    1a16:	e8 85       	ldd	r30, Y+8	; 0x08
    1a18:	f9 85       	ldd	r31, Y+9	; 0x09
    1a1a:	81 2f       	mov	r24, r17
    1a1c:	19 95       	eicall
    1a1e:	89 2b       	or	r24, r25
    1a20:	29 f7       	brne	.-54     	; 0x19ec <fputc+0x14>
    1a22:	2e 81       	ldd	r18, Y+6	; 0x06
    1a24:	3f 81       	ldd	r19, Y+7	; 0x07
    1a26:	2f 5f       	subi	r18, 0xFF	; 255
    1a28:	3f 4f       	sbci	r19, 0xFF	; 255
    1a2a:	3f 83       	std	Y+7, r19	; 0x07
    1a2c:	2e 83       	std	Y+6, r18	; 0x06
    1a2e:	81 2f       	mov	r24, r17
    1a30:	90 2f       	mov	r25, r16
    1a32:	df 91       	pop	r29
    1a34:	cf 91       	pop	r28
    1a36:	1f 91       	pop	r17
    1a38:	0f 91       	pop	r16
    1a3a:	08 95       	ret

00001a3c <printf>:
    1a3c:	cf 93       	push	r28
    1a3e:	df 93       	push	r29
    1a40:	cd b7       	in	r28, 0x3d	; 61
    1a42:	de b7       	in	r29, 0x3e	; 62
    1a44:	fe 01       	movw	r30, r28
    1a46:	36 96       	adiw	r30, 0x06	; 6
    1a48:	61 91       	ld	r22, Z+
    1a4a:	71 91       	ld	r23, Z+
    1a4c:	af 01       	movw	r20, r30
    1a4e:	80 91 62 03 	lds	r24, 0x0362
    1a52:	90 91 63 03 	lds	r25, 0x0363
    1a56:	45 db       	rcall	.-2422   	; 0x10e2 <vfprintf>
    1a58:	df 91       	pop	r29
    1a5a:	cf 91       	pop	r28
    1a5c:	08 95       	ret

00001a5e <puts>:
    1a5e:	0f 93       	push	r16
    1a60:	1f 93       	push	r17
    1a62:	cf 93       	push	r28
    1a64:	df 93       	push	r29
    1a66:	e0 91 62 03 	lds	r30, 0x0362
    1a6a:	f0 91 63 03 	lds	r31, 0x0363
    1a6e:	23 81       	ldd	r18, Z+3	; 0x03
    1a70:	21 ff       	sbrs	r18, 1
    1a72:	1b c0       	rjmp	.+54     	; 0x1aaa <puts+0x4c>
    1a74:	ec 01       	movw	r28, r24
    1a76:	00 e0       	ldi	r16, 0x00	; 0
    1a78:	10 e0       	ldi	r17, 0x00	; 0
    1a7a:	89 91       	ld	r24, Y+
    1a7c:	60 91 62 03 	lds	r22, 0x0362
    1a80:	70 91 63 03 	lds	r23, 0x0363
    1a84:	db 01       	movw	r26, r22
    1a86:	18 96       	adiw	r26, 0x08	; 8
    1a88:	ed 91       	ld	r30, X+
    1a8a:	fc 91       	ld	r31, X
    1a8c:	19 97       	sbiw	r26, 0x09	; 9
    1a8e:	88 23       	and	r24, r24
    1a90:	31 f0       	breq	.+12     	; 0x1a9e <puts+0x40>
    1a92:	19 95       	eicall
    1a94:	89 2b       	or	r24, r25
    1a96:	89 f3       	breq	.-30     	; 0x1a7a <puts+0x1c>
    1a98:	0f ef       	ldi	r16, 0xFF	; 255
    1a9a:	1f ef       	ldi	r17, 0xFF	; 255
    1a9c:	ee cf       	rjmp	.-36     	; 0x1a7a <puts+0x1c>
    1a9e:	8a e0       	ldi	r24, 0x0A	; 10
    1aa0:	19 95       	eicall
    1aa2:	89 2b       	or	r24, r25
    1aa4:	11 f4       	brne	.+4      	; 0x1aaa <puts+0x4c>
    1aa6:	c8 01       	movw	r24, r16
    1aa8:	02 c0       	rjmp	.+4      	; 0x1aae <puts+0x50>
    1aaa:	8f ef       	ldi	r24, 0xFF	; 255
    1aac:	9f ef       	ldi	r25, 0xFF	; 255
    1aae:	df 91       	pop	r29
    1ab0:	cf 91       	pop	r28
    1ab2:	1f 91       	pop	r17
    1ab4:	0f 91       	pop	r16
    1ab6:	08 95       	ret

00001ab8 <__ultoa_invert>:
    1ab8:	fa 01       	movw	r30, r20
    1aba:	aa 27       	eor	r26, r26
    1abc:	28 30       	cpi	r18, 0x08	; 8
    1abe:	51 f1       	breq	.+84     	; 0x1b14 <__ultoa_invert+0x5c>
    1ac0:	20 31       	cpi	r18, 0x10	; 16
    1ac2:	81 f1       	breq	.+96     	; 0x1b24 <__ultoa_invert+0x6c>
    1ac4:	e8 94       	clt
    1ac6:	6f 93       	push	r22
    1ac8:	6e 7f       	andi	r22, 0xFE	; 254
    1aca:	6e 5f       	subi	r22, 0xFE	; 254
    1acc:	7f 4f       	sbci	r23, 0xFF	; 255
    1ace:	8f 4f       	sbci	r24, 0xFF	; 255
    1ad0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad2:	af 4f       	sbci	r26, 0xFF	; 255
    1ad4:	b1 e0       	ldi	r27, 0x01	; 1
    1ad6:	3e d0       	rcall	.+124    	; 0x1b54 <__ultoa_invert+0x9c>
    1ad8:	b4 e0       	ldi	r27, 0x04	; 4
    1ada:	3c d0       	rcall	.+120    	; 0x1b54 <__ultoa_invert+0x9c>
    1adc:	67 0f       	add	r22, r23
    1ade:	78 1f       	adc	r23, r24
    1ae0:	89 1f       	adc	r24, r25
    1ae2:	9a 1f       	adc	r25, r26
    1ae4:	a1 1d       	adc	r26, r1
    1ae6:	68 0f       	add	r22, r24
    1ae8:	79 1f       	adc	r23, r25
    1aea:	8a 1f       	adc	r24, r26
    1aec:	91 1d       	adc	r25, r1
    1aee:	a1 1d       	adc	r26, r1
    1af0:	6a 0f       	add	r22, r26
    1af2:	71 1d       	adc	r23, r1
    1af4:	81 1d       	adc	r24, r1
    1af6:	91 1d       	adc	r25, r1
    1af8:	a1 1d       	adc	r26, r1
    1afa:	20 d0       	rcall	.+64     	; 0x1b3c <__ultoa_invert+0x84>
    1afc:	09 f4       	brne	.+2      	; 0x1b00 <__ultoa_invert+0x48>
    1afe:	68 94       	set
    1b00:	3f 91       	pop	r19
    1b02:	2a e0       	ldi	r18, 0x0A	; 10
    1b04:	26 9f       	mul	r18, r22
    1b06:	11 24       	eor	r1, r1
    1b08:	30 19       	sub	r19, r0
    1b0a:	30 5d       	subi	r19, 0xD0	; 208
    1b0c:	31 93       	st	Z+, r19
    1b0e:	de f6       	brtc	.-74     	; 0x1ac6 <__ultoa_invert+0xe>
    1b10:	cf 01       	movw	r24, r30
    1b12:	08 95       	ret
    1b14:	46 2f       	mov	r20, r22
    1b16:	47 70       	andi	r20, 0x07	; 7
    1b18:	40 5d       	subi	r20, 0xD0	; 208
    1b1a:	41 93       	st	Z+, r20
    1b1c:	b3 e0       	ldi	r27, 0x03	; 3
    1b1e:	0f d0       	rcall	.+30     	; 0x1b3e <__ultoa_invert+0x86>
    1b20:	c9 f7       	brne	.-14     	; 0x1b14 <__ultoa_invert+0x5c>
    1b22:	f6 cf       	rjmp	.-20     	; 0x1b10 <__ultoa_invert+0x58>
    1b24:	46 2f       	mov	r20, r22
    1b26:	4f 70       	andi	r20, 0x0F	; 15
    1b28:	40 5d       	subi	r20, 0xD0	; 208
    1b2a:	4a 33       	cpi	r20, 0x3A	; 58
    1b2c:	18 f0       	brcs	.+6      	; 0x1b34 <__ultoa_invert+0x7c>
    1b2e:	49 5d       	subi	r20, 0xD9	; 217
    1b30:	31 fd       	sbrc	r19, 1
    1b32:	40 52       	subi	r20, 0x20	; 32
    1b34:	41 93       	st	Z+, r20
    1b36:	02 d0       	rcall	.+4      	; 0x1b3c <__ultoa_invert+0x84>
    1b38:	a9 f7       	brne	.-22     	; 0x1b24 <__ultoa_invert+0x6c>
    1b3a:	ea cf       	rjmp	.-44     	; 0x1b10 <__ultoa_invert+0x58>
    1b3c:	b4 e0       	ldi	r27, 0x04	; 4
    1b3e:	a6 95       	lsr	r26
    1b40:	97 95       	ror	r25
    1b42:	87 95       	ror	r24
    1b44:	77 95       	ror	r23
    1b46:	67 95       	ror	r22
    1b48:	ba 95       	dec	r27
    1b4a:	c9 f7       	brne	.-14     	; 0x1b3e <__ultoa_invert+0x86>
    1b4c:	00 97       	sbiw	r24, 0x00	; 0
    1b4e:	61 05       	cpc	r22, r1
    1b50:	71 05       	cpc	r23, r1
    1b52:	08 95       	ret
    1b54:	9b 01       	movw	r18, r22
    1b56:	ac 01       	movw	r20, r24
    1b58:	0a 2e       	mov	r0, r26
    1b5a:	06 94       	lsr	r0
    1b5c:	57 95       	ror	r21
    1b5e:	47 95       	ror	r20
    1b60:	37 95       	ror	r19
    1b62:	27 95       	ror	r18
    1b64:	ba 95       	dec	r27
    1b66:	c9 f7       	brne	.-14     	; 0x1b5a <__ultoa_invert+0xa2>
    1b68:	62 0f       	add	r22, r18
    1b6a:	73 1f       	adc	r23, r19
    1b6c:	84 1f       	adc	r24, r20
    1b6e:	95 1f       	adc	r25, r21
    1b70:	a0 1d       	adc	r26, r0
    1b72:	08 95       	ret

00001b74 <_exit>:
    1b74:	f8 94       	cli

00001b76 <__stop_program>:
    1b76:	ff cf       	rjmp	.-2      	; 0x1b76 <__stop_program>
