
Node2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ee  00800200  00001d24  00001db8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d24  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000065  008002ee  008002ee  00001ea6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001ea6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000388  00000000  00000000  00001f02  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000262a  00000000  00000000  0000228a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000128a  00000000  00000000  000048b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001c9f  00000000  00000000  00005b3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000800  00000000  00000000  000077e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000095f  00000000  00000000  00007fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000fc6  00000000  00000000  0000893f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000298  00000000  00000000  00009905  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	43 c1       	rjmp	.+646    	; 0x288 <__ctors_end>
       2:	00 00       	nop
       4:	aa c3       	rjmp	.+1876   	; 0x75a <__vector_1>
       6:	00 00       	nop
       8:	5f c1       	rjmp	.+702    	; 0x2c8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c1       	rjmp	.+698    	; 0x2c8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c1       	rjmp	.+694    	; 0x2c8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c1       	rjmp	.+690    	; 0x2c8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c1       	rjmp	.+686    	; 0x2c8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c1       	rjmp	.+682    	; 0x2c8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c1       	rjmp	.+678    	; 0x2c8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c1       	rjmp	.+674    	; 0x2c8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c1       	rjmp	.+670    	; 0x2c8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c1       	rjmp	.+666    	; 0x2c8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c1       	rjmp	.+662    	; 0x2c8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c1       	rjmp	.+658    	; 0x2c8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c1       	rjmp	.+654    	; 0x2c8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c1       	rjmp	.+650    	; 0x2c8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c1       	rjmp	.+646    	; 0x2c8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c1       	rjmp	.+642    	; 0x2c8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c1       	rjmp	.+638    	; 0x2c8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c1       	rjmp	.+634    	; 0x2c8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c1       	rjmp	.+630    	; 0x2c8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c1       	rjmp	.+626    	; 0x2c8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c1       	rjmp	.+622    	; 0x2c8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c1       	rjmp	.+618    	; 0x2c8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c1       	rjmp	.+614    	; 0x2c8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c1       	rjmp	.+610    	; 0x2c8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c1       	rjmp	.+606    	; 0x2c8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c1       	rjmp	.+602    	; 0x2c8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c1       	rjmp	.+598    	; 0x2c8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c1       	rjmp	.+594    	; 0x2c8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c1       	rjmp	.+590    	; 0x2c8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c1       	rjmp	.+586    	; 0x2c8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c1       	rjmp	.+582    	; 0x2c8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c1       	rjmp	.+578    	; 0x2c8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c1       	rjmp	.+574    	; 0x2c8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	1d c1       	rjmp	.+570    	; 0x2c8 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1b c1       	rjmp	.+566    	; 0x2c8 <__bad_interrupt>
      92:	00 00       	nop
      94:	19 c1       	rjmp	.+562    	; 0x2c8 <__bad_interrupt>
      96:	00 00       	nop
      98:	17 c1       	rjmp	.+558    	; 0x2c8 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	37 c6       	rjmp	.+3182   	; 0xd0c <__vector_39>
      9e:	00 00       	nop
      a0:	13 c1       	rjmp	.+550    	; 0x2c8 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	11 c1       	rjmp	.+546    	; 0x2c8 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	af c4       	rjmp	.+2398   	; 0xa08 <__vector_42>
      aa:	00 00       	nop
      ac:	0d c1       	rjmp	.+538    	; 0x2c8 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	0b c1       	rjmp	.+534    	; 0x2c8 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	09 c1       	rjmp	.+530    	; 0x2c8 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	07 c1       	rjmp	.+526    	; 0x2c8 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	d0 c5       	rjmp	.+2976   	; 0xc5e <__vector_47>
      be:	00 00       	nop
      c0:	03 c1       	rjmp	.+518    	; 0x2c8 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	01 c1       	rjmp	.+514    	; 0x2c8 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	ff c0       	rjmp	.+510    	; 0x2c8 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	fd c0       	rjmp	.+506    	; 0x2c8 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	fb c0       	rjmp	.+502    	; 0x2c8 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	f9 c0       	rjmp	.+498    	; 0x2c8 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	f7 c0       	rjmp	.+494    	; 0x2c8 <__bad_interrupt>
      da:	00 00       	nop
      dc:	f5 c0       	rjmp	.+490    	; 0x2c8 <__bad_interrupt>
      de:	00 00       	nop
      e0:	f3 c0       	rjmp	.+486    	; 0x2c8 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	a1 06       	cpc	r10, r17
      e6:	f3 06       	cpc	r15, r19
      e8:	f3 06       	cpc	r15, r19
      ea:	f3 06       	cpc	r15, r19
      ec:	f3 06       	cpc	r15, r19
      ee:	f3 06       	cpc	r15, r19
      f0:	f3 06       	cpc	r15, r19
      f2:	f3 06       	cpc	r15, r19
      f4:	a1 06       	cpc	r10, r17
      f6:	f3 06       	cpc	r15, r19
      f8:	f3 06       	cpc	r15, r19
      fa:	f3 06       	cpc	r15, r19
      fc:	f3 06       	cpc	r15, r19
      fe:	f3 06       	cpc	r15, r19
     100:	f3 06       	cpc	r15, r19
     102:	f3 06       	cpc	r15, r19
     104:	a3 06       	cpc	r10, r19
     106:	f3 06       	cpc	r15, r19
     108:	f3 06       	cpc	r15, r19
     10a:	f3 06       	cpc	r15, r19
     10c:	f3 06       	cpc	r15, r19
     10e:	f3 06       	cpc	r15, r19
     110:	f3 06       	cpc	r15, r19
     112:	f3 06       	cpc	r15, r19
     114:	f3 06       	cpc	r15, r19
     116:	f3 06       	cpc	r15, r19
     118:	f3 06       	cpc	r15, r19
     11a:	f3 06       	cpc	r15, r19
     11c:	f3 06       	cpc	r15, r19
     11e:	f3 06       	cpc	r15, r19
     120:	f3 06       	cpc	r15, r19
     122:	f3 06       	cpc	r15, r19
     124:	a3 06       	cpc	r10, r19
     126:	f3 06       	cpc	r15, r19
     128:	f3 06       	cpc	r15, r19
     12a:	f3 06       	cpc	r15, r19
     12c:	f3 06       	cpc	r15, r19
     12e:	f3 06       	cpc	r15, r19
     130:	f3 06       	cpc	r15, r19
     132:	f3 06       	cpc	r15, r19
     134:	f3 06       	cpc	r15, r19
     136:	f3 06       	cpc	r15, r19
     138:	f3 06       	cpc	r15, r19
     13a:	f3 06       	cpc	r15, r19
     13c:	f3 06       	cpc	r15, r19
     13e:	f3 06       	cpc	r15, r19
     140:	f3 06       	cpc	r15, r19
     142:	f3 06       	cpc	r15, r19
     144:	ef 06       	cpc	r14, r31
     146:	f3 06       	cpc	r15, r19
     148:	f3 06       	cpc	r15, r19
     14a:	f3 06       	cpc	r15, r19
     14c:	f3 06       	cpc	r15, r19
     14e:	f3 06       	cpc	r15, r19
     150:	f3 06       	cpc	r15, r19
     152:	f3 06       	cpc	r15, r19
     154:	cc 06       	cpc	r12, r28
     156:	f3 06       	cpc	r15, r19
     158:	f3 06       	cpc	r15, r19
     15a:	f3 06       	cpc	r15, r19
     15c:	f3 06       	cpc	r15, r19
     15e:	f3 06       	cpc	r15, r19
     160:	f3 06       	cpc	r15, r19
     162:	f3 06       	cpc	r15, r19
     164:	f3 06       	cpc	r15, r19
     166:	f3 06       	cpc	r15, r19
     168:	f3 06       	cpc	r15, r19
     16a:	f3 06       	cpc	r15, r19
     16c:	f3 06       	cpc	r15, r19
     16e:	f3 06       	cpc	r15, r19
     170:	f3 06       	cpc	r15, r19
     172:	f3 06       	cpc	r15, r19
     174:	c0 06       	cpc	r12, r16
     176:	f3 06       	cpc	r15, r19
     178:	f3 06       	cpc	r15, r19
     17a:	f3 06       	cpc	r15, r19
     17c:	f3 06       	cpc	r15, r19
     17e:	f3 06       	cpc	r15, r19
     180:	f3 06       	cpc	r15, r19
     182:	f3 06       	cpc	r15, r19
     184:	de 06       	cpc	r13, r30

00000186 <__trampolines_end>:
     186:	6e 61       	ori	r22, 0x1E	; 30
     188:	6e 00       	.word	0x006e	; ????

0000018a <__c.2159>:
     18a:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     19a:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1aa:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1ba:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1ca:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1da:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1ea:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1fa:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     20a:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     21a:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     22a:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     23a:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     24a:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     25a:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     26a:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     27a:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000288 <__ctors_end>:
     288:	11 24       	eor	r1, r1
     28a:	1f be       	out	0x3f, r1	; 63
     28c:	cf ef       	ldi	r28, 0xFF	; 255
     28e:	d1 e2       	ldi	r29, 0x21	; 33
     290:	de bf       	out	0x3e, r29	; 62
     292:	cd bf       	out	0x3d, r28	; 61
     294:	00 e0       	ldi	r16, 0x00	; 0
     296:	0c bf       	out	0x3c, r16	; 60

00000298 <__do_copy_data>:
     298:	12 e0       	ldi	r17, 0x02	; 2
     29a:	a0 e0       	ldi	r26, 0x00	; 0
     29c:	b2 e0       	ldi	r27, 0x02	; 2
     29e:	e4 e2       	ldi	r30, 0x24	; 36
     2a0:	fd e1       	ldi	r31, 0x1D	; 29
     2a2:	00 e0       	ldi	r16, 0x00	; 0
     2a4:	0b bf       	out	0x3b, r16	; 59
     2a6:	02 c0       	rjmp	.+4      	; 0x2ac <__do_copy_data+0x14>
     2a8:	07 90       	elpm	r0, Z+
     2aa:	0d 92       	st	X+, r0
     2ac:	ae 3e       	cpi	r26, 0xEE	; 238
     2ae:	b1 07       	cpc	r27, r17
     2b0:	d9 f7       	brne	.-10     	; 0x2a8 <__do_copy_data+0x10>

000002b2 <__do_clear_bss>:
     2b2:	23 e0       	ldi	r18, 0x03	; 3
     2b4:	ae ee       	ldi	r26, 0xEE	; 238
     2b6:	b2 e0       	ldi	r27, 0x02	; 2
     2b8:	01 c0       	rjmp	.+2      	; 0x2bc <.do_clear_bss_start>

000002ba <.do_clear_bss_loop>:
     2ba:	1d 92       	st	X+, r1

000002bc <.do_clear_bss_start>:
     2bc:	a3 35       	cpi	r26, 0x53	; 83
     2be:	b2 07       	cpc	r27, r18
     2c0:	e1 f7       	brne	.-8      	; 0x2ba <.do_clear_bss_loop>
     2c2:	87 d4       	rcall	.+2318   	; 0xbd2 <main>
     2c4:	0c 94 90 0e 	jmp	0x1d20	; 0x1d20 <_exit>

000002c8 <__bad_interrupt>:
     2c8:	9b ce       	rjmp	.-714    	; 0x0 <__vectors>

000002ca <pi_calibrate>:
uint16_t max_position;

uint8_t printvar;

void pi_calibrate() {
	motor_direction(MOTOR_LEFT);
     2ca:	81 e0       	ldi	r24, 0x01	; 1
     2cc:	67 d3       	rcall	.+1742   	; 0x99c <motor_direction>
	motor_speed(76);
     2ce:	8c e4       	ldi	r24, 0x4C	; 76
     2d0:	50 d3       	rcall	.+1696   	; 0x972 <motor_speed>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2d2:	2f ef       	ldi	r18, 0xFF	; 255
     2d4:	87 ea       	ldi	r24, 0xA7	; 167
     2d6:	91 e6       	ldi	r25, 0x61	; 97
     2d8:	21 50       	subi	r18, 0x01	; 1
     2da:	80 40       	sbci	r24, 0x00	; 0
     2dc:	90 40       	sbci	r25, 0x00	; 0
     2de:	e1 f7       	brne	.-8      	; 0x2d8 <pi_calibrate+0xe>
     2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <pi_calibrate+0x18>
     2e2:	00 00       	nop
	_delay_ms(2000);
	motor_speed(0);
     2e4:	80 e0       	ldi	r24, 0x00	; 0
     2e6:	45 d3       	rcall	.+1674   	; 0x972 <motor_speed>
     2e8:	2f ef       	ldi	r18, 0xFF	; 255
     2ea:	80 e7       	ldi	r24, 0x70	; 112
     2ec:	92 e0       	ldi	r25, 0x02	; 2
     2ee:	21 50       	subi	r18, 0x01	; 1
     2f0:	80 40       	sbci	r24, 0x00	; 0
     2f2:	90 40       	sbci	r25, 0x00	; 0
     2f4:	e1 f7       	brne	.-8      	; 0x2ee <pi_calibrate+0x24>
     2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <pi_calibrate+0x2e>
     2f8:	00 00       	nop
	_delay_ms(50);
	motor_encoder_reset();
     2fa:	24 d3       	rcall	.+1608   	; 0x944 <motor_encoder_reset>

	motor_direction(MOTOR_RIGHT);
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	4e d3       	rcall	.+1692   	; 0x99c <motor_direction>
	motor_speed(70);
     300:	86 e4       	ldi	r24, 0x46	; 70
     302:	37 d3       	rcall	.+1646   	; 0x972 <motor_speed>
     304:	2f ef       	ldi	r18, 0xFF	; 255
     306:	87 ea       	ldi	r24, 0xA7	; 167
     308:	91 e6       	ldi	r25, 0x61	; 97
     30a:	21 50       	subi	r18, 0x01	; 1
     30c:	80 40       	sbci	r24, 0x00	; 0
     30e:	90 40       	sbci	r25, 0x00	; 0
     310:	e1 f7       	brne	.-8      	; 0x30a <pi_calibrate+0x40>
     312:	00 c0       	rjmp	.+0      	; 0x314 <pi_calibrate+0x4a>
     314:	00 00       	nop
	_delay_ms(2000);
	motor_speed(0);
     316:	80 e0       	ldi	r24, 0x00	; 0
     318:	2c d3       	rcall	.+1624   	; 0x972 <motor_speed>
     31a:	2f ef       	ldi	r18, 0xFF	; 255
     31c:	80 e7       	ldi	r24, 0x70	; 112
     31e:	92 e0       	ldi	r25, 0x02	; 2
     320:	21 50       	subi	r18, 0x01	; 1
     322:	80 40       	sbci	r24, 0x00	; 0
     324:	90 40       	sbci	r25, 0x00	; 0
     326:	e1 f7       	brne	.-8      	; 0x320 <pi_calibrate+0x56>
     328:	00 c0       	rjmp	.+0      	; 0x32a <pi_calibrate+0x60>
     32a:	00 00       	nop
	_delay_ms(50);
	
	max_position = motor_encoder_read();
     32c:	4f d3       	rcall	.+1694   	; 0x9cc <motor_encoder_read>
     32e:	80 93 39 03 	sts	0x0339, r24
     332:	90 93 3a 03 	sts	0x033A, r25
	//motor_encoder_reset();
	printf("max pos: %d\n\n", max_position);
     336:	9f 93       	push	r25
     338:	8f 93       	push	r24
     33a:	8f e0       	ldi	r24, 0x0F	; 15
     33c:	92 e0       	ldi	r25, 0x02	; 2
     33e:	9f 93       	push	r25
     340:	8f 93       	push	r24
     342:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <printf>
     346:	0f 90       	pop	r0
     348:	0f 90       	pop	r0
     34a:	0f 90       	pop	r0
     34c:	0f 90       	pop	r0
     34e:	08 95       	ret

00000350 <pi_init>:
}

void pi_init() {
	direction = MOTOR_LEFT;
     350:	81 e0       	ldi	r24, 0x01	; 1
     352:	80 93 3f 03 	sts	0x033F, r24
	
	integral = 0;
     356:	10 92 47 03 	sts	0x0347, r1
     35a:	10 92 48 03 	sts	0x0348, r1
     35e:	10 92 49 03 	sts	0x0349, r1
     362:	10 92 4a 03 	sts	0x034A, r1

	printvar = 0;
     366:	10 92 42 03 	sts	0x0342, r1

	pi_calibrate();
     36a:	af df       	rcall	.-162    	; 0x2ca <pi_calibrate>
	position = max_position;
     36c:	60 91 39 03 	lds	r22, 0x0339
     370:	70 91 3a 03 	lds	r23, 0x033A
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	4e d6       	rcall	.+3228   	; 0x1016 <__floatunsisf>
     37a:	60 93 3b 03 	sts	0x033B, r22
     37e:	70 93 3c 03 	sts	0x033C, r23
     382:	80 93 3d 03 	sts	0x033D, r24
     386:	90 93 3e 03 	sts	0x033E, r25
     38a:	08 95       	ret

0000038c <pi_update_posref>:
}

void pi_update_posref(uint8_t newref) {
	posref = newref*32;
     38c:	20 e2       	ldi	r18, 0x20	; 32
     38e:	82 9f       	mul	r24, r18
     390:	c0 01       	movw	r24, r0
     392:	11 24       	eor	r1, r1
     394:	90 93 41 03 	sts	0x0341, r25
     398:	80 93 40 03 	sts	0x0340, r24
     39c:	08 95       	ret

0000039e <pi_update>:
}

void pi_update() {
     39e:	4f 92       	push	r4
     3a0:	5f 92       	push	r5
     3a2:	6f 92       	push	r6
     3a4:	7f 92       	push	r7
     3a6:	8f 92       	push	r8
     3a8:	9f 92       	push	r9
     3aa:	af 92       	push	r10
     3ac:	bf 92       	push	r11
     3ae:	cf 92       	push	r12
     3b0:	df 92       	push	r13
     3b2:	ef 92       	push	r14
     3b4:	ff 92       	push	r15
     3b6:	cf 93       	push	r28
	//PORTC |= (1<<MOTOR_RST);
	position = motor_encoder_read();
     3b8:	09 d3       	rcall	.+1554   	; 0x9cc <motor_encoder_read>
     3ba:	bc 01       	movw	r22, r24
     3bc:	88 27       	eor	r24, r24
     3be:	77 fd       	sbrc	r23, 7
     3c0:	80 95       	com	r24
     3c2:	98 2f       	mov	r25, r24
     3c4:	2a d6       	rcall	.+3156   	; 0x101a <__floatsisf>
     3c6:	6b 01       	movw	r12, r22
     3c8:	7c 01       	movw	r14, r24
     3ca:	60 93 3b 03 	sts	0x033B, r22
     3ce:	70 93 3c 03 	sts	0x033C, r23
     3d2:	80 93 3d 03 	sts	0x033D, r24
     3d6:	90 93 3e 03 	sts	0x033E, r25
	
	int16_t error = (position - posref);
     3da:	60 91 40 03 	lds	r22, 0x0340
     3de:	70 91 41 03 	lds	r23, 0x0341
     3e2:	88 27       	eor	r24, r24
     3e4:	77 fd       	sbrc	r23, 7
     3e6:	80 95       	com	r24
     3e8:	98 2f       	mov	r25, r24
     3ea:	17 d6       	rcall	.+3118   	; 0x101a <__floatsisf>
     3ec:	4b 01       	movw	r8, r22
     3ee:	5c 01       	movw	r10, r24
     3f0:	9b 01       	movw	r18, r22
     3f2:	ac 01       	movw	r20, r24
     3f4:	c7 01       	movw	r24, r14
     3f6:	b6 01       	movw	r22, r12
     3f8:	0c d5       	rcall	.+2584   	; 0xe12 <__subsf3>
     3fa:	dc d5       	rcall	.+3000   	; 0xfb4 <__fixsfsi>
	
	integral += ((float)error * (float)TIMER5_OCRA / (float)F_CPU)*1024; //unit of integral is seconds  
     3fc:	88 27       	eor	r24, r24
     3fe:	77 fd       	sbrc	r23, 7
     400:	80 95       	com	r24
     402:	98 2f       	mov	r25, r24
     404:	0a d6       	rcall	.+3092   	; 0x101a <__floatsisf>
     406:	2b 01       	movw	r4, r22
     408:	3c 01       	movw	r6, r24
     40a:	20 e0       	ldi	r18, 0x00	; 0
     40c:	30 e0       	ldi	r19, 0x00	; 0
     40e:	4f e5       	ldi	r20, 0x5F	; 95
     410:	53 e4       	ldi	r21, 0x43	; 67
     412:	b3 d6       	rcall	.+3430   	; 0x117a <__mulsf3>
     414:	20 e0       	ldi	r18, 0x00	; 0
     416:	34 e2       	ldi	r19, 0x24	; 36
     418:	44 e7       	ldi	r20, 0x74	; 116
     41a:	5b e4       	ldi	r21, 0x4B	; 75
     41c:	63 d5       	rcall	.+2758   	; 0xee4 <__divsf3>
     41e:	20 e0       	ldi	r18, 0x00	; 0
     420:	30 e0       	ldi	r19, 0x00	; 0
     422:	40 e8       	ldi	r20, 0x80	; 128
     424:	54 e4       	ldi	r21, 0x44	; 68
     426:	a9 d6       	rcall	.+3410   	; 0x117a <__mulsf3>
     428:	9b 01       	movw	r18, r22
     42a:	ac 01       	movw	r20, r24
     42c:	60 91 47 03 	lds	r22, 0x0347
     430:	70 91 48 03 	lds	r23, 0x0348
     434:	80 91 49 03 	lds	r24, 0x0349
     438:	90 91 4a 03 	lds	r25, 0x034A
     43c:	eb d4       	rcall	.+2518   	; 0xe14 <__addsf3>
     43e:	60 93 47 03 	sts	0x0347, r22
     442:	70 93 48 03 	sts	0x0348, r23
     446:	80 93 49 03 	sts	0x0349, r24
     44a:	90 93 4a 03 	sts	0x034A, r25

	uint8_t speed = (float)K_P * (float)error;//+ fabs(integral * K_I);
     44e:	26 ea       	ldi	r18, 0xA6	; 166
     450:	3b e9       	ldi	r19, 0x9B	; 155
     452:	44 ec       	ldi	r20, 0xC4	; 196
     454:	5c e3       	ldi	r21, 0x3C	; 60
     456:	c3 01       	movw	r24, r6
     458:	b2 01       	movw	r22, r4
     45a:	8f d6       	rcall	.+3358   	; 0x117a <__mulsf3>
     45c:	b0 d5       	rcall	.+2912   	; 0xfbe <__fixunssfsi>
     45e:	c6 2f       	mov	r28, r22
     460:	69 37       	cpi	r22, 0x79	; 121
     462:	08 f0       	brcs	.+2      	; 0x466 <pi_update+0xc8>
     464:	c8 e7       	ldi	r28, 0x78	; 120

	if (speed > MAX_SPEED)	{ speed = MAX_SPEED; } 
	//else if (speed < MIN_SPEED && speed ){ }

	if(position < posref) {
     466:	a5 01       	movw	r20, r10
     468:	94 01       	movw	r18, r8
     46a:	c7 01       	movw	r24, r14
     46c:	b6 01       	movw	r22, r12
     46e:	36 d5       	rcall	.+2668   	; 0xedc <__cmpsf2>
     470:	88 23       	and	r24, r24
     472:	1c f4       	brge	.+6      	; 0x47a <pi_update+0xdc>
		motor_direction(MOTOR_RIGHT);
     474:	80 e0       	ldi	r24, 0x00	; 0
     476:	92 d2       	rcall	.+1316   	; 0x99c <motor_direction>
     478:	02 c0       	rjmp	.+4      	; 0x47e <pi_update+0xe0>
	} else {
		motor_direction(MOTOR_LEFT);
     47a:	81 e0       	ldi	r24, 0x01	; 1
     47c:	8f d2       	rcall	.+1310   	; 0x99c <motor_direction>
	}

	motor_speed(speed);
     47e:	8c 2f       	mov	r24, r28
     480:	78 d2       	rcall	.+1264   	; 0x972 <motor_speed>
 

	//printf("speed: %d\nerror: %d\n\n", speed, error);

     482:	cf 91       	pop	r28
     484:	ff 90       	pop	r15
     486:	ef 90       	pop	r14
     488:	df 90       	pop	r13
     48a:	cf 90       	pop	r12
     48c:	bf 90       	pop	r11
     48e:	af 90       	pop	r10
     490:	9f 90       	pop	r9
     492:	8f 90       	pop	r8
     494:	7f 90       	pop	r7
     496:	6f 90       	pop	r6
     498:	5f 90       	pop	r5
     49a:	4f 90       	pop	r4
     49c:	08 95       	ret

0000049e <adc_init>:
#include <util/delay.h>
#include "adc_driver.h"


void adc_init(){
	ADCSRA	|= (1 << ADEN) | (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);
     49e:	ea e7       	ldi	r30, 0x7A	; 122
     4a0:	f0 e0       	ldi	r31, 0x00	; 0
     4a2:	80 81       	ld	r24, Z
     4a4:	87 68       	ori	r24, 0x87	; 135
     4a6:	80 83       	st	Z, r24
	ADMUX	|= (1<<REFS0);
     4a8:	ec e7       	ldi	r30, 0x7C	; 124
     4aa:	f0 e0       	ldi	r31, 0x00	; 0
     4ac:	80 81       	ld	r24, Z
     4ae:	80 64       	ori	r24, 0x40	; 64
     4b0:	80 83       	st	Z, r24
	ADMUX	&= ~(1<<REFS1); 
     4b2:	80 81       	ld	r24, Z
     4b4:	8f 77       	andi	r24, 0x7F	; 127
     4b6:	80 83       	st	Z, r24
     4b8:	08 95       	ret

000004ba <adc_read>:
}

uint16_t adc_read(uint8_t channel){
	ADMUX	= (1<<REFS0) | (channel & 0x03);
     4ba:	83 70       	andi	r24, 0x03	; 3
     4bc:	80 64       	ori	r24, 0x40	; 64
     4be:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA	|= (1 << ADSC);
     4c2:	ea e7       	ldi	r30, 0x7A	; 122
     4c4:	f0 e0       	ldi	r31, 0x00	; 0
     4c6:	80 81       	ld	r24, Z
     4c8:	80 64       	ori	r24, 0x40	; 64
     4ca:	80 83       	st	Z, r24

	while((ADCSRA & (1<<ADSC))){ ; }
     4cc:	80 81       	ld	r24, Z
     4ce:	86 fd       	sbrc	r24, 6
     4d0:	fd cf       	rjmp	.-6      	; 0x4cc <adc_read+0x12>

	return ADC;
     4d2:	80 91 78 00 	lds	r24, 0x0078
     4d6:	90 91 79 00 	lds	r25, 0x0079
}
     4da:	08 95       	ret

000004dc <can_init>:
     4dc:	13 d2       	rcall	.+1062   	; 0x904 <mcp2515_init>
     4de:	8f e0       	ldi	r24, 0x0F	; 15
     4e0:	04 d2       	rcall	.+1032   	; 0x8ea <mcp2515_read>
     4e2:	1f 92       	push	r1
     4e4:	8f 93       	push	r24
     4e6:	8d e1       	ldi	r24, 0x1D	; 29
     4e8:	92 e0       	ldi	r25, 0x02	; 2
     4ea:	9f 93       	push	r25
     4ec:	8f 93       	push	r24
     4ee:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <printf>
     4f2:	4f ef       	ldi	r20, 0xFF	; 255
     4f4:	60 e6       	ldi	r22, 0x60	; 96
     4f6:	80 e6       	ldi	r24, 0x60	; 96
     4f8:	df d1       	rcall	.+958    	; 0x8b8 <mcp2515_bit_modify>
     4fa:	40 e0       	ldi	r20, 0x00	; 0
     4fc:	64 e0       	ldi	r22, 0x04	; 4
     4fe:	80 e6       	ldi	r24, 0x60	; 96
     500:	db d1       	rcall	.+950    	; 0x8b8 <mcp2515_bit_modify>
     502:	4f ef       	ldi	r20, 0xFF	; 255
     504:	61 e0       	ldi	r22, 0x01	; 1
     506:	8b e2       	ldi	r24, 0x2B	; 43
     508:	d7 d1       	rcall	.+942    	; 0x8b8 <mcp2515_bit_modify>
     50a:	40 e0       	ldi	r20, 0x00	; 0
     50c:	60 ee       	ldi	r22, 0xE0	; 224
     50e:	8f e0       	ldi	r24, 0x0F	; 15
     510:	d3 d1       	rcall	.+934    	; 0x8b8 <mcp2515_bit_modify>
     512:	0f 90       	pop	r0
     514:	0f 90       	pop	r0
     516:	0f 90       	pop	r0
     518:	0f 90       	pop	r0
     51a:	08 95       	ret

0000051c <can_transmit_complete>:
     51c:	80 e3       	ldi	r24, 0x30	; 48
     51e:	e5 d1       	rcall	.+970    	; 0x8ea <mcp2515_read>
     520:	86 95       	lsr	r24
     522:	86 95       	lsr	r24
     524:	86 95       	lsr	r24
     526:	91 e0       	ldi	r25, 0x01	; 1
     528:	89 27       	eor	r24, r25
     52a:	81 70       	andi	r24, 0x01	; 1
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	08 95       	ret

00000530 <can_message_send>:
     530:	1f 93       	push	r17
     532:	cf 93       	push	r28
     534:	df 93       	push	r29
     536:	ec 01       	movw	r28, r24
     538:	f1 df       	rcall	.-30     	; 0x51c <can_transmit_complete>
     53a:	89 2b       	or	r24, r25
     53c:	e9 f3       	breq	.-6      	; 0x538 <can_message_send+0x8>
     53e:	68 81       	ld	r22, Y
     540:	79 81       	ldd	r23, Y+1	; 0x01
     542:	75 95       	asr	r23
     544:	67 95       	ror	r22
     546:	75 95       	asr	r23
     548:	67 95       	ror	r22
     54a:	75 95       	asr	r23
     54c:	67 95       	ror	r22
     54e:	81 e3       	ldi	r24, 0x31	; 49
     550:	97 d1       	rcall	.+814    	; 0x880 <mcp2515_write>
     552:	68 81       	ld	r22, Y
     554:	79 81       	ldd	r23, Y+1	; 0x01
     556:	66 0f       	add	r22, r22
     558:	77 1f       	adc	r23, r23
     55a:	62 95       	swap	r22
     55c:	72 95       	swap	r23
     55e:	70 7f       	andi	r23, 0xF0	; 240
     560:	76 27       	eor	r23, r22
     562:	60 7f       	andi	r22, 0xF0	; 240
     564:	76 27       	eor	r23, r22
     566:	82 e3       	ldi	r24, 0x32	; 50
     568:	8b d1       	rcall	.+790    	; 0x880 <mcp2515_write>
     56a:	6a 81       	ldd	r22, Y+2	; 0x02
     56c:	6f 70       	andi	r22, 0x0F	; 15
     56e:	85 e3       	ldi	r24, 0x35	; 53
     570:	87 d1       	rcall	.+782    	; 0x880 <mcp2515_write>
     572:	8a 81       	ldd	r24, Y+2	; 0x02
     574:	88 23       	and	r24, r24
     576:	61 f0       	breq	.+24     	; 0x590 <can_message_send+0x60>
     578:	10 e0       	ldi	r17, 0x00	; 0
     57a:	fe 01       	movw	r30, r28
     57c:	e1 0f       	add	r30, r17
     57e:	f1 1d       	adc	r31, r1
     580:	63 81       	ldd	r22, Z+3	; 0x03
     582:	86 e3       	ldi	r24, 0x36	; 54
     584:	81 0f       	add	r24, r17
     586:	7c d1       	rcall	.+760    	; 0x880 <mcp2515_write>
     588:	1f 5f       	subi	r17, 0xFF	; 255
     58a:	8a 81       	ldd	r24, Y+2	; 0x02
     58c:	18 17       	cp	r17, r24
     58e:	a8 f3       	brcs	.-22     	; 0x57a <can_message_send+0x4a>
     590:	81 e0       	ldi	r24, 0x01	; 1
     592:	85 d1       	rcall	.+778    	; 0x89e <mcp2515_request_to_send>
     594:	df 91       	pop	r29
     596:	cf 91       	pop	r28
     598:	1f 91       	pop	r17
     59a:	08 95       	ret

0000059c <can_data_receive>:
     59c:	9f 92       	push	r9
     59e:	af 92       	push	r10
     5a0:	bf 92       	push	r11
     5a2:	cf 92       	push	r12
     5a4:	df 92       	push	r13
     5a6:	ef 92       	push	r14
     5a8:	ff 92       	push	r15
     5aa:	0f 93       	push	r16
     5ac:	1f 93       	push	r17
     5ae:	cf 93       	push	r28
     5b0:	df 93       	push	r29
     5b2:	cd b7       	in	r28, 0x3d	; 61
     5b4:	de b7       	in	r29, 0x3e	; 62
     5b6:	2b 97       	sbiw	r28, 0x0b	; 11
     5b8:	0f b6       	in	r0, 0x3f	; 63
     5ba:	f8 94       	cli
     5bc:	de bf       	out	0x3e, r29	; 62
     5be:	0f be       	out	0x3f, r0	; 63
     5c0:	cd bf       	out	0x3d, r28	; 61
     5c2:	7c 01       	movw	r14, r24
     5c4:	8c e2       	ldi	r24, 0x2C	; 44
     5c6:	91 d1       	rcall	.+802    	; 0x8ea <mcp2515_read>
     5c8:	80 ff       	sbrs	r24, 0
     5ca:	30 c0       	rjmp	.+96     	; 0x62c <can_data_receive+0x90>
     5cc:	81 e6       	ldi	r24, 0x61	; 97
     5ce:	8d d1       	rcall	.+794    	; 0x8ea <mcp2515_read>
     5d0:	c8 2e       	mov	r12, r24
     5d2:	82 e6       	ldi	r24, 0x62	; 98
     5d4:	8a d1       	rcall	.+788    	; 0x8ea <mcp2515_read>
     5d6:	82 95       	swap	r24
     5d8:	86 95       	lsr	r24
     5da:	87 70       	andi	r24, 0x07	; 7
     5dc:	d1 2c       	mov	r13, r1
     5de:	cc 0c       	add	r12, r12
     5e0:	dd 1c       	adc	r13, r13
     5e2:	cc 0c       	add	r12, r12
     5e4:	dd 1c       	adc	r13, r13
     5e6:	cc 0c       	add	r12, r12
     5e8:	dd 1c       	adc	r13, r13
     5ea:	c8 2a       	or	r12, r24
     5ec:	85 e6       	ldi	r24, 0x65	; 101
     5ee:	7d d1       	rcall	.+762    	; 0x8ea <mcp2515_read>
     5f0:	8f 70       	andi	r24, 0x0F	; 15
     5f2:	98 2e       	mov	r9, r24
     5f4:	a1 f0       	breq	.+40     	; 0x61e <can_data_receive+0x82>
     5f6:	8e 01       	movw	r16, r28
     5f8:	0c 5f       	subi	r16, 0xFC	; 252
     5fa:	1f 4f       	sbci	r17, 0xFF	; 255
     5fc:	0f 2e       	mov	r0, r31
     5fe:	f6 e6       	ldi	r31, 0x66	; 102
     600:	af 2e       	mov	r10, r31
     602:	f0 2d       	mov	r31, r0
     604:	a8 0e       	add	r10, r24
     606:	0f 2e       	mov	r0, r31
     608:	f6 e6       	ldi	r31, 0x66	; 102
     60a:	bf 2e       	mov	r11, r31
     60c:	f0 2d       	mov	r31, r0
     60e:	8b 2d       	mov	r24, r11
     610:	6c d1       	rcall	.+728    	; 0x8ea <mcp2515_read>
     612:	f8 01       	movw	r30, r16
     614:	81 93       	st	Z+, r24
     616:	8f 01       	movw	r16, r30
     618:	b3 94       	inc	r11
     61a:	ba 10       	cpse	r11, r10
     61c:	f8 cf       	rjmp	.-16     	; 0x60e <can_data_receive+0x72>
     61e:	10 92 4c 03 	sts	0x034C, r1
     622:	40 e0       	ldi	r20, 0x00	; 0
     624:	61 e0       	ldi	r22, 0x01	; 1
     626:	8c e2       	ldi	r24, 0x2C	; 44
     628:	47 d1       	rcall	.+654    	; 0x8b8 <mcp2515_bit_modify>
     62a:	03 c0       	rjmp	.+6      	; 0x632 <can_data_receive+0x96>
     62c:	cc 24       	eor	r12, r12
     62e:	ca 94       	dec	r12
     630:	dc 2c       	mov	r13, r12
     632:	da 82       	std	Y+2, r13	; 0x02
     634:	c9 82       	std	Y+1, r12	; 0x01
     636:	9b 82       	std	Y+3, r9	; 0x03
     638:	8b e0       	ldi	r24, 0x0B	; 11
     63a:	fe 01       	movw	r30, r28
     63c:	31 96       	adiw	r30, 0x01	; 1
     63e:	d7 01       	movw	r26, r14
     640:	01 90       	ld	r0, Z+
     642:	0d 92       	st	X+, r0
     644:	8a 95       	dec	r24
     646:	e1 f7       	brne	.-8      	; 0x640 <can_data_receive+0xa4>
     648:	c7 01       	movw	r24, r14
     64a:	2b 96       	adiw	r28, 0x0b	; 11
     64c:	0f b6       	in	r0, 0x3f	; 63
     64e:	f8 94       	cli
     650:	de bf       	out	0x3e, r29	; 62
     652:	0f be       	out	0x3f, r0	; 63
     654:	cd bf       	out	0x3d, r28	; 61
     656:	df 91       	pop	r29
     658:	cf 91       	pop	r28
     65a:	1f 91       	pop	r17
     65c:	0f 91       	pop	r16
     65e:	ff 90       	pop	r15
     660:	ef 90       	pop	r14
     662:	df 90       	pop	r13
     664:	cf 90       	pop	r12
     666:	bf 90       	pop	r11
     668:	af 90       	pop	r10
     66a:	9f 90       	pop	r9
     66c:	08 95       	ret

0000066e <can_print_message>:
     66e:	ff 92       	push	r15
     670:	0f 93       	push	r16
     672:	1f 93       	push	r17
     674:	cf 93       	push	r28
     676:	df 93       	push	r29
     678:	ec 01       	movw	r28, r24
     67a:	88 81       	ld	r24, Y
     67c:	99 81       	ldd	r25, Y+1	; 0x01
     67e:	8f 3f       	cpi	r24, 0xFF	; 255
     680:	2f ef       	ldi	r18, 0xFF	; 255
     682:	92 07       	cpc	r25, r18
     684:	09 f4       	brne	.+2      	; 0x688 <can_print_message+0x1a>
     686:	41 c0       	rjmp	.+130    	; 0x70a <can_print_message+0x9c>
     688:	2a 81       	ldd	r18, Y+2	; 0x02
     68a:	1f 92       	push	r1
     68c:	2f 93       	push	r18
     68e:	9f 93       	push	r25
     690:	8f 93       	push	r24
     692:	8c e3       	ldi	r24, 0x3C	; 60
     694:	92 e0       	ldi	r25, 0x02	; 2
     696:	9f 93       	push	r25
     698:	8f 93       	push	r24
     69a:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <printf>
     69e:	2b 81       	ldd	r18, Y+3	; 0x03
     6a0:	82 2f       	mov	r24, r18
     6a2:	99 27       	eor	r25, r25
     6a4:	87 fd       	sbrc	r24, 7
     6a6:	90 95       	com	r25
     6a8:	9f 93       	push	r25
     6aa:	2f 93       	push	r18
     6ac:	8e e5       	ldi	r24, 0x5E	; 94
     6ae:	92 e0       	ldi	r25, 0x02	; 2
     6b0:	9f 93       	push	r25
     6b2:	8f 93       	push	r24
     6b4:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <printf>
     6b8:	8d b7       	in	r24, 0x3d	; 61
     6ba:	9e b7       	in	r25, 0x3e	; 62
     6bc:	0a 96       	adiw	r24, 0x0a	; 10
     6be:	0f b6       	in	r0, 0x3f	; 63
     6c0:	f8 94       	cli
     6c2:	9e bf       	out	0x3e, r25	; 62
     6c4:	0f be       	out	0x3f, r0	; 63
     6c6:	8d bf       	out	0x3d, r24	; 61
     6c8:	8a 81       	ldd	r24, Y+2	; 0x02
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	d0 f0       	brcs	.+52     	; 0x702 <can_print_message+0x94>
     6ce:	ff 24       	eor	r15, r15
     6d0:	f3 94       	inc	r15
     6d2:	01 e7       	ldi	r16, 0x71	; 113
     6d4:	12 e0       	ldi	r17, 0x02	; 2
     6d6:	fe 01       	movw	r30, r28
     6d8:	ef 0d       	add	r30, r15
     6da:	f1 1d       	adc	r31, r1
     6dc:	23 81       	ldd	r18, Z+3	; 0x03
     6de:	82 2f       	mov	r24, r18
     6e0:	99 27       	eor	r25, r25
     6e2:	87 fd       	sbrc	r24, 7
     6e4:	90 95       	com	r25
     6e6:	9f 93       	push	r25
     6e8:	2f 93       	push	r18
     6ea:	1f 93       	push	r17
     6ec:	0f 93       	push	r16
     6ee:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <printf>
     6f2:	f3 94       	inc	r15
     6f4:	0f 90       	pop	r0
     6f6:	0f 90       	pop	r0
     6f8:	0f 90       	pop	r0
     6fa:	0f 90       	pop	r0
     6fc:	8a 81       	ldd	r24, Y+2	; 0x02
     6fe:	f8 16       	cp	r15, r24
     700:	50 f3       	brcs	.-44     	; 0x6d6 <can_print_message+0x68>
     702:	86 e7       	ldi	r24, 0x76	; 118
     704:	92 e0       	ldi	r25, 0x02	; 2
     706:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <puts>
     70a:	df 91       	pop	r29
     70c:	cf 91       	pop	r28
     70e:	1f 91       	pop	r17
     710:	0f 91       	pop	r16
     712:	ff 90       	pop	r15
     714:	08 95       	ret

00000716 <can_interrupt_vector>:
     716:	cf 93       	push	r28
     718:	df 93       	push	r29
     71a:	cd b7       	in	r28, 0x3d	; 61
     71c:	de b7       	in	r29, 0x3e	; 62
     71e:	2b 97       	sbiw	r28, 0x0b	; 11
     720:	0f b6       	in	r0, 0x3f	; 63
     722:	f8 94       	cli
     724:	de bf       	out	0x3e, r29	; 62
     726:	0f be       	out	0x3f, r0	; 63
     728:	cd bf       	out	0x3d, r28	; 61
     72a:	ce 01       	movw	r24, r28
     72c:	01 96       	adiw	r24, 0x01	; 1
     72e:	36 df       	rcall	.-404    	; 0x59c <can_data_receive>
     730:	8b e0       	ldi	r24, 0x0B	; 11
     732:	fe 01       	movw	r30, r28
     734:	31 96       	adiw	r30, 0x01	; 1
     736:	a4 e0       	ldi	r26, 0x04	; 4
     738:	b3 e0       	ldi	r27, 0x03	; 3
     73a:	01 90       	ld	r0, Z+
     73c:	0d 92       	st	X+, r0
     73e:	8a 95       	dec	r24
     740:	e1 f7       	brne	.-8      	; 0x73a <can_interrupt_vector+0x24>
     742:	84 e0       	ldi	r24, 0x04	; 4
     744:	93 e0       	ldi	r25, 0x03	; 3
     746:	93 df       	rcall	.-218    	; 0x66e <can_print_message>
     748:	2b 96       	adiw	r28, 0x0b	; 11
     74a:	0f b6       	in	r0, 0x3f	; 63
     74c:	f8 94       	cli
     74e:	de bf       	out	0x3e, r29	; 62
     750:	0f be       	out	0x3f, r0	; 63
     752:	cd bf       	out	0x3d, r28	; 61
     754:	df 91       	pop	r29
     756:	cf 91       	pop	r28
     758:	08 95       	ret

0000075a <__vector_1>:
     75a:	1f 92       	push	r1
     75c:	0f 92       	push	r0
     75e:	0f b6       	in	r0, 0x3f	; 63
     760:	0f 92       	push	r0
     762:	11 24       	eor	r1, r1
     764:	0b b6       	in	r0, 0x3b	; 59
     766:	0f 92       	push	r0
     768:	2f 93       	push	r18
     76a:	3f 93       	push	r19
     76c:	4f 93       	push	r20
     76e:	5f 93       	push	r21
     770:	6f 93       	push	r22
     772:	7f 93       	push	r23
     774:	8f 93       	push	r24
     776:	9f 93       	push	r25
     778:	af 93       	push	r26
     77a:	bf 93       	push	r27
     77c:	ef 93       	push	r30
     77e:	ff 93       	push	r31
     780:	ca df       	rcall	.-108    	; 0x716 <can_interrupt_vector>
     782:	ff 91       	pop	r31
     784:	ef 91       	pop	r30
     786:	bf 91       	pop	r27
     788:	af 91       	pop	r26
     78a:	9f 91       	pop	r25
     78c:	8f 91       	pop	r24
     78e:	7f 91       	pop	r23
     790:	6f 91       	pop	r22
     792:	5f 91       	pop	r21
     794:	4f 91       	pop	r20
     796:	3f 91       	pop	r19
     798:	2f 91       	pop	r18
     79a:	0f 90       	pop	r0
     79c:	0b be       	out	0x3b, r0	; 59
     79e:	0f 90       	pop	r0
     7a0:	0f be       	out	0x3f, r0	; 63
     7a2:	0f 90       	pop	r0
     7a4:	1f 90       	pop	r1
     7a6:	18 95       	reti

000007a8 <can_handle_message>:
	}
}



void can_handle_message(){
     7a8:	cf 93       	push	r28
     7aa:	df 93       	push	r29
     7ac:	cd b7       	in	r28, 0x3d	; 61
     7ae:	de b7       	in	r29, 0x3e	; 62
     7b0:	2b 97       	sbiw	r28, 0x0b	; 11
     7b2:	0f b6       	in	r0, 0x3f	; 63
     7b4:	f8 94       	cli
     7b6:	de bf       	out	0x3e, r29	; 62
     7b8:	0f be       	out	0x3f, r0	; 63
     7ba:	cd bf       	out	0x3d, r28	; 61
	static can_message_t message;
	message = can_data_receive();
     7bc:	ce 01       	movw	r24, r28
     7be:	01 96       	adiw	r24, 0x01	; 1
     7c0:	ed de       	rcall	.-550    	; 0x59c <can_data_receive>
     7c2:	8b e0       	ldi	r24, 0x0B	; 11
     7c4:	fe 01       	movw	r30, r28
     7c6:	31 96       	adiw	r30, 0x01	; 1
     7c8:	a9 ef       	ldi	r26, 0xF9	; 249
     7ca:	b2 e0       	ldi	r27, 0x02	; 2
     7cc:	01 90       	ld	r0, Z+
     7ce:	0d 92       	st	X+, r0
     7d0:	8a 95       	dec	r24
     7d2:	e1 f7       	brne	.-8      	; 0x7cc <can_handle_message+0x24>
	
	//can_print_message(&message);
	
	switch(message.id){
     7d4:	80 91 f9 02 	lds	r24, 0x02F9
     7d8:	90 91 fa 02 	lds	r25, 0x02FA
     7dc:	83 30       	cpi	r24, 0x03	; 3
     7de:	91 05       	cpc	r25, r1
     7e0:	69 f0       	breq	.+26     	; 0x7fc <can_handle_message+0x54>
     7e2:	84 30       	cpi	r24, 0x04	; 4
     7e4:	91 05       	cpc	r25, r1
     7e6:	61 f0       	breq	.+24     	; 0x800 <can_handle_message+0x58>
     7e8:	01 97       	sbiw	r24, 0x01	; 1
     7ea:	81 f4       	brne	.+32     	; 0x80c <can_handle_message+0x64>
		case JOY_CAN_ID:
			pwm_set_servo(-message.data[0]);
     7ec:	80 91 fc 02 	lds	r24, 0x02FC
     7f0:	99 27       	eor	r25, r25
     7f2:	81 95       	neg	r24
     7f4:	0c f4       	brge	.+2      	; 0x7f8 <can_handle_message+0x50>
     7f6:	90 95       	com	r25
     7f8:	38 d1       	rcall	.+624    	; 0xa6a <pwm_set_servo>
			return;
     7fa:	08 c0       	rjmp	.+16     	; 0x80c <can_handle_message+0x64>
		case BUTTON_CAN_ID:
			solenoid_shoot();
     7fc:	5c d1       	rcall	.+696    	; 0xab6 <solenoid_shoot>
			return;
     7fe:	06 c0       	rjmp	.+12     	; 0x80c <can_handle_message+0x64>
		case SLIDER_CAN_ID:
			pi_update_posref(message.data[0]);
     800:	80 91 fc 02 	lds	r24, 0x02FC
     804:	99 27       	eor	r25, r25
     806:	87 fd       	sbrc	r24, 7
     808:	90 95       	com	r25
     80a:	c0 dd       	rcall	.-1152   	; 0x38c <pi_update_posref>
			return;
		default:
			return;
	}
}
     80c:	2b 96       	adiw	r28, 0x0b	; 11
     80e:	0f b6       	in	r0, 0x3f	; 63
     810:	f8 94       	cli
     812:	de bf       	out	0x3e, r29	; 62
     814:	0f be       	out	0x3f, r0	; 63
     816:	cd bf       	out	0x3d, r28	; 61
     818:	df 91       	pop	r29
     81a:	cf 91       	pop	r28
     81c:	08 95       	ret

0000081e <can_ir_transmit>:


void can_ir_transmit(){
	static can_message_t ir_message;
	ir_message.length = 1;
     81e:	81 e0       	ldi	r24, 0x01	; 1
     820:	80 93 f0 02 	sts	0x02F0, r24
	ir_message.id = IR_CAN_ID;
     824:	82 e0       	ldi	r24, 0x02	; 2
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	90 93 ef 02 	sts	0x02EF, r25
     82c:	80 93 ee 02 	sts	0x02EE, r24
	ir_message.data[0] = last_ir_val;
     830:	80 91 4b 03 	lds	r24, 0x034B
     834:	80 93 f1 02 	sts	0x02F1, r24
	can_message_send(&ir_message);
     838:	8e ee       	ldi	r24, 0xEE	; 238
     83a:	92 e0       	ldi	r25, 0x02	; 2
     83c:	79 ce       	rjmp	.-782    	; 0x530 <can_message_send>
     83e:	08 95       	ret

00000840 <max520_init>:

#define  MAX520_TWI_ADDR_BASE 0b01010000

static uint8_t twi_address = 0b000;

void max520_init(uint8_t max520_twi_addr){
     840:	cf 93       	push	r28
     842:	c8 2f       	mov	r28, r24
	TWI_Master_Initialise();
     844:	37 d2       	rcall	.+1134   	; 0xcb4 <TWI_Master_Initialise>
	sei();
     846:	78 94       	sei
	twi_address = max520_twi_addr;
     848:	c0 93 0f 03 	sts	0x030F, r28
}
     84c:	cf 91       	pop	r28
     84e:	08 95       	ret

00000850 <max520_write>:

void max520_write(uint8_t channel, uint8_t val){
     850:	cf 93       	push	r28
     852:	df 93       	push	r29
     854:	00 d0       	rcall	.+0      	; 0x856 <max520_write+0x6>
     856:	cd b7       	in	r28, 0x3d	; 61
     858:	de b7       	in	r29, 0x3e	; 62
	uint8_t message[3] = {	MAX520_TWI_ADDR_BASE | ((twi_address & 0x07) << 1),
     85a:	90 91 0f 03 	lds	r25, 0x030F
     85e:	97 70       	andi	r25, 0x07	; 7
     860:	99 0f       	add	r25, r25
     862:	90 65       	ori	r25, 0x50	; 80
     864:	99 83       	std	Y+1, r25	; 0x01
     866:	87 70       	andi	r24, 0x07	; 7
     868:	8a 83       	std	Y+2, r24	; 0x02
     86a:	6b 83       	std	Y+3, r22	; 0x03
							channel & 0x07,
							val	};
	
	TWI_Start_Transceiver_With_Data(message, 3);
     86c:	63 e0       	ldi	r22, 0x03	; 3
     86e:	ce 01       	movw	r24, r28
     870:	01 96       	adiw	r24, 0x01	; 1
     872:	2a d2       	rcall	.+1108   	; 0xcc8 <TWI_Start_Transceiver_With_Data>
}
     874:	0f 90       	pop	r0
     876:	0f 90       	pop	r0
     878:	0f 90       	pop	r0
     87a:	df 91       	pop	r29
     87c:	cf 91       	pop	r28
     87e:	08 95       	ret

00000880 <mcp2515_write>:
	} else {
		;//printf("MCP2515 is in config mode after reset\n");
	}
}

void mcp2515_write(uint8_t address, uint8_t data){
     880:	cf 93       	push	r28
     882:	df 93       	push	r29
     884:	d8 2f       	mov	r29, r24
     886:	c6 2f       	mov	r28, r22
	spi_select();
     888:	39 d1       	rcall	.+626    	; 0xafc <spi_select>

	spi_send(MCP_WRITE);
     88a:	82 e0       	ldi	r24, 0x02	; 2
     88c:	2b d1       	rcall	.+598    	; 0xae4 <spi_send>
	spi_send(address);
     88e:	8d 2f       	mov	r24, r29
     890:	29 d1       	rcall	.+594    	; 0xae4 <spi_send>
	spi_send(data);
     892:	8c 2f       	mov	r24, r28
     894:	27 d1       	rcall	.+590    	; 0xae4 <spi_send>

	spi_deselect();
     896:	34 d1       	rcall	.+616    	; 0xb00 <spi_deselect>
}
     898:	df 91       	pop	r29
     89a:	cf 91       	pop	r28
     89c:	08 95       	ret

0000089e <mcp2515_request_to_send>:

void mcp2515_request_to_send(uint8_t command){
     89e:	cf 93       	push	r28
	//Check last 3 bits of given command
	if (command <= 7) {
     8a0:	88 30       	cpi	r24, 0x08	; 8
     8a2:	18 f4       	brcc	.+6      	; 0x8aa <mcp2515_request_to_send+0xc>
		command = MCP_RTS | command;
     8a4:	c8 2f       	mov	r28, r24
     8a6:	c0 68       	ori	r28, 0x80	; 128
     8a8:	01 c0       	rjmp	.+2      	; 0x8ac <mcp2515_request_to_send+0xe>
	} else {
		command = MCP_RTS;
     8aa:	c0 e8       	ldi	r28, 0x80	; 128
	}

	//Select, send RTS command, then deselect
	spi_select();
     8ac:	27 d1       	rcall	.+590    	; 0xafc <spi_select>
	spi_send(command);
     8ae:	8c 2f       	mov	r24, r28
     8b0:	19 d1       	rcall	.+562    	; 0xae4 <spi_send>
	spi_deselect();
     8b2:	26 d1       	rcall	.+588    	; 0xb00 <spi_deselect>
}
     8b4:	cf 91       	pop	r28
     8b6:	08 95       	ret

000008b8 <mcp2515_bit_modify>:

void mcp2515_bit_modify(uint8_t address, uint8_t mask, uint8_t data){
     8b8:	1f 93       	push	r17
     8ba:	cf 93       	push	r28
     8bc:	df 93       	push	r29
     8be:	18 2f       	mov	r17, r24
     8c0:	d6 2f       	mov	r29, r22
     8c2:	c4 2f       	mov	r28, r20
	spi_select();
     8c4:	1b d1       	rcall	.+566    	; 0xafc <spi_select>

	spi_send(MCP_BITMOD);
     8c6:	85 e0       	ldi	r24, 0x05	; 5
     8c8:	0d d1       	rcall	.+538    	; 0xae4 <spi_send>
	spi_send(address);
     8ca:	81 2f       	mov	r24, r17
     8cc:	0b d1       	rcall	.+534    	; 0xae4 <spi_send>
	spi_send(mask);
     8ce:	8d 2f       	mov	r24, r29
     8d0:	09 d1       	rcall	.+530    	; 0xae4 <spi_send>
	spi_send(data);
     8d2:	8c 2f       	mov	r24, r28
     8d4:	07 d1       	rcall	.+526    	; 0xae4 <spi_send>

	spi_deselect();
     8d6:	14 d1       	rcall	.+552    	; 0xb00 <spi_deselect>
}
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	1f 91       	pop	r17
     8de:	08 95       	ret

000008e0 <mcp2515_reset>:

void mcp2515_reset(){
	spi_select();
     8e0:	0d d1       	rcall	.+538    	; 0xafc <spi_select>
	spi_send(MCP_RESET);	
     8e2:	80 ec       	ldi	r24, 0xC0	; 192
     8e4:	ff d0       	rcall	.+510    	; 0xae4 <spi_send>
	spi_deselect();
     8e6:	0c c1       	rjmp	.+536    	; 0xb00 <spi_deselect>
     8e8:	08 95       	ret

000008ea <mcp2515_read>:
}


uint8_t mcp2515_read(uint8_t address){
     8ea:	cf 93       	push	r28
     8ec:	c8 2f       	mov	r28, r24
	uint8_t result;

	spi_select();
     8ee:	06 d1       	rcall	.+524    	; 0xafc <spi_select>
	
	//Send command and address, then read result
	spi_send(MCP_READ);
     8f0:	83 e0       	ldi	r24, 0x03	; 3
     8f2:	f8 d0       	rcall	.+496    	; 0xae4 <spi_send>
	spi_send(address);
     8f4:	8c 2f       	mov	r24, r28
     8f6:	f6 d0       	rcall	.+492    	; 0xae4 <spi_send>

	result = spi_read();
     8f8:	fa d0       	rcall	.+500    	; 0xaee <spi_read>
     8fa:	c8 2f       	mov	r28, r24
	spi_deselect();
     8fc:	01 d1       	rcall	.+514    	; 0xb00 <spi_deselect>

	return result;	
}
     8fe:	8c 2f       	mov	r24, r28
     900:	cf 91       	pop	r28
     902:	08 95       	ret

00000904 <mcp2515_init>:
#include <util/delay.h>
#include "uart_driver.h"
#include "spi_driver.h"
#include "mcp2515_driver.h"

void mcp2515_init() {
     904:	cf 93       	push	r28
     906:	df 93       	push	r29
     908:	1f 92       	push	r1
     90a:	cd b7       	in	r28, 0x3d	; 61
     90c:	de b7       	in	r29, 0x3e	; 62
	//NO NEED, ALREADY ENABLED
	//Enable interrupt when message is recieved (RX0IE = 1)
	//mcp2515_bit_modify(MCP_CANINTE, 0x01, 0xff);

	//Start SPI driver
	spi_init();
     90e:	e2 d0       	rcall	.+452    	; 0xad4 <spi_init>

	mcp2515_reset();
     910:	e7 df       	rcall	.-50     	; 0x8e0 <mcp2515_reset>
	
	//Testing for correct initialization
	value_check = mcp2515_read(MCP_CANSTAT);
     912:	8e e0       	ldi	r24, 0x0E	; 14
     914:	ea df       	rcall	.-44     	; 0x8ea <mcp2515_read>
     916:	89 83       	std	Y+1, r24	; 0x01
	
	if ((value_check & MODE_MASK) != MODE_CONFIG) {
     918:	89 81       	ldd	r24, Y+1	; 0x01
     91a:	80 7e       	andi	r24, 0xE0	; 224
     91c:	80 38       	cpi	r24, 0x80	; 128
     91e:	21 f0       	breq	.+8      	; 0x928 <mcp2515_init+0x24>
		printf("MCP2515 is not in config mode after reset\n");
     920:	89 e8       	ldi	r24, 0x89	; 137
     922:	92 e0       	ldi	r25, 0x02	; 2
     924:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <puts>
	} else {
		;//printf("MCP2515 is in config mode after reset\n");
	}
}
     928:	0f 90       	pop	r0
     92a:	df 91       	pop	r29
     92c:	cf 91       	pop	r28
     92e:	08 95       	ret

00000930 <motor_output_enable>:
	} else {
		PORTC |= (1<<MOTOR_DIR);
	}
}

void motor_velocity(float velocity){
     930:	88 23       	and	r24, r24
     932:	31 f0       	breq	.+12     	; 0x940 <motor_output_enable+0x10>
     934:	47 98       	cbi	0x08, 7	; 8
     936:	8a e6       	ldi	r24, 0x6A	; 106
     938:	8a 95       	dec	r24
     93a:	f1 f7       	brne	.-4      	; 0x938 <motor_output_enable+0x8>
     93c:	00 c0       	rjmp	.+0      	; 0x93e <motor_output_enable+0xe>
     93e:	08 95       	ret
     940:	47 9a       	sbi	0x08, 7	; 8
     942:	08 95       	ret

00000944 <motor_encoder_reset>:
     944:	46 98       	cbi	0x08, 6	; 8
     946:	8a e6       	ldi	r24, 0x6A	; 106
     948:	8a 95       	dec	r24
     94a:	f1 f7       	brne	.-4      	; 0x948 <motor_encoder_reset+0x4>
     94c:	00 c0       	rjmp	.+0      	; 0x94e <motor_encoder_reset+0xa>
     94e:	46 9a       	sbi	0x08, 6	; 8
     950:	08 95       	ret

00000952 <motor_encoder_select_byte>:
     952:	88 23       	and	r24, r24
     954:	11 f0       	breq	.+4      	; 0x95a <motor_encoder_select_byte+0x8>
     956:	45 9a       	sbi	0x08, 5	; 8
     958:	01 c0       	rjmp	.+2      	; 0x95c <motor_encoder_select_byte+0xa>
     95a:	45 98       	cbi	0x08, 5	; 8
     95c:	8a e6       	ldi	r24, 0x6A	; 106
     95e:	8a 95       	dec	r24
     960:	f1 f7       	brne	.-4      	; 0x95e <motor_encoder_select_byte+0xc>
     962:	00 c0       	rjmp	.+0      	; 0x964 <motor_encoder_select_byte+0x12>
     964:	08 95       	ret

00000966 <motor_enable>:
     966:	88 23       	and	r24, r24
     968:	11 f0       	breq	.+4      	; 0x96e <motor_enable+0x8>
     96a:	44 9a       	sbi	0x08, 4	; 8
     96c:	08 95       	ret
     96e:	44 98       	cbi	0x08, 4	; 8
     970:	08 95       	ret

00000972 <motor_speed>:
     972:	68 2f       	mov	r22, r24
     974:	80 e0       	ldi	r24, 0x00	; 0
     976:	6c cf       	rjmp	.-296    	; 0x850 <max520_write>
     978:	08 95       	ret

0000097a <motor_init>:
     97a:	80 e0       	ldi	r24, 0x00	; 0
     97c:	61 df       	rcall	.-318    	; 0x840 <max520_init>
     97e:	87 b1       	in	r24, 0x07	; 7
     980:	88 6f       	ori	r24, 0xF8	; 248
     982:	87 b9       	out	0x07, r24	; 7
     984:	10 92 07 01 	sts	0x0107, r1
     988:	81 e0       	ldi	r24, 0x01	; 1
     98a:	d2 df       	rcall	.-92     	; 0x930 <motor_output_enable>
     98c:	db df       	rcall	.-74     	; 0x944 <motor_encoder_reset>
     98e:	80 e0       	ldi	r24, 0x00	; 0
     990:	e0 df       	rcall	.-64     	; 0x952 <motor_encoder_select_byte>
     992:	80 e0       	ldi	r24, 0x00	; 0
     994:	ee df       	rcall	.-36     	; 0x972 <motor_speed>
     996:	81 e0       	ldi	r24, 0x01	; 1
     998:	e6 cf       	rjmp	.-52     	; 0x966 <motor_enable>
     99a:	08 95       	ret

0000099c <motor_direction>:
     99c:	81 30       	cpi	r24, 0x01	; 1
     99e:	11 f4       	brne	.+4      	; 0x9a4 <motor_direction+0x8>
     9a0:	43 98       	cbi	0x08, 3	; 8
     9a2:	08 95       	ret
     9a4:	43 9a       	sbi	0x08, 3	; 8
     9a6:	08 95       	ret

000009a8 <reverse_bits>:
	//do something useful
}

uint8_t reverse_bits(uint8_t val) {
	val = ((val & 0x55) << 1) | ((val & 0xaa) >> 1);
     9a8:	28 2f       	mov	r18, r24
     9aa:	2a 7a       	andi	r18, 0xAA	; 170
     9ac:	26 95       	lsr	r18
     9ae:	98 2f       	mov	r25, r24
     9b0:	95 75       	andi	r25, 0x55	; 85
     9b2:	99 0f       	add	r25, r25
     9b4:	92 2b       	or	r25, r18
	val = ((val & 0x33) << 2) | ((val & 0xcc) >> 2);
     9b6:	29 2f       	mov	r18, r25
     9b8:	2c 7c       	andi	r18, 0xCC	; 204
     9ba:	26 95       	lsr	r18
     9bc:	26 95       	lsr	r18
     9be:	89 2f       	mov	r24, r25
     9c0:	83 73       	andi	r24, 0x33	; 51
     9c2:	88 0f       	add	r24, r24
     9c4:	88 0f       	add	r24, r24
     9c6:	82 2b       	or	r24, r18
	val = ((val & 0x0f) << 4) | ((val & 0xf0) >> 4);
	return val;
}
     9c8:	82 95       	swap	r24
     9ca:	08 95       	ret

000009cc <motor_encoder_read>:

int16_t motor_encoder_read(){
     9cc:	1f 93       	push	r17
     9ce:	cf 93       	push	r28
     9d0:	df 93       	push	r29
	motor_output_enable(ENABLE);
     9d2:	81 e0       	ldi	r24, 0x01	; 1
     9d4:	ad df       	rcall	.-166    	; 0x930 <motor_output_enable>
	
	motor_encoder_select_byte(ENCODER_HIGH);
     9d6:	80 e0       	ldi	r24, 0x00	; 0
     9d8:	bc df       	rcall	.-136    	; 0x952 <motor_encoder_select_byte>
	uint8_t msb = reverse_bits(PINK);
     9da:	c6 e0       	ldi	r28, 0x06	; 6
     9dc:	d1 e0       	ldi	r29, 0x01	; 1
     9de:	88 81       	ld	r24, Y
     9e0:	e3 df       	rcall	.-58     	; 0x9a8 <reverse_bits>
     9e2:	18 2f       	mov	r17, r24
	motor_encoder_select_byte(ENCODER_LOW);
     9e4:	81 e0       	ldi	r24, 0x01	; 1
     9e6:	b5 df       	rcall	.-150    	; 0x952 <motor_encoder_select_byte>
	uint8_t lsb = reverse_bits(PINK);	
     9e8:	88 81       	ld	r24, Y
     9ea:	de df       	rcall	.-68     	; 0x9a8 <reverse_bits>
     9ec:	c8 2f       	mov	r28, r24
	
	motor_output_enable(DISABLE);
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	9f df       	rcall	.-194    	; 0x930 <motor_output_enable>
	//motor_encoder_reset();
	//return reverse_bits(PINK); //temporary
	return -((msb << 8) | lsb);
     9f2:	2c 2f       	mov	r18, r28
     9f4:	30 e0       	ldi	r19, 0x00	; 0
     9f6:	c9 01       	movw	r24, r18
     9f8:	91 2b       	or	r25, r17
}
     9fa:	91 95       	neg	r25
     9fc:	81 95       	neg	r24
     9fe:	91 09       	sbc	r25, r1
     a00:	df 91       	pop	r29
     a02:	cf 91       	pop	r28
     a04:	1f 91       	pop	r17
     a06:	08 95       	ret

00000a08 <__vector_42>:
		astleynr = 0;
	}*/
}


ISR(TIMER4_COMPA_vect){
     a08:	1f 92       	push	r1
     a0a:	0f 92       	push	r0
     a0c:	0f b6       	in	r0, 0x3f	; 63
     a0e:	0f 92       	push	r0
     a10:	11 24       	eor	r1, r1
	music_set_sample_value();
     a12:	0f 90       	pop	r0
     a14:	0f be       	out	0x3f, r0	; 63
     a16:	0f 90       	pop	r0
     a18:	1f 90       	pop	r1
     a1a:	18 95       	reti

00000a1c <pwm_init>:
	ICR3 = DUTY_CYCLE_STEPS;
	pwm_set_value(MID_SERVO);
}

void pwm_set_value(uint16_t val) {
	OCR3A = val;
     a1c:	6b 9a       	sbi	0x0d, 3	; 13
     a1e:	a1 e9       	ldi	r26, 0x91	; 145
     a20:	b0 e0       	ldi	r27, 0x00	; 0
     a22:	8c 91       	ld	r24, X
     a24:	82 60       	ori	r24, 0x02	; 2
     a26:	8c 93       	st	X, r24
     a28:	8c 91       	ld	r24, X
     a2a:	8a 7f       	andi	r24, 0xFA	; 250
     a2c:	8c 93       	st	X, r24
     a2e:	e0 e9       	ldi	r30, 0x90	; 144
     a30:	f0 e0       	ldi	r31, 0x00	; 0
     a32:	80 81       	ld	r24, Z
     a34:	82 60       	ori	r24, 0x02	; 2
     a36:	80 83       	st	Z, r24
     a38:	80 81       	ld	r24, Z
     a3a:	8e 7f       	andi	r24, 0xFE	; 254
     a3c:	80 83       	st	Z, r24
     a3e:	8c 91       	ld	r24, X
     a40:	88 61       	ori	r24, 0x18	; 24
     a42:	8c 93       	st	X, r24
     a44:	80 81       	ld	r24, Z
     a46:	80 68       	ori	r24, 0x80	; 128
     a48:	80 83       	st	Z, r24
     a4a:	80 81       	ld	r24, Z
     a4c:	8f 7b       	andi	r24, 0xBF	; 191
     a4e:	80 83       	st	Z, r24
     a50:	80 e4       	ldi	r24, 0x40	; 64
     a52:	9c e9       	ldi	r25, 0x9C	; 156
     a54:	90 93 97 00 	sts	0x0097, r25
     a58:	80 93 96 00 	sts	0x0096, r24
     a5c:	88 eb       	ldi	r24, 0xB8	; 184
     a5e:	9b e0       	ldi	r25, 0x0B	; 11
     a60:	90 93 99 00 	sts	0x0099, r25
     a64:	80 93 98 00 	sts	0x0098, r24
     a68:	08 95       	ret

00000a6a <pwm_set_servo>:
}

void pwm_set_servo(int16_t val){
	val += 128;
     a6a:	9c 01       	movw	r18, r24
     a6c:	20 58       	subi	r18, 0x80	; 128
     a6e:	3f 4f       	sbci	r19, 0xFF	; 255
	//printf("%d\n", val);
	val = (val*(VAL_SCALE/UNDERFLOW_FIX)) / 255 * UNDERFLOW_FIX + MIN_SERVO;
     a70:	4b e4       	ldi	r20, 0x4B	; 75
     a72:	42 9f       	mul	r20, r18
     a74:	c0 01       	movw	r24, r0
     a76:	43 9f       	mul	r20, r19
     a78:	90 0d       	add	r25, r0
     a7a:	11 24       	eor	r1, r1
     a7c:	6f ef       	ldi	r22, 0xFF	; 255
     a7e:	70 e0       	ldi	r23, 0x00	; 0
     a80:	66 d7       	rcall	.+3788   	; 0x194e <__divmodhi4>
     a82:	66 0f       	add	r22, r22
     a84:	77 1f       	adc	r23, r23
     a86:	62 95       	swap	r22
     a88:	72 95       	swap	r23
     a8a:	70 7f       	andi	r23, 0xF0	; 240
     a8c:	76 27       	eor	r23, r22
     a8e:	60 7f       	andi	r22, 0xF0	; 240
     a90:	76 27       	eor	r23, r22
     a92:	68 5f       	subi	r22, 0xF8	; 248
     a94:	78 4f       	sbci	r23, 0xF8	; 248
	ICR3 = DUTY_CYCLE_STEPS;
	pwm_set_value(MID_SERVO);
}

void pwm_set_value(uint16_t val) {
	OCR3A = val;
     a96:	70 93 99 00 	sts	0x0099, r23
     a9a:	60 93 98 00 	sts	0x0098, r22
     a9e:	08 95       	ret

00000aa0 <solenoid_init>:

#include <avr/io.h>
#include <avr/delay.h>

void solenoid_init(){
	DDRH |= (1<<PH3);
     aa0:	e1 e0       	ldi	r30, 0x01	; 1
     aa2:	f1 e0       	ldi	r31, 0x01	; 1
     aa4:	80 81       	ld	r24, Z
     aa6:	88 60       	ori	r24, 0x08	; 8
     aa8:	80 83       	st	Z, r24
	PORTH |= (1<<PH3);
     aaa:	e2 e0       	ldi	r30, 0x02	; 2
     aac:	f1 e0       	ldi	r31, 0x01	; 1
     aae:	80 81       	ld	r24, Z
     ab0:	88 60       	ori	r24, 0x08	; 8
     ab2:	80 83       	st	Z, r24
     ab4:	08 95       	ret

00000ab6 <solenoid_shoot>:
}

void solenoid_shoot(){
	PORTH &= ~(1<<PH3);
     ab6:	e2 e0       	ldi	r30, 0x02	; 2
     ab8:	f1 e0       	ldi	r31, 0x01	; 1
     aba:	80 81       	ld	r24, Z
     abc:	87 7f       	andi	r24, 0xF7	; 247
     abe:	80 83       	st	Z, r24
     ac0:	8f e5       	ldi	r24, 0x5F	; 95
     ac2:	9a ee       	ldi	r25, 0xEA	; 234
     ac4:	01 97       	sbiw	r24, 0x01	; 1
     ac6:	f1 f7       	brne	.-4      	; 0xac4 <solenoid_shoot+0xe>
     ac8:	00 c0       	rjmp	.+0      	; 0xaca <solenoid_shoot+0x14>
     aca:	00 00       	nop
	_delay_ms(15);
	PORTH |= (1<<PH3);
     acc:	80 81       	ld	r24, Z
     ace:	88 60       	ori	r24, 0x08	; 8
     ad0:	80 83       	st	Z, r24
     ad2:	08 95       	ret

00000ad4 <spi_init>:
#define SPI_MISO PB3
#define SPI_SCK PB1 

void spi_init(){
	//Set MOSI, SCK and SS as output pins 	
	DDRB |= (1 << SPI_MOSI) | (1 << SPI_SCK) | (1 << SPI_SS);
     ad4:	84 b1       	in	r24, 0x04	; 4
     ad6:	87 60       	ori	r24, 0x07	; 7
     ad8:	84 b9       	out	0x04, r24	; 4
	
	//Set MISO as input pin
	DDRB &= ~(1 << SPI_MISO);
     ada:	23 98       	cbi	0x04, 3	; 4
	
	//Enable SPI in master mode and set clock rate fosc/16
	SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0);
     adc:	8c b5       	in	r24, 0x2c	; 44
     ade:	81 65       	ori	r24, 0x51	; 81
     ae0:	8c bd       	out	0x2c, r24	; 44
     ae2:	08 95       	ret

00000ae4 <spi_send>:
	return SPDR;
}

void spi_send(char data){
	//Start transmission
	SPDR = data;
     ae4:	8e bd       	out	0x2e, r24	; 46
	
	//Wait for transmission, checks if register is empty 
	while(!(SPSR & (1 << SPIF)));
     ae6:	0d b4       	in	r0, 0x2d	; 45
     ae8:	07 fe       	sbrs	r0, 7
     aea:	fd cf       	rjmp	.-6      	; 0xae6 <spi_send+0x2>
}
     aec:	08 95       	ret

00000aee <spi_read>:
}


uint8_t spi_read(){
	//Dummy send in order to read from slave
	spi_send(0xaa);
     aee:	8a ea       	ldi	r24, 0xAA	; 170
     af0:	f9 df       	rcall	.-14     	; 0xae4 <spi_send>
	
	while(!(SPSR & (1 << SPIF)));
     af2:	0d b4       	in	r0, 0x2d	; 45
     af4:	07 fe       	sbrs	r0, 7
     af6:	fd cf       	rjmp	.-6      	; 0xaf2 <spi_read+0x4>

	return SPDR;
     af8:	8e b5       	in	r24, 0x2e	; 46
}
     afa:	08 95       	ret

00000afc <spi_select>:
	while(!(SPSR & (1 << SPIF)));
}

void spi_select(){
	//Set !SS to 0 for selection of slave
	PORTB &= ~(1 << SPI_SS);
     afc:	28 98       	cbi	0x05, 0	; 5
     afe:	08 95       	ret

00000b00 <spi_deselect>:
}

void spi_deselect(){
	//Set !SS to 1 for deselection of slave
	PORTB |= (1 << SPI_SS);
     b00:	28 9a       	sbi	0x05, 0	; 5
     b02:	08 95       	ret

00000b04 <uart_sendChar>:

}

void uart_sendChar(unsigned char data){
	//Wait for empty transmitter buffer
	while(!(UCSR0A & (1<<UDRE0)));
     b04:	e0 ec       	ldi	r30, 0xC0	; 192
     b06:	f0 e0       	ldi	r31, 0x00	; 0
     b08:	90 81       	ld	r25, Z
     b0a:	95 ff       	sbrs	r25, 5
     b0c:	fd cf       	rjmp	.-6      	; 0xb08 <uart_sendChar+0x4>
		
	//Put data into buffer, then send the data
	UDR0 = data;
     b0e:	80 93 c6 00 	sts	0x00C6, r24
     b12:	08 95       	ret

00000b14 <uart_getChar>:
}


unsigned int uart_getChar(){
	//Wait for the data to be received 
	while(!(UCSR0A & (1<<RXC0))){}
     b14:	e0 ec       	ldi	r30, 0xC0	; 192
     b16:	f0 e0       	ldi	r31, 0x00	; 0
     b18:	80 81       	ld	r24, Z
     b1a:	88 23       	and	r24, r24
     b1c:	ec f7       	brge	.-6      	; 0xb18 <uart_getChar+0x4>
	
	//Get status and the 9th bit, then data from buffer
	return UDR0;
     b1e:	80 91 c6 00 	lds	r24, 0x00C6
}
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	08 95       	ret

00000b26 <uart_init>:

static FILE uart_io = FDEV_SETUP_STREAM(uart_sendChar, uart_getChar, _FDEV_SETUP_RW);

void uart_init(unsigned int ubrr){
	//Set baud rate
	UBRR0L = (unsigned int) ubrr;
     b26:	80 93 c4 00 	sts	0x00C4, r24
	
	//Enable receiver and transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
     b2a:	88 e1       	ldi	r24, 0x18	; 24
     b2c:	80 93 c1 00 	sts	0x00C1, r24
	
	stdout = &uart_io;
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	92 e0       	ldi	r25, 0x02	; 2
     b34:	90 93 50 03 	sts	0x0350, r25
     b38:	80 93 4f 03 	sts	0x034F, r24
	stdin = &uart_io;
     b3c:	90 93 4e 03 	sts	0x034E, r25
     b40:	80 93 4d 03 	sts	0x034D, r24
     b44:	08 95       	ret

00000b46 <ir_obstructed>:
	for (uint8_t i = 0; i < FILTER_BUFFER_SIZE; i++ ){
		ir_obstructed();
	}
}

uint8_t ir_obstructed(){
     b46:	cf 93       	push	r28
     b48:	df 93       	push	r29
	static uint16_t ringbuffer_filter[FILTER_BUFFER_SIZE];
	static uint8_t ringbuffer_index;

	//return adc_read(IR_CHANNEL);

	if (ringbuffer_index >= FILTER_BUFFER_SIZE - 1){
     b4a:	80 91 31 03 	lds	r24, 0x0331
     b4e:	8f 30       	cpi	r24, 0x0F	; 15
     b50:	18 f0       	brcs	.+6      	; 0xb58 <ir_obstructed+0x12>
		ringbuffer_index = 0;
     b52:	10 92 31 03 	sts	0x0331, r1
     b56:	03 c0       	rjmp	.+6      	; 0xb5e <ir_obstructed+0x18>
	} else { ringbuffer_index++; }
     b58:	8f 5f       	subi	r24, 0xFF	; 255
     b5a:	80 93 31 03 	sts	0x0331, r24
			
	ringbuffer_filter[ringbuffer_index] = adc_read(IR_CHANNEL) / FILTER_BUFFER_SIZE;
     b5e:	c0 91 31 03 	lds	r28, 0x0331
     b62:	d0 e0       	ldi	r29, 0x00	; 0
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	a9 dc       	rcall	.-1710   	; 0x4ba <adc_read>
     b68:	cc 0f       	add	r28, r28
     b6a:	dd 1f       	adc	r29, r29
     b6c:	cf 5e       	subi	r28, 0xEF	; 239
     b6e:	dc 4f       	sbci	r29, 0xFC	; 252
     b70:	92 95       	swap	r25
     b72:	82 95       	swap	r24
     b74:	8f 70       	andi	r24, 0x0F	; 15
     b76:	89 27       	eor	r24, r25
     b78:	9f 70       	andi	r25, 0x0F	; 15
     b7a:	89 27       	eor	r24, r25
     b7c:	99 83       	std	Y+1, r25	; 0x01
     b7e:	88 83       	st	Y, r24
     b80:	e1 e1       	ldi	r30, 0x11	; 17
     b82:	f3 e0       	ldi	r31, 0x03	; 3
     b84:	41 e3       	ldi	r20, 0x31	; 49
     b86:	53 e0       	ldi	r21, 0x03	; 3



	uint16_t avg = 0;
     b88:	20 e0       	ldi	r18, 0x00	; 0
     b8a:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t i = 0; i < FILTER_BUFFER_SIZE; i++) {
		avg += ringbuffer_filter[i] ;
     b8c:	81 91       	ld	r24, Z+
     b8e:	91 91       	ld	r25, Z+
     b90:	28 0f       	add	r18, r24
     b92:	39 1f       	adc	r19, r25
	ringbuffer_filter[ringbuffer_index] = adc_read(IR_CHANNEL) / FILTER_BUFFER_SIZE;



	uint16_t avg = 0;
	for (uint8_t i = 0; i < FILTER_BUFFER_SIZE; i++) {
     b94:	e4 17       	cp	r30, r20
     b96:	f5 07       	cpc	r31, r21
     b98:	c9 f7       	brne	.-14     	; 0xb8c <ir_obstructed+0x46>
		printf(", %d", ringbuffer_filter[i]);
	}
	printf(" ]\n");*/

	
	if (avg < FILTER_THRESHOLD) {
     b9a:	81 e0       	ldi	r24, 0x01	; 1
     b9c:	22 33       	cpi	r18, 0x32	; 50
     b9e:	31 05       	cpc	r19, r1
     ba0:	08 f0       	brcs	.+2      	; 0xba4 <ir_obstructed+0x5e>
     ba2:	80 e0       	ldi	r24, 0x00	; 0
		return 1;
	}

	return 0;
}
     ba4:	df 91       	pop	r29
     ba6:	cf 91       	pop	r28
     ba8:	08 95       	ret

00000baa <ir_filter_init>:
#include "Drivers/uart_driver.h"

#define FILTER_THRESHOLD 50
#define FILTER_BUFFER_SIZE 16

void ir_filter_init() {
     baa:	cf 93       	push	r28
     bac:	c0 e1       	ldi	r28, 0x10	; 16
	for (uint8_t i = 0; i < FILTER_BUFFER_SIZE; i++ ){
		ir_obstructed();
     bae:	cb df       	rcall	.-106    	; 0xb46 <ir_obstructed>
     bb0:	c1 50       	subi	r28, 0x01	; 1

#define FILTER_THRESHOLD 50
#define FILTER_BUFFER_SIZE 16

void ir_filter_init() {
	for (uint8_t i = 0; i < FILTER_BUFFER_SIZE; i++ ){
     bb2:	e9 f7       	brne	.-6      	; 0xbae <ir_filter_init+0x4>
		ir_obstructed();
	}
}
     bb4:	cf 91       	pop	r28
     bb6:	08 95       	ret

00000bb8 <ir_edge_detected>:
	return 0;
}

uint8_t ir_edge_detected() {
	static uint8_t current;
	current = ir_obstructed();
     bb8:	c6 df       	rcall	.-116    	; 0xb46 <ir_obstructed>
     bba:	80 93 10 03 	sts	0x0310, r24
	if (last_ir_val != current){
     bbe:	90 91 4b 03 	lds	r25, 0x034B
     bc2:	89 17       	cp	r24, r25
     bc4:	21 f0       	breq	.+8      	; 0xbce <ir_edge_detected+0x16>
		last_ir_val = current;
     bc6:	80 93 4b 03 	sts	0x034B, r24
		return 1;
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	08 95       	ret
	}
	return 0;
     bce:	80 e0       	ldi	r24, 0x00	; 0
     bd0:	08 95       	ret

00000bd2 <main>:
#include "test_node_2.h"
#include "timer.h"
//#include "Drivers/music_driver.h"

int main(void){
	uart_init(MYUBRR);
     bd2:	87 e6       	ldi	r24, 0x67	; 103
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	a7 df       	rcall	.-178    	; 0xb26 <uart_init>
	can_init();
     bd8:	81 dc       	rcall	.-1790   	; 0x4dc <can_init>
	pwm_init();
     bda:	20 df       	rcall	.-448    	; 0xa1c <pwm_init>
	printf("ir\n");
     bdc:	8a ee       	ldi	r24, 0xEA	; 234
     bde:	92 e0       	ldi	r25, 0x02	; 2
     be0:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <puts>
	adc_init();
     be4:	5c dc       	rcall	.-1864   	; 0x49e <adc_init>
	ir_filter_init();
     be6:	e1 df       	rcall	.-62     	; 0xbaa <ir_filter_init>
	solenoid_init();
     be8:	5b df       	rcall	.-330    	; 0xaa0 <solenoid_init>
	motor_init();
     bea:	c7 de       	rcall	.-626    	; 0x97a <motor_init>
	pi_init();
     bec:	b1 db       	rcall	.-2206   	; 0x350 <pi_init>
     bee:	2f ef       	ldi	r18, 0xFF	; 255
     bf0:	83 ed       	ldi	r24, 0xD3	; 211
     bf2:	90 e3       	ldi	r25, 0x30	; 48
     bf4:	21 50       	subi	r18, 0x01	; 1
     bf6:	80 40       	sbci	r24, 0x00	; 0
     bf8:	90 40       	sbci	r25, 0x00	; 0
     bfa:	e1 f7       	brne	.-8      	; 0xbf4 <main+0x22>
     bfc:	00 c0       	rjmp	.+0      	; 0xbfe <main+0x2c>
     bfe:	00 00       	nop
	_delay_ms(1000);
	timer_init(); //should be last, starts interrupts
     c00:	0a d0       	rcall	.+20     	; 0xc16 <timer_init>
     c02:	2f ef       	ldi	r18, 0xFF	; 255
     c04:	89 e6       	ldi	r24, 0x69	; 105
     c06:	98 e1       	ldi	r25, 0x18	; 24
     c08:	21 50       	subi	r18, 0x01	; 1
     c0a:	80 40       	sbci	r24, 0x00	; 0
     c0c:	90 40       	sbci	r25, 0x00	; 0
     c0e:	e1 f7       	brne	.-8      	; 0xc08 <main+0x36>
     c10:	00 c0       	rjmp	.+0      	; 0xc12 <main+0x40>
     c12:	00 00       	nop
     c14:	f6 cf       	rjmp	.-20     	; 0xc02 <main+0x30>

00000c16 <timer_init>:
#include "Drivers/can_driver.h"
#include "Controller/pi.h"

void timer_init() {
	//CS3{2:0}   = 101  prescaler set to 1024
	TCCR5B |=  (1<<CS52) | (1<<CS50);
     c16:	e1 e2       	ldi	r30, 0x21	; 33
     c18:	f1 e0       	ldi	r31, 0x01	; 1
     c1a:	80 81       	ld	r24, Z
     c1c:	85 60       	ori	r24, 0x05	; 5
     c1e:	80 83       	st	Z, r24
	TCCR5B &= ~(1<<CS51);
     c20:	80 81       	ld	r24, Z
     c22:	8d 7f       	andi	r24, 0xFD	; 253
     c24:	80 83       	st	Z, r24
	
	TCCR5A &= ~(1<<WGM50);
     c26:	a0 e2       	ldi	r26, 0x20	; 32
     c28:	b1 e0       	ldi	r27, 0x01	; 1
     c2a:	8c 91       	ld	r24, X
     c2c:	8e 7f       	andi	r24, 0xFE	; 254
     c2e:	8c 93       	st	X, r24
	TCCR5A &= ~(1<<WGM51);
     c30:	8c 91       	ld	r24, X
     c32:	8d 7f       	andi	r24, 0xFD	; 253
     c34:	8c 93       	st	X, r24
	TCCR5B |=  (1<<WGM52);
     c36:	80 81       	ld	r24, Z
     c38:	88 60       	ori	r24, 0x08	; 8
     c3a:	80 83       	st	Z, r24
	TCCR5B &= ~(1<<WGM53);
     c3c:	80 81       	ld	r24, Z
     c3e:	8f 7e       	andi	r24, 0xEF	; 239
     c40:	80 83       	st	Z, r24
	//TCCR3A |=  (1<<COM3A1) | (1<<COM3A0);
	
	OCR5A = TIMER5_OCRA; // 223 for 70 HZ, 7812 for 2 Hz
     c42:	8f ed       	ldi	r24, 0xDF	; 223
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	90 93 29 01 	sts	0x0129, r25
     c4a:	80 93 28 01 	sts	0x0128, r24
	
	//enable interrupt on OCR3A compare

	TIMSK5 |= (1<<OCIE5A);
     c4e:	e3 e7       	ldi	r30, 0x73	; 115
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	80 81       	ld	r24, Z
     c54:	82 60       	ori	r24, 0x02	; 2
     c56:	80 83       	st	Z, r24
	TIFR5 |= (1<<ICF1);
     c58:	d5 9a       	sbi	0x1a, 5	; 26
	
	sei();
     c5a:	78 94       	sei
     c5c:	08 95       	ret

00000c5e <__vector_47>:
	
}


ISR(TIMER5_COMPA_vect){
     c5e:	1f 92       	push	r1
     c60:	0f 92       	push	r0
     c62:	0f b6       	in	r0, 0x3f	; 63
     c64:	0f 92       	push	r0
     c66:	11 24       	eor	r1, r1
     c68:	0b b6       	in	r0, 0x3b	; 59
     c6a:	0f 92       	push	r0
     c6c:	2f 93       	push	r18
     c6e:	3f 93       	push	r19
     c70:	4f 93       	push	r20
     c72:	5f 93       	push	r21
     c74:	6f 93       	push	r22
     c76:	7f 93       	push	r23
     c78:	8f 93       	push	r24
     c7a:	9f 93       	push	r25
     c7c:	af 93       	push	r26
     c7e:	bf 93       	push	r27
     c80:	ef 93       	push	r30
     c82:	ff 93       	push	r31
	//printf("read: %d\n",adc_read(0));
	//printf("edge: %d\n\n",ir_edge_detected());

	if(ir_edge_detected()){
     c84:	99 df       	rcall	.-206    	; 0xbb8 <ir_edge_detected>
     c86:	81 11       	cpse	r24, r1
		can_ir_transmit();
     c88:	ca dd       	rcall	.-1132   	; 0x81e <can_ir_transmit>
		
	}
	
	can_handle_message();
     c8a:	8e dd       	rcall	.-1252   	; 0x7a8 <can_handle_message>
	pi_update();
     c8c:	88 db       	rcall	.-2288   	; 0x39e <pi_update>
     c8e:	ff 91       	pop	r31
     c90:	ef 91       	pop	r30
     c92:	bf 91       	pop	r27
     c94:	af 91       	pop	r26
     c96:	9f 91       	pop	r25
     c98:	8f 91       	pop	r24
     c9a:	7f 91       	pop	r23
     c9c:	6f 91       	pop	r22
     c9e:	5f 91       	pop	r21
     ca0:	4f 91       	pop	r20
     ca2:	3f 91       	pop	r19
     ca4:	2f 91       	pop	r18
     ca6:	0f 90       	pop	r0
     ca8:	0b be       	out	0x3b, r0	; 59
     caa:	0f 90       	pop	r0
     cac:	0f be       	out	0x3f, r0	; 63
     cae:	0f 90       	pop	r0
     cb0:	1f 90       	pop	r1
     cb2:	18 95       	reti

00000cb4 <TWI_Master_Initialise>:
		{
			msg[ i ] = TWI_buf[ i ];
		}
	}
	return( TWI_statusReg.lastTransOK );
}
     cb4:	8c e0       	ldi	r24, 0x0C	; 12
     cb6:	80 93 b8 00 	sts	0x00B8, r24
     cba:	8f ef       	ldi	r24, 0xFF	; 255
     cbc:	80 93 bb 00 	sts	0x00BB, r24
     cc0:	84 e0       	ldi	r24, 0x04	; 4
     cc2:	80 93 bc 00 	sts	0x00BC, r24
     cc6:	08 95       	ret

00000cc8 <TWI_Start_Transceiver_With_Data>:
     cc8:	ec eb       	ldi	r30, 0xBC	; 188
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	20 81       	ld	r18, Z
     cce:	20 fd       	sbrc	r18, 0
     cd0:	fd cf       	rjmp	.-6      	; 0xccc <TWI_Start_Transceiver_With_Data+0x4>
     cd2:	60 93 34 03 	sts	0x0334, r22
     cd6:	fc 01       	movw	r30, r24
     cd8:	20 81       	ld	r18, Z
     cda:	20 93 35 03 	sts	0x0335, r18
     cde:	20 fd       	sbrc	r18, 0
     ce0:	0c c0       	rjmp	.+24     	; 0xcfa <TWI_Start_Transceiver_With_Data+0x32>
     ce2:	62 30       	cpi	r22, 0x02	; 2
     ce4:	50 f0       	brcs	.+20     	; 0xcfa <TWI_Start_Transceiver_With_Data+0x32>
     ce6:	dc 01       	movw	r26, r24
     ce8:	11 96       	adiw	r26, 0x01	; 1
     cea:	e6 e3       	ldi	r30, 0x36	; 54
     cec:	f3 e0       	ldi	r31, 0x03	; 3
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	9d 91       	ld	r25, X+
     cf2:	91 93       	st	Z+, r25
     cf4:	8f 5f       	subi	r24, 0xFF	; 255
     cf6:	86 13       	cpse	r24, r22
     cf8:	fb cf       	rjmp	.-10     	; 0xcf0 <TWI_Start_Transceiver_With_Data+0x28>
     cfa:	10 92 33 03 	sts	0x0333, r1
     cfe:	88 ef       	ldi	r24, 0xF8	; 248
     d00:	80 93 0e 02 	sts	0x020E, r24
     d04:	85 ea       	ldi	r24, 0xA5	; 165
     d06:	80 93 bc 00 	sts	0x00BC, r24
     d0a:	08 95       	ret

00000d0c <__vector_39>:
This function is the Interrupt Service Routine (ISR), and called when the TWI interrupt is triggered;
that is whenever a TWI event has occurred. This function should not be called directly from the main
application.
****************************************************************************/
ISR(TWI_vect)
{
     d0c:	1f 92       	push	r1
     d0e:	0f 92       	push	r0
     d10:	0f b6       	in	r0, 0x3f	; 63
     d12:	0f 92       	push	r0
     d14:	11 24       	eor	r1, r1
     d16:	0b b6       	in	r0, 0x3b	; 59
     d18:	0f 92       	push	r0
     d1a:	2f 93       	push	r18
     d1c:	3f 93       	push	r19
     d1e:	8f 93       	push	r24
     d20:	9f 93       	push	r25
     d22:	af 93       	push	r26
     d24:	bf 93       	push	r27
     d26:	ef 93       	push	r30
     d28:	ff 93       	push	r31
	static unsigned char TWI_bufPtr;
	
	switch (TWSR)
     d2a:	80 91 b9 00 	lds	r24, 0x00B9
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	fc 01       	movw	r30, r24
     d32:	38 97       	sbiw	r30, 0x08	; 8
     d34:	e1 35       	cpi	r30, 0x51	; 81
     d36:	f1 05       	cpc	r31, r1
     d38:	08 f0       	brcs	.+2      	; 0xd3c <__vector_39+0x30>
     d3a:	55 c0       	rjmp	.+170    	; 0xde6 <__vector_39+0xda>
     d3c:	ee 58       	subi	r30, 0x8E	; 142
     d3e:	ff 4f       	sbci	r31, 0xFF	; 255
     d40:	19 c6       	rjmp	.+3122   	; 0x1974 <__tablejump2__>
	{
		case TWI_START:             // START has been transmitted
		case TWI_REP_START:         // Repeated START has been transmitted
		TWI_bufPtr = 0;                                     // Set buffer pointer to the TWI Address location
     d42:	10 92 32 03 	sts	0x0332, r1
		case TWI_MTX_ADR_ACK:       // SLA+W has been tramsmitted and ACK received
		case TWI_MTX_DATA_ACK:      // Data byte has been tramsmitted and ACK received
		if (TWI_bufPtr < TWI_msgSize)
     d46:	e0 91 32 03 	lds	r30, 0x0332
     d4a:	80 91 34 03 	lds	r24, 0x0334
     d4e:	e8 17       	cp	r30, r24
     d50:	70 f4       	brcc	.+28     	; 0xd6e <__vector_39+0x62>
		{
			TWDR = TWI_buf[TWI_bufPtr++];
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	8e 0f       	add	r24, r30
     d56:	80 93 32 03 	sts	0x0332, r24
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	eb 5c       	subi	r30, 0xCB	; 203
     d5e:	fc 4f       	sbci	r31, 0xFC	; 252
     d60:	80 81       	ld	r24, Z
     d62:	80 93 bb 00 	sts	0x00BB, r24
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     d66:	85 e8       	ldi	r24, 0x85	; 133
     d68:	80 93 bc 00 	sts	0x00BC, r24
     d6c:	43 c0       	rjmp	.+134    	; 0xdf4 <__vector_39+0xe8>
			(1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag to send byte
			(0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           //
			(0<<TWWC);                                 //
		}else                    // Send STOP after last byte
		{
			TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully.
     d6e:	80 91 33 03 	lds	r24, 0x0333
     d72:	81 60       	ori	r24, 0x01	; 1
     d74:	80 93 33 03 	sts	0x0333, r24
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     d78:	84 e9       	ldi	r24, 0x94	; 148
     d7a:	80 93 bc 00 	sts	0x00BC, r24
     d7e:	3a c0       	rjmp	.+116    	; 0xdf4 <__vector_39+0xe8>
			(0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
			(0<<TWWC);                                 //
		}
		break;
		case TWI_MRX_DATA_ACK:      // Data byte has been received and ACK tramsmitted
		TWI_buf[TWI_bufPtr++] = TWDR;
     d80:	e0 91 32 03 	lds	r30, 0x0332
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	8e 0f       	add	r24, r30
     d88:	80 93 32 03 	sts	0x0332, r24
     d8c:	80 91 bb 00 	lds	r24, 0x00BB
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	eb 5c       	subi	r30, 0xCB	; 203
     d94:	fc 4f       	sbci	r31, 0xFC	; 252
     d96:	80 83       	st	Z, r24
		case TWI_MRX_ADR_ACK:       // SLA+R has been tramsmitted and ACK received
		if (TWI_bufPtr < (TWI_msgSize-1) )                  // Detect the last byte to NACK it.
     d98:	20 91 32 03 	lds	r18, 0x0332
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	80 91 34 03 	lds	r24, 0x0334
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	01 97       	sbiw	r24, 0x01	; 1
     da6:	28 17       	cp	r18, r24
     da8:	39 07       	cpc	r19, r25
     daa:	24 f4       	brge	.+8      	; 0xdb4 <__vector_39+0xa8>
		{
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     dac:	85 ec       	ldi	r24, 0xC5	; 197
     dae:	80 93 bc 00 	sts	0x00BC, r24
     db2:	20 c0       	rjmp	.+64     	; 0xdf4 <__vector_39+0xe8>
			(1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag to read next byte
			(1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send ACK after reception
			(0<<TWWC);                                 //
		}else                    // Send NACK after next reception
		{
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     db4:	85 e8       	ldi	r24, 0x85	; 133
     db6:	80 93 bc 00 	sts	0x00BC, r24
     dba:	1c c0       	rjmp	.+56     	; 0xdf4 <__vector_39+0xe8>
			(0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send NACK after reception
			(0<<TWWC);                                 //
		}
		break;
		case TWI_MRX_DATA_NACK:     // Data byte has been received and NACK tramsmitted
		TWI_buf[TWI_bufPtr] = TWDR;
     dbc:	80 91 bb 00 	lds	r24, 0x00BB
     dc0:	e0 91 32 03 	lds	r30, 0x0332
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	eb 5c       	subi	r30, 0xCB	; 203
     dc8:	fc 4f       	sbci	r31, 0xFC	; 252
     dca:	80 83       	st	Z, r24
		TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully.
     dcc:	80 91 33 03 	lds	r24, 0x0333
     dd0:	81 60       	ori	r24, 0x01	; 1
     dd2:	80 93 33 03 	sts	0x0333, r24
		TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     dd6:	84 e9       	ldi	r24, 0x94	; 148
     dd8:	80 93 bc 00 	sts	0x00BC, r24
		(0<<TWIE)|(1<<TWINT)|                      // Disable TWI Interrupt and clear the flag
		(0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
		(0<<TWWC);                                 //
		break;
     ddc:	0b c0       	rjmp	.+22     	; 0xdf4 <__vector_39+0xe8>
		case TWI_ARB_LOST:          // Arbitration lost
		TWCR = (1<<TWEN)|                                 // TWI Interface enabled
     dde:	85 ea       	ldi	r24, 0xA5	; 165
     de0:	80 93 bc 00 	sts	0x00BC, r24
		(1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag
		(0<<TWEA)|(1<<TWSTA)|(0<<TWSTO)|           // Initiate a (RE)START condition.
		(0<<TWWC);                                 //
		break;
     de4:	07 c0       	rjmp	.+14     	; 0xdf4 <__vector_39+0xe8>
		case TWI_MRX_ADR_NACK:      // SLA+R has been tramsmitted and NACK received
		case TWI_MTX_DATA_NACK:     // Data byte has been tramsmitted and NACK received
		//    case TWI_NO_STATE              // No relevant state information available; TWINT = ?0?
		case TWI_BUS_ERROR:         // Bus error due to an illegal START or STOP condition
		default:
		TWI_state = TWSR;                                 // Store TWSR and automatically sets clears noErrors bit.
     de6:	80 91 b9 00 	lds	r24, 0x00B9
     dea:	80 93 0e 02 	sts	0x020E, r24
		// Reset TWI Interface
		TWCR = (1<<TWEN)|                                 // Enable TWI-interface and release TWI pins
     dee:	84 e0       	ldi	r24, 0x04	; 4
     df0:	80 93 bc 00 	sts	0x00BC, r24
		(0<<TWIE)|(0<<TWINT)|                      // Disable Interupt
		(0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // No Signal requests
		(0<<TWWC);                                 //
	}
     df4:	ff 91       	pop	r31
     df6:	ef 91       	pop	r30
     df8:	bf 91       	pop	r27
     dfa:	af 91       	pop	r26
     dfc:	9f 91       	pop	r25
     dfe:	8f 91       	pop	r24
     e00:	3f 91       	pop	r19
     e02:	2f 91       	pop	r18
     e04:	0f 90       	pop	r0
     e06:	0b be       	out	0x3b, r0	; 59
     e08:	0f 90       	pop	r0
     e0a:	0f be       	out	0x3f, r0	; 63
     e0c:	0f 90       	pop	r0
     e0e:	1f 90       	pop	r1
     e10:	18 95       	reti

00000e12 <__subsf3>:
     e12:	50 58       	subi	r21, 0x80	; 128

00000e14 <__addsf3>:
     e14:	bb 27       	eor	r27, r27
     e16:	aa 27       	eor	r26, r26
     e18:	0e d0       	rcall	.+28     	; 0xe36 <__addsf3x>
     e1a:	75 c1       	rjmp	.+746    	; 0x1106 <__fp_round>
     e1c:	66 d1       	rcall	.+716    	; 0x10ea <__fp_pscA>
     e1e:	30 f0       	brcs	.+12     	; 0xe2c <__addsf3+0x18>
     e20:	6b d1       	rcall	.+726    	; 0x10f8 <__fp_pscB>
     e22:	20 f0       	brcs	.+8      	; 0xe2c <__addsf3+0x18>
     e24:	31 f4       	brne	.+12     	; 0xe32 <__addsf3+0x1e>
     e26:	9f 3f       	cpi	r25, 0xFF	; 255
     e28:	11 f4       	brne	.+4      	; 0xe2e <__addsf3+0x1a>
     e2a:	1e f4       	brtc	.+6      	; 0xe32 <__addsf3+0x1e>
     e2c:	5b c1       	rjmp	.+694    	; 0x10e4 <__fp_nan>
     e2e:	0e f4       	brtc	.+2      	; 0xe32 <__addsf3+0x1e>
     e30:	e0 95       	com	r30
     e32:	e7 fb       	bst	r30, 7
     e34:	51 c1       	rjmp	.+674    	; 0x10d8 <__fp_inf>

00000e36 <__addsf3x>:
     e36:	e9 2f       	mov	r30, r25
     e38:	77 d1       	rcall	.+750    	; 0x1128 <__fp_split3>
     e3a:	80 f3       	brcs	.-32     	; 0xe1c <__addsf3+0x8>
     e3c:	ba 17       	cp	r27, r26
     e3e:	62 07       	cpc	r22, r18
     e40:	73 07       	cpc	r23, r19
     e42:	84 07       	cpc	r24, r20
     e44:	95 07       	cpc	r25, r21
     e46:	18 f0       	brcs	.+6      	; 0xe4e <__addsf3x+0x18>
     e48:	71 f4       	brne	.+28     	; 0xe66 <__addsf3x+0x30>
     e4a:	9e f5       	brtc	.+102    	; 0xeb2 <__addsf3x+0x7c>
     e4c:	8f c1       	rjmp	.+798    	; 0x116c <__fp_zero>
     e4e:	0e f4       	brtc	.+2      	; 0xe52 <__addsf3x+0x1c>
     e50:	e0 95       	com	r30
     e52:	0b 2e       	mov	r0, r27
     e54:	ba 2f       	mov	r27, r26
     e56:	a0 2d       	mov	r26, r0
     e58:	0b 01       	movw	r0, r22
     e5a:	b9 01       	movw	r22, r18
     e5c:	90 01       	movw	r18, r0
     e5e:	0c 01       	movw	r0, r24
     e60:	ca 01       	movw	r24, r20
     e62:	a0 01       	movw	r20, r0
     e64:	11 24       	eor	r1, r1
     e66:	ff 27       	eor	r31, r31
     e68:	59 1b       	sub	r21, r25
     e6a:	99 f0       	breq	.+38     	; 0xe92 <__addsf3x+0x5c>
     e6c:	59 3f       	cpi	r21, 0xF9	; 249
     e6e:	50 f4       	brcc	.+20     	; 0xe84 <__addsf3x+0x4e>
     e70:	50 3e       	cpi	r21, 0xE0	; 224
     e72:	68 f1       	brcs	.+90     	; 0xece <__addsf3x+0x98>
     e74:	1a 16       	cp	r1, r26
     e76:	f0 40       	sbci	r31, 0x00	; 0
     e78:	a2 2f       	mov	r26, r18
     e7a:	23 2f       	mov	r18, r19
     e7c:	34 2f       	mov	r19, r20
     e7e:	44 27       	eor	r20, r20
     e80:	58 5f       	subi	r21, 0xF8	; 248
     e82:	f3 cf       	rjmp	.-26     	; 0xe6a <__addsf3x+0x34>
     e84:	46 95       	lsr	r20
     e86:	37 95       	ror	r19
     e88:	27 95       	ror	r18
     e8a:	a7 95       	ror	r26
     e8c:	f0 40       	sbci	r31, 0x00	; 0
     e8e:	53 95       	inc	r21
     e90:	c9 f7       	brne	.-14     	; 0xe84 <__addsf3x+0x4e>
     e92:	7e f4       	brtc	.+30     	; 0xeb2 <__addsf3x+0x7c>
     e94:	1f 16       	cp	r1, r31
     e96:	ba 0b       	sbc	r27, r26
     e98:	62 0b       	sbc	r22, r18
     e9a:	73 0b       	sbc	r23, r19
     e9c:	84 0b       	sbc	r24, r20
     e9e:	ba f0       	brmi	.+46     	; 0xece <__addsf3x+0x98>
     ea0:	91 50       	subi	r25, 0x01	; 1
     ea2:	a1 f0       	breq	.+40     	; 0xecc <__addsf3x+0x96>
     ea4:	ff 0f       	add	r31, r31
     ea6:	bb 1f       	adc	r27, r27
     ea8:	66 1f       	adc	r22, r22
     eaa:	77 1f       	adc	r23, r23
     eac:	88 1f       	adc	r24, r24
     eae:	c2 f7       	brpl	.-16     	; 0xea0 <__addsf3x+0x6a>
     eb0:	0e c0       	rjmp	.+28     	; 0xece <__addsf3x+0x98>
     eb2:	ba 0f       	add	r27, r26
     eb4:	62 1f       	adc	r22, r18
     eb6:	73 1f       	adc	r23, r19
     eb8:	84 1f       	adc	r24, r20
     eba:	48 f4       	brcc	.+18     	; 0xece <__addsf3x+0x98>
     ebc:	87 95       	ror	r24
     ebe:	77 95       	ror	r23
     ec0:	67 95       	ror	r22
     ec2:	b7 95       	ror	r27
     ec4:	f7 95       	ror	r31
     ec6:	9e 3f       	cpi	r25, 0xFE	; 254
     ec8:	08 f0       	brcs	.+2      	; 0xecc <__addsf3x+0x96>
     eca:	b3 cf       	rjmp	.-154    	; 0xe32 <__addsf3+0x1e>
     ecc:	93 95       	inc	r25
     ece:	88 0f       	add	r24, r24
     ed0:	08 f0       	brcs	.+2      	; 0xed4 <__addsf3x+0x9e>
     ed2:	99 27       	eor	r25, r25
     ed4:	ee 0f       	add	r30, r30
     ed6:	97 95       	ror	r25
     ed8:	87 95       	ror	r24
     eda:	08 95       	ret

00000edc <__cmpsf2>:
     edc:	d9 d0       	rcall	.+434    	; 0x1090 <__fp_cmp>
     ede:	08 f4       	brcc	.+2      	; 0xee2 <__cmpsf2+0x6>
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	08 95       	ret

00000ee4 <__divsf3>:
     ee4:	0c d0       	rcall	.+24     	; 0xefe <__divsf3x>
     ee6:	0f c1       	rjmp	.+542    	; 0x1106 <__fp_round>
     ee8:	07 d1       	rcall	.+526    	; 0x10f8 <__fp_pscB>
     eea:	40 f0       	brcs	.+16     	; 0xefc <__divsf3+0x18>
     eec:	fe d0       	rcall	.+508    	; 0x10ea <__fp_pscA>
     eee:	30 f0       	brcs	.+12     	; 0xefc <__divsf3+0x18>
     ef0:	21 f4       	brne	.+8      	; 0xefa <__divsf3+0x16>
     ef2:	5f 3f       	cpi	r21, 0xFF	; 255
     ef4:	19 f0       	breq	.+6      	; 0xefc <__divsf3+0x18>
     ef6:	f0 c0       	rjmp	.+480    	; 0x10d8 <__fp_inf>
     ef8:	51 11       	cpse	r21, r1
     efa:	39 c1       	rjmp	.+626    	; 0x116e <__fp_szero>
     efc:	f3 c0       	rjmp	.+486    	; 0x10e4 <__fp_nan>

00000efe <__divsf3x>:
     efe:	14 d1       	rcall	.+552    	; 0x1128 <__fp_split3>
     f00:	98 f3       	brcs	.-26     	; 0xee8 <__divsf3+0x4>

00000f02 <__divsf3_pse>:
     f02:	99 23       	and	r25, r25
     f04:	c9 f3       	breq	.-14     	; 0xef8 <__divsf3+0x14>
     f06:	55 23       	and	r21, r21
     f08:	b1 f3       	breq	.-20     	; 0xef6 <__divsf3+0x12>
     f0a:	95 1b       	sub	r25, r21
     f0c:	55 0b       	sbc	r21, r21
     f0e:	bb 27       	eor	r27, r27
     f10:	aa 27       	eor	r26, r26
     f12:	62 17       	cp	r22, r18
     f14:	73 07       	cpc	r23, r19
     f16:	84 07       	cpc	r24, r20
     f18:	38 f0       	brcs	.+14     	; 0xf28 <__divsf3_pse+0x26>
     f1a:	9f 5f       	subi	r25, 0xFF	; 255
     f1c:	5f 4f       	sbci	r21, 0xFF	; 255
     f1e:	22 0f       	add	r18, r18
     f20:	33 1f       	adc	r19, r19
     f22:	44 1f       	adc	r20, r20
     f24:	aa 1f       	adc	r26, r26
     f26:	a9 f3       	breq	.-22     	; 0xf12 <__divsf3_pse+0x10>
     f28:	33 d0       	rcall	.+102    	; 0xf90 <__divsf3_pse+0x8e>
     f2a:	0e 2e       	mov	r0, r30
     f2c:	3a f0       	brmi	.+14     	; 0xf3c <__divsf3_pse+0x3a>
     f2e:	e0 e8       	ldi	r30, 0x80	; 128
     f30:	30 d0       	rcall	.+96     	; 0xf92 <__divsf3_pse+0x90>
     f32:	91 50       	subi	r25, 0x01	; 1
     f34:	50 40       	sbci	r21, 0x00	; 0
     f36:	e6 95       	lsr	r30
     f38:	00 1c       	adc	r0, r0
     f3a:	ca f7       	brpl	.-14     	; 0xf2e <__divsf3_pse+0x2c>
     f3c:	29 d0       	rcall	.+82     	; 0xf90 <__divsf3_pse+0x8e>
     f3e:	fe 2f       	mov	r31, r30
     f40:	27 d0       	rcall	.+78     	; 0xf90 <__divsf3_pse+0x8e>
     f42:	66 0f       	add	r22, r22
     f44:	77 1f       	adc	r23, r23
     f46:	88 1f       	adc	r24, r24
     f48:	bb 1f       	adc	r27, r27
     f4a:	26 17       	cp	r18, r22
     f4c:	37 07       	cpc	r19, r23
     f4e:	48 07       	cpc	r20, r24
     f50:	ab 07       	cpc	r26, r27
     f52:	b0 e8       	ldi	r27, 0x80	; 128
     f54:	09 f0       	breq	.+2      	; 0xf58 <__divsf3_pse+0x56>
     f56:	bb 0b       	sbc	r27, r27
     f58:	80 2d       	mov	r24, r0
     f5a:	bf 01       	movw	r22, r30
     f5c:	ff 27       	eor	r31, r31
     f5e:	93 58       	subi	r25, 0x83	; 131
     f60:	5f 4f       	sbci	r21, 0xFF	; 255
     f62:	2a f0       	brmi	.+10     	; 0xf6e <__divsf3_pse+0x6c>
     f64:	9e 3f       	cpi	r25, 0xFE	; 254
     f66:	51 05       	cpc	r21, r1
     f68:	68 f0       	brcs	.+26     	; 0xf84 <__divsf3_pse+0x82>
     f6a:	b6 c0       	rjmp	.+364    	; 0x10d8 <__fp_inf>
     f6c:	00 c1       	rjmp	.+512    	; 0x116e <__fp_szero>
     f6e:	5f 3f       	cpi	r21, 0xFF	; 255
     f70:	ec f3       	brlt	.-6      	; 0xf6c <__divsf3_pse+0x6a>
     f72:	98 3e       	cpi	r25, 0xE8	; 232
     f74:	dc f3       	brlt	.-10     	; 0xf6c <__divsf3_pse+0x6a>
     f76:	86 95       	lsr	r24
     f78:	77 95       	ror	r23
     f7a:	67 95       	ror	r22
     f7c:	b7 95       	ror	r27
     f7e:	f7 95       	ror	r31
     f80:	9f 5f       	subi	r25, 0xFF	; 255
     f82:	c9 f7       	brne	.-14     	; 0xf76 <__divsf3_pse+0x74>
     f84:	88 0f       	add	r24, r24
     f86:	91 1d       	adc	r25, r1
     f88:	96 95       	lsr	r25
     f8a:	87 95       	ror	r24
     f8c:	97 f9       	bld	r25, 7
     f8e:	08 95       	ret
     f90:	e1 e0       	ldi	r30, 0x01	; 1
     f92:	66 0f       	add	r22, r22
     f94:	77 1f       	adc	r23, r23
     f96:	88 1f       	adc	r24, r24
     f98:	bb 1f       	adc	r27, r27
     f9a:	62 17       	cp	r22, r18
     f9c:	73 07       	cpc	r23, r19
     f9e:	84 07       	cpc	r24, r20
     fa0:	ba 07       	cpc	r27, r26
     fa2:	20 f0       	brcs	.+8      	; 0xfac <__divsf3_pse+0xaa>
     fa4:	62 1b       	sub	r22, r18
     fa6:	73 0b       	sbc	r23, r19
     fa8:	84 0b       	sbc	r24, r20
     faa:	ba 0b       	sbc	r27, r26
     fac:	ee 1f       	adc	r30, r30
     fae:	88 f7       	brcc	.-30     	; 0xf92 <__divsf3_pse+0x90>
     fb0:	e0 95       	com	r30
     fb2:	08 95       	ret

00000fb4 <__fixsfsi>:
     fb4:	04 d0       	rcall	.+8      	; 0xfbe <__fixunssfsi>
     fb6:	68 94       	set
     fb8:	b1 11       	cpse	r27, r1
     fba:	d9 c0       	rjmp	.+434    	; 0x116e <__fp_szero>
     fbc:	08 95       	ret

00000fbe <__fixunssfsi>:
     fbe:	bc d0       	rcall	.+376    	; 0x1138 <__fp_splitA>
     fc0:	88 f0       	brcs	.+34     	; 0xfe4 <__fixunssfsi+0x26>
     fc2:	9f 57       	subi	r25, 0x7F	; 127
     fc4:	90 f0       	brcs	.+36     	; 0xfea <__fixunssfsi+0x2c>
     fc6:	b9 2f       	mov	r27, r25
     fc8:	99 27       	eor	r25, r25
     fca:	b7 51       	subi	r27, 0x17	; 23
     fcc:	a0 f0       	brcs	.+40     	; 0xff6 <__fixunssfsi+0x38>
     fce:	d1 f0       	breq	.+52     	; 0x1004 <__fixunssfsi+0x46>
     fd0:	66 0f       	add	r22, r22
     fd2:	77 1f       	adc	r23, r23
     fd4:	88 1f       	adc	r24, r24
     fd6:	99 1f       	adc	r25, r25
     fd8:	1a f0       	brmi	.+6      	; 0xfe0 <__fixunssfsi+0x22>
     fda:	ba 95       	dec	r27
     fdc:	c9 f7       	brne	.-14     	; 0xfd0 <__fixunssfsi+0x12>
     fde:	12 c0       	rjmp	.+36     	; 0x1004 <__fixunssfsi+0x46>
     fe0:	b1 30       	cpi	r27, 0x01	; 1
     fe2:	81 f0       	breq	.+32     	; 0x1004 <__fixunssfsi+0x46>
     fe4:	c3 d0       	rcall	.+390    	; 0x116c <__fp_zero>
     fe6:	b1 e0       	ldi	r27, 0x01	; 1
     fe8:	08 95       	ret
     fea:	c0 c0       	rjmp	.+384    	; 0x116c <__fp_zero>
     fec:	67 2f       	mov	r22, r23
     fee:	78 2f       	mov	r23, r24
     ff0:	88 27       	eor	r24, r24
     ff2:	b8 5f       	subi	r27, 0xF8	; 248
     ff4:	39 f0       	breq	.+14     	; 0x1004 <__fixunssfsi+0x46>
     ff6:	b9 3f       	cpi	r27, 0xF9	; 249
     ff8:	cc f3       	brlt	.-14     	; 0xfec <__fixunssfsi+0x2e>
     ffa:	86 95       	lsr	r24
     ffc:	77 95       	ror	r23
     ffe:	67 95       	ror	r22
    1000:	b3 95       	inc	r27
    1002:	d9 f7       	brne	.-10     	; 0xffa <__fixunssfsi+0x3c>
    1004:	3e f4       	brtc	.+14     	; 0x1014 <__fixunssfsi+0x56>
    1006:	90 95       	com	r25
    1008:	80 95       	com	r24
    100a:	70 95       	com	r23
    100c:	61 95       	neg	r22
    100e:	7f 4f       	sbci	r23, 0xFF	; 255
    1010:	8f 4f       	sbci	r24, 0xFF	; 255
    1012:	9f 4f       	sbci	r25, 0xFF	; 255
    1014:	08 95       	ret

00001016 <__floatunsisf>:
    1016:	e8 94       	clt
    1018:	09 c0       	rjmp	.+18     	; 0x102c <__floatsisf+0x12>

0000101a <__floatsisf>:
    101a:	97 fb       	bst	r25, 7
    101c:	3e f4       	brtc	.+14     	; 0x102c <__floatsisf+0x12>
    101e:	90 95       	com	r25
    1020:	80 95       	com	r24
    1022:	70 95       	com	r23
    1024:	61 95       	neg	r22
    1026:	7f 4f       	sbci	r23, 0xFF	; 255
    1028:	8f 4f       	sbci	r24, 0xFF	; 255
    102a:	9f 4f       	sbci	r25, 0xFF	; 255
    102c:	99 23       	and	r25, r25
    102e:	a9 f0       	breq	.+42     	; 0x105a <__floatsisf+0x40>
    1030:	f9 2f       	mov	r31, r25
    1032:	96 e9       	ldi	r25, 0x96	; 150
    1034:	bb 27       	eor	r27, r27
    1036:	93 95       	inc	r25
    1038:	f6 95       	lsr	r31
    103a:	87 95       	ror	r24
    103c:	77 95       	ror	r23
    103e:	67 95       	ror	r22
    1040:	b7 95       	ror	r27
    1042:	f1 11       	cpse	r31, r1
    1044:	f8 cf       	rjmp	.-16     	; 0x1036 <__floatsisf+0x1c>
    1046:	fa f4       	brpl	.+62     	; 0x1086 <__floatsisf+0x6c>
    1048:	bb 0f       	add	r27, r27
    104a:	11 f4       	brne	.+4      	; 0x1050 <__floatsisf+0x36>
    104c:	60 ff       	sbrs	r22, 0
    104e:	1b c0       	rjmp	.+54     	; 0x1086 <__floatsisf+0x6c>
    1050:	6f 5f       	subi	r22, 0xFF	; 255
    1052:	7f 4f       	sbci	r23, 0xFF	; 255
    1054:	8f 4f       	sbci	r24, 0xFF	; 255
    1056:	9f 4f       	sbci	r25, 0xFF	; 255
    1058:	16 c0       	rjmp	.+44     	; 0x1086 <__floatsisf+0x6c>
    105a:	88 23       	and	r24, r24
    105c:	11 f0       	breq	.+4      	; 0x1062 <__floatsisf+0x48>
    105e:	96 e9       	ldi	r25, 0x96	; 150
    1060:	11 c0       	rjmp	.+34     	; 0x1084 <__floatsisf+0x6a>
    1062:	77 23       	and	r23, r23
    1064:	21 f0       	breq	.+8      	; 0x106e <__floatsisf+0x54>
    1066:	9e e8       	ldi	r25, 0x8E	; 142
    1068:	87 2f       	mov	r24, r23
    106a:	76 2f       	mov	r23, r22
    106c:	05 c0       	rjmp	.+10     	; 0x1078 <__floatsisf+0x5e>
    106e:	66 23       	and	r22, r22
    1070:	71 f0       	breq	.+28     	; 0x108e <__floatsisf+0x74>
    1072:	96 e8       	ldi	r25, 0x86	; 134
    1074:	86 2f       	mov	r24, r22
    1076:	70 e0       	ldi	r23, 0x00	; 0
    1078:	60 e0       	ldi	r22, 0x00	; 0
    107a:	2a f0       	brmi	.+10     	; 0x1086 <__floatsisf+0x6c>
    107c:	9a 95       	dec	r25
    107e:	66 0f       	add	r22, r22
    1080:	77 1f       	adc	r23, r23
    1082:	88 1f       	adc	r24, r24
    1084:	da f7       	brpl	.-10     	; 0x107c <__floatsisf+0x62>
    1086:	88 0f       	add	r24, r24
    1088:	96 95       	lsr	r25
    108a:	87 95       	ror	r24
    108c:	97 f9       	bld	r25, 7
    108e:	08 95       	ret

00001090 <__fp_cmp>:
    1090:	99 0f       	add	r25, r25
    1092:	00 08       	sbc	r0, r0
    1094:	55 0f       	add	r21, r21
    1096:	aa 0b       	sbc	r26, r26
    1098:	e0 e8       	ldi	r30, 0x80	; 128
    109a:	fe ef       	ldi	r31, 0xFE	; 254
    109c:	16 16       	cp	r1, r22
    109e:	17 06       	cpc	r1, r23
    10a0:	e8 07       	cpc	r30, r24
    10a2:	f9 07       	cpc	r31, r25
    10a4:	c0 f0       	brcs	.+48     	; 0x10d6 <__fp_cmp+0x46>
    10a6:	12 16       	cp	r1, r18
    10a8:	13 06       	cpc	r1, r19
    10aa:	e4 07       	cpc	r30, r20
    10ac:	f5 07       	cpc	r31, r21
    10ae:	98 f0       	brcs	.+38     	; 0x10d6 <__fp_cmp+0x46>
    10b0:	62 1b       	sub	r22, r18
    10b2:	73 0b       	sbc	r23, r19
    10b4:	84 0b       	sbc	r24, r20
    10b6:	95 0b       	sbc	r25, r21
    10b8:	39 f4       	brne	.+14     	; 0x10c8 <__fp_cmp+0x38>
    10ba:	0a 26       	eor	r0, r26
    10bc:	61 f0       	breq	.+24     	; 0x10d6 <__fp_cmp+0x46>
    10be:	23 2b       	or	r18, r19
    10c0:	24 2b       	or	r18, r20
    10c2:	25 2b       	or	r18, r21
    10c4:	21 f4       	brne	.+8      	; 0x10ce <__fp_cmp+0x3e>
    10c6:	08 95       	ret
    10c8:	0a 26       	eor	r0, r26
    10ca:	09 f4       	brne	.+2      	; 0x10ce <__fp_cmp+0x3e>
    10cc:	a1 40       	sbci	r26, 0x01	; 1
    10ce:	a6 95       	lsr	r26
    10d0:	8f ef       	ldi	r24, 0xFF	; 255
    10d2:	81 1d       	adc	r24, r1
    10d4:	81 1d       	adc	r24, r1
    10d6:	08 95       	ret

000010d8 <__fp_inf>:
    10d8:	97 f9       	bld	r25, 7
    10da:	9f 67       	ori	r25, 0x7F	; 127
    10dc:	80 e8       	ldi	r24, 0x80	; 128
    10de:	70 e0       	ldi	r23, 0x00	; 0
    10e0:	60 e0       	ldi	r22, 0x00	; 0
    10e2:	08 95       	ret

000010e4 <__fp_nan>:
    10e4:	9f ef       	ldi	r25, 0xFF	; 255
    10e6:	80 ec       	ldi	r24, 0xC0	; 192
    10e8:	08 95       	ret

000010ea <__fp_pscA>:
    10ea:	00 24       	eor	r0, r0
    10ec:	0a 94       	dec	r0
    10ee:	16 16       	cp	r1, r22
    10f0:	17 06       	cpc	r1, r23
    10f2:	18 06       	cpc	r1, r24
    10f4:	09 06       	cpc	r0, r25
    10f6:	08 95       	ret

000010f8 <__fp_pscB>:
    10f8:	00 24       	eor	r0, r0
    10fa:	0a 94       	dec	r0
    10fc:	12 16       	cp	r1, r18
    10fe:	13 06       	cpc	r1, r19
    1100:	14 06       	cpc	r1, r20
    1102:	05 06       	cpc	r0, r21
    1104:	08 95       	ret

00001106 <__fp_round>:
    1106:	09 2e       	mov	r0, r25
    1108:	03 94       	inc	r0
    110a:	00 0c       	add	r0, r0
    110c:	11 f4       	brne	.+4      	; 0x1112 <__fp_round+0xc>
    110e:	88 23       	and	r24, r24
    1110:	52 f0       	brmi	.+20     	; 0x1126 <__fp_round+0x20>
    1112:	bb 0f       	add	r27, r27
    1114:	40 f4       	brcc	.+16     	; 0x1126 <__fp_round+0x20>
    1116:	bf 2b       	or	r27, r31
    1118:	11 f4       	brne	.+4      	; 0x111e <__fp_round+0x18>
    111a:	60 ff       	sbrs	r22, 0
    111c:	04 c0       	rjmp	.+8      	; 0x1126 <__fp_round+0x20>
    111e:	6f 5f       	subi	r22, 0xFF	; 255
    1120:	7f 4f       	sbci	r23, 0xFF	; 255
    1122:	8f 4f       	sbci	r24, 0xFF	; 255
    1124:	9f 4f       	sbci	r25, 0xFF	; 255
    1126:	08 95       	ret

00001128 <__fp_split3>:
    1128:	57 fd       	sbrc	r21, 7
    112a:	90 58       	subi	r25, 0x80	; 128
    112c:	44 0f       	add	r20, r20
    112e:	55 1f       	adc	r21, r21
    1130:	59 f0       	breq	.+22     	; 0x1148 <__fp_splitA+0x10>
    1132:	5f 3f       	cpi	r21, 0xFF	; 255
    1134:	71 f0       	breq	.+28     	; 0x1152 <__fp_splitA+0x1a>
    1136:	47 95       	ror	r20

00001138 <__fp_splitA>:
    1138:	88 0f       	add	r24, r24
    113a:	97 fb       	bst	r25, 7
    113c:	99 1f       	adc	r25, r25
    113e:	61 f0       	breq	.+24     	; 0x1158 <__fp_splitA+0x20>
    1140:	9f 3f       	cpi	r25, 0xFF	; 255
    1142:	79 f0       	breq	.+30     	; 0x1162 <__fp_splitA+0x2a>
    1144:	87 95       	ror	r24
    1146:	08 95       	ret
    1148:	12 16       	cp	r1, r18
    114a:	13 06       	cpc	r1, r19
    114c:	14 06       	cpc	r1, r20
    114e:	55 1f       	adc	r21, r21
    1150:	f2 cf       	rjmp	.-28     	; 0x1136 <__fp_split3+0xe>
    1152:	46 95       	lsr	r20
    1154:	f1 df       	rcall	.-30     	; 0x1138 <__fp_splitA>
    1156:	08 c0       	rjmp	.+16     	; 0x1168 <__fp_splitA+0x30>
    1158:	16 16       	cp	r1, r22
    115a:	17 06       	cpc	r1, r23
    115c:	18 06       	cpc	r1, r24
    115e:	99 1f       	adc	r25, r25
    1160:	f1 cf       	rjmp	.-30     	; 0x1144 <__fp_splitA+0xc>
    1162:	86 95       	lsr	r24
    1164:	71 05       	cpc	r23, r1
    1166:	61 05       	cpc	r22, r1
    1168:	08 94       	sec
    116a:	08 95       	ret

0000116c <__fp_zero>:
    116c:	e8 94       	clt

0000116e <__fp_szero>:
    116e:	bb 27       	eor	r27, r27
    1170:	66 27       	eor	r22, r22
    1172:	77 27       	eor	r23, r23
    1174:	cb 01       	movw	r24, r22
    1176:	97 f9       	bld	r25, 7
    1178:	08 95       	ret

0000117a <__mulsf3>:
    117a:	0b d0       	rcall	.+22     	; 0x1192 <__mulsf3x>
    117c:	c4 cf       	rjmp	.-120    	; 0x1106 <__fp_round>
    117e:	b5 df       	rcall	.-150    	; 0x10ea <__fp_pscA>
    1180:	28 f0       	brcs	.+10     	; 0x118c <__mulsf3+0x12>
    1182:	ba df       	rcall	.-140    	; 0x10f8 <__fp_pscB>
    1184:	18 f0       	brcs	.+6      	; 0x118c <__mulsf3+0x12>
    1186:	95 23       	and	r25, r21
    1188:	09 f0       	breq	.+2      	; 0x118c <__mulsf3+0x12>
    118a:	a6 cf       	rjmp	.-180    	; 0x10d8 <__fp_inf>
    118c:	ab cf       	rjmp	.-170    	; 0x10e4 <__fp_nan>
    118e:	11 24       	eor	r1, r1
    1190:	ee cf       	rjmp	.-36     	; 0x116e <__fp_szero>

00001192 <__mulsf3x>:
    1192:	ca df       	rcall	.-108    	; 0x1128 <__fp_split3>
    1194:	a0 f3       	brcs	.-24     	; 0x117e <__mulsf3+0x4>

00001196 <__mulsf3_pse>:
    1196:	95 9f       	mul	r25, r21
    1198:	d1 f3       	breq	.-12     	; 0x118e <__mulsf3+0x14>
    119a:	95 0f       	add	r25, r21
    119c:	50 e0       	ldi	r21, 0x00	; 0
    119e:	55 1f       	adc	r21, r21
    11a0:	62 9f       	mul	r22, r18
    11a2:	f0 01       	movw	r30, r0
    11a4:	72 9f       	mul	r23, r18
    11a6:	bb 27       	eor	r27, r27
    11a8:	f0 0d       	add	r31, r0
    11aa:	b1 1d       	adc	r27, r1
    11ac:	63 9f       	mul	r22, r19
    11ae:	aa 27       	eor	r26, r26
    11b0:	f0 0d       	add	r31, r0
    11b2:	b1 1d       	adc	r27, r1
    11b4:	aa 1f       	adc	r26, r26
    11b6:	64 9f       	mul	r22, r20
    11b8:	66 27       	eor	r22, r22
    11ba:	b0 0d       	add	r27, r0
    11bc:	a1 1d       	adc	r26, r1
    11be:	66 1f       	adc	r22, r22
    11c0:	82 9f       	mul	r24, r18
    11c2:	22 27       	eor	r18, r18
    11c4:	b0 0d       	add	r27, r0
    11c6:	a1 1d       	adc	r26, r1
    11c8:	62 1f       	adc	r22, r18
    11ca:	73 9f       	mul	r23, r19
    11cc:	b0 0d       	add	r27, r0
    11ce:	a1 1d       	adc	r26, r1
    11d0:	62 1f       	adc	r22, r18
    11d2:	83 9f       	mul	r24, r19
    11d4:	a0 0d       	add	r26, r0
    11d6:	61 1d       	adc	r22, r1
    11d8:	22 1f       	adc	r18, r18
    11da:	74 9f       	mul	r23, r20
    11dc:	33 27       	eor	r19, r19
    11de:	a0 0d       	add	r26, r0
    11e0:	61 1d       	adc	r22, r1
    11e2:	23 1f       	adc	r18, r19
    11e4:	84 9f       	mul	r24, r20
    11e6:	60 0d       	add	r22, r0
    11e8:	21 1d       	adc	r18, r1
    11ea:	82 2f       	mov	r24, r18
    11ec:	76 2f       	mov	r23, r22
    11ee:	6a 2f       	mov	r22, r26
    11f0:	11 24       	eor	r1, r1
    11f2:	9f 57       	subi	r25, 0x7F	; 127
    11f4:	50 40       	sbci	r21, 0x00	; 0
    11f6:	8a f0       	brmi	.+34     	; 0x121a <__mulsf3_pse+0x84>
    11f8:	e1 f0       	breq	.+56     	; 0x1232 <__mulsf3_pse+0x9c>
    11fa:	88 23       	and	r24, r24
    11fc:	4a f0       	brmi	.+18     	; 0x1210 <__mulsf3_pse+0x7a>
    11fe:	ee 0f       	add	r30, r30
    1200:	ff 1f       	adc	r31, r31
    1202:	bb 1f       	adc	r27, r27
    1204:	66 1f       	adc	r22, r22
    1206:	77 1f       	adc	r23, r23
    1208:	88 1f       	adc	r24, r24
    120a:	91 50       	subi	r25, 0x01	; 1
    120c:	50 40       	sbci	r21, 0x00	; 0
    120e:	a9 f7       	brne	.-22     	; 0x11fa <__mulsf3_pse+0x64>
    1210:	9e 3f       	cpi	r25, 0xFE	; 254
    1212:	51 05       	cpc	r21, r1
    1214:	70 f0       	brcs	.+28     	; 0x1232 <__mulsf3_pse+0x9c>
    1216:	60 cf       	rjmp	.-320    	; 0x10d8 <__fp_inf>
    1218:	aa cf       	rjmp	.-172    	; 0x116e <__fp_szero>
    121a:	5f 3f       	cpi	r21, 0xFF	; 255
    121c:	ec f3       	brlt	.-6      	; 0x1218 <__mulsf3_pse+0x82>
    121e:	98 3e       	cpi	r25, 0xE8	; 232
    1220:	dc f3       	brlt	.-10     	; 0x1218 <__mulsf3_pse+0x82>
    1222:	86 95       	lsr	r24
    1224:	77 95       	ror	r23
    1226:	67 95       	ror	r22
    1228:	b7 95       	ror	r27
    122a:	f7 95       	ror	r31
    122c:	e7 95       	ror	r30
    122e:	9f 5f       	subi	r25, 0xFF	; 255
    1230:	c1 f7       	brne	.-16     	; 0x1222 <__mulsf3_pse+0x8c>
    1232:	fe 2b       	or	r31, r30
    1234:	88 0f       	add	r24, r24
    1236:	91 1d       	adc	r25, r1
    1238:	96 95       	lsr	r25
    123a:	87 95       	ror	r24
    123c:	97 f9       	bld	r25, 7
    123e:	08 95       	ret

00001240 <vfprintf>:
    1240:	2f 92       	push	r2
    1242:	3f 92       	push	r3
    1244:	4f 92       	push	r4
    1246:	5f 92       	push	r5
    1248:	6f 92       	push	r6
    124a:	7f 92       	push	r7
    124c:	8f 92       	push	r8
    124e:	9f 92       	push	r9
    1250:	af 92       	push	r10
    1252:	bf 92       	push	r11
    1254:	cf 92       	push	r12
    1256:	df 92       	push	r13
    1258:	ef 92       	push	r14
    125a:	ff 92       	push	r15
    125c:	0f 93       	push	r16
    125e:	1f 93       	push	r17
    1260:	cf 93       	push	r28
    1262:	df 93       	push	r29
    1264:	cd b7       	in	r28, 0x3d	; 61
    1266:	de b7       	in	r29, 0x3e	; 62
    1268:	63 97       	sbiw	r28, 0x13	; 19
    126a:	0f b6       	in	r0, 0x3f	; 63
    126c:	f8 94       	cli
    126e:	de bf       	out	0x3e, r29	; 62
    1270:	0f be       	out	0x3f, r0	; 63
    1272:	cd bf       	out	0x3d, r28	; 61
    1274:	7c 01       	movw	r14, r24
    1276:	1b 01       	movw	r2, r22
    1278:	6a 01       	movw	r12, r20
    127a:	fc 01       	movw	r30, r24
    127c:	17 82       	std	Z+7, r1	; 0x07
    127e:	16 82       	std	Z+6, r1	; 0x06
    1280:	83 81       	ldd	r24, Z+3	; 0x03
    1282:	81 ff       	sbrs	r24, 1
    1284:	49 c3       	rjmp	.+1682   	; 0x1918 <vfprintf+0x6d8>
    1286:	be 01       	movw	r22, r28
    1288:	6f 5f       	subi	r22, 0xFF	; 255
    128a:	7f 4f       	sbci	r23, 0xFF	; 255
    128c:	4b 01       	movw	r8, r22
    128e:	f7 01       	movw	r30, r14
    1290:	93 81       	ldd	r25, Z+3	; 0x03
    1292:	f1 01       	movw	r30, r2
    1294:	93 fd       	sbrc	r25, 3
    1296:	85 91       	lpm	r24, Z+
    1298:	93 ff       	sbrs	r25, 3
    129a:	81 91       	ld	r24, Z+
    129c:	1f 01       	movw	r2, r30
    129e:	88 23       	and	r24, r24
    12a0:	09 f4       	brne	.+2      	; 0x12a4 <vfprintf+0x64>
    12a2:	36 c3       	rjmp	.+1644   	; 0x1910 <vfprintf+0x6d0>
    12a4:	85 32       	cpi	r24, 0x25	; 37
    12a6:	39 f4       	brne	.+14     	; 0x12b6 <vfprintf+0x76>
    12a8:	93 fd       	sbrc	r25, 3
    12aa:	85 91       	lpm	r24, Z+
    12ac:	93 ff       	sbrs	r25, 3
    12ae:	81 91       	ld	r24, Z+
    12b0:	1f 01       	movw	r2, r30
    12b2:	85 32       	cpi	r24, 0x25	; 37
    12b4:	31 f4       	brne	.+12     	; 0x12c2 <vfprintf+0x82>
    12b6:	b7 01       	movw	r22, r14
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	64 d4       	rcall	.+2248   	; 0x1b84 <fputc>
    12bc:	56 01       	movw	r10, r12
    12be:	65 01       	movw	r12, r10
    12c0:	e6 cf       	rjmp	.-52     	; 0x128e <vfprintf+0x4e>
    12c2:	10 e0       	ldi	r17, 0x00	; 0
    12c4:	51 2c       	mov	r5, r1
    12c6:	20 e0       	ldi	r18, 0x00	; 0
    12c8:	20 32       	cpi	r18, 0x20	; 32
    12ca:	a0 f4       	brcc	.+40     	; 0x12f4 <vfprintf+0xb4>
    12cc:	8b 32       	cpi	r24, 0x2B	; 43
    12ce:	69 f0       	breq	.+26     	; 0x12ea <vfprintf+0xaa>
    12d0:	30 f4       	brcc	.+12     	; 0x12de <vfprintf+0x9e>
    12d2:	80 32       	cpi	r24, 0x20	; 32
    12d4:	59 f0       	breq	.+22     	; 0x12ec <vfprintf+0xac>
    12d6:	83 32       	cpi	r24, 0x23	; 35
    12d8:	69 f4       	brne	.+26     	; 0x12f4 <vfprintf+0xb4>
    12da:	20 61       	ori	r18, 0x10	; 16
    12dc:	2c c0       	rjmp	.+88     	; 0x1336 <vfprintf+0xf6>
    12de:	8d 32       	cpi	r24, 0x2D	; 45
    12e0:	39 f0       	breq	.+14     	; 0x12f0 <vfprintf+0xb0>
    12e2:	80 33       	cpi	r24, 0x30	; 48
    12e4:	39 f4       	brne	.+14     	; 0x12f4 <vfprintf+0xb4>
    12e6:	21 60       	ori	r18, 0x01	; 1
    12e8:	26 c0       	rjmp	.+76     	; 0x1336 <vfprintf+0xf6>
    12ea:	22 60       	ori	r18, 0x02	; 2
    12ec:	24 60       	ori	r18, 0x04	; 4
    12ee:	23 c0       	rjmp	.+70     	; 0x1336 <vfprintf+0xf6>
    12f0:	28 60       	ori	r18, 0x08	; 8
    12f2:	21 c0       	rjmp	.+66     	; 0x1336 <vfprintf+0xf6>
    12f4:	27 fd       	sbrc	r18, 7
    12f6:	27 c0       	rjmp	.+78     	; 0x1346 <vfprintf+0x106>
    12f8:	30 ed       	ldi	r19, 0xD0	; 208
    12fa:	38 0f       	add	r19, r24
    12fc:	3a 30       	cpi	r19, 0x0A	; 10
    12fe:	78 f4       	brcc	.+30     	; 0x131e <vfprintf+0xde>
    1300:	26 ff       	sbrs	r18, 6
    1302:	06 c0       	rjmp	.+12     	; 0x1310 <vfprintf+0xd0>
    1304:	fa e0       	ldi	r31, 0x0A	; 10
    1306:	1f 9f       	mul	r17, r31
    1308:	30 0d       	add	r19, r0
    130a:	11 24       	eor	r1, r1
    130c:	13 2f       	mov	r17, r19
    130e:	13 c0       	rjmp	.+38     	; 0x1336 <vfprintf+0xf6>
    1310:	6a e0       	ldi	r22, 0x0A	; 10
    1312:	56 9e       	mul	r5, r22
    1314:	30 0d       	add	r19, r0
    1316:	11 24       	eor	r1, r1
    1318:	53 2e       	mov	r5, r19
    131a:	20 62       	ori	r18, 0x20	; 32
    131c:	0c c0       	rjmp	.+24     	; 0x1336 <vfprintf+0xf6>
    131e:	8e 32       	cpi	r24, 0x2E	; 46
    1320:	21 f4       	brne	.+8      	; 0x132a <vfprintf+0xea>
    1322:	26 fd       	sbrc	r18, 6
    1324:	f5 c2       	rjmp	.+1514   	; 0x1910 <vfprintf+0x6d0>
    1326:	20 64       	ori	r18, 0x40	; 64
    1328:	06 c0       	rjmp	.+12     	; 0x1336 <vfprintf+0xf6>
    132a:	8c 36       	cpi	r24, 0x6C	; 108
    132c:	11 f4       	brne	.+4      	; 0x1332 <vfprintf+0xf2>
    132e:	20 68       	ori	r18, 0x80	; 128
    1330:	02 c0       	rjmp	.+4      	; 0x1336 <vfprintf+0xf6>
    1332:	88 36       	cpi	r24, 0x68	; 104
    1334:	41 f4       	brne	.+16     	; 0x1346 <vfprintf+0x106>
    1336:	f1 01       	movw	r30, r2
    1338:	93 fd       	sbrc	r25, 3
    133a:	85 91       	lpm	r24, Z+
    133c:	93 ff       	sbrs	r25, 3
    133e:	81 91       	ld	r24, Z+
    1340:	1f 01       	movw	r2, r30
    1342:	81 11       	cpse	r24, r1
    1344:	c1 cf       	rjmp	.-126    	; 0x12c8 <vfprintf+0x88>
    1346:	9b eb       	ldi	r25, 0xBB	; 187
    1348:	98 0f       	add	r25, r24
    134a:	93 30       	cpi	r25, 0x03	; 3
    134c:	18 f4       	brcc	.+6      	; 0x1354 <vfprintf+0x114>
    134e:	20 61       	ori	r18, 0x10	; 16
    1350:	80 5e       	subi	r24, 0xE0	; 224
    1352:	06 c0       	rjmp	.+12     	; 0x1360 <vfprintf+0x120>
    1354:	9b e9       	ldi	r25, 0x9B	; 155
    1356:	98 0f       	add	r25, r24
    1358:	93 30       	cpi	r25, 0x03	; 3
    135a:	08 f0       	brcs	.+2      	; 0x135e <vfprintf+0x11e>
    135c:	9a c1       	rjmp	.+820    	; 0x1692 <vfprintf+0x452>
    135e:	2f 7e       	andi	r18, 0xEF	; 239
    1360:	26 ff       	sbrs	r18, 6
    1362:	16 e0       	ldi	r17, 0x06	; 6
    1364:	2f 73       	andi	r18, 0x3F	; 63
    1366:	72 2e       	mov	r7, r18
    1368:	85 36       	cpi	r24, 0x65	; 101
    136a:	21 f4       	brne	.+8      	; 0x1374 <vfprintf+0x134>
    136c:	f2 2f       	mov	r31, r18
    136e:	f0 64       	ori	r31, 0x40	; 64
    1370:	7f 2e       	mov	r7, r31
    1372:	08 c0       	rjmp	.+16     	; 0x1384 <vfprintf+0x144>
    1374:	86 36       	cpi	r24, 0x66	; 102
    1376:	21 f4       	brne	.+8      	; 0x1380 <vfprintf+0x140>
    1378:	62 2f       	mov	r22, r18
    137a:	60 68       	ori	r22, 0x80	; 128
    137c:	76 2e       	mov	r7, r22
    137e:	02 c0       	rjmp	.+4      	; 0x1384 <vfprintf+0x144>
    1380:	11 11       	cpse	r17, r1
    1382:	11 50       	subi	r17, 0x01	; 1
    1384:	77 fe       	sbrs	r7, 7
    1386:	07 c0       	rjmp	.+14     	; 0x1396 <vfprintf+0x156>
    1388:	1c 33       	cpi	r17, 0x3C	; 60
    138a:	48 f4       	brcc	.+18     	; 0x139e <vfprintf+0x15e>
    138c:	44 24       	eor	r4, r4
    138e:	43 94       	inc	r4
    1390:	41 0e       	add	r4, r17
    1392:	27 e0       	ldi	r18, 0x07	; 7
    1394:	0b c0       	rjmp	.+22     	; 0x13ac <vfprintf+0x16c>
    1396:	18 30       	cpi	r17, 0x08	; 8
    1398:	30 f4       	brcc	.+12     	; 0x13a6 <vfprintf+0x166>
    139a:	21 2f       	mov	r18, r17
    139c:	06 c0       	rjmp	.+12     	; 0x13aa <vfprintf+0x16a>
    139e:	27 e0       	ldi	r18, 0x07	; 7
    13a0:	4c e3       	ldi	r20, 0x3C	; 60
    13a2:	44 2e       	mov	r4, r20
    13a4:	03 c0       	rjmp	.+6      	; 0x13ac <vfprintf+0x16c>
    13a6:	27 e0       	ldi	r18, 0x07	; 7
    13a8:	17 e0       	ldi	r17, 0x07	; 7
    13aa:	41 2c       	mov	r4, r1
    13ac:	56 01       	movw	r10, r12
    13ae:	74 e0       	ldi	r23, 0x04	; 4
    13b0:	a7 0e       	add	r10, r23
    13b2:	b1 1c       	adc	r11, r1
    13b4:	f6 01       	movw	r30, r12
    13b6:	60 81       	ld	r22, Z
    13b8:	71 81       	ldd	r23, Z+1	; 0x01
    13ba:	82 81       	ldd	r24, Z+2	; 0x02
    13bc:	93 81       	ldd	r25, Z+3	; 0x03
    13be:	04 2d       	mov	r16, r4
    13c0:	a4 01       	movw	r20, r8
    13c2:	f2 d2       	rcall	.+1508   	; 0x19a8 <__ftoa_engine>
    13c4:	6c 01       	movw	r12, r24
    13c6:	09 81       	ldd	r16, Y+1	; 0x01
    13c8:	00 ff       	sbrs	r16, 0
    13ca:	02 c0       	rjmp	.+4      	; 0x13d0 <vfprintf+0x190>
    13cc:	03 ff       	sbrs	r16, 3
    13ce:	06 c0       	rjmp	.+12     	; 0x13dc <vfprintf+0x19c>
    13d0:	71 fc       	sbrc	r7, 1
    13d2:	07 c0       	rjmp	.+14     	; 0x13e2 <vfprintf+0x1a2>
    13d4:	72 fc       	sbrc	r7, 2
    13d6:	08 c0       	rjmp	.+16     	; 0x13e8 <vfprintf+0x1a8>
    13d8:	61 2c       	mov	r6, r1
    13da:	08 c0       	rjmp	.+16     	; 0x13ec <vfprintf+0x1ac>
    13dc:	3d e2       	ldi	r19, 0x2D	; 45
    13de:	63 2e       	mov	r6, r19
    13e0:	05 c0       	rjmp	.+10     	; 0x13ec <vfprintf+0x1ac>
    13e2:	2b e2       	ldi	r18, 0x2B	; 43
    13e4:	62 2e       	mov	r6, r18
    13e6:	02 c0       	rjmp	.+4      	; 0x13ec <vfprintf+0x1ac>
    13e8:	90 e2       	ldi	r25, 0x20	; 32
    13ea:	69 2e       	mov	r6, r25
    13ec:	80 2f       	mov	r24, r16
    13ee:	8c 70       	andi	r24, 0x0C	; 12
    13f0:	81 f1       	breq	.+96     	; 0x1452 <vfprintf+0x212>
    13f2:	66 20       	and	r6, r6
    13f4:	11 f0       	breq	.+4      	; 0x13fa <vfprintf+0x1ba>
    13f6:	84 e0       	ldi	r24, 0x04	; 4
    13f8:	01 c0       	rjmp	.+2      	; 0x13fc <vfprintf+0x1bc>
    13fa:	83 e0       	ldi	r24, 0x03	; 3
    13fc:	85 15       	cp	r24, r5
    13fe:	10 f0       	brcs	.+4      	; 0x1404 <vfprintf+0x1c4>
    1400:	51 2c       	mov	r5, r1
    1402:	0a c0       	rjmp	.+20     	; 0x1418 <vfprintf+0x1d8>
    1404:	58 1a       	sub	r5, r24
    1406:	73 fc       	sbrc	r7, 3
    1408:	07 c0       	rjmp	.+14     	; 0x1418 <vfprintf+0x1d8>
    140a:	b7 01       	movw	r22, r14
    140c:	80 e2       	ldi	r24, 0x20	; 32
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	b9 d3       	rcall	.+1906   	; 0x1b84 <fputc>
    1412:	5a 94       	dec	r5
    1414:	d1 f7       	brne	.-12     	; 0x140a <vfprintf+0x1ca>
    1416:	f4 cf       	rjmp	.-24     	; 0x1400 <vfprintf+0x1c0>
    1418:	66 20       	and	r6, r6
    141a:	21 f0       	breq	.+8      	; 0x1424 <vfprintf+0x1e4>
    141c:	b7 01       	movw	r22, r14
    141e:	86 2d       	mov	r24, r6
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	b0 d3       	rcall	.+1888   	; 0x1b84 <fputc>
    1424:	03 fd       	sbrc	r16, 3
    1426:	03 c0       	rjmp	.+6      	; 0x142e <vfprintf+0x1ee>
    1428:	0a e8       	ldi	r16, 0x8A	; 138
    142a:	11 e0       	ldi	r17, 0x01	; 1
    142c:	02 c0       	rjmp	.+4      	; 0x1432 <vfprintf+0x1f2>
    142e:	06 e8       	ldi	r16, 0x86	; 134
    1430:	11 e0       	ldi	r17, 0x01	; 1
    1432:	f7 2d       	mov	r31, r7
    1434:	f0 71       	andi	r31, 0x10	; 16
    1436:	7f 2e       	mov	r7, r31
    1438:	f8 01       	movw	r30, r16
    143a:	84 91       	lpm	r24, Z
    143c:	88 23       	and	r24, r24
    143e:	09 f4       	brne	.+2      	; 0x1442 <vfprintf+0x202>
    1440:	5e c2       	rjmp	.+1212   	; 0x18fe <vfprintf+0x6be>
    1442:	71 10       	cpse	r7, r1
    1444:	80 52       	subi	r24, 0x20	; 32
    1446:	b7 01       	movw	r22, r14
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	9c d3       	rcall	.+1848   	; 0x1b84 <fputc>
    144c:	0f 5f       	subi	r16, 0xFF	; 255
    144e:	1f 4f       	sbci	r17, 0xFF	; 255
    1450:	f3 cf       	rjmp	.-26     	; 0x1438 <vfprintf+0x1f8>
    1452:	77 fe       	sbrs	r7, 7
    1454:	0f c0       	rjmp	.+30     	; 0x1474 <vfprintf+0x234>
    1456:	4c 0c       	add	r4, r12
    1458:	04 ff       	sbrs	r16, 4
    145a:	04 c0       	rjmp	.+8      	; 0x1464 <vfprintf+0x224>
    145c:	8a 81       	ldd	r24, Y+2	; 0x02
    145e:	81 33       	cpi	r24, 0x31	; 49
    1460:	09 f4       	brne	.+2      	; 0x1464 <vfprintf+0x224>
    1462:	4a 94       	dec	r4
    1464:	14 14       	cp	r1, r4
    1466:	74 f5       	brge	.+92     	; 0x14c4 <vfprintf+0x284>
    1468:	f8 e0       	ldi	r31, 0x08	; 8
    146a:	f4 15       	cp	r31, r4
    146c:	78 f5       	brcc	.+94     	; 0x14cc <vfprintf+0x28c>
    146e:	88 e0       	ldi	r24, 0x08	; 8
    1470:	48 2e       	mov	r4, r24
    1472:	2c c0       	rjmp	.+88     	; 0x14cc <vfprintf+0x28c>
    1474:	76 fc       	sbrc	r7, 6
    1476:	2a c0       	rjmp	.+84     	; 0x14cc <vfprintf+0x28c>
    1478:	81 2f       	mov	r24, r17
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	8c 15       	cp	r24, r12
    147e:	9d 05       	cpc	r25, r13
    1480:	9c f0       	brlt	.+38     	; 0x14a8 <vfprintf+0x268>
    1482:	6c ef       	ldi	r22, 0xFC	; 252
    1484:	c6 16       	cp	r12, r22
    1486:	6f ef       	ldi	r22, 0xFF	; 255
    1488:	d6 06       	cpc	r13, r22
    148a:	74 f0       	brlt	.+28     	; 0x14a8 <vfprintf+0x268>
    148c:	77 2d       	mov	r23, r7
    148e:	70 68       	ori	r23, 0x80	; 128
    1490:	77 2e       	mov	r7, r23
    1492:	0a c0       	rjmp	.+20     	; 0x14a8 <vfprintf+0x268>
    1494:	e2 e0       	ldi	r30, 0x02	; 2
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	ec 0f       	add	r30, r28
    149a:	fd 1f       	adc	r31, r29
    149c:	e1 0f       	add	r30, r17
    149e:	f1 1d       	adc	r31, r1
    14a0:	80 81       	ld	r24, Z
    14a2:	80 33       	cpi	r24, 0x30	; 48
    14a4:	19 f4       	brne	.+6      	; 0x14ac <vfprintf+0x26c>
    14a6:	11 50       	subi	r17, 0x01	; 1
    14a8:	11 11       	cpse	r17, r1
    14aa:	f4 cf       	rjmp	.-24     	; 0x1494 <vfprintf+0x254>
    14ac:	77 fe       	sbrs	r7, 7
    14ae:	0e c0       	rjmp	.+28     	; 0x14cc <vfprintf+0x28c>
    14b0:	44 24       	eor	r4, r4
    14b2:	43 94       	inc	r4
    14b4:	41 0e       	add	r4, r17
    14b6:	81 2f       	mov	r24, r17
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	c8 16       	cp	r12, r24
    14bc:	d9 06       	cpc	r13, r25
    14be:	2c f4       	brge	.+10     	; 0x14ca <vfprintf+0x28a>
    14c0:	1c 19       	sub	r17, r12
    14c2:	04 c0       	rjmp	.+8      	; 0x14cc <vfprintf+0x28c>
    14c4:	44 24       	eor	r4, r4
    14c6:	43 94       	inc	r4
    14c8:	01 c0       	rjmp	.+2      	; 0x14cc <vfprintf+0x28c>
    14ca:	10 e0       	ldi	r17, 0x00	; 0
    14cc:	77 fe       	sbrs	r7, 7
    14ce:	07 c0       	rjmp	.+14     	; 0x14de <vfprintf+0x29e>
    14d0:	1c 14       	cp	r1, r12
    14d2:	1d 04       	cpc	r1, r13
    14d4:	3c f4       	brge	.+14     	; 0x14e4 <vfprintf+0x2a4>
    14d6:	96 01       	movw	r18, r12
    14d8:	2f 5f       	subi	r18, 0xFF	; 255
    14da:	3f 4f       	sbci	r19, 0xFF	; 255
    14dc:	05 c0       	rjmp	.+10     	; 0x14e8 <vfprintf+0x2a8>
    14de:	25 e0       	ldi	r18, 0x05	; 5
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	02 c0       	rjmp	.+4      	; 0x14e8 <vfprintf+0x2a8>
    14e4:	21 e0       	ldi	r18, 0x01	; 1
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	66 20       	and	r6, r6
    14ea:	11 f0       	breq	.+4      	; 0x14f0 <vfprintf+0x2b0>
    14ec:	2f 5f       	subi	r18, 0xFF	; 255
    14ee:	3f 4f       	sbci	r19, 0xFF	; 255
    14f0:	11 23       	and	r17, r17
    14f2:	31 f0       	breq	.+12     	; 0x1500 <vfprintf+0x2c0>
    14f4:	41 2f       	mov	r20, r17
    14f6:	50 e0       	ldi	r21, 0x00	; 0
    14f8:	4f 5f       	subi	r20, 0xFF	; 255
    14fa:	5f 4f       	sbci	r21, 0xFF	; 255
    14fc:	24 0f       	add	r18, r20
    14fe:	35 1f       	adc	r19, r21
    1500:	45 2d       	mov	r20, r5
    1502:	50 e0       	ldi	r21, 0x00	; 0
    1504:	24 17       	cp	r18, r20
    1506:	35 07       	cpc	r19, r21
    1508:	14 f4       	brge	.+4      	; 0x150e <vfprintf+0x2ce>
    150a:	52 1a       	sub	r5, r18
    150c:	01 c0       	rjmp	.+2      	; 0x1510 <vfprintf+0x2d0>
    150e:	51 2c       	mov	r5, r1
    1510:	87 2d       	mov	r24, r7
    1512:	89 70       	andi	r24, 0x09	; 9
    1514:	41 f4       	brne	.+16     	; 0x1526 <vfprintf+0x2e6>
    1516:	55 20       	and	r5, r5
    1518:	31 f0       	breq	.+12     	; 0x1526 <vfprintf+0x2e6>
    151a:	b7 01       	movw	r22, r14
    151c:	80 e2       	ldi	r24, 0x20	; 32
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	31 d3       	rcall	.+1634   	; 0x1b84 <fputc>
    1522:	5a 94       	dec	r5
    1524:	f8 cf       	rjmp	.-16     	; 0x1516 <vfprintf+0x2d6>
    1526:	66 20       	and	r6, r6
    1528:	21 f0       	breq	.+8      	; 0x1532 <vfprintf+0x2f2>
    152a:	b7 01       	movw	r22, r14
    152c:	86 2d       	mov	r24, r6
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	29 d3       	rcall	.+1618   	; 0x1b84 <fputc>
    1532:	73 fc       	sbrc	r7, 3
    1534:	08 c0       	rjmp	.+16     	; 0x1546 <vfprintf+0x306>
    1536:	55 20       	and	r5, r5
    1538:	31 f0       	breq	.+12     	; 0x1546 <vfprintf+0x306>
    153a:	b7 01       	movw	r22, r14
    153c:	80 e3       	ldi	r24, 0x30	; 48
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	21 d3       	rcall	.+1602   	; 0x1b84 <fputc>
    1542:	5a 94       	dec	r5
    1544:	f8 cf       	rjmp	.-16     	; 0x1536 <vfprintf+0x2f6>
    1546:	77 fe       	sbrs	r7, 7
    1548:	5d c0       	rjmp	.+186    	; 0x1604 <vfprintf+0x3c4>
    154a:	9c 2d       	mov	r25, r12
    154c:	8d 2d       	mov	r24, r13
    154e:	d7 fe       	sbrs	r13, 7
    1550:	02 c0       	rjmp	.+4      	; 0x1556 <vfprintf+0x316>
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	80 e0       	ldi	r24, 0x00	; 0
    1556:	69 2e       	mov	r6, r25
    1558:	78 2e       	mov	r7, r24
    155a:	40 e0       	ldi	r20, 0x00	; 0
    155c:	50 e0       	ldi	r21, 0x00	; 0
    155e:	c6 01       	movw	r24, r12
    1560:	84 19       	sub	r24, r4
    1562:	91 09       	sbc	r25, r1
    1564:	9d 87       	std	Y+13, r25	; 0x0d
    1566:	8c 87       	std	Y+12, r24	; 0x0c
    1568:	96 01       	movw	r18, r12
    156a:	26 19       	sub	r18, r6
    156c:	37 09       	sbc	r19, r7
    156e:	28 0d       	add	r18, r8
    1570:	39 1d       	adc	r19, r9
    1572:	81 2f       	mov	r24, r17
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	ee 27       	eor	r30, r30
    1578:	ff 27       	eor	r31, r31
    157a:	e8 1b       	sub	r30, r24
    157c:	f9 0b       	sbc	r31, r25
    157e:	ff 87       	std	Y+15, r31	; 0x0f
    1580:	ee 87       	std	Y+14, r30	; 0x0e
    1582:	ff ef       	ldi	r31, 0xFF	; 255
    1584:	6f 16       	cp	r6, r31
    1586:	7f 06       	cpc	r7, r31
    1588:	61 f4       	brne	.+24     	; 0x15a2 <vfprintf+0x362>
    158a:	b7 01       	movw	r22, r14
    158c:	8e e2       	ldi	r24, 0x2E	; 46
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	2b 8b       	std	Y+19, r18	; 0x13
    1592:	3a 8b       	std	Y+18, r19	; 0x12
    1594:	48 8b       	std	Y+16, r20	; 0x10
    1596:	59 8b       	std	Y+17, r21	; 0x11
    1598:	f5 d2       	rcall	.+1514   	; 0x1b84 <fputc>
    159a:	59 89       	ldd	r21, Y+17	; 0x11
    159c:	48 89       	ldd	r20, Y+16	; 0x10
    159e:	3a 89       	ldd	r19, Y+18	; 0x12
    15a0:	2b 89       	ldd	r18, Y+19	; 0x13
    15a2:	c6 14       	cp	r12, r6
    15a4:	d7 04       	cpc	r13, r7
    15a6:	54 f0       	brlt	.+20     	; 0x15bc <vfprintf+0x37c>
    15a8:	6c 85       	ldd	r22, Y+12	; 0x0c
    15aa:	7d 85       	ldd	r23, Y+13	; 0x0d
    15ac:	66 15       	cp	r22, r6
    15ae:	77 05       	cpc	r23, r7
    15b0:	2c f4       	brge	.+10     	; 0x15bc <vfprintf+0x37c>
    15b2:	f9 01       	movw	r30, r18
    15b4:	e4 0f       	add	r30, r20
    15b6:	f5 1f       	adc	r31, r21
    15b8:	81 81       	ldd	r24, Z+1	; 0x01
    15ba:	01 c0       	rjmp	.+2      	; 0x15be <vfprintf+0x37e>
    15bc:	80 e3       	ldi	r24, 0x30	; 48
    15be:	71 e0       	ldi	r23, 0x01	; 1
    15c0:	67 1a       	sub	r6, r23
    15c2:	71 08       	sbc	r7, r1
    15c4:	4f 5f       	subi	r20, 0xFF	; 255
    15c6:	5f 4f       	sbci	r21, 0xFF	; 255
    15c8:	ee 85       	ldd	r30, Y+14	; 0x0e
    15ca:	ff 85       	ldd	r31, Y+15	; 0x0f
    15cc:	6e 16       	cp	r6, r30
    15ce:	7f 06       	cpc	r7, r31
    15d0:	64 f0       	brlt	.+24     	; 0x15ea <vfprintf+0x3aa>
    15d2:	b7 01       	movw	r22, r14
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	2b 8b       	std	Y+19, r18	; 0x13
    15d8:	3a 8b       	std	Y+18, r19	; 0x12
    15da:	48 8b       	std	Y+16, r20	; 0x10
    15dc:	59 8b       	std	Y+17, r21	; 0x11
    15de:	d2 d2       	rcall	.+1444   	; 0x1b84 <fputc>
    15e0:	2b 89       	ldd	r18, Y+19	; 0x13
    15e2:	3a 89       	ldd	r19, Y+18	; 0x12
    15e4:	48 89       	ldd	r20, Y+16	; 0x10
    15e6:	59 89       	ldd	r21, Y+17	; 0x11
    15e8:	cc cf       	rjmp	.-104    	; 0x1582 <vfprintf+0x342>
    15ea:	6c 14       	cp	r6, r12
    15ec:	7d 04       	cpc	r7, r13
    15ee:	39 f4       	brne	.+14     	; 0x15fe <vfprintf+0x3be>
    15f0:	9a 81       	ldd	r25, Y+2	; 0x02
    15f2:	96 33       	cpi	r25, 0x36	; 54
    15f4:	18 f4       	brcc	.+6      	; 0x15fc <vfprintf+0x3bc>
    15f6:	95 33       	cpi	r25, 0x35	; 53
    15f8:	11 f4       	brne	.+4      	; 0x15fe <vfprintf+0x3be>
    15fa:	04 ff       	sbrs	r16, 4
    15fc:	81 e3       	ldi	r24, 0x31	; 49
    15fe:	b7 01       	movw	r22, r14
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	45 c0       	rjmp	.+138    	; 0x168e <vfprintf+0x44e>
    1604:	8a 81       	ldd	r24, Y+2	; 0x02
    1606:	81 33       	cpi	r24, 0x31	; 49
    1608:	09 f0       	breq	.+2      	; 0x160c <vfprintf+0x3cc>
    160a:	0f 7e       	andi	r16, 0xEF	; 239
    160c:	b7 01       	movw	r22, r14
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	b9 d2       	rcall	.+1394   	; 0x1b84 <fputc>
    1612:	11 11       	cpse	r17, r1
    1614:	05 c0       	rjmp	.+10     	; 0x1620 <vfprintf+0x3e0>
    1616:	74 fe       	sbrs	r7, 4
    1618:	16 c0       	rjmp	.+44     	; 0x1646 <vfprintf+0x406>
    161a:	85 e4       	ldi	r24, 0x45	; 69
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	15 c0       	rjmp	.+42     	; 0x164a <vfprintf+0x40a>
    1620:	b7 01       	movw	r22, r14
    1622:	8e e2       	ldi	r24, 0x2E	; 46
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	ae d2       	rcall	.+1372   	; 0x1b84 <fputc>
    1628:	82 e0       	ldi	r24, 0x02	; 2
    162a:	66 24       	eor	r6, r6
    162c:	63 94       	inc	r6
    162e:	68 0e       	add	r6, r24
    1630:	f4 01       	movw	r30, r8
    1632:	e8 0f       	add	r30, r24
    1634:	f1 1d       	adc	r31, r1
    1636:	80 81       	ld	r24, Z
    1638:	b7 01       	movw	r22, r14
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	a3 d2       	rcall	.+1350   	; 0x1b84 <fputc>
    163e:	11 50       	subi	r17, 0x01	; 1
    1640:	51 f3       	breq	.-44     	; 0x1616 <vfprintf+0x3d6>
    1642:	86 2d       	mov	r24, r6
    1644:	f2 cf       	rjmp	.-28     	; 0x162a <vfprintf+0x3ea>
    1646:	85 e6       	ldi	r24, 0x65	; 101
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	b7 01       	movw	r22, r14
    164c:	9b d2       	rcall	.+1334   	; 0x1b84 <fputc>
    164e:	d7 fc       	sbrc	r13, 7
    1650:	05 c0       	rjmp	.+10     	; 0x165c <vfprintf+0x41c>
    1652:	c1 14       	cp	r12, r1
    1654:	d1 04       	cpc	r13, r1
    1656:	39 f4       	brne	.+14     	; 0x1666 <vfprintf+0x426>
    1658:	04 ff       	sbrs	r16, 4
    165a:	05 c0       	rjmp	.+10     	; 0x1666 <vfprintf+0x426>
    165c:	d1 94       	neg	r13
    165e:	c1 94       	neg	r12
    1660:	d1 08       	sbc	r13, r1
    1662:	8d e2       	ldi	r24, 0x2D	; 45
    1664:	01 c0       	rjmp	.+2      	; 0x1668 <vfprintf+0x428>
    1666:	8b e2       	ldi	r24, 0x2B	; 43
    1668:	b7 01       	movw	r22, r14
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	8b d2       	rcall	.+1302   	; 0x1b84 <fputc>
    166e:	80 e3       	ldi	r24, 0x30	; 48
    1670:	6a e0       	ldi	r22, 0x0A	; 10
    1672:	c6 16       	cp	r12, r22
    1674:	d1 04       	cpc	r13, r1
    1676:	2c f0       	brlt	.+10     	; 0x1682 <vfprintf+0x442>
    1678:	8f 5f       	subi	r24, 0xFF	; 255
    167a:	fa e0       	ldi	r31, 0x0A	; 10
    167c:	cf 1a       	sub	r12, r31
    167e:	d1 08       	sbc	r13, r1
    1680:	f7 cf       	rjmp	.-18     	; 0x1670 <vfprintf+0x430>
    1682:	b7 01       	movw	r22, r14
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	7e d2       	rcall	.+1276   	; 0x1b84 <fputc>
    1688:	b7 01       	movw	r22, r14
    168a:	c6 01       	movw	r24, r12
    168c:	c0 96       	adiw	r24, 0x30	; 48
    168e:	7a d2       	rcall	.+1268   	; 0x1b84 <fputc>
    1690:	36 c1       	rjmp	.+620    	; 0x18fe <vfprintf+0x6be>
    1692:	83 36       	cpi	r24, 0x63	; 99
    1694:	31 f0       	breq	.+12     	; 0x16a2 <vfprintf+0x462>
    1696:	83 37       	cpi	r24, 0x73	; 115
    1698:	79 f0       	breq	.+30     	; 0x16b8 <vfprintf+0x478>
    169a:	83 35       	cpi	r24, 0x53	; 83
    169c:	09 f0       	breq	.+2      	; 0x16a0 <vfprintf+0x460>
    169e:	54 c0       	rjmp	.+168    	; 0x1748 <vfprintf+0x508>
    16a0:	20 c0       	rjmp	.+64     	; 0x16e2 <vfprintf+0x4a2>
    16a2:	56 01       	movw	r10, r12
    16a4:	72 e0       	ldi	r23, 0x02	; 2
    16a6:	a7 0e       	add	r10, r23
    16a8:	b1 1c       	adc	r11, r1
    16aa:	f6 01       	movw	r30, r12
    16ac:	80 81       	ld	r24, Z
    16ae:	89 83       	std	Y+1, r24	; 0x01
    16b0:	01 e0       	ldi	r16, 0x01	; 1
    16b2:	10 e0       	ldi	r17, 0x00	; 0
    16b4:	64 01       	movw	r12, r8
    16b6:	13 c0       	rjmp	.+38     	; 0x16de <vfprintf+0x49e>
    16b8:	56 01       	movw	r10, r12
    16ba:	f2 e0       	ldi	r31, 0x02	; 2
    16bc:	af 0e       	add	r10, r31
    16be:	b1 1c       	adc	r11, r1
    16c0:	f6 01       	movw	r30, r12
    16c2:	c0 80       	ld	r12, Z
    16c4:	d1 80       	ldd	r13, Z+1	; 0x01
    16c6:	26 ff       	sbrs	r18, 6
    16c8:	03 c0       	rjmp	.+6      	; 0x16d0 <vfprintf+0x490>
    16ca:	61 2f       	mov	r22, r17
    16cc:	70 e0       	ldi	r23, 0x00	; 0
    16ce:	02 c0       	rjmp	.+4      	; 0x16d4 <vfprintf+0x494>
    16d0:	6f ef       	ldi	r22, 0xFF	; 255
    16d2:	7f ef       	ldi	r23, 0xFF	; 255
    16d4:	c6 01       	movw	r24, r12
    16d6:	2b 8b       	std	Y+19, r18	; 0x13
    16d8:	4a d2       	rcall	.+1172   	; 0x1b6e <strnlen>
    16da:	8c 01       	movw	r16, r24
    16dc:	2b 89       	ldd	r18, Y+19	; 0x13
    16de:	2f 77       	andi	r18, 0x7F	; 127
    16e0:	14 c0       	rjmp	.+40     	; 0x170a <vfprintf+0x4ca>
    16e2:	56 01       	movw	r10, r12
    16e4:	f2 e0       	ldi	r31, 0x02	; 2
    16e6:	af 0e       	add	r10, r31
    16e8:	b1 1c       	adc	r11, r1
    16ea:	f6 01       	movw	r30, r12
    16ec:	c0 80       	ld	r12, Z
    16ee:	d1 80       	ldd	r13, Z+1	; 0x01
    16f0:	26 ff       	sbrs	r18, 6
    16f2:	03 c0       	rjmp	.+6      	; 0x16fa <vfprintf+0x4ba>
    16f4:	61 2f       	mov	r22, r17
    16f6:	70 e0       	ldi	r23, 0x00	; 0
    16f8:	02 c0       	rjmp	.+4      	; 0x16fe <vfprintf+0x4be>
    16fa:	6f ef       	ldi	r22, 0xFF	; 255
    16fc:	7f ef       	ldi	r23, 0xFF	; 255
    16fe:	c6 01       	movw	r24, r12
    1700:	2b 8b       	std	Y+19, r18	; 0x13
    1702:	2a d2       	rcall	.+1108   	; 0x1b58 <strnlen_P>
    1704:	8c 01       	movw	r16, r24
    1706:	2b 89       	ldd	r18, Y+19	; 0x13
    1708:	20 68       	ori	r18, 0x80	; 128
    170a:	72 2e       	mov	r7, r18
    170c:	23 fd       	sbrc	r18, 3
    170e:	18 c0       	rjmp	.+48     	; 0x1740 <vfprintf+0x500>
    1710:	85 2d       	mov	r24, r5
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	08 17       	cp	r16, r24
    1716:	19 07       	cpc	r17, r25
    1718:	98 f4       	brcc	.+38     	; 0x1740 <vfprintf+0x500>
    171a:	b7 01       	movw	r22, r14
    171c:	80 e2       	ldi	r24, 0x20	; 32
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	31 d2       	rcall	.+1122   	; 0x1b84 <fputc>
    1722:	5a 94       	dec	r5
    1724:	f5 cf       	rjmp	.-22     	; 0x1710 <vfprintf+0x4d0>
    1726:	f6 01       	movw	r30, r12
    1728:	77 fc       	sbrc	r7, 7
    172a:	85 91       	lpm	r24, Z+
    172c:	77 fe       	sbrs	r7, 7
    172e:	81 91       	ld	r24, Z+
    1730:	6f 01       	movw	r12, r30
    1732:	b7 01       	movw	r22, r14
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	26 d2       	rcall	.+1100   	; 0x1b84 <fputc>
    1738:	51 10       	cpse	r5, r1
    173a:	5a 94       	dec	r5
    173c:	01 50       	subi	r16, 0x01	; 1
    173e:	11 09       	sbc	r17, r1
    1740:	01 15       	cp	r16, r1
    1742:	11 05       	cpc	r17, r1
    1744:	81 f7       	brne	.-32     	; 0x1726 <vfprintf+0x4e6>
    1746:	db c0       	rjmp	.+438    	; 0x18fe <vfprintf+0x6be>
    1748:	84 36       	cpi	r24, 0x64	; 100
    174a:	11 f0       	breq	.+4      	; 0x1750 <vfprintf+0x510>
    174c:	89 36       	cpi	r24, 0x69	; 105
    174e:	49 f5       	brne	.+82     	; 0x17a2 <vfprintf+0x562>
    1750:	56 01       	movw	r10, r12
    1752:	27 ff       	sbrs	r18, 7
    1754:	09 c0       	rjmp	.+18     	; 0x1768 <vfprintf+0x528>
    1756:	f4 e0       	ldi	r31, 0x04	; 4
    1758:	af 0e       	add	r10, r31
    175a:	b1 1c       	adc	r11, r1
    175c:	f6 01       	movw	r30, r12
    175e:	60 81       	ld	r22, Z
    1760:	71 81       	ldd	r23, Z+1	; 0x01
    1762:	82 81       	ldd	r24, Z+2	; 0x02
    1764:	93 81       	ldd	r25, Z+3	; 0x03
    1766:	0a c0       	rjmp	.+20     	; 0x177c <vfprintf+0x53c>
    1768:	f2 e0       	ldi	r31, 0x02	; 2
    176a:	af 0e       	add	r10, r31
    176c:	b1 1c       	adc	r11, r1
    176e:	f6 01       	movw	r30, r12
    1770:	60 81       	ld	r22, Z
    1772:	71 81       	ldd	r23, Z+1	; 0x01
    1774:	88 27       	eor	r24, r24
    1776:	77 fd       	sbrc	r23, 7
    1778:	80 95       	com	r24
    177a:	98 2f       	mov	r25, r24
    177c:	02 2f       	mov	r16, r18
    177e:	0f 76       	andi	r16, 0x6F	; 111
    1780:	97 ff       	sbrs	r25, 7
    1782:	08 c0       	rjmp	.+16     	; 0x1794 <vfprintf+0x554>
    1784:	90 95       	com	r25
    1786:	80 95       	com	r24
    1788:	70 95       	com	r23
    178a:	61 95       	neg	r22
    178c:	7f 4f       	sbci	r23, 0xFF	; 255
    178e:	8f 4f       	sbci	r24, 0xFF	; 255
    1790:	9f 4f       	sbci	r25, 0xFF	; 255
    1792:	00 68       	ori	r16, 0x80	; 128
    1794:	2a e0       	ldi	r18, 0x0A	; 10
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	a4 01       	movw	r20, r8
    179a:	64 d2       	rcall	.+1224   	; 0x1c64 <__ultoa_invert>
    179c:	c8 2e       	mov	r12, r24
    179e:	c8 18       	sub	r12, r8
    17a0:	3d c0       	rjmp	.+122    	; 0x181c <vfprintf+0x5dc>
    17a2:	02 2f       	mov	r16, r18
    17a4:	85 37       	cpi	r24, 0x75	; 117
    17a6:	21 f4       	brne	.+8      	; 0x17b0 <vfprintf+0x570>
    17a8:	0f 7e       	andi	r16, 0xEF	; 239
    17aa:	2a e0       	ldi	r18, 0x0A	; 10
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	1d c0       	rjmp	.+58     	; 0x17ea <vfprintf+0x5aa>
    17b0:	09 7f       	andi	r16, 0xF9	; 249
    17b2:	8f 36       	cpi	r24, 0x6F	; 111
    17b4:	91 f0       	breq	.+36     	; 0x17da <vfprintf+0x59a>
    17b6:	18 f4       	brcc	.+6      	; 0x17be <vfprintf+0x57e>
    17b8:	88 35       	cpi	r24, 0x58	; 88
    17ba:	59 f0       	breq	.+22     	; 0x17d2 <vfprintf+0x592>
    17bc:	a9 c0       	rjmp	.+338    	; 0x1910 <vfprintf+0x6d0>
    17be:	80 37       	cpi	r24, 0x70	; 112
    17c0:	19 f0       	breq	.+6      	; 0x17c8 <vfprintf+0x588>
    17c2:	88 37       	cpi	r24, 0x78	; 120
    17c4:	11 f0       	breq	.+4      	; 0x17ca <vfprintf+0x58a>
    17c6:	a4 c0       	rjmp	.+328    	; 0x1910 <vfprintf+0x6d0>
    17c8:	00 61       	ori	r16, 0x10	; 16
    17ca:	04 ff       	sbrs	r16, 4
    17cc:	09 c0       	rjmp	.+18     	; 0x17e0 <vfprintf+0x5a0>
    17ce:	04 60       	ori	r16, 0x04	; 4
    17d0:	07 c0       	rjmp	.+14     	; 0x17e0 <vfprintf+0x5a0>
    17d2:	24 ff       	sbrs	r18, 4
    17d4:	08 c0       	rjmp	.+16     	; 0x17e6 <vfprintf+0x5a6>
    17d6:	06 60       	ori	r16, 0x06	; 6
    17d8:	06 c0       	rjmp	.+12     	; 0x17e6 <vfprintf+0x5a6>
    17da:	28 e0       	ldi	r18, 0x08	; 8
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	05 c0       	rjmp	.+10     	; 0x17ea <vfprintf+0x5aa>
    17e0:	20 e1       	ldi	r18, 0x10	; 16
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	02 c0       	rjmp	.+4      	; 0x17ea <vfprintf+0x5aa>
    17e6:	20 e1       	ldi	r18, 0x10	; 16
    17e8:	32 e0       	ldi	r19, 0x02	; 2
    17ea:	56 01       	movw	r10, r12
    17ec:	07 ff       	sbrs	r16, 7
    17ee:	09 c0       	rjmp	.+18     	; 0x1802 <vfprintf+0x5c2>
    17f0:	f4 e0       	ldi	r31, 0x04	; 4
    17f2:	af 0e       	add	r10, r31
    17f4:	b1 1c       	adc	r11, r1
    17f6:	f6 01       	movw	r30, r12
    17f8:	60 81       	ld	r22, Z
    17fa:	71 81       	ldd	r23, Z+1	; 0x01
    17fc:	82 81       	ldd	r24, Z+2	; 0x02
    17fe:	93 81       	ldd	r25, Z+3	; 0x03
    1800:	08 c0       	rjmp	.+16     	; 0x1812 <vfprintf+0x5d2>
    1802:	f2 e0       	ldi	r31, 0x02	; 2
    1804:	af 0e       	add	r10, r31
    1806:	b1 1c       	adc	r11, r1
    1808:	f6 01       	movw	r30, r12
    180a:	60 81       	ld	r22, Z
    180c:	71 81       	ldd	r23, Z+1	; 0x01
    180e:	80 e0       	ldi	r24, 0x00	; 0
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	a4 01       	movw	r20, r8
    1814:	27 d2       	rcall	.+1102   	; 0x1c64 <__ultoa_invert>
    1816:	c8 2e       	mov	r12, r24
    1818:	c8 18       	sub	r12, r8
    181a:	0f 77       	andi	r16, 0x7F	; 127
    181c:	06 ff       	sbrs	r16, 6
    181e:	0b c0       	rjmp	.+22     	; 0x1836 <vfprintf+0x5f6>
    1820:	20 2f       	mov	r18, r16
    1822:	2e 7f       	andi	r18, 0xFE	; 254
    1824:	c1 16       	cp	r12, r17
    1826:	50 f4       	brcc	.+20     	; 0x183c <vfprintf+0x5fc>
    1828:	04 ff       	sbrs	r16, 4
    182a:	0a c0       	rjmp	.+20     	; 0x1840 <vfprintf+0x600>
    182c:	02 fd       	sbrc	r16, 2
    182e:	08 c0       	rjmp	.+16     	; 0x1840 <vfprintf+0x600>
    1830:	20 2f       	mov	r18, r16
    1832:	2e 7e       	andi	r18, 0xEE	; 238
    1834:	05 c0       	rjmp	.+10     	; 0x1840 <vfprintf+0x600>
    1836:	dc 2c       	mov	r13, r12
    1838:	20 2f       	mov	r18, r16
    183a:	03 c0       	rjmp	.+6      	; 0x1842 <vfprintf+0x602>
    183c:	dc 2c       	mov	r13, r12
    183e:	01 c0       	rjmp	.+2      	; 0x1842 <vfprintf+0x602>
    1840:	d1 2e       	mov	r13, r17
    1842:	24 ff       	sbrs	r18, 4
    1844:	0d c0       	rjmp	.+26     	; 0x1860 <vfprintf+0x620>
    1846:	fe 01       	movw	r30, r28
    1848:	ec 0d       	add	r30, r12
    184a:	f1 1d       	adc	r31, r1
    184c:	80 81       	ld	r24, Z
    184e:	80 33       	cpi	r24, 0x30	; 48
    1850:	11 f4       	brne	.+4      	; 0x1856 <vfprintf+0x616>
    1852:	29 7e       	andi	r18, 0xE9	; 233
    1854:	09 c0       	rjmp	.+18     	; 0x1868 <vfprintf+0x628>
    1856:	22 ff       	sbrs	r18, 2
    1858:	06 c0       	rjmp	.+12     	; 0x1866 <vfprintf+0x626>
    185a:	d3 94       	inc	r13
    185c:	d3 94       	inc	r13
    185e:	04 c0       	rjmp	.+8      	; 0x1868 <vfprintf+0x628>
    1860:	82 2f       	mov	r24, r18
    1862:	86 78       	andi	r24, 0x86	; 134
    1864:	09 f0       	breq	.+2      	; 0x1868 <vfprintf+0x628>
    1866:	d3 94       	inc	r13
    1868:	23 fd       	sbrc	r18, 3
    186a:	12 c0       	rjmp	.+36     	; 0x1890 <vfprintf+0x650>
    186c:	20 ff       	sbrs	r18, 0
    186e:	06 c0       	rjmp	.+12     	; 0x187c <vfprintf+0x63c>
    1870:	1c 2d       	mov	r17, r12
    1872:	d5 14       	cp	r13, r5
    1874:	18 f4       	brcc	.+6      	; 0x187c <vfprintf+0x63c>
    1876:	15 0d       	add	r17, r5
    1878:	1d 19       	sub	r17, r13
    187a:	d5 2c       	mov	r13, r5
    187c:	d5 14       	cp	r13, r5
    187e:	60 f4       	brcc	.+24     	; 0x1898 <vfprintf+0x658>
    1880:	b7 01       	movw	r22, r14
    1882:	80 e2       	ldi	r24, 0x20	; 32
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	2b 8b       	std	Y+19, r18	; 0x13
    1888:	7d d1       	rcall	.+762    	; 0x1b84 <fputc>
    188a:	d3 94       	inc	r13
    188c:	2b 89       	ldd	r18, Y+19	; 0x13
    188e:	f6 cf       	rjmp	.-20     	; 0x187c <vfprintf+0x63c>
    1890:	d5 14       	cp	r13, r5
    1892:	10 f4       	brcc	.+4      	; 0x1898 <vfprintf+0x658>
    1894:	5d 18       	sub	r5, r13
    1896:	01 c0       	rjmp	.+2      	; 0x189a <vfprintf+0x65a>
    1898:	51 2c       	mov	r5, r1
    189a:	24 ff       	sbrs	r18, 4
    189c:	11 c0       	rjmp	.+34     	; 0x18c0 <vfprintf+0x680>
    189e:	b7 01       	movw	r22, r14
    18a0:	80 e3       	ldi	r24, 0x30	; 48
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	2b 8b       	std	Y+19, r18	; 0x13
    18a6:	6e d1       	rcall	.+732    	; 0x1b84 <fputc>
    18a8:	2b 89       	ldd	r18, Y+19	; 0x13
    18aa:	22 ff       	sbrs	r18, 2
    18ac:	16 c0       	rjmp	.+44     	; 0x18da <vfprintf+0x69a>
    18ae:	21 ff       	sbrs	r18, 1
    18b0:	03 c0       	rjmp	.+6      	; 0x18b8 <vfprintf+0x678>
    18b2:	88 e5       	ldi	r24, 0x58	; 88
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	02 c0       	rjmp	.+4      	; 0x18bc <vfprintf+0x67c>
    18b8:	88 e7       	ldi	r24, 0x78	; 120
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	b7 01       	movw	r22, r14
    18be:	0c c0       	rjmp	.+24     	; 0x18d8 <vfprintf+0x698>
    18c0:	82 2f       	mov	r24, r18
    18c2:	86 78       	andi	r24, 0x86	; 134
    18c4:	51 f0       	breq	.+20     	; 0x18da <vfprintf+0x69a>
    18c6:	21 fd       	sbrc	r18, 1
    18c8:	02 c0       	rjmp	.+4      	; 0x18ce <vfprintf+0x68e>
    18ca:	80 e2       	ldi	r24, 0x20	; 32
    18cc:	01 c0       	rjmp	.+2      	; 0x18d0 <vfprintf+0x690>
    18ce:	8b e2       	ldi	r24, 0x2B	; 43
    18d0:	27 fd       	sbrc	r18, 7
    18d2:	8d e2       	ldi	r24, 0x2D	; 45
    18d4:	b7 01       	movw	r22, r14
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	55 d1       	rcall	.+682    	; 0x1b84 <fputc>
    18da:	c1 16       	cp	r12, r17
    18dc:	30 f4       	brcc	.+12     	; 0x18ea <vfprintf+0x6aa>
    18de:	b7 01       	movw	r22, r14
    18e0:	80 e3       	ldi	r24, 0x30	; 48
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	4f d1       	rcall	.+670    	; 0x1b84 <fputc>
    18e6:	11 50       	subi	r17, 0x01	; 1
    18e8:	f8 cf       	rjmp	.-16     	; 0x18da <vfprintf+0x69a>
    18ea:	ca 94       	dec	r12
    18ec:	f4 01       	movw	r30, r8
    18ee:	ec 0d       	add	r30, r12
    18f0:	f1 1d       	adc	r31, r1
    18f2:	80 81       	ld	r24, Z
    18f4:	b7 01       	movw	r22, r14
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	45 d1       	rcall	.+650    	; 0x1b84 <fputc>
    18fa:	c1 10       	cpse	r12, r1
    18fc:	f6 cf       	rjmp	.-20     	; 0x18ea <vfprintf+0x6aa>
    18fe:	55 20       	and	r5, r5
    1900:	09 f4       	brne	.+2      	; 0x1904 <vfprintf+0x6c4>
    1902:	dd cc       	rjmp	.-1606   	; 0x12be <vfprintf+0x7e>
    1904:	b7 01       	movw	r22, r14
    1906:	80 e2       	ldi	r24, 0x20	; 32
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	3c d1       	rcall	.+632    	; 0x1b84 <fputc>
    190c:	5a 94       	dec	r5
    190e:	f7 cf       	rjmp	.-18     	; 0x18fe <vfprintf+0x6be>
    1910:	f7 01       	movw	r30, r14
    1912:	86 81       	ldd	r24, Z+6	; 0x06
    1914:	97 81       	ldd	r25, Z+7	; 0x07
    1916:	02 c0       	rjmp	.+4      	; 0x191c <vfprintf+0x6dc>
    1918:	8f ef       	ldi	r24, 0xFF	; 255
    191a:	9f ef       	ldi	r25, 0xFF	; 255
    191c:	63 96       	adiw	r28, 0x13	; 19
    191e:	0f b6       	in	r0, 0x3f	; 63
    1920:	f8 94       	cli
    1922:	de bf       	out	0x3e, r29	; 62
    1924:	0f be       	out	0x3f, r0	; 63
    1926:	cd bf       	out	0x3d, r28	; 61
    1928:	df 91       	pop	r29
    192a:	cf 91       	pop	r28
    192c:	1f 91       	pop	r17
    192e:	0f 91       	pop	r16
    1930:	ff 90       	pop	r15
    1932:	ef 90       	pop	r14
    1934:	df 90       	pop	r13
    1936:	cf 90       	pop	r12
    1938:	bf 90       	pop	r11
    193a:	af 90       	pop	r10
    193c:	9f 90       	pop	r9
    193e:	8f 90       	pop	r8
    1940:	7f 90       	pop	r7
    1942:	6f 90       	pop	r6
    1944:	5f 90       	pop	r5
    1946:	4f 90       	pop	r4
    1948:	3f 90       	pop	r3
    194a:	2f 90       	pop	r2
    194c:	08 95       	ret

0000194e <__divmodhi4>:
    194e:	97 fb       	bst	r25, 7
    1950:	07 2e       	mov	r0, r23
    1952:	16 f4       	brtc	.+4      	; 0x1958 <__divmodhi4+0xa>
    1954:	00 94       	com	r0
    1956:	06 d0       	rcall	.+12     	; 0x1964 <__divmodhi4_neg1>
    1958:	77 fd       	sbrc	r23, 7
    195a:	08 d0       	rcall	.+16     	; 0x196c <__divmodhi4_neg2>
    195c:	11 d0       	rcall	.+34     	; 0x1980 <__udivmodhi4>
    195e:	07 fc       	sbrc	r0, 7
    1960:	05 d0       	rcall	.+10     	; 0x196c <__divmodhi4_neg2>
    1962:	3e f4       	brtc	.+14     	; 0x1972 <__divmodhi4_exit>

00001964 <__divmodhi4_neg1>:
    1964:	90 95       	com	r25
    1966:	81 95       	neg	r24
    1968:	9f 4f       	sbci	r25, 0xFF	; 255
    196a:	08 95       	ret

0000196c <__divmodhi4_neg2>:
    196c:	70 95       	com	r23
    196e:	61 95       	neg	r22
    1970:	7f 4f       	sbci	r23, 0xFF	; 255

00001972 <__divmodhi4_exit>:
    1972:	08 95       	ret

00001974 <__tablejump2__>:
    1974:	ee 0f       	add	r30, r30
    1976:	ff 1f       	adc	r31, r31

00001978 <__tablejump__>:
    1978:	05 90       	lpm	r0, Z+
    197a:	f4 91       	lpm	r31, Z
    197c:	e0 2d       	mov	r30, r0
    197e:	19 94       	eijmp

00001980 <__udivmodhi4>:
    1980:	aa 1b       	sub	r26, r26
    1982:	bb 1b       	sub	r27, r27
    1984:	51 e1       	ldi	r21, 0x11	; 17
    1986:	07 c0       	rjmp	.+14     	; 0x1996 <__udivmodhi4_ep>

00001988 <__udivmodhi4_loop>:
    1988:	aa 1f       	adc	r26, r26
    198a:	bb 1f       	adc	r27, r27
    198c:	a6 17       	cp	r26, r22
    198e:	b7 07       	cpc	r27, r23
    1990:	10 f0       	brcs	.+4      	; 0x1996 <__udivmodhi4_ep>
    1992:	a6 1b       	sub	r26, r22
    1994:	b7 0b       	sbc	r27, r23

00001996 <__udivmodhi4_ep>:
    1996:	88 1f       	adc	r24, r24
    1998:	99 1f       	adc	r25, r25
    199a:	5a 95       	dec	r21
    199c:	a9 f7       	brne	.-22     	; 0x1988 <__udivmodhi4_loop>
    199e:	80 95       	com	r24
    19a0:	90 95       	com	r25
    19a2:	bc 01       	movw	r22, r24
    19a4:	cd 01       	movw	r24, r26
    19a6:	08 95       	ret

000019a8 <__ftoa_engine>:
    19a8:	28 30       	cpi	r18, 0x08	; 8
    19aa:	08 f0       	brcs	.+2      	; 0x19ae <__ftoa_engine+0x6>
    19ac:	27 e0       	ldi	r18, 0x07	; 7
    19ae:	33 27       	eor	r19, r19
    19b0:	da 01       	movw	r26, r20
    19b2:	99 0f       	add	r25, r25
    19b4:	31 1d       	adc	r19, r1
    19b6:	87 fd       	sbrc	r24, 7
    19b8:	91 60       	ori	r25, 0x01	; 1
    19ba:	00 96       	adiw	r24, 0x00	; 0
    19bc:	61 05       	cpc	r22, r1
    19be:	71 05       	cpc	r23, r1
    19c0:	39 f4       	brne	.+14     	; 0x19d0 <__ftoa_engine+0x28>
    19c2:	32 60       	ori	r19, 0x02	; 2
    19c4:	2e 5f       	subi	r18, 0xFE	; 254
    19c6:	3d 93       	st	X+, r19
    19c8:	30 e3       	ldi	r19, 0x30	; 48
    19ca:	2a 95       	dec	r18
    19cc:	e1 f7       	brne	.-8      	; 0x19c6 <__ftoa_engine+0x1e>
    19ce:	08 95       	ret
    19d0:	9f 3f       	cpi	r25, 0xFF	; 255
    19d2:	30 f0       	brcs	.+12     	; 0x19e0 <__ftoa_engine+0x38>
    19d4:	80 38       	cpi	r24, 0x80	; 128
    19d6:	71 05       	cpc	r23, r1
    19d8:	61 05       	cpc	r22, r1
    19da:	09 f0       	breq	.+2      	; 0x19de <__ftoa_engine+0x36>
    19dc:	3c 5f       	subi	r19, 0xFC	; 252
    19de:	3c 5f       	subi	r19, 0xFC	; 252
    19e0:	3d 93       	st	X+, r19
    19e2:	91 30       	cpi	r25, 0x01	; 1
    19e4:	08 f0       	brcs	.+2      	; 0x19e8 <__ftoa_engine+0x40>
    19e6:	80 68       	ori	r24, 0x80	; 128
    19e8:	91 1d       	adc	r25, r1
    19ea:	df 93       	push	r29
    19ec:	cf 93       	push	r28
    19ee:	1f 93       	push	r17
    19f0:	0f 93       	push	r16
    19f2:	ff 92       	push	r15
    19f4:	ef 92       	push	r14
    19f6:	19 2f       	mov	r17, r25
    19f8:	98 7f       	andi	r25, 0xF8	; 248
    19fa:	96 95       	lsr	r25
    19fc:	e9 2f       	mov	r30, r25
    19fe:	96 95       	lsr	r25
    1a00:	96 95       	lsr	r25
    1a02:	e9 0f       	add	r30, r25
    1a04:	ff 27       	eor	r31, r31
    1a06:	e8 51       	subi	r30, 0x18	; 24
    1a08:	fe 4f       	sbci	r31, 0xFE	; 254
    1a0a:	99 27       	eor	r25, r25
    1a0c:	33 27       	eor	r19, r19
    1a0e:	ee 24       	eor	r14, r14
    1a10:	ff 24       	eor	r15, r15
    1a12:	a7 01       	movw	r20, r14
    1a14:	e7 01       	movw	r28, r14
    1a16:	05 90       	lpm	r0, Z+
    1a18:	08 94       	sec
    1a1a:	07 94       	ror	r0
    1a1c:	28 f4       	brcc	.+10     	; 0x1a28 <__ftoa_engine+0x80>
    1a1e:	36 0f       	add	r19, r22
    1a20:	e7 1e       	adc	r14, r23
    1a22:	f8 1e       	adc	r15, r24
    1a24:	49 1f       	adc	r20, r25
    1a26:	51 1d       	adc	r21, r1
    1a28:	66 0f       	add	r22, r22
    1a2a:	77 1f       	adc	r23, r23
    1a2c:	88 1f       	adc	r24, r24
    1a2e:	99 1f       	adc	r25, r25
    1a30:	06 94       	lsr	r0
    1a32:	a1 f7       	brne	.-24     	; 0x1a1c <__ftoa_engine+0x74>
    1a34:	05 90       	lpm	r0, Z+
    1a36:	07 94       	ror	r0
    1a38:	28 f4       	brcc	.+10     	; 0x1a44 <__ftoa_engine+0x9c>
    1a3a:	e7 0e       	add	r14, r23
    1a3c:	f8 1e       	adc	r15, r24
    1a3e:	49 1f       	adc	r20, r25
    1a40:	56 1f       	adc	r21, r22
    1a42:	c1 1d       	adc	r28, r1
    1a44:	77 0f       	add	r23, r23
    1a46:	88 1f       	adc	r24, r24
    1a48:	99 1f       	adc	r25, r25
    1a4a:	66 1f       	adc	r22, r22
    1a4c:	06 94       	lsr	r0
    1a4e:	a1 f7       	brne	.-24     	; 0x1a38 <__ftoa_engine+0x90>
    1a50:	05 90       	lpm	r0, Z+
    1a52:	07 94       	ror	r0
    1a54:	28 f4       	brcc	.+10     	; 0x1a60 <__ftoa_engine+0xb8>
    1a56:	f8 0e       	add	r15, r24
    1a58:	49 1f       	adc	r20, r25
    1a5a:	56 1f       	adc	r21, r22
    1a5c:	c7 1f       	adc	r28, r23
    1a5e:	d1 1d       	adc	r29, r1
    1a60:	88 0f       	add	r24, r24
    1a62:	99 1f       	adc	r25, r25
    1a64:	66 1f       	adc	r22, r22
    1a66:	77 1f       	adc	r23, r23
    1a68:	06 94       	lsr	r0
    1a6a:	a1 f7       	brne	.-24     	; 0x1a54 <__ftoa_engine+0xac>
    1a6c:	05 90       	lpm	r0, Z+
    1a6e:	07 94       	ror	r0
    1a70:	20 f4       	brcc	.+8      	; 0x1a7a <__ftoa_engine+0xd2>
    1a72:	49 0f       	add	r20, r25
    1a74:	56 1f       	adc	r21, r22
    1a76:	c7 1f       	adc	r28, r23
    1a78:	d8 1f       	adc	r29, r24
    1a7a:	99 0f       	add	r25, r25
    1a7c:	66 1f       	adc	r22, r22
    1a7e:	77 1f       	adc	r23, r23
    1a80:	88 1f       	adc	r24, r24
    1a82:	06 94       	lsr	r0
    1a84:	a9 f7       	brne	.-22     	; 0x1a70 <__ftoa_engine+0xc8>
    1a86:	84 91       	lpm	r24, Z
    1a88:	10 95       	com	r17
    1a8a:	17 70       	andi	r17, 0x07	; 7
    1a8c:	41 f0       	breq	.+16     	; 0x1a9e <__ftoa_engine+0xf6>
    1a8e:	d6 95       	lsr	r29
    1a90:	c7 95       	ror	r28
    1a92:	57 95       	ror	r21
    1a94:	47 95       	ror	r20
    1a96:	f7 94       	ror	r15
    1a98:	e7 94       	ror	r14
    1a9a:	1a 95       	dec	r17
    1a9c:	c1 f7       	brne	.-16     	; 0x1a8e <__ftoa_engine+0xe6>
    1a9e:	ee e8       	ldi	r30, 0x8E	; 142
    1aa0:	f1 e0       	ldi	r31, 0x01	; 1
    1aa2:	68 94       	set
    1aa4:	15 90       	lpm	r1, Z+
    1aa6:	15 91       	lpm	r17, Z+
    1aa8:	35 91       	lpm	r19, Z+
    1aaa:	65 91       	lpm	r22, Z+
    1aac:	95 91       	lpm	r25, Z+
    1aae:	05 90       	lpm	r0, Z+
    1ab0:	7f e2       	ldi	r23, 0x2F	; 47
    1ab2:	73 95       	inc	r23
    1ab4:	e1 18       	sub	r14, r1
    1ab6:	f1 0a       	sbc	r15, r17
    1ab8:	43 0b       	sbc	r20, r19
    1aba:	56 0b       	sbc	r21, r22
    1abc:	c9 0b       	sbc	r28, r25
    1abe:	d0 09       	sbc	r29, r0
    1ac0:	c0 f7       	brcc	.-16     	; 0x1ab2 <__ftoa_engine+0x10a>
    1ac2:	e1 0c       	add	r14, r1
    1ac4:	f1 1e       	adc	r15, r17
    1ac6:	43 1f       	adc	r20, r19
    1ac8:	56 1f       	adc	r21, r22
    1aca:	c9 1f       	adc	r28, r25
    1acc:	d0 1d       	adc	r29, r0
    1ace:	7e f4       	brtc	.+30     	; 0x1aee <__ftoa_engine+0x146>
    1ad0:	70 33       	cpi	r23, 0x30	; 48
    1ad2:	11 f4       	brne	.+4      	; 0x1ad8 <__ftoa_engine+0x130>
    1ad4:	8a 95       	dec	r24
    1ad6:	e6 cf       	rjmp	.-52     	; 0x1aa4 <__ftoa_engine+0xfc>
    1ad8:	e8 94       	clt
    1ada:	01 50       	subi	r16, 0x01	; 1
    1adc:	30 f0       	brcs	.+12     	; 0x1aea <__ftoa_engine+0x142>
    1ade:	08 0f       	add	r16, r24
    1ae0:	0a f4       	brpl	.+2      	; 0x1ae4 <__ftoa_engine+0x13c>
    1ae2:	00 27       	eor	r16, r16
    1ae4:	02 17       	cp	r16, r18
    1ae6:	08 f4       	brcc	.+2      	; 0x1aea <__ftoa_engine+0x142>
    1ae8:	20 2f       	mov	r18, r16
    1aea:	23 95       	inc	r18
    1aec:	02 2f       	mov	r16, r18
    1aee:	7a 33       	cpi	r23, 0x3A	; 58
    1af0:	28 f0       	brcs	.+10     	; 0x1afc <__ftoa_engine+0x154>
    1af2:	79 e3       	ldi	r23, 0x39	; 57
    1af4:	7d 93       	st	X+, r23
    1af6:	2a 95       	dec	r18
    1af8:	e9 f7       	brne	.-6      	; 0x1af4 <__ftoa_engine+0x14c>
    1afa:	10 c0       	rjmp	.+32     	; 0x1b1c <__ftoa_engine+0x174>
    1afc:	7d 93       	st	X+, r23
    1afe:	2a 95       	dec	r18
    1b00:	89 f6       	brne	.-94     	; 0x1aa4 <__ftoa_engine+0xfc>
    1b02:	06 94       	lsr	r0
    1b04:	97 95       	ror	r25
    1b06:	67 95       	ror	r22
    1b08:	37 95       	ror	r19
    1b0a:	17 95       	ror	r17
    1b0c:	17 94       	ror	r1
    1b0e:	e1 18       	sub	r14, r1
    1b10:	f1 0a       	sbc	r15, r17
    1b12:	43 0b       	sbc	r20, r19
    1b14:	56 0b       	sbc	r21, r22
    1b16:	c9 0b       	sbc	r28, r25
    1b18:	d0 09       	sbc	r29, r0
    1b1a:	98 f0       	brcs	.+38     	; 0x1b42 <__ftoa_engine+0x19a>
    1b1c:	23 95       	inc	r18
    1b1e:	7e 91       	ld	r23, -X
    1b20:	73 95       	inc	r23
    1b22:	7a 33       	cpi	r23, 0x3A	; 58
    1b24:	08 f0       	brcs	.+2      	; 0x1b28 <__ftoa_engine+0x180>
    1b26:	70 e3       	ldi	r23, 0x30	; 48
    1b28:	7c 93       	st	X, r23
    1b2a:	20 13       	cpse	r18, r16
    1b2c:	b8 f7       	brcc	.-18     	; 0x1b1c <__ftoa_engine+0x174>
    1b2e:	7e 91       	ld	r23, -X
    1b30:	70 61       	ori	r23, 0x10	; 16
    1b32:	7d 93       	st	X+, r23
    1b34:	30 f0       	brcs	.+12     	; 0x1b42 <__ftoa_engine+0x19a>
    1b36:	83 95       	inc	r24
    1b38:	71 e3       	ldi	r23, 0x31	; 49
    1b3a:	7d 93       	st	X+, r23
    1b3c:	70 e3       	ldi	r23, 0x30	; 48
    1b3e:	2a 95       	dec	r18
    1b40:	e1 f7       	brne	.-8      	; 0x1b3a <__ftoa_engine+0x192>
    1b42:	11 24       	eor	r1, r1
    1b44:	ef 90       	pop	r14
    1b46:	ff 90       	pop	r15
    1b48:	0f 91       	pop	r16
    1b4a:	1f 91       	pop	r17
    1b4c:	cf 91       	pop	r28
    1b4e:	df 91       	pop	r29
    1b50:	99 27       	eor	r25, r25
    1b52:	87 fd       	sbrc	r24, 7
    1b54:	90 95       	com	r25
    1b56:	08 95       	ret

00001b58 <strnlen_P>:
    1b58:	fc 01       	movw	r30, r24
    1b5a:	05 90       	lpm	r0, Z+
    1b5c:	61 50       	subi	r22, 0x01	; 1
    1b5e:	70 40       	sbci	r23, 0x00	; 0
    1b60:	01 10       	cpse	r0, r1
    1b62:	d8 f7       	brcc	.-10     	; 0x1b5a <strnlen_P+0x2>
    1b64:	80 95       	com	r24
    1b66:	90 95       	com	r25
    1b68:	8e 0f       	add	r24, r30
    1b6a:	9f 1f       	adc	r25, r31
    1b6c:	08 95       	ret

00001b6e <strnlen>:
    1b6e:	fc 01       	movw	r30, r24
    1b70:	61 50       	subi	r22, 0x01	; 1
    1b72:	70 40       	sbci	r23, 0x00	; 0
    1b74:	01 90       	ld	r0, Z+
    1b76:	01 10       	cpse	r0, r1
    1b78:	d8 f7       	brcc	.-10     	; 0x1b70 <strnlen+0x2>
    1b7a:	80 95       	com	r24
    1b7c:	90 95       	com	r25
    1b7e:	8e 0f       	add	r24, r30
    1b80:	9f 1f       	adc	r25, r31
    1b82:	08 95       	ret

00001b84 <fputc>:
    1b84:	0f 93       	push	r16
    1b86:	1f 93       	push	r17
    1b88:	cf 93       	push	r28
    1b8a:	df 93       	push	r29
    1b8c:	18 2f       	mov	r17, r24
    1b8e:	09 2f       	mov	r16, r25
    1b90:	eb 01       	movw	r28, r22
    1b92:	8b 81       	ldd	r24, Y+3	; 0x03
    1b94:	81 fd       	sbrc	r24, 1
    1b96:	03 c0       	rjmp	.+6      	; 0x1b9e <fputc+0x1a>
    1b98:	8f ef       	ldi	r24, 0xFF	; 255
    1b9a:	9f ef       	ldi	r25, 0xFF	; 255
    1b9c:	20 c0       	rjmp	.+64     	; 0x1bde <fputc+0x5a>
    1b9e:	82 ff       	sbrs	r24, 2
    1ba0:	10 c0       	rjmp	.+32     	; 0x1bc2 <fputc+0x3e>
    1ba2:	4e 81       	ldd	r20, Y+6	; 0x06
    1ba4:	5f 81       	ldd	r21, Y+7	; 0x07
    1ba6:	2c 81       	ldd	r18, Y+4	; 0x04
    1ba8:	3d 81       	ldd	r19, Y+5	; 0x05
    1baa:	42 17       	cp	r20, r18
    1bac:	53 07       	cpc	r21, r19
    1bae:	7c f4       	brge	.+30     	; 0x1bce <fputc+0x4a>
    1bb0:	e8 81       	ld	r30, Y
    1bb2:	f9 81       	ldd	r31, Y+1	; 0x01
    1bb4:	9f 01       	movw	r18, r30
    1bb6:	2f 5f       	subi	r18, 0xFF	; 255
    1bb8:	3f 4f       	sbci	r19, 0xFF	; 255
    1bba:	39 83       	std	Y+1, r19	; 0x01
    1bbc:	28 83       	st	Y, r18
    1bbe:	10 83       	st	Z, r17
    1bc0:	06 c0       	rjmp	.+12     	; 0x1bce <fputc+0x4a>
    1bc2:	e8 85       	ldd	r30, Y+8	; 0x08
    1bc4:	f9 85       	ldd	r31, Y+9	; 0x09
    1bc6:	81 2f       	mov	r24, r17
    1bc8:	19 95       	eicall
    1bca:	89 2b       	or	r24, r25
    1bcc:	29 f7       	brne	.-54     	; 0x1b98 <fputc+0x14>
    1bce:	2e 81       	ldd	r18, Y+6	; 0x06
    1bd0:	3f 81       	ldd	r19, Y+7	; 0x07
    1bd2:	2f 5f       	subi	r18, 0xFF	; 255
    1bd4:	3f 4f       	sbci	r19, 0xFF	; 255
    1bd6:	3f 83       	std	Y+7, r19	; 0x07
    1bd8:	2e 83       	std	Y+6, r18	; 0x06
    1bda:	81 2f       	mov	r24, r17
    1bdc:	90 2f       	mov	r25, r16
    1bde:	df 91       	pop	r29
    1be0:	cf 91       	pop	r28
    1be2:	1f 91       	pop	r17
    1be4:	0f 91       	pop	r16
    1be6:	08 95       	ret

00001be8 <printf>:
    1be8:	cf 93       	push	r28
    1bea:	df 93       	push	r29
    1bec:	cd b7       	in	r28, 0x3d	; 61
    1bee:	de b7       	in	r29, 0x3e	; 62
    1bf0:	fe 01       	movw	r30, r28
    1bf2:	36 96       	adiw	r30, 0x06	; 6
    1bf4:	61 91       	ld	r22, Z+
    1bf6:	71 91       	ld	r23, Z+
    1bf8:	af 01       	movw	r20, r30
    1bfa:	80 91 4f 03 	lds	r24, 0x034F
    1bfe:	90 91 50 03 	lds	r25, 0x0350
    1c02:	1e db       	rcall	.-2500   	; 0x1240 <vfprintf>
    1c04:	df 91       	pop	r29
    1c06:	cf 91       	pop	r28
    1c08:	08 95       	ret

00001c0a <puts>:
    1c0a:	0f 93       	push	r16
    1c0c:	1f 93       	push	r17
    1c0e:	cf 93       	push	r28
    1c10:	df 93       	push	r29
    1c12:	e0 91 4f 03 	lds	r30, 0x034F
    1c16:	f0 91 50 03 	lds	r31, 0x0350
    1c1a:	23 81       	ldd	r18, Z+3	; 0x03
    1c1c:	21 ff       	sbrs	r18, 1
    1c1e:	1b c0       	rjmp	.+54     	; 0x1c56 <puts+0x4c>
    1c20:	ec 01       	movw	r28, r24
    1c22:	00 e0       	ldi	r16, 0x00	; 0
    1c24:	10 e0       	ldi	r17, 0x00	; 0
    1c26:	89 91       	ld	r24, Y+
    1c28:	60 91 4f 03 	lds	r22, 0x034F
    1c2c:	70 91 50 03 	lds	r23, 0x0350
    1c30:	db 01       	movw	r26, r22
    1c32:	18 96       	adiw	r26, 0x08	; 8
    1c34:	ed 91       	ld	r30, X+
    1c36:	fc 91       	ld	r31, X
    1c38:	19 97       	sbiw	r26, 0x09	; 9
    1c3a:	88 23       	and	r24, r24
    1c3c:	31 f0       	breq	.+12     	; 0x1c4a <puts+0x40>
    1c3e:	19 95       	eicall
    1c40:	89 2b       	or	r24, r25
    1c42:	89 f3       	breq	.-30     	; 0x1c26 <puts+0x1c>
    1c44:	0f ef       	ldi	r16, 0xFF	; 255
    1c46:	1f ef       	ldi	r17, 0xFF	; 255
    1c48:	ee cf       	rjmp	.-36     	; 0x1c26 <puts+0x1c>
    1c4a:	8a e0       	ldi	r24, 0x0A	; 10
    1c4c:	19 95       	eicall
    1c4e:	89 2b       	or	r24, r25
    1c50:	11 f4       	brne	.+4      	; 0x1c56 <puts+0x4c>
    1c52:	c8 01       	movw	r24, r16
    1c54:	02 c0       	rjmp	.+4      	; 0x1c5a <puts+0x50>
    1c56:	8f ef       	ldi	r24, 0xFF	; 255
    1c58:	9f ef       	ldi	r25, 0xFF	; 255
    1c5a:	df 91       	pop	r29
    1c5c:	cf 91       	pop	r28
    1c5e:	1f 91       	pop	r17
    1c60:	0f 91       	pop	r16
    1c62:	08 95       	ret

00001c64 <__ultoa_invert>:
    1c64:	fa 01       	movw	r30, r20
    1c66:	aa 27       	eor	r26, r26
    1c68:	28 30       	cpi	r18, 0x08	; 8
    1c6a:	51 f1       	breq	.+84     	; 0x1cc0 <__ultoa_invert+0x5c>
    1c6c:	20 31       	cpi	r18, 0x10	; 16
    1c6e:	81 f1       	breq	.+96     	; 0x1cd0 <__ultoa_invert+0x6c>
    1c70:	e8 94       	clt
    1c72:	6f 93       	push	r22
    1c74:	6e 7f       	andi	r22, 0xFE	; 254
    1c76:	6e 5f       	subi	r22, 0xFE	; 254
    1c78:	7f 4f       	sbci	r23, 0xFF	; 255
    1c7a:	8f 4f       	sbci	r24, 0xFF	; 255
    1c7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c7e:	af 4f       	sbci	r26, 0xFF	; 255
    1c80:	b1 e0       	ldi	r27, 0x01	; 1
    1c82:	3e d0       	rcall	.+124    	; 0x1d00 <__ultoa_invert+0x9c>
    1c84:	b4 e0       	ldi	r27, 0x04	; 4
    1c86:	3c d0       	rcall	.+120    	; 0x1d00 <__ultoa_invert+0x9c>
    1c88:	67 0f       	add	r22, r23
    1c8a:	78 1f       	adc	r23, r24
    1c8c:	89 1f       	adc	r24, r25
    1c8e:	9a 1f       	adc	r25, r26
    1c90:	a1 1d       	adc	r26, r1
    1c92:	68 0f       	add	r22, r24
    1c94:	79 1f       	adc	r23, r25
    1c96:	8a 1f       	adc	r24, r26
    1c98:	91 1d       	adc	r25, r1
    1c9a:	a1 1d       	adc	r26, r1
    1c9c:	6a 0f       	add	r22, r26
    1c9e:	71 1d       	adc	r23, r1
    1ca0:	81 1d       	adc	r24, r1
    1ca2:	91 1d       	adc	r25, r1
    1ca4:	a1 1d       	adc	r26, r1
    1ca6:	20 d0       	rcall	.+64     	; 0x1ce8 <__ultoa_invert+0x84>
    1ca8:	09 f4       	brne	.+2      	; 0x1cac <__ultoa_invert+0x48>
    1caa:	68 94       	set
    1cac:	3f 91       	pop	r19
    1cae:	2a e0       	ldi	r18, 0x0A	; 10
    1cb0:	26 9f       	mul	r18, r22
    1cb2:	11 24       	eor	r1, r1
    1cb4:	30 19       	sub	r19, r0
    1cb6:	30 5d       	subi	r19, 0xD0	; 208
    1cb8:	31 93       	st	Z+, r19
    1cba:	de f6       	brtc	.-74     	; 0x1c72 <__ultoa_invert+0xe>
    1cbc:	cf 01       	movw	r24, r30
    1cbe:	08 95       	ret
    1cc0:	46 2f       	mov	r20, r22
    1cc2:	47 70       	andi	r20, 0x07	; 7
    1cc4:	40 5d       	subi	r20, 0xD0	; 208
    1cc6:	41 93       	st	Z+, r20
    1cc8:	b3 e0       	ldi	r27, 0x03	; 3
    1cca:	0f d0       	rcall	.+30     	; 0x1cea <__ultoa_invert+0x86>
    1ccc:	c9 f7       	brne	.-14     	; 0x1cc0 <__ultoa_invert+0x5c>
    1cce:	f6 cf       	rjmp	.-20     	; 0x1cbc <__ultoa_invert+0x58>
    1cd0:	46 2f       	mov	r20, r22
    1cd2:	4f 70       	andi	r20, 0x0F	; 15
    1cd4:	40 5d       	subi	r20, 0xD0	; 208
    1cd6:	4a 33       	cpi	r20, 0x3A	; 58
    1cd8:	18 f0       	brcs	.+6      	; 0x1ce0 <__ultoa_invert+0x7c>
    1cda:	49 5d       	subi	r20, 0xD9	; 217
    1cdc:	31 fd       	sbrc	r19, 1
    1cde:	40 52       	subi	r20, 0x20	; 32
    1ce0:	41 93       	st	Z+, r20
    1ce2:	02 d0       	rcall	.+4      	; 0x1ce8 <__ultoa_invert+0x84>
    1ce4:	a9 f7       	brne	.-22     	; 0x1cd0 <__ultoa_invert+0x6c>
    1ce6:	ea cf       	rjmp	.-44     	; 0x1cbc <__ultoa_invert+0x58>
    1ce8:	b4 e0       	ldi	r27, 0x04	; 4
    1cea:	a6 95       	lsr	r26
    1cec:	97 95       	ror	r25
    1cee:	87 95       	ror	r24
    1cf0:	77 95       	ror	r23
    1cf2:	67 95       	ror	r22
    1cf4:	ba 95       	dec	r27
    1cf6:	c9 f7       	brne	.-14     	; 0x1cea <__ultoa_invert+0x86>
    1cf8:	00 97       	sbiw	r24, 0x00	; 0
    1cfa:	61 05       	cpc	r22, r1
    1cfc:	71 05       	cpc	r23, r1
    1cfe:	08 95       	ret
    1d00:	9b 01       	movw	r18, r22
    1d02:	ac 01       	movw	r20, r24
    1d04:	0a 2e       	mov	r0, r26
    1d06:	06 94       	lsr	r0
    1d08:	57 95       	ror	r21
    1d0a:	47 95       	ror	r20
    1d0c:	37 95       	ror	r19
    1d0e:	27 95       	ror	r18
    1d10:	ba 95       	dec	r27
    1d12:	c9 f7       	brne	.-14     	; 0x1d06 <__ultoa_invert+0xa2>
    1d14:	62 0f       	add	r22, r18
    1d16:	73 1f       	adc	r23, r19
    1d18:	84 1f       	adc	r24, r20
    1d1a:	95 1f       	adc	r25, r21
    1d1c:	a0 1d       	adc	r26, r0
    1d1e:	08 95       	ret

00001d20 <_exit>:
    1d20:	f8 94       	cli

00001d22 <__stop_program>:
    1d22:	ff cf       	rjmp	.-2      	; 0x1d22 <__stop_program>
