
Node2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f6  00800200  00000f02  00000f96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f02  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000037  008002f6  008002f6  0000108c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000108c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000238  00000000  00000000  000010e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000017e8  00000000  00000000  00001320  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c24  00000000  00000000  00002b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000116b  00000000  00000000  0000372c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000548  00000000  00000000  00004898  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000604  00000000  00000000  00004de0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b86  00000000  00000000  000053e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001a8  00000000  00000000  00005f6a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	c2 c0       	rjmp	.+388    	; 0x186 <__ctors_end>
   2:	00 00       	nop
   4:	45 c2       	rjmp	.+1162   	; 0x490 <__vector_1>
   6:	00 00       	nop
   8:	dd c0       	rjmp	.+442    	; 0x1c4 <__bad_interrupt>
   a:	00 00       	nop
   c:	db c0       	rjmp	.+438    	; 0x1c4 <__bad_interrupt>
   e:	00 00       	nop
  10:	d9 c0       	rjmp	.+434    	; 0x1c4 <__bad_interrupt>
  12:	00 00       	nop
  14:	d7 c0       	rjmp	.+430    	; 0x1c4 <__bad_interrupt>
  16:	00 00       	nop
  18:	d5 c0       	rjmp	.+426    	; 0x1c4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	d3 c0       	rjmp	.+422    	; 0x1c4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	d1 c0       	rjmp	.+418    	; 0x1c4 <__bad_interrupt>
  22:	00 00       	nop
  24:	cf c0       	rjmp	.+414    	; 0x1c4 <__bad_interrupt>
  26:	00 00       	nop
  28:	cd c0       	rjmp	.+410    	; 0x1c4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	cb c0       	rjmp	.+406    	; 0x1c4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	c9 c0       	rjmp	.+402    	; 0x1c4 <__bad_interrupt>
  32:	00 00       	nop
  34:	c7 c0       	rjmp	.+398    	; 0x1c4 <__bad_interrupt>
  36:	00 00       	nop
  38:	c5 c0       	rjmp	.+394    	; 0x1c4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	c3 c0       	rjmp	.+390    	; 0x1c4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	c1 c0       	rjmp	.+386    	; 0x1c4 <__bad_interrupt>
  42:	00 00       	nop
  44:	bf c0       	rjmp	.+382    	; 0x1c4 <__bad_interrupt>
  46:	00 00       	nop
  48:	bd c0       	rjmp	.+378    	; 0x1c4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	bb c0       	rjmp	.+374    	; 0x1c4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	b9 c0       	rjmp	.+370    	; 0x1c4 <__bad_interrupt>
  52:	00 00       	nop
  54:	b7 c0       	rjmp	.+366    	; 0x1c4 <__bad_interrupt>
  56:	00 00       	nop
  58:	b5 c0       	rjmp	.+362    	; 0x1c4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	b3 c0       	rjmp	.+358    	; 0x1c4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	b1 c0       	rjmp	.+354    	; 0x1c4 <__bad_interrupt>
  62:	00 00       	nop
  64:	af c0       	rjmp	.+350    	; 0x1c4 <__bad_interrupt>
  66:	00 00       	nop
  68:	ad c0       	rjmp	.+346    	; 0x1c4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	ab c0       	rjmp	.+342    	; 0x1c4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	a9 c0       	rjmp	.+338    	; 0x1c4 <__bad_interrupt>
  72:	00 00       	nop
  74:	a7 c0       	rjmp	.+334    	; 0x1c4 <__bad_interrupt>
  76:	00 00       	nop
  78:	a5 c0       	rjmp	.+330    	; 0x1c4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	a3 c0       	rjmp	.+326    	; 0x1c4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	a1 c0       	rjmp	.+322    	; 0x1c4 <__bad_interrupt>
  82:	00 00       	nop
  84:	9f c0       	rjmp	.+318    	; 0x1c4 <__bad_interrupt>
  86:	00 00       	nop
  88:	9d c0       	rjmp	.+314    	; 0x1c4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	9b c0       	rjmp	.+310    	; 0x1c4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	99 c0       	rjmp	.+306    	; 0x1c4 <__bad_interrupt>
  92:	00 00       	nop
  94:	97 c0       	rjmp	.+302    	; 0x1c4 <__bad_interrupt>
  96:	00 00       	nop
  98:	95 c0       	rjmp	.+298    	; 0x1c4 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	ae c3       	rjmp	.+1884   	; 0x7fa <__vector_39>
  9e:	00 00       	nop
  a0:	91 c0       	rjmp	.+290    	; 0x1c4 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	8f c0       	rjmp	.+286    	; 0x1c4 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	8d c0       	rjmp	.+282    	; 0x1c4 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	8b c0       	rjmp	.+278    	; 0x1c4 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	89 c0       	rjmp	.+274    	; 0x1c4 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	87 c0       	rjmp	.+270    	; 0x1c4 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	85 c0       	rjmp	.+266    	; 0x1c4 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	83 c0       	rjmp	.+262    	; 0x1c4 <__bad_interrupt>
  be:	00 00       	nop
  c0:	81 c0       	rjmp	.+258    	; 0x1c4 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	7f c0       	rjmp	.+254    	; 0x1c4 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	7d c0       	rjmp	.+250    	; 0x1c4 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	7b c0       	rjmp	.+246    	; 0x1c4 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	79 c0       	rjmp	.+242    	; 0x1c4 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	77 c0       	rjmp	.+238    	; 0x1c4 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	75 c0       	rjmp	.+234    	; 0x1c4 <__bad_interrupt>
  da:	00 00       	nop
  dc:	73 c0       	rjmp	.+230    	; 0x1c4 <__bad_interrupt>
  de:	00 00       	nop
  e0:	71 c0       	rjmp	.+226    	; 0x1c4 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	18 04       	cpc	r1, r8
  e6:	6a 04       	cpc	r6, r10
  e8:	6a 04       	cpc	r6, r10
  ea:	6a 04       	cpc	r6, r10
  ec:	6a 04       	cpc	r6, r10
  ee:	6a 04       	cpc	r6, r10
  f0:	6a 04       	cpc	r6, r10
  f2:	6a 04       	cpc	r6, r10
  f4:	18 04       	cpc	r1, r8
  f6:	6a 04       	cpc	r6, r10
  f8:	6a 04       	cpc	r6, r10
  fa:	6a 04       	cpc	r6, r10
  fc:	6a 04       	cpc	r6, r10
  fe:	6a 04       	cpc	r6, r10
 100:	6a 04       	cpc	r6, r10
 102:	6a 04       	cpc	r6, r10
 104:	1a 04       	cpc	r1, r10
 106:	6a 04       	cpc	r6, r10
 108:	6a 04       	cpc	r6, r10
 10a:	6a 04       	cpc	r6, r10
 10c:	6a 04       	cpc	r6, r10
 10e:	6a 04       	cpc	r6, r10
 110:	6a 04       	cpc	r6, r10
 112:	6a 04       	cpc	r6, r10
 114:	6a 04       	cpc	r6, r10
 116:	6a 04       	cpc	r6, r10
 118:	6a 04       	cpc	r6, r10
 11a:	6a 04       	cpc	r6, r10
 11c:	6a 04       	cpc	r6, r10
 11e:	6a 04       	cpc	r6, r10
 120:	6a 04       	cpc	r6, r10
 122:	6a 04       	cpc	r6, r10
 124:	1a 04       	cpc	r1, r10
 126:	6a 04       	cpc	r6, r10
 128:	6a 04       	cpc	r6, r10
 12a:	6a 04       	cpc	r6, r10
 12c:	6a 04       	cpc	r6, r10
 12e:	6a 04       	cpc	r6, r10
 130:	6a 04       	cpc	r6, r10
 132:	6a 04       	cpc	r6, r10
 134:	6a 04       	cpc	r6, r10
 136:	6a 04       	cpc	r6, r10
 138:	6a 04       	cpc	r6, r10
 13a:	6a 04       	cpc	r6, r10
 13c:	6a 04       	cpc	r6, r10
 13e:	6a 04       	cpc	r6, r10
 140:	6a 04       	cpc	r6, r10
 142:	6a 04       	cpc	r6, r10
 144:	66 04       	cpc	r6, r6
 146:	6a 04       	cpc	r6, r10
 148:	6a 04       	cpc	r6, r10
 14a:	6a 04       	cpc	r6, r10
 14c:	6a 04       	cpc	r6, r10
 14e:	6a 04       	cpc	r6, r10
 150:	6a 04       	cpc	r6, r10
 152:	6a 04       	cpc	r6, r10
 154:	43 04       	cpc	r4, r3
 156:	6a 04       	cpc	r6, r10
 158:	6a 04       	cpc	r6, r10
 15a:	6a 04       	cpc	r6, r10
 15c:	6a 04       	cpc	r6, r10
 15e:	6a 04       	cpc	r6, r10
 160:	6a 04       	cpc	r6, r10
 162:	6a 04       	cpc	r6, r10
 164:	6a 04       	cpc	r6, r10
 166:	6a 04       	cpc	r6, r10
 168:	6a 04       	cpc	r6, r10
 16a:	6a 04       	cpc	r6, r10
 16c:	6a 04       	cpc	r6, r10
 16e:	6a 04       	cpc	r6, r10
 170:	6a 04       	cpc	r6, r10
 172:	6a 04       	cpc	r6, r10
 174:	37 04       	cpc	r3, r7
 176:	6a 04       	cpc	r6, r10
 178:	6a 04       	cpc	r6, r10
 17a:	6a 04       	cpc	r6, r10
 17c:	6a 04       	cpc	r6, r10
 17e:	6a 04       	cpc	r6, r10
 180:	6a 04       	cpc	r6, r10
 182:	6a 04       	cpc	r6, r10
 184:	55 04       	cpc	r5, r5

00000186 <__ctors_end>:
 186:	11 24       	eor	r1, r1
 188:	1f be       	out	0x3f, r1	; 63
 18a:	cf ef       	ldi	r28, 0xFF	; 255
 18c:	d1 e2       	ldi	r29, 0x21	; 33
 18e:	de bf       	out	0x3e, r29	; 62
 190:	cd bf       	out	0x3d, r28	; 61
 192:	00 e0       	ldi	r16, 0x00	; 0
 194:	0c bf       	out	0x3c, r16	; 60

00000196 <__do_copy_data>:
 196:	12 e0       	ldi	r17, 0x02	; 2
 198:	a0 e0       	ldi	r26, 0x00	; 0
 19a:	b2 e0       	ldi	r27, 0x02	; 2
 19c:	e2 e0       	ldi	r30, 0x02	; 2
 19e:	ff e0       	ldi	r31, 0x0F	; 15
 1a0:	00 e0       	ldi	r16, 0x00	; 0
 1a2:	0b bf       	out	0x3b, r16	; 59
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <__do_copy_data+0x14>
 1a6:	07 90       	elpm	r0, Z+
 1a8:	0d 92       	st	X+, r0
 1aa:	a6 3f       	cpi	r26, 0xF6	; 246
 1ac:	b1 07       	cpc	r27, r17
 1ae:	d9 f7       	brne	.-10     	; 0x1a6 <__do_copy_data+0x10>

000001b0 <__do_clear_bss>:
 1b0:	23 e0       	ldi	r18, 0x03	; 3
 1b2:	a6 ef       	ldi	r26, 0xF6	; 246
 1b4:	b2 e0       	ldi	r27, 0x02	; 2
 1b6:	01 c0       	rjmp	.+2      	; 0x1ba <.do_clear_bss_start>

000001b8 <.do_clear_bss_loop>:
 1b8:	1d 92       	st	X+, r1

000001ba <.do_clear_bss_start>:
 1ba:	ad 32       	cpi	r26, 0x2D	; 45
 1bc:	b2 07       	cpc	r27, r18
 1be:	e1 f7       	brne	.-8      	; 0x1b8 <.do_clear_bss_loop>
 1c0:	e8 d2       	rcall	.+1488   	; 0x792 <main>
 1c2:	9d c6       	rjmp	.+3386   	; 0xefe <_exit>

000001c4 <__bad_interrupt>:
 1c4:	1d cf       	rjmp	.-454    	; 0x0 <__vectors>

000001c6 <adc_init>:
#include <util/delay.h>
#include "adc_driver.h"


void adc_init(){
	ADCSRA	|= (1 << ADEN) | (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);
 1c6:	ea e7       	ldi	r30, 0x7A	; 122
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	80 81       	ld	r24, Z
 1cc:	87 68       	ori	r24, 0x87	; 135
 1ce:	80 83       	st	Z, r24
	ADMUX	|= (1<<REFS0);
 1d0:	ec e7       	ldi	r30, 0x7C	; 124
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	80 64       	ori	r24, 0x40	; 64
 1d8:	80 83       	st	Z, r24
	ADMUX	&= ~(1<<REFS1); 
 1da:	80 81       	ld	r24, Z
 1dc:	8f 77       	andi	r24, 0x7F	; 127
 1de:	80 83       	st	Z, r24
 1e0:	08 95       	ret

000001e2 <adc_read>:
}

uint16_t adc_read(uint8_t channel){
	ADMUX	|= ((1<<channel) & 0x03);
 1e2:	ec e7       	ldi	r30, 0x7C	; 124
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	90 81       	ld	r25, Z
 1e8:	21 e0       	ldi	r18, 0x01	; 1
 1ea:	30 e0       	ldi	r19, 0x00	; 0
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <adc_read+0x10>
 1ee:	22 0f       	add	r18, r18
 1f0:	33 1f       	adc	r19, r19
 1f2:	8a 95       	dec	r24
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <adc_read+0xc>
 1f6:	23 70       	andi	r18, 0x03	; 3
 1f8:	92 2b       	or	r25, r18
 1fa:	90 83       	st	Z, r25
	ADCSRA	|= (1 << ADSC);
 1fc:	ea e7       	ldi	r30, 0x7A	; 122
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 81       	ld	r24, Z
 202:	80 64       	ori	r24, 0x40	; 64
 204:	80 83       	st	Z, r24

	while((ADCSRA & (1<<ADSC))){ ; }
 206:	80 81       	ld	r24, Z
 208:	86 fd       	sbrc	r24, 6
 20a:	fd cf       	rjmp	.-6      	; 0x206 <adc_read+0x24>

	return ADC;
 20c:	80 91 78 00 	lds	r24, 0x0078
 210:	90 91 79 00 	lds	r25, 0x0079
}
 214:	08 95       	ret

00000216 <can_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 216:	e7 d1       	rcall	.+974    	; 0x5e6 <mcp2515_init>
 218:	8f e0       	ldi	r24, 0x0F	; 15
 21a:	d8 d1       	rcall	.+944    	; 0x5cc <mcp2515_read>
 21c:	1f 92       	push	r1
 21e:	8f 93       	push	r24
 220:	8f e0       	ldi	r24, 0x0F	; 15
 222:	92 e0       	ldi	r25, 0x02	; 2
 224:	9f 93       	push	r25
 226:	8f 93       	push	r24
 228:	98 d3       	rcall	.+1840   	; 0x95a <printf>
 22a:	4f ef       	ldi	r20, 0xFF	; 255
 22c:	60 e6       	ldi	r22, 0x60	; 96
 22e:	80 e6       	ldi	r24, 0x60	; 96
 230:	b4 d1       	rcall	.+872    	; 0x59a <mcp2515_bit_modify>
 232:	40 e0       	ldi	r20, 0x00	; 0
 234:	64 e0       	ldi	r22, 0x04	; 4
 236:	80 e6       	ldi	r24, 0x60	; 96
 238:	b0 d1       	rcall	.+864    	; 0x59a <mcp2515_bit_modify>
 23a:	4f ef       	ldi	r20, 0xFF	; 255
 23c:	61 e0       	ldi	r22, 0x01	; 1
 23e:	8b e2       	ldi	r24, 0x2B	; 43
 240:	ac d1       	rcall	.+856    	; 0x59a <mcp2515_bit_modify>
 242:	40 e0       	ldi	r20, 0x00	; 0
 244:	60 ee       	ldi	r22, 0xE0	; 224
 246:	8f e0       	ldi	r24, 0x0F	; 15
 248:	a8 d1       	rcall	.+848    	; 0x59a <mcp2515_bit_modify>
 24a:	0f 90       	pop	r0
 24c:	0f 90       	pop	r0
 24e:	0f 90       	pop	r0
 250:	0f 90       	pop	r0
 252:	08 95       	ret

00000254 <can_transmit_complete>:
 254:	80 e3       	ldi	r24, 0x30	; 48
 256:	ba d1       	rcall	.+884    	; 0x5cc <mcp2515_read>
 258:	86 95       	lsr	r24
 25a:	86 95       	lsr	r24
 25c:	86 95       	lsr	r24
 25e:	91 e0       	ldi	r25, 0x01	; 1
 260:	89 27       	eor	r24, r25
 262:	81 70       	andi	r24, 0x01	; 1
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	08 95       	ret

00000268 <can_message_send>:
 268:	1f 93       	push	r17
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
 26e:	ec 01       	movw	r28, r24
 270:	f1 df       	rcall	.-30     	; 0x254 <can_transmit_complete>
 272:	89 2b       	or	r24, r25
 274:	e9 f3       	breq	.-6      	; 0x270 <can_message_send+0x8>
 276:	68 81       	ld	r22, Y
 278:	79 81       	ldd	r23, Y+1	; 0x01
 27a:	75 95       	asr	r23
 27c:	67 95       	ror	r22
 27e:	75 95       	asr	r23
 280:	67 95       	ror	r22
 282:	75 95       	asr	r23
 284:	67 95       	ror	r22
 286:	81 e3       	ldi	r24, 0x31	; 49
 288:	6c d1       	rcall	.+728    	; 0x562 <mcp2515_write>
 28a:	68 81       	ld	r22, Y
 28c:	79 81       	ldd	r23, Y+1	; 0x01
 28e:	66 0f       	add	r22, r22
 290:	77 1f       	adc	r23, r23
 292:	62 95       	swap	r22
 294:	72 95       	swap	r23
 296:	70 7f       	andi	r23, 0xF0	; 240
 298:	76 27       	eor	r23, r22
 29a:	60 7f       	andi	r22, 0xF0	; 240
 29c:	76 27       	eor	r23, r22
 29e:	82 e3       	ldi	r24, 0x32	; 50
 2a0:	60 d1       	rcall	.+704    	; 0x562 <mcp2515_write>
 2a2:	6a 81       	ldd	r22, Y+2	; 0x02
 2a4:	6f 70       	andi	r22, 0x0F	; 15
 2a6:	85 e3       	ldi	r24, 0x35	; 53
 2a8:	5c d1       	rcall	.+696    	; 0x562 <mcp2515_write>
 2aa:	8a 81       	ldd	r24, Y+2	; 0x02
 2ac:	88 23       	and	r24, r24
 2ae:	61 f0       	breq	.+24     	; 0x2c8 <can_message_send+0x60>
 2b0:	10 e0       	ldi	r17, 0x00	; 0
 2b2:	fe 01       	movw	r30, r28
 2b4:	e1 0f       	add	r30, r17
 2b6:	f1 1d       	adc	r31, r1
 2b8:	63 81       	ldd	r22, Z+3	; 0x03
 2ba:	86 e3       	ldi	r24, 0x36	; 54
 2bc:	81 0f       	add	r24, r17
 2be:	51 d1       	rcall	.+674    	; 0x562 <mcp2515_write>
 2c0:	1f 5f       	subi	r17, 0xFF	; 255
 2c2:	8a 81       	ldd	r24, Y+2	; 0x02
 2c4:	18 17       	cp	r17, r24
 2c6:	a8 f3       	brcs	.-22     	; 0x2b2 <can_message_send+0x4a>
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	5a d1       	rcall	.+692    	; 0x580 <mcp2515_request_to_send>
 2cc:	df 91       	pop	r29
 2ce:	cf 91       	pop	r28
 2d0:	1f 91       	pop	r17
 2d2:	08 95       	ret

000002d4 <can_data_receive>:
 2d4:	9f 92       	push	r9
 2d6:	af 92       	push	r10
 2d8:	bf 92       	push	r11
 2da:	cf 92       	push	r12
 2dc:	df 92       	push	r13
 2de:	ef 92       	push	r14
 2e0:	ff 92       	push	r15
 2e2:	0f 93       	push	r16
 2e4:	1f 93       	push	r17
 2e6:	cf 93       	push	r28
 2e8:	df 93       	push	r29
 2ea:	cd b7       	in	r28, 0x3d	; 61
 2ec:	de b7       	in	r29, 0x3e	; 62
 2ee:	2b 97       	sbiw	r28, 0x0b	; 11
 2f0:	0f b6       	in	r0, 0x3f	; 63
 2f2:	f8 94       	cli
 2f4:	de bf       	out	0x3e, r29	; 62
 2f6:	0f be       	out	0x3f, r0	; 63
 2f8:	cd bf       	out	0x3d, r28	; 61
 2fa:	7c 01       	movw	r14, r24
 2fc:	8c e2       	ldi	r24, 0x2C	; 44
 2fe:	66 d1       	rcall	.+716    	; 0x5cc <mcp2515_read>
 300:	80 ff       	sbrs	r24, 0
 302:	30 c0       	rjmp	.+96     	; 0x364 <can_data_receive+0x90>
 304:	81 e6       	ldi	r24, 0x61	; 97
 306:	62 d1       	rcall	.+708    	; 0x5cc <mcp2515_read>
 308:	c8 2e       	mov	r12, r24
 30a:	82 e6       	ldi	r24, 0x62	; 98
 30c:	5f d1       	rcall	.+702    	; 0x5cc <mcp2515_read>
 30e:	82 95       	swap	r24
 310:	86 95       	lsr	r24
 312:	87 70       	andi	r24, 0x07	; 7
 314:	d1 2c       	mov	r13, r1
 316:	cc 0c       	add	r12, r12
 318:	dd 1c       	adc	r13, r13
 31a:	cc 0c       	add	r12, r12
 31c:	dd 1c       	adc	r13, r13
 31e:	cc 0c       	add	r12, r12
 320:	dd 1c       	adc	r13, r13
 322:	c8 2a       	or	r12, r24
 324:	85 e6       	ldi	r24, 0x65	; 101
 326:	52 d1       	rcall	.+676    	; 0x5cc <mcp2515_read>
 328:	8f 70       	andi	r24, 0x0F	; 15
 32a:	98 2e       	mov	r9, r24
 32c:	a1 f0       	breq	.+40     	; 0x356 <can_data_receive+0x82>
 32e:	8e 01       	movw	r16, r28
 330:	0c 5f       	subi	r16, 0xFC	; 252
 332:	1f 4f       	sbci	r17, 0xFF	; 255
 334:	0f 2e       	mov	r0, r31
 336:	f6 e6       	ldi	r31, 0x66	; 102
 338:	af 2e       	mov	r10, r31
 33a:	f0 2d       	mov	r31, r0
 33c:	a8 0e       	add	r10, r24
 33e:	0f 2e       	mov	r0, r31
 340:	f6 e6       	ldi	r31, 0x66	; 102
 342:	bf 2e       	mov	r11, r31
 344:	f0 2d       	mov	r31, r0
 346:	8b 2d       	mov	r24, r11
 348:	41 d1       	rcall	.+642    	; 0x5cc <mcp2515_read>
 34a:	f8 01       	movw	r30, r16
 34c:	81 93       	st	Z+, r24
 34e:	8f 01       	movw	r16, r30
 350:	b3 94       	inc	r11
 352:	ba 10       	cpse	r11, r10
 354:	f8 cf       	rjmp	.-16     	; 0x346 <can_data_receive+0x72>
 356:	10 92 26 03 	sts	0x0326, r1
 35a:	40 e0       	ldi	r20, 0x00	; 0
 35c:	61 e0       	ldi	r22, 0x01	; 1
 35e:	8c e2       	ldi	r24, 0x2C	; 44
 360:	1c d1       	rcall	.+568    	; 0x59a <mcp2515_bit_modify>
 362:	03 c0       	rjmp	.+6      	; 0x36a <can_data_receive+0x96>
 364:	cc 24       	eor	r12, r12
 366:	ca 94       	dec	r12
 368:	dc 2c       	mov	r13, r12
 36a:	da 82       	std	Y+2, r13	; 0x02
 36c:	c9 82       	std	Y+1, r12	; 0x01
 36e:	9b 82       	std	Y+3, r9	; 0x03
 370:	8b e0       	ldi	r24, 0x0B	; 11
 372:	fe 01       	movw	r30, r28
 374:	31 96       	adiw	r30, 0x01	; 1
 376:	d7 01       	movw	r26, r14
 378:	01 90       	ld	r0, Z+
 37a:	0d 92       	st	X+, r0
 37c:	8a 95       	dec	r24
 37e:	e1 f7       	brne	.-8      	; 0x378 <can_data_receive+0xa4>
 380:	c7 01       	movw	r24, r14
 382:	2b 96       	adiw	r28, 0x0b	; 11
 384:	0f b6       	in	r0, 0x3f	; 63
 386:	f8 94       	cli
 388:	de bf       	out	0x3e, r29	; 62
 38a:	0f be       	out	0x3f, r0	; 63
 38c:	cd bf       	out	0x3d, r28	; 61
 38e:	df 91       	pop	r29
 390:	cf 91       	pop	r28
 392:	1f 91       	pop	r17
 394:	0f 91       	pop	r16
 396:	ff 90       	pop	r15
 398:	ef 90       	pop	r14
 39a:	df 90       	pop	r13
 39c:	cf 90       	pop	r12
 39e:	bf 90       	pop	r11
 3a0:	af 90       	pop	r10
 3a2:	9f 90       	pop	r9
 3a4:	08 95       	ret

000003a6 <can_print_message>:
 3a6:	ff 92       	push	r15
 3a8:	0f 93       	push	r16
 3aa:	1f 93       	push	r17
 3ac:	cf 93       	push	r28
 3ae:	df 93       	push	r29
 3b0:	ec 01       	movw	r28, r24
 3b2:	88 81       	ld	r24, Y
 3b4:	99 81       	ldd	r25, Y+1	; 0x01
 3b6:	8f 3f       	cpi	r24, 0xFF	; 255
 3b8:	2f ef       	ldi	r18, 0xFF	; 255
 3ba:	92 07       	cpc	r25, r18
 3bc:	21 f4       	brne	.+8      	; 0x3c6 <can_print_message+0x20>
 3be:	8e e2       	ldi	r24, 0x2E	; 46
 3c0:	92 e0       	ldi	r25, 0x02	; 2
 3c2:	dc d2       	rcall	.+1464   	; 0x97c <puts>
 3c4:	3d c0       	rjmp	.+122    	; 0x440 <can_print_message+0x9a>
 3c6:	2a 81       	ldd	r18, Y+2	; 0x02
 3c8:	1f 92       	push	r1
 3ca:	2f 93       	push	r18
 3cc:	9f 93       	push	r25
 3ce:	8f 93       	push	r24
 3d0:	84 e4       	ldi	r24, 0x44	; 68
 3d2:	92 e0       	ldi	r25, 0x02	; 2
 3d4:	9f 93       	push	r25
 3d6:	8f 93       	push	r24
 3d8:	c0 d2       	rcall	.+1408   	; 0x95a <printf>
 3da:	2b 81       	ldd	r18, Y+3	; 0x03
 3dc:	82 2f       	mov	r24, r18
 3de:	99 27       	eor	r25, r25
 3e0:	87 fd       	sbrc	r24, 7
 3e2:	90 95       	com	r25
 3e4:	9f 93       	push	r25
 3e6:	2f 93       	push	r18
 3e8:	86 e6       	ldi	r24, 0x66	; 102
 3ea:	92 e0       	ldi	r25, 0x02	; 2
 3ec:	9f 93       	push	r25
 3ee:	8f 93       	push	r24
 3f0:	b4 d2       	rcall	.+1384   	; 0x95a <printf>
 3f2:	8d b7       	in	r24, 0x3d	; 61
 3f4:	9e b7       	in	r25, 0x3e	; 62
 3f6:	0a 96       	adiw	r24, 0x0a	; 10
 3f8:	0f b6       	in	r0, 0x3f	; 63
 3fa:	f8 94       	cli
 3fc:	9e bf       	out	0x3e, r25	; 62
 3fe:	0f be       	out	0x3f, r0	; 63
 400:	8d bf       	out	0x3d, r24	; 61
 402:	8a 81       	ldd	r24, Y+2	; 0x02
 404:	82 30       	cpi	r24, 0x02	; 2
 406:	c8 f0       	brcs	.+50     	; 0x43a <can_print_message+0x94>
 408:	ff 24       	eor	r15, r15
 40a:	f3 94       	inc	r15
 40c:	09 e7       	ldi	r16, 0x79	; 121
 40e:	12 e0       	ldi	r17, 0x02	; 2
 410:	fe 01       	movw	r30, r28
 412:	ef 0d       	add	r30, r15
 414:	f1 1d       	adc	r31, r1
 416:	23 81       	ldd	r18, Z+3	; 0x03
 418:	82 2f       	mov	r24, r18
 41a:	99 27       	eor	r25, r25
 41c:	87 fd       	sbrc	r24, 7
 41e:	90 95       	com	r25
 420:	9f 93       	push	r25
 422:	2f 93       	push	r18
 424:	1f 93       	push	r17
 426:	0f 93       	push	r16
 428:	98 d2       	rcall	.+1328   	; 0x95a <printf>
 42a:	f3 94       	inc	r15
 42c:	0f 90       	pop	r0
 42e:	0f 90       	pop	r0
 430:	0f 90       	pop	r0
 432:	0f 90       	pop	r0
 434:	8a 81       	ldd	r24, Y+2	; 0x02
 436:	f8 16       	cp	r15, r24
 438:	58 f3       	brcs	.-42     	; 0x410 <can_print_message+0x6a>
 43a:	8e e7       	ldi	r24, 0x7E	; 126
 43c:	92 e0       	ldi	r25, 0x02	; 2
 43e:	9e d2       	rcall	.+1340   	; 0x97c <puts>
 440:	df 91       	pop	r29
 442:	cf 91       	pop	r28
 444:	1f 91       	pop	r17
 446:	0f 91       	pop	r16
 448:	ff 90       	pop	r15
 44a:	08 95       	ret

0000044c <can_interrupt_vector>:
 44c:	cf 93       	push	r28
 44e:	df 93       	push	r29
 450:	cd b7       	in	r28, 0x3d	; 61
 452:	de b7       	in	r29, 0x3e	; 62
 454:	2b 97       	sbiw	r28, 0x0b	; 11
 456:	0f b6       	in	r0, 0x3f	; 63
 458:	f8 94       	cli
 45a:	de bf       	out	0x3e, r29	; 62
 45c:	0f be       	out	0x3f, r0	; 63
 45e:	cd bf       	out	0x3d, r28	; 61
 460:	ce 01       	movw	r24, r28
 462:	01 96       	adiw	r24, 0x01	; 1
 464:	37 df       	rcall	.-402    	; 0x2d4 <can_data_receive>
 466:	8b e0       	ldi	r24, 0x0B	; 11
 468:	fe 01       	movw	r30, r28
 46a:	31 96       	adiw	r30, 0x01	; 1
 46c:	a1 e0       	ldi	r26, 0x01	; 1
 46e:	b3 e0       	ldi	r27, 0x03	; 3
 470:	01 90       	ld	r0, Z+
 472:	0d 92       	st	X+, r0
 474:	8a 95       	dec	r24
 476:	e1 f7       	brne	.-8      	; 0x470 <can_interrupt_vector+0x24>
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	93 e0       	ldi	r25, 0x03	; 3
 47c:	94 df       	rcall	.-216    	; 0x3a6 <can_print_message>
 47e:	2b 96       	adiw	r28, 0x0b	; 11
 480:	0f b6       	in	r0, 0x3f	; 63
 482:	f8 94       	cli
 484:	de bf       	out	0x3e, r29	; 62
 486:	0f be       	out	0x3f, r0	; 63
 488:	cd bf       	out	0x3d, r28	; 61
 48a:	df 91       	pop	r29
 48c:	cf 91       	pop	r28
 48e:	08 95       	ret

00000490 <__vector_1>:
 490:	1f 92       	push	r1
 492:	0f 92       	push	r0
 494:	0f b6       	in	r0, 0x3f	; 63
 496:	0f 92       	push	r0
 498:	11 24       	eor	r1, r1
 49a:	0b b6       	in	r0, 0x3b	; 59
 49c:	0f 92       	push	r0
 49e:	2f 93       	push	r18
 4a0:	3f 93       	push	r19
 4a2:	4f 93       	push	r20
 4a4:	5f 93       	push	r21
 4a6:	6f 93       	push	r22
 4a8:	7f 93       	push	r23
 4aa:	8f 93       	push	r24
 4ac:	9f 93       	push	r25
 4ae:	af 93       	push	r26
 4b0:	bf 93       	push	r27
 4b2:	ef 93       	push	r30
 4b4:	ff 93       	push	r31
 4b6:	ca df       	rcall	.-108    	; 0x44c <can_interrupt_vector>
 4b8:	ff 91       	pop	r31
 4ba:	ef 91       	pop	r30
 4bc:	bf 91       	pop	r27
 4be:	af 91       	pop	r26
 4c0:	9f 91       	pop	r25
 4c2:	8f 91       	pop	r24
 4c4:	7f 91       	pop	r23
 4c6:	6f 91       	pop	r22
 4c8:	5f 91       	pop	r21
 4ca:	4f 91       	pop	r20
 4cc:	3f 91       	pop	r19
 4ce:	2f 91       	pop	r18
 4d0:	0f 90       	pop	r0
 4d2:	0b be       	out	0x3b, r0	; 59
 4d4:	0f 90       	pop	r0
 4d6:	0f be       	out	0x3f, r0	; 63
 4d8:	0f 90       	pop	r0
 4da:	1f 90       	pop	r1
 4dc:	18 95       	reti

000004de <can_handle_message>:
	}
}



void can_handle_message(){
 4de:	cf 93       	push	r28
 4e0:	df 93       	push	r29
 4e2:	cd b7       	in	r28, 0x3d	; 61
 4e4:	de b7       	in	r29, 0x3e	; 62
 4e6:	2b 97       	sbiw	r28, 0x0b	; 11
 4e8:	0f b6       	in	r0, 0x3f	; 63
 4ea:	f8 94       	cli
 4ec:	de bf       	out	0x3e, r29	; 62
 4ee:	0f be       	out	0x3f, r0	; 63
 4f0:	cd bf       	out	0x3d, r28	; 61
	static can_message_t message;
	message = can_data_receive();
 4f2:	ce 01       	movw	r24, r28
 4f4:	01 96       	adiw	r24, 0x01	; 1
 4f6:	ee de       	rcall	.-548    	; 0x2d4 <can_data_receive>
 4f8:	8b e0       	ldi	r24, 0x0B	; 11
 4fa:	fe 01       	movw	r30, r28
 4fc:	31 96       	adiw	r30, 0x01	; 1
 4fe:	a6 ef       	ldi	r26, 0xF6	; 246
 500:	b2 e0       	ldi	r27, 0x02	; 2
 502:	01 90       	ld	r0, Z+
 504:	0d 92       	st	X+, r0
 506:	8a 95       	dec	r24
 508:	e1 f7       	brne	.-8      	; 0x502 <can_handle_message+0x24>
	
	switch(message.id){
 50a:	80 91 f6 02 	lds	r24, 0x02F6
 50e:	90 91 f7 02 	lds	r25, 0x02F7
 512:	81 30       	cpi	r24, 0x01	; 1
 514:	91 05       	cpc	r25, r1
 516:	19 f0       	breq	.+6      	; 0x51e <can_handle_message+0x40>
 518:	03 97       	sbiw	r24, 0x03	; 3
 51a:	49 f0       	breq	.+18     	; 0x52e <can_handle_message+0x50>
 51c:	19 c0       	rjmp	.+50     	; 0x550 <can_handle_message+0x72>
		case JOY_CAN_ID:
			pwm_set_servo(-message.data[0]);
 51e:	80 91 f9 02 	lds	r24, 0x02F9
 522:	99 27       	eor	r25, r25
 524:	81 95       	neg	r24
 526:	0c f4       	brge	.+2      	; 0x52a <can_handle_message+0x4c>
 528:	90 95       	com	r25
 52a:	99 d0       	rcall	.+306    	; 0x65e <pwm_set_servo>
			return;
 52c:	11 c0       	rjmp	.+34     	; 0x550 <can_handle_message+0x72>
		case BUTTON_CAN_ID:
			PORTH &= ~(1<<PH3);
 52e:	e2 e0       	ldi	r30, 0x02	; 2
 530:	f1 e0       	ldi	r31, 0x01	; 1
 532:	80 81       	ld	r24, Z
 534:	87 7f       	andi	r24, 0xF7	; 247
 536:	80 83       	st	Z, r24
 538:	2f ef       	ldi	r18, 0xFF	; 255
 53a:	80 e7       	ldi	r24, 0x70	; 112
 53c:	92 e0       	ldi	r25, 0x02	; 2
 53e:	21 50       	subi	r18, 0x01	; 1
 540:	80 40       	sbci	r24, 0x00	; 0
 542:	90 40       	sbci	r25, 0x00	; 0
 544:	e1 f7       	brne	.-8      	; 0x53e <can_handle_message+0x60>
 546:	00 c0       	rjmp	.+0      	; 0x548 <can_handle_message+0x6a>
 548:	00 00       	nop
			_delay_ms(50);
			PORTH |= (1<<PH3);
 54a:	80 81       	ld	r24, Z
 54c:	88 60       	ori	r24, 0x08	; 8
 54e:	80 83       	st	Z, r24

		
	//can_print_message(message);
	
	pwm_set_servo(-message.data[0]);
}
 550:	2b 96       	adiw	r28, 0x0b	; 11
 552:	0f b6       	in	r0, 0x3f	; 63
 554:	f8 94       	cli
 556:	de bf       	out	0x3e, r29	; 62
 558:	0f be       	out	0x3f, r0	; 63
 55a:	cd bf       	out	0x3d, r28	; 61
 55c:	df 91       	pop	r29
 55e:	cf 91       	pop	r28
 560:	08 95       	ret

00000562 <mcp2515_write>:
	} else {
		;//printf("MCP2515 is in config mode after reset\n");
	}
}

void mcp2515_write(uint8_t address, uint8_t data){
 562:	cf 93       	push	r28
 564:	df 93       	push	r29
 566:	d8 2f       	mov	r29, r24
 568:	c6 2f       	mov	r28, r22
	spi_select();
 56a:	a8 d0       	rcall	.+336    	; 0x6bc <spi_select>

	spi_send(MCP_WRITE);
 56c:	82 e0       	ldi	r24, 0x02	; 2
 56e:	9a d0       	rcall	.+308    	; 0x6a4 <spi_send>
	spi_send(address);
 570:	8d 2f       	mov	r24, r29
 572:	98 d0       	rcall	.+304    	; 0x6a4 <spi_send>
	spi_send(data);
 574:	8c 2f       	mov	r24, r28
 576:	96 d0       	rcall	.+300    	; 0x6a4 <spi_send>

	spi_deselect();
 578:	a3 d0       	rcall	.+326    	; 0x6c0 <spi_deselect>
}
 57a:	df 91       	pop	r29
 57c:	cf 91       	pop	r28
 57e:	08 95       	ret

00000580 <mcp2515_request_to_send>:

void mcp2515_request_to_send(uint8_t command){
 580:	cf 93       	push	r28
	//Check last 3 bits of given command
	if (command <= 7) {
 582:	88 30       	cpi	r24, 0x08	; 8
 584:	18 f4       	brcc	.+6      	; 0x58c <mcp2515_request_to_send+0xc>
		command = MCP_RTS | command;
 586:	c8 2f       	mov	r28, r24
 588:	c0 68       	ori	r28, 0x80	; 128
 58a:	01 c0       	rjmp	.+2      	; 0x58e <mcp2515_request_to_send+0xe>
	} else {
		command = MCP_RTS;
 58c:	c0 e8       	ldi	r28, 0x80	; 128
	}

	//Select, send RTS command, then deselect
	spi_select();
 58e:	96 d0       	rcall	.+300    	; 0x6bc <spi_select>
	spi_send(command);
 590:	8c 2f       	mov	r24, r28
 592:	88 d0       	rcall	.+272    	; 0x6a4 <spi_send>
	spi_deselect();
 594:	95 d0       	rcall	.+298    	; 0x6c0 <spi_deselect>
}
 596:	cf 91       	pop	r28
 598:	08 95       	ret

0000059a <mcp2515_bit_modify>:

void mcp2515_bit_modify(uint8_t address, uint8_t mask, uint8_t data){
 59a:	1f 93       	push	r17
 59c:	cf 93       	push	r28
 59e:	df 93       	push	r29
 5a0:	18 2f       	mov	r17, r24
 5a2:	d6 2f       	mov	r29, r22
 5a4:	c4 2f       	mov	r28, r20
	spi_select();
 5a6:	8a d0       	rcall	.+276    	; 0x6bc <spi_select>

	spi_send(MCP_BITMOD);
 5a8:	85 e0       	ldi	r24, 0x05	; 5
 5aa:	7c d0       	rcall	.+248    	; 0x6a4 <spi_send>
	spi_send(address);
 5ac:	81 2f       	mov	r24, r17
 5ae:	7a d0       	rcall	.+244    	; 0x6a4 <spi_send>
	spi_send(mask);
 5b0:	8d 2f       	mov	r24, r29
 5b2:	78 d0       	rcall	.+240    	; 0x6a4 <spi_send>
	spi_send(data);
 5b4:	8c 2f       	mov	r24, r28
 5b6:	76 d0       	rcall	.+236    	; 0x6a4 <spi_send>

	spi_deselect();
 5b8:	83 d0       	rcall	.+262    	; 0x6c0 <spi_deselect>
}
 5ba:	df 91       	pop	r29
 5bc:	cf 91       	pop	r28
 5be:	1f 91       	pop	r17
 5c0:	08 95       	ret

000005c2 <mcp2515_reset>:

void mcp2515_reset(){
	spi_select();
 5c2:	7c d0       	rcall	.+248    	; 0x6bc <spi_select>
	spi_send(MCP_RESET);	
 5c4:	80 ec       	ldi	r24, 0xC0	; 192
 5c6:	6e d0       	rcall	.+220    	; 0x6a4 <spi_send>
	spi_deselect();
 5c8:	7b c0       	rjmp	.+246    	; 0x6c0 <spi_deselect>
 5ca:	08 95       	ret

000005cc <mcp2515_read>:
}


uint8_t mcp2515_read(uint8_t address){
 5cc:	cf 93       	push	r28
 5ce:	c8 2f       	mov	r28, r24
	uint8_t result;

	spi_select();
 5d0:	75 d0       	rcall	.+234    	; 0x6bc <spi_select>
	
	//Send command and address, then read result
	spi_send(MCP_READ);
 5d2:	83 e0       	ldi	r24, 0x03	; 3
 5d4:	67 d0       	rcall	.+206    	; 0x6a4 <spi_send>
	spi_send(address);
 5d6:	8c 2f       	mov	r24, r28
 5d8:	65 d0       	rcall	.+202    	; 0x6a4 <spi_send>

	result = spi_read();
 5da:	69 d0       	rcall	.+210    	; 0x6ae <spi_read>
 5dc:	c8 2f       	mov	r28, r24
	spi_deselect();
 5de:	70 d0       	rcall	.+224    	; 0x6c0 <spi_deselect>

	return result;	
}
 5e0:	8c 2f       	mov	r24, r28
 5e2:	cf 91       	pop	r28
 5e4:	08 95       	ret

000005e6 <mcp2515_init>:
#include <util/delay.h>
#include "uart_driver.h"
#include "spi_driver.h"
#include "mcp2515_driver.h"

void mcp2515_init() {
 5e6:	cf 93       	push	r28
 5e8:	df 93       	push	r29
 5ea:	1f 92       	push	r1
 5ec:	cd b7       	in	r28, 0x3d	; 61
 5ee:	de b7       	in	r29, 0x3e	; 62
	//NO NEED, ALREADY ENABLED
	//Enable interrupt when message is recieved (RX0IE = 1)
	//mcp2515_bit_modify(MCP_CANINTE, 0x01, 0xff);

	//Start SPI driver
	spi_init();
 5f0:	51 d0       	rcall	.+162    	; 0x694 <spi_init>

	mcp2515_reset();
 5f2:	e7 df       	rcall	.-50     	; 0x5c2 <mcp2515_reset>
	
	//Testing for correct initialization
	value_check = mcp2515_read(MCP_CANSTAT);
 5f4:	8e e0       	ldi	r24, 0x0E	; 14
 5f6:	ea df       	rcall	.-44     	; 0x5cc <mcp2515_read>
 5f8:	89 83       	std	Y+1, r24	; 0x01
	
	if ((value_check & MODE_MASK) != MODE_CONFIG) {
 5fa:	89 81       	ldd	r24, Y+1	; 0x01
 5fc:	80 7e       	andi	r24, 0xE0	; 224
 5fe:	80 38       	cpi	r24, 0x80	; 128
 600:	19 f0       	breq	.+6      	; 0x608 <mcp2515_init+0x22>
		printf("MCP2515 is not in config mode after reset\n");
 602:	81 e9       	ldi	r24, 0x91	; 145
 604:	92 e0       	ldi	r25, 0x02	; 2
 606:	ba d1       	rcall	.+884    	; 0x97c <puts>
	} else {
		;//printf("MCP2515 is in config mode after reset\n");
	}
}
 608:	0f 90       	pop	r0
 60a:	df 91       	pop	r29
 60c:	cf 91       	pop	r28
 60e:	08 95       	ret

00000610 <pwm_init>:
	ICR3 = DUTY_CYCLE_STEPS;
	pwm_set_value(MID_SERVO);
}

void pwm_set_value(uint16_t val) {
	OCR3A = val;
 610:	6b 9a       	sbi	0x0d, 3	; 13
 612:	a1 e9       	ldi	r26, 0x91	; 145
 614:	b0 e0       	ldi	r27, 0x00	; 0
 616:	8c 91       	ld	r24, X
 618:	82 60       	ori	r24, 0x02	; 2
 61a:	8c 93       	st	X, r24
 61c:	8c 91       	ld	r24, X
 61e:	8a 7f       	andi	r24, 0xFA	; 250
 620:	8c 93       	st	X, r24
 622:	e0 e9       	ldi	r30, 0x90	; 144
 624:	f0 e0       	ldi	r31, 0x00	; 0
 626:	80 81       	ld	r24, Z
 628:	82 60       	ori	r24, 0x02	; 2
 62a:	80 83       	st	Z, r24
 62c:	80 81       	ld	r24, Z
 62e:	8e 7f       	andi	r24, 0xFE	; 254
 630:	80 83       	st	Z, r24
 632:	8c 91       	ld	r24, X
 634:	88 61       	ori	r24, 0x18	; 24
 636:	8c 93       	st	X, r24
 638:	80 81       	ld	r24, Z
 63a:	80 68       	ori	r24, 0x80	; 128
 63c:	80 83       	st	Z, r24
 63e:	80 81       	ld	r24, Z
 640:	8f 7b       	andi	r24, 0xBF	; 191
 642:	80 83       	st	Z, r24
 644:	80 e4       	ldi	r24, 0x40	; 64
 646:	9c e9       	ldi	r25, 0x9C	; 156
 648:	90 93 97 00 	sts	0x0097, r25
 64c:	80 93 96 00 	sts	0x0096, r24
 650:	88 eb       	ldi	r24, 0xB8	; 184
 652:	9b e0       	ldi	r25, 0x0B	; 11
 654:	90 93 99 00 	sts	0x0099, r25
 658:	80 93 98 00 	sts	0x0098, r24
 65c:	08 95       	ret

0000065e <pwm_set_servo>:
}

void pwm_set_servo(int16_t val){
	val += 128;
 65e:	9c 01       	movw	r18, r24
 660:	20 58       	subi	r18, 0x80	; 128
 662:	3f 4f       	sbci	r19, 0xFF	; 255
	//printf("%d\n", val);
	val = (val*(VAL_SCALE/UNDERFLOW_FIX)) / 255 * UNDERFLOW_FIX + MIN_SERVO;
 664:	4b e4       	ldi	r20, 0x4B	; 75
 666:	42 9f       	mul	r20, r18
 668:	c0 01       	movw	r24, r0
 66a:	43 9f       	mul	r20, r19
 66c:	90 0d       	add	r25, r0
 66e:	11 24       	eor	r1, r1
 670:	6f ef       	ldi	r22, 0xFF	; 255
 672:	70 e0       	ldi	r23, 0x00	; 0
 674:	45 d1       	rcall	.+650    	; 0x900 <__divmodhi4>
 676:	66 0f       	add	r22, r22
 678:	77 1f       	adc	r23, r23
 67a:	62 95       	swap	r22
 67c:	72 95       	swap	r23
 67e:	70 7f       	andi	r23, 0xF0	; 240
 680:	76 27       	eor	r23, r22
 682:	60 7f       	andi	r22, 0xF0	; 240
 684:	76 27       	eor	r23, r22
 686:	68 5f       	subi	r22, 0xF8	; 248
 688:	78 4f       	sbci	r23, 0xF8	; 248
	ICR3 = DUTY_CYCLE_STEPS;
	pwm_set_value(MID_SERVO);
}

void pwm_set_value(uint16_t val) {
	OCR3A = val;
 68a:	70 93 99 00 	sts	0x0099, r23
 68e:	60 93 98 00 	sts	0x0098, r22
 692:	08 95       	ret

00000694 <spi_init>:
#define SPI_MISO PB3
#define SPI_SCK PB1 

void spi_init(){
	//Set MOSI, SCK and SS as output pins 	
	DDRB |= (1 << SPI_MOSI) | (1 << SPI_SCK) | (1 << SPI_SS);
 694:	84 b1       	in	r24, 0x04	; 4
 696:	87 60       	ori	r24, 0x07	; 7
 698:	84 b9       	out	0x04, r24	; 4
	
	//Set MISO as input pin
	DDRB &= ~(1 << SPI_MISO);
 69a:	23 98       	cbi	0x04, 3	; 4
	
	//Enable SPI in master mode and set clock rate fosc/16
	SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0);
 69c:	8c b5       	in	r24, 0x2c	; 44
 69e:	81 65       	ori	r24, 0x51	; 81
 6a0:	8c bd       	out	0x2c, r24	; 44
 6a2:	08 95       	ret

000006a4 <spi_send>:
	return SPDR;
}

void spi_send(char data){
	//Start transmission
	SPDR = data;
 6a4:	8e bd       	out	0x2e, r24	; 46
	
	//Wait for transmission, checks if register is empty 
	while(!(SPSR & (1 << SPIF)));
 6a6:	0d b4       	in	r0, 0x2d	; 45
 6a8:	07 fe       	sbrs	r0, 7
 6aa:	fd cf       	rjmp	.-6      	; 0x6a6 <spi_send+0x2>
}
 6ac:	08 95       	ret

000006ae <spi_read>:
}


uint8_t spi_read(){
	//Dummy send in order to read from slave
	spi_send(0xaa);
 6ae:	8a ea       	ldi	r24, 0xAA	; 170
 6b0:	f9 df       	rcall	.-14     	; 0x6a4 <spi_send>
	
	while(!(SPSR & (1 << SPIF)));
 6b2:	0d b4       	in	r0, 0x2d	; 45
 6b4:	07 fe       	sbrs	r0, 7
 6b6:	fd cf       	rjmp	.-6      	; 0x6b2 <spi_read+0x4>

	return SPDR;
 6b8:	8e b5       	in	r24, 0x2e	; 46
}
 6ba:	08 95       	ret

000006bc <spi_select>:
	while(!(SPSR & (1 << SPIF)));
}

void spi_select(){
	//Set !SS to 0 for selection of slave
	PORTB &= ~(1 << SPI_SS);
 6bc:	28 98       	cbi	0x05, 0	; 5
 6be:	08 95       	ret

000006c0 <spi_deselect>:
}

void spi_deselect(){
	//Set !SS to 1 for deselection of slave
	PORTB |= (1 << SPI_SS);
 6c0:	28 9a       	sbi	0x05, 0	; 5
 6c2:	08 95       	ret

000006c4 <uart_sendChar>:

}

void uart_sendChar(unsigned char data){
	//Wait for empty transmitter buffer
	while(!(UCSR0A & (1<<UDRE0)));
 6c4:	e0 ec       	ldi	r30, 0xC0	; 192
 6c6:	f0 e0       	ldi	r31, 0x00	; 0
 6c8:	90 81       	ld	r25, Z
 6ca:	95 ff       	sbrs	r25, 5
 6cc:	fd cf       	rjmp	.-6      	; 0x6c8 <uart_sendChar+0x4>
		
	//Put data into buffer, then send the data
	UDR0 = data;
 6ce:	80 93 c6 00 	sts	0x00C6, r24
 6d2:	08 95       	ret

000006d4 <uart_getChar>:
}


unsigned int uart_getChar(){
	//Wait for the data to be received 
	while(!(UCSR0A & (1<<RXC0))){}
 6d4:	e0 ec       	ldi	r30, 0xC0	; 192
 6d6:	f0 e0       	ldi	r31, 0x00	; 0
 6d8:	80 81       	ld	r24, Z
 6da:	88 23       	and	r24, r24
 6dc:	ec f7       	brge	.-6      	; 0x6d8 <uart_getChar+0x4>
	
	//Get status and the 9th bit, then data from buffer
	return UDR0;
 6de:	80 91 c6 00 	lds	r24, 0x00C6
}
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	08 95       	ret

000006e6 <uart_init>:

static FILE uart_io = FDEV_SETUP_STREAM(uart_sendChar, uart_getChar, _FDEV_SETUP_RW);

void uart_init(unsigned int ubrr){
	//Set baud rate
	UBRR0L = (unsigned int) ubrr;
 6e6:	80 93 c4 00 	sts	0x00C4, r24
	
	//Enable receiver and transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 6ea:	88 e1       	ldi	r24, 0x18	; 24
 6ec:	80 93 c1 00 	sts	0x00C1, r24
	
	stdout = &uart_io;
 6f0:	80 e0       	ldi	r24, 0x00	; 0
 6f2:	92 e0       	ldi	r25, 0x02	; 2
 6f4:	90 93 2a 03 	sts	0x032A, r25
 6f8:	80 93 29 03 	sts	0x0329, r24
	stdin = &uart_io;
 6fc:	90 93 28 03 	sts	0x0328, r25
 700:	80 93 27 03 	sts	0x0327, r24
 704:	08 95       	ret

00000706 <ir_obstructed>:
	for (uint8_t i = 0; i < FILTER_BUFFER_SIZE; i++ ){
		ir_obstructed();
	}
}

uint8_t ir_obstructed(){
 706:	cf 93       	push	r28
 708:	df 93       	push	r29
	static uint16_t ringbuffer_filter[FILTER_BUFFER_SIZE];
	static uint8_t ringbuffer_index;

	//return adc_read(IR_CHANNEL);

	if (ringbuffer_index >= FILTER_BUFFER_SIZE - 1){
 70a:	80 91 1e 03 	lds	r24, 0x031E
 70e:	87 30       	cpi	r24, 0x07	; 7
 710:	18 f0       	brcs	.+6      	; 0x718 <ir_obstructed+0x12>
		ringbuffer_index = 0;
 712:	10 92 1e 03 	sts	0x031E, r1
 716:	03 c0       	rjmp	.+6      	; 0x71e <ir_obstructed+0x18>
	} else { ringbuffer_index++; }
 718:	8f 5f       	subi	r24, 0xFF	; 255
 71a:	80 93 1e 03 	sts	0x031E, r24
			
	ringbuffer_filter[ringbuffer_index] = adc_read(IR_CHANNEL) / FILTER_BUFFER_SIZE;
 71e:	c0 91 1e 03 	lds	r28, 0x031E
 722:	d0 e0       	ldi	r29, 0x00	; 0
 724:	80 e0       	ldi	r24, 0x00	; 0
 726:	5d dd       	rcall	.-1350   	; 0x1e2 <adc_read>
 728:	cc 0f       	add	r28, r28
 72a:	dd 1f       	adc	r29, r29
 72c:	c2 5f       	subi	r28, 0xF2	; 242
 72e:	dc 4f       	sbci	r29, 0xFC	; 252
 730:	96 95       	lsr	r25
 732:	87 95       	ror	r24
 734:	96 95       	lsr	r25
 736:	87 95       	ror	r24
 738:	96 95       	lsr	r25
 73a:	87 95       	ror	r24
 73c:	99 83       	std	Y+1, r25	; 0x01
 73e:	88 83       	st	Y, r24
 740:	ee e0       	ldi	r30, 0x0E	; 14
 742:	f3 e0       	ldi	r31, 0x03	; 3
 744:	4e e1       	ldi	r20, 0x1E	; 30
 746:	53 e0       	ldi	r21, 0x03	; 3



	uint16_t avg = 0;
 748:	20 e0       	ldi	r18, 0x00	; 0
 74a:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t i = 0; i < FILTER_BUFFER_SIZE; i++) {
		avg += ringbuffer_filter[i] ;
 74c:	81 91       	ld	r24, Z+
 74e:	91 91       	ld	r25, Z+
 750:	28 0f       	add	r18, r24
 752:	39 1f       	adc	r19, r25
	ringbuffer_filter[ringbuffer_index] = adc_read(IR_CHANNEL) / FILTER_BUFFER_SIZE;



	uint16_t avg = 0;
	for (uint8_t i = 0; i < FILTER_BUFFER_SIZE; i++) {
 754:	e4 17       	cp	r30, r20
 756:	f5 07       	cpc	r31, r21
 758:	c9 f7       	brne	.-14     	; 0x74c <ir_obstructed+0x46>
	}
	printf(" ]\n");*/
	/*printf("avg:  %d\n",avg);
	printf("read: %d\n\n",adc_read(0));*/
	
	if (avg < FILTER_THRESHOLD) {
 75a:	81 e0       	ldi	r24, 0x01	; 1
 75c:	24 3b       	cpi	r18, 0xB4	; 180
 75e:	31 05       	cpc	r19, r1
 760:	08 f0       	brcs	.+2      	; 0x764 <ir_obstructed+0x5e>
 762:	80 e0       	ldi	r24, 0x00	; 0
		return 1;
	}

	return 0;
}
 764:	df 91       	pop	r29
 766:	cf 91       	pop	r28
 768:	08 95       	ret

0000076a <ir_filter_init>:
#include "Drivers/uart_driver.h"

#define FILTER_THRESHOLD 180
#define FILTER_BUFFER_SIZE 8

void ir_filter_init() {
 76a:	cf 93       	push	r28
 76c:	c8 e0       	ldi	r28, 0x08	; 8
	for (uint8_t i = 0; i < FILTER_BUFFER_SIZE; i++ ){
		ir_obstructed();
 76e:	cb df       	rcall	.-106    	; 0x706 <ir_obstructed>
 770:	c1 50       	subi	r28, 0x01	; 1

#define FILTER_THRESHOLD 180
#define FILTER_BUFFER_SIZE 8

void ir_filter_init() {
	for (uint8_t i = 0; i < FILTER_BUFFER_SIZE; i++ ){
 772:	e9 f7       	brne	.-6      	; 0x76e <ir_filter_init+0x4>
		ir_obstructed();
	}
}
 774:	cf 91       	pop	r28
 776:	08 95       	ret

00000778 <ir_edge_detected>:
}

uint8_t ir_edge_detected() {
	static uint8_t last;
	static uint8_t current;
	current = ir_obstructed();
 778:	c6 df       	rcall	.-116    	; 0x706 <ir_obstructed>
 77a:	80 93 0d 03 	sts	0x030D, r24
	if (last != current){
 77e:	90 91 0c 03 	lds	r25, 0x030C
 782:	89 17       	cp	r24, r25
 784:	21 f0       	breq	.+8      	; 0x78e <ir_edge_detected+0x16>
		last = current;
 786:	80 93 0c 03 	sts	0x030C, r24
		return 1;
 78a:	81 e0       	ldi	r24, 0x01	; 1
 78c:	08 95       	ret
	}
	return 0;
 78e:	80 e0       	ldi	r24, 0x00	; 0
 790:	08 95       	ret

00000792 <main>:
#include "Drivers/pwm_driver.h"
#include "Drivers/adc_driver.h"
#include "ir.h"
#include "test_node_2.h"

int main(void){
 792:	cf 93       	push	r28
 794:	df 93       	push	r29
 796:	cd b7       	in	r28, 0x3d	; 61
 798:	de b7       	in	r29, 0x3e	; 62
 79a:	2b 97       	sbiw	r28, 0x0b	; 11
 79c:	0f b6       	in	r0, 0x3f	; 63
 79e:	f8 94       	cli
 7a0:	de bf       	out	0x3e, r29	; 62
 7a2:	0f be       	out	0x3f, r0	; 63
 7a4:	cd bf       	out	0x3d, r28	; 61
	uart_init(MYUBRR);
 7a6:	87 e6       	ldi	r24, 0x67	; 103
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	9d df       	rcall	.-198    	; 0x6e6 <uart_init>
	can_init();
 7ac:	34 dd       	rcall	.-1432   	; 0x216 <can_init>
	pwm_init();
 7ae:	30 df       	rcall	.-416    	; 0x610 <pwm_init>
	printf("ir\n");
 7b0:	82 ef       	ldi	r24, 0xF2	; 242
 7b2:	92 e0       	ldi	r25, 0x02	; 2
 7b4:	e3 d0       	rcall	.+454    	; 0x97c <puts>
	adc_init();
 7b6:	07 dd       	rcall	.-1522   	; 0x1c6 <adc_init>
	ir_filter_init();
 7b8:	d8 df       	rcall	.-80     	; 0x76a <ir_filter_init>
	//pwm_test();
	//can_test();
	
	DDRH |= (1<<PH3);
 7ba:	e1 e0       	ldi	r30, 0x01	; 1
 7bc:	f1 e0       	ldi	r31, 0x01	; 1
 7be:	80 81       	ld	r24, Z
 7c0:	88 60       	ori	r24, 0x08	; 8
 7c2:	80 83       	st	Z, r24
	PORTH |= (1<<PH3);
 7c4:	e2 e0       	ldi	r30, 0x02	; 2
 7c6:	f1 e0       	ldi	r31, 0x01	; 1
 7c8:	80 81       	ld	r24, Z
 7ca:	88 60       	ori	r24, 0x08	; 8
 7cc:	80 83       	st	Z, r24

	can_message_t ir_message;
	ir_message.length = 1;
 7ce:	81 e0       	ldi	r24, 0x01	; 1
 7d0:	8b 83       	std	Y+3, r24	; 0x03
	ir_message.id = IR_CAN_ID;
 7d2:	82 e0       	ldi	r24, 0x02	; 2
 7d4:	90 e0       	ldi	r25, 0x00	; 0
 7d6:	9a 83       	std	Y+2, r25	; 0x02
 7d8:	89 83       	std	Y+1, r24	; 0x01
	while(1){
		can_handle_message();
 7da:	81 de       	rcall	.-766    	; 0x4de <can_handle_message>
		//pwm_set_value(150);
		//printf("%d\n", TCNT3);
		//_delay_ms(8);
		if (ir_edge_detected()){
 7dc:	cd df       	rcall	.-102    	; 0x778 <ir_edge_detected>
 7de:	88 23       	and	r24, r24
 7e0:	29 f0       	breq	.+10     	; 0x7ec <main+0x5a>
			ir_message.data[0] = ir_obstructed();
 7e2:	91 df       	rcall	.-222    	; 0x706 <ir_obstructed>
 7e4:	8c 83       	std	Y+4, r24	; 0x04
			can_message_send(&ir_message);
 7e6:	ce 01       	movw	r24, r28
 7e8:	01 96       	adiw	r24, 0x01	; 1
 7ea:	3e dd       	rcall	.-1412   	; 0x268 <can_message_send>
 7ec:	8f e7       	ldi	r24, 0x7F	; 127
 7ee:	9b eb       	ldi	r25, 0xBB	; 187
 7f0:	01 97       	sbiw	r24, 0x01	; 1
 7f2:	f1 f7       	brne	.-4      	; 0x7f0 <main+0x5e>
 7f4:	00 c0       	rjmp	.+0      	; 0x7f6 <main+0x64>
 7f6:	00 00       	nop
 7f8:	f0 cf       	rjmp	.-32     	; 0x7da <main+0x48>

000007fa <__vector_39>:
This function is the Interrupt Service Routine (ISR), and called when the TWI interrupt is triggered;
that is whenever a TWI event has occurred. This function should not be called directly from the main
application.
****************************************************************************/
ISR(TWI_vect)
{
 7fa:	1f 92       	push	r1
 7fc:	0f 92       	push	r0
 7fe:	0f b6       	in	r0, 0x3f	; 63
 800:	0f 92       	push	r0
 802:	11 24       	eor	r1, r1
 804:	0b b6       	in	r0, 0x3b	; 59
 806:	0f 92       	push	r0
 808:	2f 93       	push	r18
 80a:	3f 93       	push	r19
 80c:	8f 93       	push	r24
 80e:	9f 93       	push	r25
 810:	af 93       	push	r26
 812:	bf 93       	push	r27
 814:	ef 93       	push	r30
 816:	ff 93       	push	r31
	static unsigned char TWI_bufPtr;
	
	switch (TWSR)
 818:	80 91 b9 00 	lds	r24, 0x00B9
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	fc 01       	movw	r30, r24
 820:	38 97       	sbiw	r30, 0x08	; 8
 822:	e1 35       	cpi	r30, 0x51	; 81
 824:	f1 05       	cpc	r31, r1
 826:	08 f0       	brcs	.+2      	; 0x82a <__vector_39+0x30>
 828:	55 c0       	rjmp	.+170    	; 0x8d4 <__vector_39+0xda>
 82a:	ee 58       	subi	r30, 0x8E	; 142
 82c:	ff 4f       	sbci	r31, 0xFF	; 255
 82e:	7b c0       	rjmp	.+246    	; 0x926 <__tablejump2__>
	{
		case TWI_START:             // START has been transmitted
		case TWI_REP_START:         // Repeated START has been transmitted
		TWI_bufPtr = 0;                                     // Set buffer pointer to the TWI Address location
 830:	10 92 1f 03 	sts	0x031F, r1
		case TWI_MTX_ADR_ACK:       // SLA+W has been tramsmitted and ACK received
		case TWI_MTX_DATA_ACK:      // Data byte has been tramsmitted and ACK received
		if (TWI_bufPtr < TWI_msgSize)
 834:	e0 91 1f 03 	lds	r30, 0x031F
 838:	80 91 21 03 	lds	r24, 0x0321
 83c:	e8 17       	cp	r30, r24
 83e:	70 f4       	brcc	.+28     	; 0x85c <__vector_39+0x62>
		{
			TWDR = TWI_buf[TWI_bufPtr++];
 840:	81 e0       	ldi	r24, 0x01	; 1
 842:	8e 0f       	add	r24, r30
 844:	80 93 1f 03 	sts	0x031F, r24
 848:	f0 e0       	ldi	r31, 0x00	; 0
 84a:	ee 5d       	subi	r30, 0xDE	; 222
 84c:	fc 4f       	sbci	r31, 0xFC	; 252
 84e:	80 81       	ld	r24, Z
 850:	80 93 bb 00 	sts	0x00BB, r24
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 854:	85 e8       	ldi	r24, 0x85	; 133
 856:	80 93 bc 00 	sts	0x00BC, r24
 85a:	43 c0       	rjmp	.+134    	; 0x8e2 <__vector_39+0xe8>
			(1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag to send byte
			(0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           //
			(0<<TWWC);                                 //
		}else                    // Send STOP after last byte
		{
			TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully.
 85c:	80 91 20 03 	lds	r24, 0x0320
 860:	81 60       	ori	r24, 0x01	; 1
 862:	80 93 20 03 	sts	0x0320, r24
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 866:	84 e9       	ldi	r24, 0x94	; 148
 868:	80 93 bc 00 	sts	0x00BC, r24
 86c:	3a c0       	rjmp	.+116    	; 0x8e2 <__vector_39+0xe8>
			(0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
			(0<<TWWC);                                 //
		}
		break;
		case TWI_MRX_DATA_ACK:      // Data byte has been received and ACK tramsmitted
		TWI_buf[TWI_bufPtr++] = TWDR;
 86e:	e0 91 1f 03 	lds	r30, 0x031F
 872:	81 e0       	ldi	r24, 0x01	; 1
 874:	8e 0f       	add	r24, r30
 876:	80 93 1f 03 	sts	0x031F, r24
 87a:	80 91 bb 00 	lds	r24, 0x00BB
 87e:	f0 e0       	ldi	r31, 0x00	; 0
 880:	ee 5d       	subi	r30, 0xDE	; 222
 882:	fc 4f       	sbci	r31, 0xFC	; 252
 884:	80 83       	st	Z, r24
		case TWI_MRX_ADR_ACK:       // SLA+R has been tramsmitted and ACK received
		if (TWI_bufPtr < (TWI_msgSize-1) )                  // Detect the last byte to NACK it.
 886:	20 91 1f 03 	lds	r18, 0x031F
 88a:	30 e0       	ldi	r19, 0x00	; 0
 88c:	80 91 21 03 	lds	r24, 0x0321
 890:	90 e0       	ldi	r25, 0x00	; 0
 892:	01 97       	sbiw	r24, 0x01	; 1
 894:	28 17       	cp	r18, r24
 896:	39 07       	cpc	r19, r25
 898:	24 f4       	brge	.+8      	; 0x8a2 <__vector_39+0xa8>
		{
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 89a:	85 ec       	ldi	r24, 0xC5	; 197
 89c:	80 93 bc 00 	sts	0x00BC, r24
 8a0:	20 c0       	rjmp	.+64     	; 0x8e2 <__vector_39+0xe8>
			(1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag to read next byte
			(1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send ACK after reception
			(0<<TWWC);                                 //
		}else                    // Send NACK after next reception
		{
			TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 8a2:	85 e8       	ldi	r24, 0x85	; 133
 8a4:	80 93 bc 00 	sts	0x00BC, r24
 8a8:	1c c0       	rjmp	.+56     	; 0x8e2 <__vector_39+0xe8>
			(0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send NACK after reception
			(0<<TWWC);                                 //
		}
		break;
		case TWI_MRX_DATA_NACK:     // Data byte has been received and NACK tramsmitted
		TWI_buf[TWI_bufPtr] = TWDR;
 8aa:	80 91 bb 00 	lds	r24, 0x00BB
 8ae:	e0 91 1f 03 	lds	r30, 0x031F
 8b2:	f0 e0       	ldi	r31, 0x00	; 0
 8b4:	ee 5d       	subi	r30, 0xDE	; 222
 8b6:	fc 4f       	sbci	r31, 0xFC	; 252
 8b8:	80 83       	st	Z, r24
		TWI_statusReg.lastTransOK = TRUE;                 // Set status bits to completed successfully.
 8ba:	80 91 20 03 	lds	r24, 0x0320
 8be:	81 60       	ori	r24, 0x01	; 1
 8c0:	80 93 20 03 	sts	0x0320, r24
		TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 8c4:	84 e9       	ldi	r24, 0x94	; 148
 8c6:	80 93 bc 00 	sts	0x00BC, r24
		(0<<TWIE)|(1<<TWINT)|                      // Disable TWI Interrupt and clear the flag
		(0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Initiate a STOP condition.
		(0<<TWWC);                                 //
		break;
 8ca:	0b c0       	rjmp	.+22     	; 0x8e2 <__vector_39+0xe8>
		case TWI_ARB_LOST:          // Arbitration lost
		TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 8cc:	85 ea       	ldi	r24, 0xA5	; 165
 8ce:	80 93 bc 00 	sts	0x00BC, r24
		(1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag
		(0<<TWEA)|(1<<TWSTA)|(0<<TWSTO)|           // Initiate a (RE)START condition.
		(0<<TWWC);                                 //
		break;
 8d2:	07 c0       	rjmp	.+14     	; 0x8e2 <__vector_39+0xe8>
		case TWI_MRX_ADR_NACK:      // SLA+R has been tramsmitted and NACK received
		case TWI_MTX_DATA_NACK:     // Data byte has been tramsmitted and NACK received
		//    case TWI_NO_STATE              // No relevant state information available; TWINT = ?0?
		case TWI_BUS_ERROR:         // Bus error due to an illegal START or STOP condition
		default:
		TWI_state = TWSR;                                 // Store TWSR and automatically sets clears noErrors bit.
 8d4:	80 91 b9 00 	lds	r24, 0x00B9
 8d8:	80 93 0e 02 	sts	0x020E, r24
		// Reset TWI Interface
		TWCR = (1<<TWEN)|                                 // Enable TWI-interface and release TWI pins
 8dc:	84 e0       	ldi	r24, 0x04	; 4
 8de:	80 93 bc 00 	sts	0x00BC, r24
		(0<<TWIE)|(0<<TWINT)|                      // Disable Interupt
		(0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // No Signal requests
		(0<<TWWC);                                 //
	}
 8e2:	ff 91       	pop	r31
 8e4:	ef 91       	pop	r30
 8e6:	bf 91       	pop	r27
 8e8:	af 91       	pop	r26
 8ea:	9f 91       	pop	r25
 8ec:	8f 91       	pop	r24
 8ee:	3f 91       	pop	r19
 8f0:	2f 91       	pop	r18
 8f2:	0f 90       	pop	r0
 8f4:	0b be       	out	0x3b, r0	; 59
 8f6:	0f 90       	pop	r0
 8f8:	0f be       	out	0x3f, r0	; 63
 8fa:	0f 90       	pop	r0
 8fc:	1f 90       	pop	r1
 8fe:	18 95       	reti

00000900 <__divmodhi4>:
 900:	97 fb       	bst	r25, 7
 902:	07 2e       	mov	r0, r23
 904:	16 f4       	brtc	.+4      	; 0x90a <__divmodhi4+0xa>
 906:	00 94       	com	r0
 908:	06 d0       	rcall	.+12     	; 0x916 <__divmodhi4_neg1>
 90a:	77 fd       	sbrc	r23, 7
 90c:	08 d0       	rcall	.+16     	; 0x91e <__divmodhi4_neg2>
 90e:	11 d0       	rcall	.+34     	; 0x932 <__udivmodhi4>
 910:	07 fc       	sbrc	r0, 7
 912:	05 d0       	rcall	.+10     	; 0x91e <__divmodhi4_neg2>
 914:	3e f4       	brtc	.+14     	; 0x924 <__divmodhi4_exit>

00000916 <__divmodhi4_neg1>:
 916:	90 95       	com	r25
 918:	81 95       	neg	r24
 91a:	9f 4f       	sbci	r25, 0xFF	; 255
 91c:	08 95       	ret

0000091e <__divmodhi4_neg2>:
 91e:	70 95       	com	r23
 920:	61 95       	neg	r22
 922:	7f 4f       	sbci	r23, 0xFF	; 255

00000924 <__divmodhi4_exit>:
 924:	08 95       	ret

00000926 <__tablejump2__>:
 926:	ee 0f       	add	r30, r30
 928:	ff 1f       	adc	r31, r31

0000092a <__tablejump__>:
 92a:	05 90       	lpm	r0, Z+
 92c:	f4 91       	lpm	r31, Z
 92e:	e0 2d       	mov	r30, r0
 930:	19 94       	eijmp

00000932 <__udivmodhi4>:
 932:	aa 1b       	sub	r26, r26
 934:	bb 1b       	sub	r27, r27
 936:	51 e1       	ldi	r21, 0x11	; 17
 938:	07 c0       	rjmp	.+14     	; 0x948 <__udivmodhi4_ep>

0000093a <__udivmodhi4_loop>:
 93a:	aa 1f       	adc	r26, r26
 93c:	bb 1f       	adc	r27, r27
 93e:	a6 17       	cp	r26, r22
 940:	b7 07       	cpc	r27, r23
 942:	10 f0       	brcs	.+4      	; 0x948 <__udivmodhi4_ep>
 944:	a6 1b       	sub	r26, r22
 946:	b7 0b       	sbc	r27, r23

00000948 <__udivmodhi4_ep>:
 948:	88 1f       	adc	r24, r24
 94a:	99 1f       	adc	r25, r25
 94c:	5a 95       	dec	r21
 94e:	a9 f7       	brne	.-22     	; 0x93a <__udivmodhi4_loop>
 950:	80 95       	com	r24
 952:	90 95       	com	r25
 954:	bc 01       	movw	r22, r24
 956:	cd 01       	movw	r24, r26
 958:	08 95       	ret

0000095a <printf>:
 95a:	cf 93       	push	r28
 95c:	df 93       	push	r29
 95e:	cd b7       	in	r28, 0x3d	; 61
 960:	de b7       	in	r29, 0x3e	; 62
 962:	fe 01       	movw	r30, r28
 964:	36 96       	adiw	r30, 0x06	; 6
 966:	61 91       	ld	r22, Z+
 968:	71 91       	ld	r23, Z+
 96a:	af 01       	movw	r20, r30
 96c:	80 91 29 03 	lds	r24, 0x0329
 970:	90 91 2a 03 	lds	r25, 0x032A
 974:	30 d0       	rcall	.+96     	; 0x9d6 <vfprintf>
 976:	df 91       	pop	r29
 978:	cf 91       	pop	r28
 97a:	08 95       	ret

0000097c <puts>:
 97c:	0f 93       	push	r16
 97e:	1f 93       	push	r17
 980:	cf 93       	push	r28
 982:	df 93       	push	r29
 984:	e0 91 29 03 	lds	r30, 0x0329
 988:	f0 91 2a 03 	lds	r31, 0x032A
 98c:	23 81       	ldd	r18, Z+3	; 0x03
 98e:	21 ff       	sbrs	r18, 1
 990:	1b c0       	rjmp	.+54     	; 0x9c8 <puts+0x4c>
 992:	ec 01       	movw	r28, r24
 994:	00 e0       	ldi	r16, 0x00	; 0
 996:	10 e0       	ldi	r17, 0x00	; 0
 998:	89 91       	ld	r24, Y+
 99a:	60 91 29 03 	lds	r22, 0x0329
 99e:	70 91 2a 03 	lds	r23, 0x032A
 9a2:	db 01       	movw	r26, r22
 9a4:	18 96       	adiw	r26, 0x08	; 8
 9a6:	ed 91       	ld	r30, X+
 9a8:	fc 91       	ld	r31, X
 9aa:	19 97       	sbiw	r26, 0x09	; 9
 9ac:	88 23       	and	r24, r24
 9ae:	31 f0       	breq	.+12     	; 0x9bc <puts+0x40>
 9b0:	19 95       	eicall
 9b2:	89 2b       	or	r24, r25
 9b4:	89 f3       	breq	.-30     	; 0x998 <puts+0x1c>
 9b6:	0f ef       	ldi	r16, 0xFF	; 255
 9b8:	1f ef       	ldi	r17, 0xFF	; 255
 9ba:	ee cf       	rjmp	.-36     	; 0x998 <puts+0x1c>
 9bc:	8a e0       	ldi	r24, 0x0A	; 10
 9be:	19 95       	eicall
 9c0:	89 2b       	or	r24, r25
 9c2:	11 f4       	brne	.+4      	; 0x9c8 <puts+0x4c>
 9c4:	c8 01       	movw	r24, r16
 9c6:	02 c0       	rjmp	.+4      	; 0x9cc <puts+0x50>
 9c8:	8f ef       	ldi	r24, 0xFF	; 255
 9ca:	9f ef       	ldi	r25, 0xFF	; 255
 9cc:	df 91       	pop	r29
 9ce:	cf 91       	pop	r28
 9d0:	1f 91       	pop	r17
 9d2:	0f 91       	pop	r16
 9d4:	08 95       	ret

000009d6 <vfprintf>:
 9d6:	2f 92       	push	r2
 9d8:	3f 92       	push	r3
 9da:	4f 92       	push	r4
 9dc:	5f 92       	push	r5
 9de:	6f 92       	push	r6
 9e0:	7f 92       	push	r7
 9e2:	8f 92       	push	r8
 9e4:	9f 92       	push	r9
 9e6:	af 92       	push	r10
 9e8:	bf 92       	push	r11
 9ea:	cf 92       	push	r12
 9ec:	df 92       	push	r13
 9ee:	ef 92       	push	r14
 9f0:	ff 92       	push	r15
 9f2:	0f 93       	push	r16
 9f4:	1f 93       	push	r17
 9f6:	cf 93       	push	r28
 9f8:	df 93       	push	r29
 9fa:	cd b7       	in	r28, 0x3d	; 61
 9fc:	de b7       	in	r29, 0x3e	; 62
 9fe:	2c 97       	sbiw	r28, 0x0c	; 12
 a00:	0f b6       	in	r0, 0x3f	; 63
 a02:	f8 94       	cli
 a04:	de bf       	out	0x3e, r29	; 62
 a06:	0f be       	out	0x3f, r0	; 63
 a08:	cd bf       	out	0x3d, r28	; 61
 a0a:	7c 01       	movw	r14, r24
 a0c:	6b 01       	movw	r12, r22
 a0e:	8a 01       	movw	r16, r20
 a10:	fc 01       	movw	r30, r24
 a12:	17 82       	std	Z+7, r1	; 0x07
 a14:	16 82       	std	Z+6, r1	; 0x06
 a16:	83 81       	ldd	r24, Z+3	; 0x03
 a18:	81 ff       	sbrs	r24, 1
 a1a:	b0 c1       	rjmp	.+864    	; 0xd7c <vfprintf+0x3a6>
 a1c:	ce 01       	movw	r24, r28
 a1e:	01 96       	adiw	r24, 0x01	; 1
 a20:	4c 01       	movw	r8, r24
 a22:	f7 01       	movw	r30, r14
 a24:	93 81       	ldd	r25, Z+3	; 0x03
 a26:	f6 01       	movw	r30, r12
 a28:	93 fd       	sbrc	r25, 3
 a2a:	85 91       	lpm	r24, Z+
 a2c:	93 ff       	sbrs	r25, 3
 a2e:	81 91       	ld	r24, Z+
 a30:	6f 01       	movw	r12, r30
 a32:	88 23       	and	r24, r24
 a34:	09 f4       	brne	.+2      	; 0xa38 <vfprintf+0x62>
 a36:	9e c1       	rjmp	.+828    	; 0xd74 <vfprintf+0x39e>
 a38:	85 32       	cpi	r24, 0x25	; 37
 a3a:	39 f4       	brne	.+14     	; 0xa4a <vfprintf+0x74>
 a3c:	93 fd       	sbrc	r25, 3
 a3e:	85 91       	lpm	r24, Z+
 a40:	93 ff       	sbrs	r25, 3
 a42:	81 91       	ld	r24, Z+
 a44:	6f 01       	movw	r12, r30
 a46:	85 32       	cpi	r24, 0x25	; 37
 a48:	21 f4       	brne	.+8      	; 0xa52 <vfprintf+0x7c>
 a4a:	b7 01       	movw	r22, r14
 a4c:	90 e0       	ldi	r25, 0x00	; 0
 a4e:	c7 d1       	rcall	.+910    	; 0xdde <fputc>
 a50:	e8 cf       	rjmp	.-48     	; 0xa22 <vfprintf+0x4c>
 a52:	51 2c       	mov	r5, r1
 a54:	31 2c       	mov	r3, r1
 a56:	20 e0       	ldi	r18, 0x00	; 0
 a58:	20 32       	cpi	r18, 0x20	; 32
 a5a:	a0 f4       	brcc	.+40     	; 0xa84 <vfprintf+0xae>
 a5c:	8b 32       	cpi	r24, 0x2B	; 43
 a5e:	69 f0       	breq	.+26     	; 0xa7a <vfprintf+0xa4>
 a60:	30 f4       	brcc	.+12     	; 0xa6e <vfprintf+0x98>
 a62:	80 32       	cpi	r24, 0x20	; 32
 a64:	59 f0       	breq	.+22     	; 0xa7c <vfprintf+0xa6>
 a66:	83 32       	cpi	r24, 0x23	; 35
 a68:	69 f4       	brne	.+26     	; 0xa84 <vfprintf+0xae>
 a6a:	20 61       	ori	r18, 0x10	; 16
 a6c:	2c c0       	rjmp	.+88     	; 0xac6 <vfprintf+0xf0>
 a6e:	8d 32       	cpi	r24, 0x2D	; 45
 a70:	39 f0       	breq	.+14     	; 0xa80 <vfprintf+0xaa>
 a72:	80 33       	cpi	r24, 0x30	; 48
 a74:	39 f4       	brne	.+14     	; 0xa84 <vfprintf+0xae>
 a76:	21 60       	ori	r18, 0x01	; 1
 a78:	26 c0       	rjmp	.+76     	; 0xac6 <vfprintf+0xf0>
 a7a:	22 60       	ori	r18, 0x02	; 2
 a7c:	24 60       	ori	r18, 0x04	; 4
 a7e:	23 c0       	rjmp	.+70     	; 0xac6 <vfprintf+0xf0>
 a80:	28 60       	ori	r18, 0x08	; 8
 a82:	21 c0       	rjmp	.+66     	; 0xac6 <vfprintf+0xf0>
 a84:	27 fd       	sbrc	r18, 7
 a86:	27 c0       	rjmp	.+78     	; 0xad6 <vfprintf+0x100>
 a88:	30 ed       	ldi	r19, 0xD0	; 208
 a8a:	38 0f       	add	r19, r24
 a8c:	3a 30       	cpi	r19, 0x0A	; 10
 a8e:	78 f4       	brcc	.+30     	; 0xaae <vfprintf+0xd8>
 a90:	26 ff       	sbrs	r18, 6
 a92:	06 c0       	rjmp	.+12     	; 0xaa0 <vfprintf+0xca>
 a94:	fa e0       	ldi	r31, 0x0A	; 10
 a96:	5f 9e       	mul	r5, r31
 a98:	30 0d       	add	r19, r0
 a9a:	11 24       	eor	r1, r1
 a9c:	53 2e       	mov	r5, r19
 a9e:	13 c0       	rjmp	.+38     	; 0xac6 <vfprintf+0xf0>
 aa0:	8a e0       	ldi	r24, 0x0A	; 10
 aa2:	38 9e       	mul	r3, r24
 aa4:	30 0d       	add	r19, r0
 aa6:	11 24       	eor	r1, r1
 aa8:	33 2e       	mov	r3, r19
 aaa:	20 62       	ori	r18, 0x20	; 32
 aac:	0c c0       	rjmp	.+24     	; 0xac6 <vfprintf+0xf0>
 aae:	8e 32       	cpi	r24, 0x2E	; 46
 ab0:	21 f4       	brne	.+8      	; 0xaba <vfprintf+0xe4>
 ab2:	26 fd       	sbrc	r18, 6
 ab4:	5f c1       	rjmp	.+702    	; 0xd74 <vfprintf+0x39e>
 ab6:	20 64       	ori	r18, 0x40	; 64
 ab8:	06 c0       	rjmp	.+12     	; 0xac6 <vfprintf+0xf0>
 aba:	8c 36       	cpi	r24, 0x6C	; 108
 abc:	11 f4       	brne	.+4      	; 0xac2 <vfprintf+0xec>
 abe:	20 68       	ori	r18, 0x80	; 128
 ac0:	02 c0       	rjmp	.+4      	; 0xac6 <vfprintf+0xf0>
 ac2:	88 36       	cpi	r24, 0x68	; 104
 ac4:	41 f4       	brne	.+16     	; 0xad6 <vfprintf+0x100>
 ac6:	f6 01       	movw	r30, r12
 ac8:	93 fd       	sbrc	r25, 3
 aca:	85 91       	lpm	r24, Z+
 acc:	93 ff       	sbrs	r25, 3
 ace:	81 91       	ld	r24, Z+
 ad0:	6f 01       	movw	r12, r30
 ad2:	81 11       	cpse	r24, r1
 ad4:	c1 cf       	rjmp	.-126    	; 0xa58 <vfprintf+0x82>
 ad6:	98 2f       	mov	r25, r24
 ad8:	9f 7d       	andi	r25, 0xDF	; 223
 ada:	95 54       	subi	r25, 0x45	; 69
 adc:	93 30       	cpi	r25, 0x03	; 3
 ade:	28 f4       	brcc	.+10     	; 0xaea <vfprintf+0x114>
 ae0:	0c 5f       	subi	r16, 0xFC	; 252
 ae2:	1f 4f       	sbci	r17, 0xFF	; 255
 ae4:	ff e3       	ldi	r31, 0x3F	; 63
 ae6:	f9 83       	std	Y+1, r31	; 0x01
 ae8:	0d c0       	rjmp	.+26     	; 0xb04 <vfprintf+0x12e>
 aea:	83 36       	cpi	r24, 0x63	; 99
 aec:	31 f0       	breq	.+12     	; 0xafa <vfprintf+0x124>
 aee:	83 37       	cpi	r24, 0x73	; 115
 af0:	71 f0       	breq	.+28     	; 0xb0e <vfprintf+0x138>
 af2:	83 35       	cpi	r24, 0x53	; 83
 af4:	09 f0       	breq	.+2      	; 0xaf8 <vfprintf+0x122>
 af6:	57 c0       	rjmp	.+174    	; 0xba6 <vfprintf+0x1d0>
 af8:	21 c0       	rjmp	.+66     	; 0xb3c <vfprintf+0x166>
 afa:	f8 01       	movw	r30, r16
 afc:	80 81       	ld	r24, Z
 afe:	89 83       	std	Y+1, r24	; 0x01
 b00:	0e 5f       	subi	r16, 0xFE	; 254
 b02:	1f 4f       	sbci	r17, 0xFF	; 255
 b04:	44 24       	eor	r4, r4
 b06:	43 94       	inc	r4
 b08:	51 2c       	mov	r5, r1
 b0a:	54 01       	movw	r10, r8
 b0c:	14 c0       	rjmp	.+40     	; 0xb36 <vfprintf+0x160>
 b0e:	38 01       	movw	r6, r16
 b10:	f2 e0       	ldi	r31, 0x02	; 2
 b12:	6f 0e       	add	r6, r31
 b14:	71 1c       	adc	r7, r1
 b16:	f8 01       	movw	r30, r16
 b18:	a0 80       	ld	r10, Z
 b1a:	b1 80       	ldd	r11, Z+1	; 0x01
 b1c:	26 ff       	sbrs	r18, 6
 b1e:	03 c0       	rjmp	.+6      	; 0xb26 <vfprintf+0x150>
 b20:	65 2d       	mov	r22, r5
 b22:	70 e0       	ldi	r23, 0x00	; 0
 b24:	02 c0       	rjmp	.+4      	; 0xb2a <vfprintf+0x154>
 b26:	6f ef       	ldi	r22, 0xFF	; 255
 b28:	7f ef       	ldi	r23, 0xFF	; 255
 b2a:	c5 01       	movw	r24, r10
 b2c:	2c 87       	std	Y+12, r18	; 0x0c
 b2e:	4c d1       	rcall	.+664    	; 0xdc8 <strnlen>
 b30:	2c 01       	movw	r4, r24
 b32:	83 01       	movw	r16, r6
 b34:	2c 85       	ldd	r18, Y+12	; 0x0c
 b36:	2f 77       	andi	r18, 0x7F	; 127
 b38:	22 2e       	mov	r2, r18
 b3a:	16 c0       	rjmp	.+44     	; 0xb68 <vfprintf+0x192>
 b3c:	38 01       	movw	r6, r16
 b3e:	f2 e0       	ldi	r31, 0x02	; 2
 b40:	6f 0e       	add	r6, r31
 b42:	71 1c       	adc	r7, r1
 b44:	f8 01       	movw	r30, r16
 b46:	a0 80       	ld	r10, Z
 b48:	b1 80       	ldd	r11, Z+1	; 0x01
 b4a:	26 ff       	sbrs	r18, 6
 b4c:	03 c0       	rjmp	.+6      	; 0xb54 <vfprintf+0x17e>
 b4e:	65 2d       	mov	r22, r5
 b50:	70 e0       	ldi	r23, 0x00	; 0
 b52:	02 c0       	rjmp	.+4      	; 0xb58 <vfprintf+0x182>
 b54:	6f ef       	ldi	r22, 0xFF	; 255
 b56:	7f ef       	ldi	r23, 0xFF	; 255
 b58:	c5 01       	movw	r24, r10
 b5a:	2c 87       	std	Y+12, r18	; 0x0c
 b5c:	2a d1       	rcall	.+596    	; 0xdb2 <strnlen_P>
 b5e:	2c 01       	movw	r4, r24
 b60:	2c 85       	ldd	r18, Y+12	; 0x0c
 b62:	20 68       	ori	r18, 0x80	; 128
 b64:	22 2e       	mov	r2, r18
 b66:	83 01       	movw	r16, r6
 b68:	23 fc       	sbrc	r2, 3
 b6a:	19 c0       	rjmp	.+50     	; 0xb9e <vfprintf+0x1c8>
 b6c:	83 2d       	mov	r24, r3
 b6e:	90 e0       	ldi	r25, 0x00	; 0
 b70:	48 16       	cp	r4, r24
 b72:	59 06       	cpc	r5, r25
 b74:	a0 f4       	brcc	.+40     	; 0xb9e <vfprintf+0x1c8>
 b76:	b7 01       	movw	r22, r14
 b78:	80 e2       	ldi	r24, 0x20	; 32
 b7a:	90 e0       	ldi	r25, 0x00	; 0
 b7c:	30 d1       	rcall	.+608    	; 0xdde <fputc>
 b7e:	3a 94       	dec	r3
 b80:	f5 cf       	rjmp	.-22     	; 0xb6c <vfprintf+0x196>
 b82:	f5 01       	movw	r30, r10
 b84:	27 fc       	sbrc	r2, 7
 b86:	85 91       	lpm	r24, Z+
 b88:	27 fe       	sbrs	r2, 7
 b8a:	81 91       	ld	r24, Z+
 b8c:	5f 01       	movw	r10, r30
 b8e:	b7 01       	movw	r22, r14
 b90:	90 e0       	ldi	r25, 0x00	; 0
 b92:	25 d1       	rcall	.+586    	; 0xdde <fputc>
 b94:	31 10       	cpse	r3, r1
 b96:	3a 94       	dec	r3
 b98:	f1 e0       	ldi	r31, 0x01	; 1
 b9a:	4f 1a       	sub	r4, r31
 b9c:	51 08       	sbc	r5, r1
 b9e:	41 14       	cp	r4, r1
 ba0:	51 04       	cpc	r5, r1
 ba2:	79 f7       	brne	.-34     	; 0xb82 <vfprintf+0x1ac>
 ba4:	de c0       	rjmp	.+444    	; 0xd62 <vfprintf+0x38c>
 ba6:	84 36       	cpi	r24, 0x64	; 100
 ba8:	11 f0       	breq	.+4      	; 0xbae <vfprintf+0x1d8>
 baa:	89 36       	cpi	r24, 0x69	; 105
 bac:	31 f5       	brne	.+76     	; 0xbfa <vfprintf+0x224>
 bae:	f8 01       	movw	r30, r16
 bb0:	27 ff       	sbrs	r18, 7
 bb2:	07 c0       	rjmp	.+14     	; 0xbc2 <vfprintf+0x1ec>
 bb4:	60 81       	ld	r22, Z
 bb6:	71 81       	ldd	r23, Z+1	; 0x01
 bb8:	82 81       	ldd	r24, Z+2	; 0x02
 bba:	93 81       	ldd	r25, Z+3	; 0x03
 bbc:	0c 5f       	subi	r16, 0xFC	; 252
 bbe:	1f 4f       	sbci	r17, 0xFF	; 255
 bc0:	08 c0       	rjmp	.+16     	; 0xbd2 <vfprintf+0x1fc>
 bc2:	60 81       	ld	r22, Z
 bc4:	71 81       	ldd	r23, Z+1	; 0x01
 bc6:	88 27       	eor	r24, r24
 bc8:	77 fd       	sbrc	r23, 7
 bca:	80 95       	com	r24
 bcc:	98 2f       	mov	r25, r24
 bce:	0e 5f       	subi	r16, 0xFE	; 254
 bd0:	1f 4f       	sbci	r17, 0xFF	; 255
 bd2:	2f 76       	andi	r18, 0x6F	; 111
 bd4:	b2 2e       	mov	r11, r18
 bd6:	97 ff       	sbrs	r25, 7
 bd8:	09 c0       	rjmp	.+18     	; 0xbec <vfprintf+0x216>
 bda:	90 95       	com	r25
 bdc:	80 95       	com	r24
 bde:	70 95       	com	r23
 be0:	61 95       	neg	r22
 be2:	7f 4f       	sbci	r23, 0xFF	; 255
 be4:	8f 4f       	sbci	r24, 0xFF	; 255
 be6:	9f 4f       	sbci	r25, 0xFF	; 255
 be8:	20 68       	ori	r18, 0x80	; 128
 bea:	b2 2e       	mov	r11, r18
 bec:	2a e0       	ldi	r18, 0x0A	; 10
 bee:	30 e0       	ldi	r19, 0x00	; 0
 bf0:	a4 01       	movw	r20, r8
 bf2:	27 d1       	rcall	.+590    	; 0xe42 <__ultoa_invert>
 bf4:	a8 2e       	mov	r10, r24
 bf6:	a8 18       	sub	r10, r8
 bf8:	43 c0       	rjmp	.+134    	; 0xc80 <vfprintf+0x2aa>
 bfa:	85 37       	cpi	r24, 0x75	; 117
 bfc:	29 f4       	brne	.+10     	; 0xc08 <vfprintf+0x232>
 bfe:	2f 7e       	andi	r18, 0xEF	; 239
 c00:	b2 2e       	mov	r11, r18
 c02:	2a e0       	ldi	r18, 0x0A	; 10
 c04:	30 e0       	ldi	r19, 0x00	; 0
 c06:	25 c0       	rjmp	.+74     	; 0xc52 <vfprintf+0x27c>
 c08:	f2 2f       	mov	r31, r18
 c0a:	f9 7f       	andi	r31, 0xF9	; 249
 c0c:	bf 2e       	mov	r11, r31
 c0e:	8f 36       	cpi	r24, 0x6F	; 111
 c10:	c1 f0       	breq	.+48     	; 0xc42 <vfprintf+0x26c>
 c12:	18 f4       	brcc	.+6      	; 0xc1a <vfprintf+0x244>
 c14:	88 35       	cpi	r24, 0x58	; 88
 c16:	79 f0       	breq	.+30     	; 0xc36 <vfprintf+0x260>
 c18:	ad c0       	rjmp	.+346    	; 0xd74 <vfprintf+0x39e>
 c1a:	80 37       	cpi	r24, 0x70	; 112
 c1c:	19 f0       	breq	.+6      	; 0xc24 <vfprintf+0x24e>
 c1e:	88 37       	cpi	r24, 0x78	; 120
 c20:	21 f0       	breq	.+8      	; 0xc2a <vfprintf+0x254>
 c22:	a8 c0       	rjmp	.+336    	; 0xd74 <vfprintf+0x39e>
 c24:	2f 2f       	mov	r18, r31
 c26:	20 61       	ori	r18, 0x10	; 16
 c28:	b2 2e       	mov	r11, r18
 c2a:	b4 fe       	sbrs	r11, 4
 c2c:	0d c0       	rjmp	.+26     	; 0xc48 <vfprintf+0x272>
 c2e:	8b 2d       	mov	r24, r11
 c30:	84 60       	ori	r24, 0x04	; 4
 c32:	b8 2e       	mov	r11, r24
 c34:	09 c0       	rjmp	.+18     	; 0xc48 <vfprintf+0x272>
 c36:	24 ff       	sbrs	r18, 4
 c38:	0a c0       	rjmp	.+20     	; 0xc4e <vfprintf+0x278>
 c3a:	9f 2f       	mov	r25, r31
 c3c:	96 60       	ori	r25, 0x06	; 6
 c3e:	b9 2e       	mov	r11, r25
 c40:	06 c0       	rjmp	.+12     	; 0xc4e <vfprintf+0x278>
 c42:	28 e0       	ldi	r18, 0x08	; 8
 c44:	30 e0       	ldi	r19, 0x00	; 0
 c46:	05 c0       	rjmp	.+10     	; 0xc52 <vfprintf+0x27c>
 c48:	20 e1       	ldi	r18, 0x10	; 16
 c4a:	30 e0       	ldi	r19, 0x00	; 0
 c4c:	02 c0       	rjmp	.+4      	; 0xc52 <vfprintf+0x27c>
 c4e:	20 e1       	ldi	r18, 0x10	; 16
 c50:	32 e0       	ldi	r19, 0x02	; 2
 c52:	f8 01       	movw	r30, r16
 c54:	b7 fe       	sbrs	r11, 7
 c56:	07 c0       	rjmp	.+14     	; 0xc66 <vfprintf+0x290>
 c58:	60 81       	ld	r22, Z
 c5a:	71 81       	ldd	r23, Z+1	; 0x01
 c5c:	82 81       	ldd	r24, Z+2	; 0x02
 c5e:	93 81       	ldd	r25, Z+3	; 0x03
 c60:	0c 5f       	subi	r16, 0xFC	; 252
 c62:	1f 4f       	sbci	r17, 0xFF	; 255
 c64:	06 c0       	rjmp	.+12     	; 0xc72 <vfprintf+0x29c>
 c66:	60 81       	ld	r22, Z
 c68:	71 81       	ldd	r23, Z+1	; 0x01
 c6a:	80 e0       	ldi	r24, 0x00	; 0
 c6c:	90 e0       	ldi	r25, 0x00	; 0
 c6e:	0e 5f       	subi	r16, 0xFE	; 254
 c70:	1f 4f       	sbci	r17, 0xFF	; 255
 c72:	a4 01       	movw	r20, r8
 c74:	e6 d0       	rcall	.+460    	; 0xe42 <__ultoa_invert>
 c76:	a8 2e       	mov	r10, r24
 c78:	a8 18       	sub	r10, r8
 c7a:	fb 2d       	mov	r31, r11
 c7c:	ff 77       	andi	r31, 0x7F	; 127
 c7e:	bf 2e       	mov	r11, r31
 c80:	b6 fe       	sbrs	r11, 6
 c82:	0b c0       	rjmp	.+22     	; 0xc9a <vfprintf+0x2c4>
 c84:	2b 2d       	mov	r18, r11
 c86:	2e 7f       	andi	r18, 0xFE	; 254
 c88:	a5 14       	cp	r10, r5
 c8a:	50 f4       	brcc	.+20     	; 0xca0 <vfprintf+0x2ca>
 c8c:	b4 fe       	sbrs	r11, 4
 c8e:	0a c0       	rjmp	.+20     	; 0xca4 <vfprintf+0x2ce>
 c90:	b2 fc       	sbrc	r11, 2
 c92:	08 c0       	rjmp	.+16     	; 0xca4 <vfprintf+0x2ce>
 c94:	2b 2d       	mov	r18, r11
 c96:	2e 7e       	andi	r18, 0xEE	; 238
 c98:	05 c0       	rjmp	.+10     	; 0xca4 <vfprintf+0x2ce>
 c9a:	7a 2c       	mov	r7, r10
 c9c:	2b 2d       	mov	r18, r11
 c9e:	03 c0       	rjmp	.+6      	; 0xca6 <vfprintf+0x2d0>
 ca0:	7a 2c       	mov	r7, r10
 ca2:	01 c0       	rjmp	.+2      	; 0xca6 <vfprintf+0x2d0>
 ca4:	75 2c       	mov	r7, r5
 ca6:	24 ff       	sbrs	r18, 4
 ca8:	0d c0       	rjmp	.+26     	; 0xcc4 <vfprintf+0x2ee>
 caa:	fe 01       	movw	r30, r28
 cac:	ea 0d       	add	r30, r10
 cae:	f1 1d       	adc	r31, r1
 cb0:	80 81       	ld	r24, Z
 cb2:	80 33       	cpi	r24, 0x30	; 48
 cb4:	11 f4       	brne	.+4      	; 0xcba <vfprintf+0x2e4>
 cb6:	29 7e       	andi	r18, 0xE9	; 233
 cb8:	09 c0       	rjmp	.+18     	; 0xccc <vfprintf+0x2f6>
 cba:	22 ff       	sbrs	r18, 2
 cbc:	06 c0       	rjmp	.+12     	; 0xcca <vfprintf+0x2f4>
 cbe:	73 94       	inc	r7
 cc0:	73 94       	inc	r7
 cc2:	04 c0       	rjmp	.+8      	; 0xccc <vfprintf+0x2f6>
 cc4:	82 2f       	mov	r24, r18
 cc6:	86 78       	andi	r24, 0x86	; 134
 cc8:	09 f0       	breq	.+2      	; 0xccc <vfprintf+0x2f6>
 cca:	73 94       	inc	r7
 ccc:	23 fd       	sbrc	r18, 3
 cce:	12 c0       	rjmp	.+36     	; 0xcf4 <vfprintf+0x31e>
 cd0:	20 ff       	sbrs	r18, 0
 cd2:	06 c0       	rjmp	.+12     	; 0xce0 <vfprintf+0x30a>
 cd4:	5a 2c       	mov	r5, r10
 cd6:	73 14       	cp	r7, r3
 cd8:	18 f4       	brcc	.+6      	; 0xce0 <vfprintf+0x30a>
 cda:	53 0c       	add	r5, r3
 cdc:	57 18       	sub	r5, r7
 cde:	73 2c       	mov	r7, r3
 ce0:	73 14       	cp	r7, r3
 ce2:	60 f4       	brcc	.+24     	; 0xcfc <vfprintf+0x326>
 ce4:	b7 01       	movw	r22, r14
 ce6:	80 e2       	ldi	r24, 0x20	; 32
 ce8:	90 e0       	ldi	r25, 0x00	; 0
 cea:	2c 87       	std	Y+12, r18	; 0x0c
 cec:	78 d0       	rcall	.+240    	; 0xdde <fputc>
 cee:	73 94       	inc	r7
 cf0:	2c 85       	ldd	r18, Y+12	; 0x0c
 cf2:	f6 cf       	rjmp	.-20     	; 0xce0 <vfprintf+0x30a>
 cf4:	73 14       	cp	r7, r3
 cf6:	10 f4       	brcc	.+4      	; 0xcfc <vfprintf+0x326>
 cf8:	37 18       	sub	r3, r7
 cfa:	01 c0       	rjmp	.+2      	; 0xcfe <vfprintf+0x328>
 cfc:	31 2c       	mov	r3, r1
 cfe:	24 ff       	sbrs	r18, 4
 d00:	11 c0       	rjmp	.+34     	; 0xd24 <vfprintf+0x34e>
 d02:	b7 01       	movw	r22, r14
 d04:	80 e3       	ldi	r24, 0x30	; 48
 d06:	90 e0       	ldi	r25, 0x00	; 0
 d08:	2c 87       	std	Y+12, r18	; 0x0c
 d0a:	69 d0       	rcall	.+210    	; 0xdde <fputc>
 d0c:	2c 85       	ldd	r18, Y+12	; 0x0c
 d0e:	22 ff       	sbrs	r18, 2
 d10:	16 c0       	rjmp	.+44     	; 0xd3e <vfprintf+0x368>
 d12:	21 ff       	sbrs	r18, 1
 d14:	03 c0       	rjmp	.+6      	; 0xd1c <vfprintf+0x346>
 d16:	88 e5       	ldi	r24, 0x58	; 88
 d18:	90 e0       	ldi	r25, 0x00	; 0
 d1a:	02 c0       	rjmp	.+4      	; 0xd20 <vfprintf+0x34a>
 d1c:	88 e7       	ldi	r24, 0x78	; 120
 d1e:	90 e0       	ldi	r25, 0x00	; 0
 d20:	b7 01       	movw	r22, r14
 d22:	0c c0       	rjmp	.+24     	; 0xd3c <vfprintf+0x366>
 d24:	82 2f       	mov	r24, r18
 d26:	86 78       	andi	r24, 0x86	; 134
 d28:	51 f0       	breq	.+20     	; 0xd3e <vfprintf+0x368>
 d2a:	21 fd       	sbrc	r18, 1
 d2c:	02 c0       	rjmp	.+4      	; 0xd32 <vfprintf+0x35c>
 d2e:	80 e2       	ldi	r24, 0x20	; 32
 d30:	01 c0       	rjmp	.+2      	; 0xd34 <vfprintf+0x35e>
 d32:	8b e2       	ldi	r24, 0x2B	; 43
 d34:	27 fd       	sbrc	r18, 7
 d36:	8d e2       	ldi	r24, 0x2D	; 45
 d38:	b7 01       	movw	r22, r14
 d3a:	90 e0       	ldi	r25, 0x00	; 0
 d3c:	50 d0       	rcall	.+160    	; 0xdde <fputc>
 d3e:	a5 14       	cp	r10, r5
 d40:	30 f4       	brcc	.+12     	; 0xd4e <vfprintf+0x378>
 d42:	b7 01       	movw	r22, r14
 d44:	80 e3       	ldi	r24, 0x30	; 48
 d46:	90 e0       	ldi	r25, 0x00	; 0
 d48:	4a d0       	rcall	.+148    	; 0xdde <fputc>
 d4a:	5a 94       	dec	r5
 d4c:	f8 cf       	rjmp	.-16     	; 0xd3e <vfprintf+0x368>
 d4e:	aa 94       	dec	r10
 d50:	f4 01       	movw	r30, r8
 d52:	ea 0d       	add	r30, r10
 d54:	f1 1d       	adc	r31, r1
 d56:	80 81       	ld	r24, Z
 d58:	b7 01       	movw	r22, r14
 d5a:	90 e0       	ldi	r25, 0x00	; 0
 d5c:	40 d0       	rcall	.+128    	; 0xdde <fputc>
 d5e:	a1 10       	cpse	r10, r1
 d60:	f6 cf       	rjmp	.-20     	; 0xd4e <vfprintf+0x378>
 d62:	33 20       	and	r3, r3
 d64:	09 f4       	brne	.+2      	; 0xd68 <vfprintf+0x392>
 d66:	5d ce       	rjmp	.-838    	; 0xa22 <vfprintf+0x4c>
 d68:	b7 01       	movw	r22, r14
 d6a:	80 e2       	ldi	r24, 0x20	; 32
 d6c:	90 e0       	ldi	r25, 0x00	; 0
 d6e:	37 d0       	rcall	.+110    	; 0xdde <fputc>
 d70:	3a 94       	dec	r3
 d72:	f7 cf       	rjmp	.-18     	; 0xd62 <vfprintf+0x38c>
 d74:	f7 01       	movw	r30, r14
 d76:	86 81       	ldd	r24, Z+6	; 0x06
 d78:	97 81       	ldd	r25, Z+7	; 0x07
 d7a:	02 c0       	rjmp	.+4      	; 0xd80 <vfprintf+0x3aa>
 d7c:	8f ef       	ldi	r24, 0xFF	; 255
 d7e:	9f ef       	ldi	r25, 0xFF	; 255
 d80:	2c 96       	adiw	r28, 0x0c	; 12
 d82:	0f b6       	in	r0, 0x3f	; 63
 d84:	f8 94       	cli
 d86:	de bf       	out	0x3e, r29	; 62
 d88:	0f be       	out	0x3f, r0	; 63
 d8a:	cd bf       	out	0x3d, r28	; 61
 d8c:	df 91       	pop	r29
 d8e:	cf 91       	pop	r28
 d90:	1f 91       	pop	r17
 d92:	0f 91       	pop	r16
 d94:	ff 90       	pop	r15
 d96:	ef 90       	pop	r14
 d98:	df 90       	pop	r13
 d9a:	cf 90       	pop	r12
 d9c:	bf 90       	pop	r11
 d9e:	af 90       	pop	r10
 da0:	9f 90       	pop	r9
 da2:	8f 90       	pop	r8
 da4:	7f 90       	pop	r7
 da6:	6f 90       	pop	r6
 da8:	5f 90       	pop	r5
 daa:	4f 90       	pop	r4
 dac:	3f 90       	pop	r3
 dae:	2f 90       	pop	r2
 db0:	08 95       	ret

00000db2 <strnlen_P>:
 db2:	fc 01       	movw	r30, r24
 db4:	05 90       	lpm	r0, Z+
 db6:	61 50       	subi	r22, 0x01	; 1
 db8:	70 40       	sbci	r23, 0x00	; 0
 dba:	01 10       	cpse	r0, r1
 dbc:	d8 f7       	brcc	.-10     	; 0xdb4 <strnlen_P+0x2>
 dbe:	80 95       	com	r24
 dc0:	90 95       	com	r25
 dc2:	8e 0f       	add	r24, r30
 dc4:	9f 1f       	adc	r25, r31
 dc6:	08 95       	ret

00000dc8 <strnlen>:
 dc8:	fc 01       	movw	r30, r24
 dca:	61 50       	subi	r22, 0x01	; 1
 dcc:	70 40       	sbci	r23, 0x00	; 0
 dce:	01 90       	ld	r0, Z+
 dd0:	01 10       	cpse	r0, r1
 dd2:	d8 f7       	brcc	.-10     	; 0xdca <strnlen+0x2>
 dd4:	80 95       	com	r24
 dd6:	90 95       	com	r25
 dd8:	8e 0f       	add	r24, r30
 dda:	9f 1f       	adc	r25, r31
 ddc:	08 95       	ret

00000dde <fputc>:
 dde:	0f 93       	push	r16
 de0:	1f 93       	push	r17
 de2:	cf 93       	push	r28
 de4:	df 93       	push	r29
 de6:	18 2f       	mov	r17, r24
 de8:	09 2f       	mov	r16, r25
 dea:	eb 01       	movw	r28, r22
 dec:	8b 81       	ldd	r24, Y+3	; 0x03
 dee:	81 fd       	sbrc	r24, 1
 df0:	03 c0       	rjmp	.+6      	; 0xdf8 <fputc+0x1a>
 df2:	8f ef       	ldi	r24, 0xFF	; 255
 df4:	9f ef       	ldi	r25, 0xFF	; 255
 df6:	20 c0       	rjmp	.+64     	; 0xe38 <fputc+0x5a>
 df8:	82 ff       	sbrs	r24, 2
 dfa:	10 c0       	rjmp	.+32     	; 0xe1c <fputc+0x3e>
 dfc:	4e 81       	ldd	r20, Y+6	; 0x06
 dfe:	5f 81       	ldd	r21, Y+7	; 0x07
 e00:	2c 81       	ldd	r18, Y+4	; 0x04
 e02:	3d 81       	ldd	r19, Y+5	; 0x05
 e04:	42 17       	cp	r20, r18
 e06:	53 07       	cpc	r21, r19
 e08:	7c f4       	brge	.+30     	; 0xe28 <fputc+0x4a>
 e0a:	e8 81       	ld	r30, Y
 e0c:	f9 81       	ldd	r31, Y+1	; 0x01
 e0e:	9f 01       	movw	r18, r30
 e10:	2f 5f       	subi	r18, 0xFF	; 255
 e12:	3f 4f       	sbci	r19, 0xFF	; 255
 e14:	39 83       	std	Y+1, r19	; 0x01
 e16:	28 83       	st	Y, r18
 e18:	10 83       	st	Z, r17
 e1a:	06 c0       	rjmp	.+12     	; 0xe28 <fputc+0x4a>
 e1c:	e8 85       	ldd	r30, Y+8	; 0x08
 e1e:	f9 85       	ldd	r31, Y+9	; 0x09
 e20:	81 2f       	mov	r24, r17
 e22:	19 95       	eicall
 e24:	89 2b       	or	r24, r25
 e26:	29 f7       	brne	.-54     	; 0xdf2 <fputc+0x14>
 e28:	2e 81       	ldd	r18, Y+6	; 0x06
 e2a:	3f 81       	ldd	r19, Y+7	; 0x07
 e2c:	2f 5f       	subi	r18, 0xFF	; 255
 e2e:	3f 4f       	sbci	r19, 0xFF	; 255
 e30:	3f 83       	std	Y+7, r19	; 0x07
 e32:	2e 83       	std	Y+6, r18	; 0x06
 e34:	81 2f       	mov	r24, r17
 e36:	90 2f       	mov	r25, r16
 e38:	df 91       	pop	r29
 e3a:	cf 91       	pop	r28
 e3c:	1f 91       	pop	r17
 e3e:	0f 91       	pop	r16
 e40:	08 95       	ret

00000e42 <__ultoa_invert>:
 e42:	fa 01       	movw	r30, r20
 e44:	aa 27       	eor	r26, r26
 e46:	28 30       	cpi	r18, 0x08	; 8
 e48:	51 f1       	breq	.+84     	; 0xe9e <__ultoa_invert+0x5c>
 e4a:	20 31       	cpi	r18, 0x10	; 16
 e4c:	81 f1       	breq	.+96     	; 0xeae <__ultoa_invert+0x6c>
 e4e:	e8 94       	clt
 e50:	6f 93       	push	r22
 e52:	6e 7f       	andi	r22, 0xFE	; 254
 e54:	6e 5f       	subi	r22, 0xFE	; 254
 e56:	7f 4f       	sbci	r23, 0xFF	; 255
 e58:	8f 4f       	sbci	r24, 0xFF	; 255
 e5a:	9f 4f       	sbci	r25, 0xFF	; 255
 e5c:	af 4f       	sbci	r26, 0xFF	; 255
 e5e:	b1 e0       	ldi	r27, 0x01	; 1
 e60:	3e d0       	rcall	.+124    	; 0xede <__ultoa_invert+0x9c>
 e62:	b4 e0       	ldi	r27, 0x04	; 4
 e64:	3c d0       	rcall	.+120    	; 0xede <__ultoa_invert+0x9c>
 e66:	67 0f       	add	r22, r23
 e68:	78 1f       	adc	r23, r24
 e6a:	89 1f       	adc	r24, r25
 e6c:	9a 1f       	adc	r25, r26
 e6e:	a1 1d       	adc	r26, r1
 e70:	68 0f       	add	r22, r24
 e72:	79 1f       	adc	r23, r25
 e74:	8a 1f       	adc	r24, r26
 e76:	91 1d       	adc	r25, r1
 e78:	a1 1d       	adc	r26, r1
 e7a:	6a 0f       	add	r22, r26
 e7c:	71 1d       	adc	r23, r1
 e7e:	81 1d       	adc	r24, r1
 e80:	91 1d       	adc	r25, r1
 e82:	a1 1d       	adc	r26, r1
 e84:	20 d0       	rcall	.+64     	; 0xec6 <__ultoa_invert+0x84>
 e86:	09 f4       	brne	.+2      	; 0xe8a <__ultoa_invert+0x48>
 e88:	68 94       	set
 e8a:	3f 91       	pop	r19
 e8c:	2a e0       	ldi	r18, 0x0A	; 10
 e8e:	26 9f       	mul	r18, r22
 e90:	11 24       	eor	r1, r1
 e92:	30 19       	sub	r19, r0
 e94:	30 5d       	subi	r19, 0xD0	; 208
 e96:	31 93       	st	Z+, r19
 e98:	de f6       	brtc	.-74     	; 0xe50 <__ultoa_invert+0xe>
 e9a:	cf 01       	movw	r24, r30
 e9c:	08 95       	ret
 e9e:	46 2f       	mov	r20, r22
 ea0:	47 70       	andi	r20, 0x07	; 7
 ea2:	40 5d       	subi	r20, 0xD0	; 208
 ea4:	41 93       	st	Z+, r20
 ea6:	b3 e0       	ldi	r27, 0x03	; 3
 ea8:	0f d0       	rcall	.+30     	; 0xec8 <__ultoa_invert+0x86>
 eaa:	c9 f7       	brne	.-14     	; 0xe9e <__ultoa_invert+0x5c>
 eac:	f6 cf       	rjmp	.-20     	; 0xe9a <__ultoa_invert+0x58>
 eae:	46 2f       	mov	r20, r22
 eb0:	4f 70       	andi	r20, 0x0F	; 15
 eb2:	40 5d       	subi	r20, 0xD0	; 208
 eb4:	4a 33       	cpi	r20, 0x3A	; 58
 eb6:	18 f0       	brcs	.+6      	; 0xebe <__ultoa_invert+0x7c>
 eb8:	49 5d       	subi	r20, 0xD9	; 217
 eba:	31 fd       	sbrc	r19, 1
 ebc:	40 52       	subi	r20, 0x20	; 32
 ebe:	41 93       	st	Z+, r20
 ec0:	02 d0       	rcall	.+4      	; 0xec6 <__ultoa_invert+0x84>
 ec2:	a9 f7       	brne	.-22     	; 0xeae <__ultoa_invert+0x6c>
 ec4:	ea cf       	rjmp	.-44     	; 0xe9a <__ultoa_invert+0x58>
 ec6:	b4 e0       	ldi	r27, 0x04	; 4
 ec8:	a6 95       	lsr	r26
 eca:	97 95       	ror	r25
 ecc:	87 95       	ror	r24
 ece:	77 95       	ror	r23
 ed0:	67 95       	ror	r22
 ed2:	ba 95       	dec	r27
 ed4:	c9 f7       	brne	.-14     	; 0xec8 <__ultoa_invert+0x86>
 ed6:	00 97       	sbiw	r24, 0x00	; 0
 ed8:	61 05       	cpc	r22, r1
 eda:	71 05       	cpc	r23, r1
 edc:	08 95       	ret
 ede:	9b 01       	movw	r18, r22
 ee0:	ac 01       	movw	r20, r24
 ee2:	0a 2e       	mov	r0, r26
 ee4:	06 94       	lsr	r0
 ee6:	57 95       	ror	r21
 ee8:	47 95       	ror	r20
 eea:	37 95       	ror	r19
 eec:	27 95       	ror	r18
 eee:	ba 95       	dec	r27
 ef0:	c9 f7       	brne	.-14     	; 0xee4 <__ultoa_invert+0xa2>
 ef2:	62 0f       	add	r22, r18
 ef4:	73 1f       	adc	r23, r19
 ef6:	84 1f       	adc	r24, r20
 ef8:	95 1f       	adc	r25, r21
 efa:	a0 1d       	adc	r26, r0
 efc:	08 95       	ret

00000efe <_exit>:
 efe:	f8 94       	cli

00000f00 <__stop_program>:
 f00:	ff cf       	rjmp	.-2      	; 0xf00 <__stop_program>
