
Ping_Pong_Shit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000290  00800100  00001746  000017da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001746  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800390  00800390  00001a6a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001a6a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001f8  00000000  00000000  00001ac6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002503  00000000  00000000  00001cbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d6e  00000000  00000000  000041c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000dea  00000000  00000000  00004f2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000548  00000000  00000000  00005d1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006d8  00000000  00000000  00006264  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001192  00000000  00000000  0000693c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001d0  00000000  00000000  00007ace  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <oled_arrow_handler+0x14>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	13 e0       	ldi	r17, 0x03	; 3
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e6 e4       	ldi	r30, 0x46	; 70
     37c:	f7 e1       	ldi	r31, 0x17	; 23
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a0 39       	cpi	r26, 0x90	; 144
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	23 e0       	ldi	r18, 0x03	; 3
     38c:	a0 e9       	ldi	r26, 0x90	; 144
     38e:	b3 e0       	ldi	r27, 0x03	; 3
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a1 3a       	cpi	r26, 0xA1	; 161
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 39 02 	call	0x472	; 0x472 <main>
     39e:	0c 94 a1 0b 	jmp	0x1742	; 0x1742 <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <joystick_read>:
}


unsigned int joystick_read(joy_channel channel){
	volatile char* ext_ram = (char*) 0x1400;
	ext_ram[0] = 0x4 + channel;
     3a6:	8c 5f       	subi	r24, 0xFC	; 252
     3a8:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3ac:	81 e4       	ldi	r24, 0x41	; 65
     3ae:	8a 95       	dec	r24
     3b0:	f1 f7       	brne	.-4      	; 0x3ae <joystick_read+0x8>
     3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <joystick_read+0xe>
	_delay_us(40);
	//sleep_enable();
	return (uint8_t) ext_ram[0];
     3b4:	80 91 00 14 	lds	r24, 0x1400
}
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	08 95       	ret

000003bc <joystick_init>:
	/*EMCUCR |= (0 << SM0);
	MCUCSR |= (1 << SM1);
	MCUCSR |= (0 << SM2);
	GICR |= (1 << INT0);
	sei();*/
	center_val_X = joystick_read(JOYSTICK_X);
     3bc:	80 e0       	ldi	r24, 0x00	; 0
     3be:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <joystick_read>
     3c2:	90 93 92 03 	sts	0x0392, r25
     3c6:	80 93 91 03 	sts	0x0391, r24
	center_val_Y = joystick_read(JOYSTICK_Y);
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <joystick_read>
     3d0:	90 93 94 03 	sts	0x0394, r25
     3d4:	80 93 93 03 	sts	0x0393, r24
     3d8:	08 95       	ret

000003da <read_converted>:
}*/




signed int read_converted(joy_channel channel){
     3da:	cf 93       	push	r28
     3dc:	c8 2f       	mov	r28, r24

	int v = (joystick_read(channel));
     3de:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <joystick_read>

	if      (channel == JOYSTICK_X)  {v -= center_val_X;}
     3e2:	c1 11       	cpse	r28, r1
     3e4:	07 c0       	rjmp	.+14     	; 0x3f4 <read_converted+0x1a>
     3e6:	20 91 91 03 	lds	r18, 0x0391
     3ea:	30 91 92 03 	lds	r19, 0x0392
     3ee:	82 1b       	sub	r24, r18
     3f0:	93 0b       	sbc	r25, r19
     3f2:	08 c0       	rjmp	.+16     	; 0x404 <read_converted+0x2a>
	else if (channel == JOYSTICK_Y)  {v -= center_val_Y;}
     3f4:	c1 30       	cpi	r28, 0x01	; 1
     3f6:	31 f4       	brne	.+12     	; 0x404 <read_converted+0x2a>
     3f8:	20 91 93 03 	lds	r18, 0x0393
     3fc:	30 91 94 03 	lds	r19, 0x0394
     400:	82 1b       	sub	r24, r18
     402:	93 0b       	sbc	r25, r19

	return  (v > 127)	? 127 :
     404:	80 38       	cpi	r24, 0x80	; 128
     406:	2f ef       	ldi	r18, 0xFF	; 255
     408:	92 07       	cpc	r25, r18
     40a:	14 f4       	brge	.+4      	; 0x410 <read_converted+0x36>
     40c:	80 e8       	ldi	r24, 0x80	; 128
     40e:	9f ef       	ldi	r25, 0xFF	; 255
     410:	80 38       	cpi	r24, 0x80	; 128
     412:	91 05       	cpc	r25, r1
     414:	14 f0       	brlt	.+4      	; 0x41a <read_converted+0x40>
     416:	8f e7       	ldi	r24, 0x7F	; 127
     418:	90 e0       	ldi	r25, 0x00	; 0
			(v < -128)	? -128 :
			 v;
}
     41a:	cf 91       	pop	r28
     41c:	08 95       	ret

0000041e <joystick_direction_Y>:
	//sleep_enable();
	return (uint8_t) ext_ram[0];
}

signed int joystick_direction_Y(){
	signed int joy_Y = read_converted(JOYSTICK_Y);
     41e:	81 e0       	ldi	r24, 0x01	; 1
     420:	0e 94 ed 01 	call	0x3da	; 0x3da <read_converted>
	if(joy_Y >= 100){
     424:	84 36       	cpi	r24, 0x64	; 100
     426:	91 05       	cpc	r25, r1
     428:	64 f4       	brge	.+24     	; 0x442 <joystick_direction_Y+0x24>
		return 1;
	} else if (joy_Y <= -100) {
     42a:	21 e0       	ldi	r18, 0x01	; 1
     42c:	30 e0       	ldi	r19, 0x00	; 0
     42e:	8d 39       	cpi	r24, 0x9D	; 157
     430:	9f 4f       	sbci	r25, 0xFF	; 255
     432:	14 f0       	brlt	.+4      	; 0x438 <joystick_direction_Y+0x1a>
     434:	20 e0       	ldi	r18, 0x00	; 0
     436:	30 e0       	ldi	r19, 0x00	; 0
     438:	88 27       	eor	r24, r24
     43a:	99 27       	eor	r25, r25
     43c:	82 1b       	sub	r24, r18
     43e:	93 0b       	sbc	r25, r19
     440:	08 95       	ret
}

signed int joystick_direction_Y(){
	signed int joy_Y = read_converted(JOYSTICK_Y);
	if(joy_Y >= 100){
		return 1;
     442:	81 e0       	ldi	r24, 0x01	; 1
     444:	90 e0       	ldi	r25, 0x00	; 0
	} else if (joy_Y <= -100) {
		return -1;
	} 
	return 0;
}
     446:	08 95       	ret

00000448 <joystick_direction_X>:

signed int joystick_direction_X(){
	signed int joy_X = read_converted(JOYSTICK_X);
     448:	80 e0       	ldi	r24, 0x00	; 0
     44a:	0e 94 ed 01 	call	0x3da	; 0x3da <read_converted>
	if(joy_X >= 100){
     44e:	84 36       	cpi	r24, 0x64	; 100
     450:	91 05       	cpc	r25, r1
     452:	64 f4       	brge	.+24     	; 0x46c <joystick_direction_X+0x24>
		return 1;
	} else if (joy_X <= -100) {
     454:	21 e0       	ldi	r18, 0x01	; 1
     456:	30 e0       	ldi	r19, 0x00	; 0
     458:	8d 39       	cpi	r24, 0x9D	; 157
     45a:	9f 4f       	sbci	r25, 0xFF	; 255
     45c:	14 f0       	brlt	.+4      	; 0x462 <joystick_direction_X+0x1a>
     45e:	20 e0       	ldi	r18, 0x00	; 0
     460:	30 e0       	ldi	r19, 0x00	; 0
     462:	88 27       	eor	r24, r24
     464:	99 27       	eor	r25, r25
     466:	82 1b       	sub	r24, r18
     468:	93 0b       	sbc	r25, r19
     46a:	08 95       	ret
}

signed int joystick_direction_X(){
	signed int joy_X = read_converted(JOYSTICK_X);
	if(joy_X >= 100){
		return 1;
     46c:	81 e0       	ldi	r24, 0x01	; 1
     46e:	90 e0       	ldi	r25, 0x00	; 0
	} else if (joy_X <= -100) {
		return -1;
	}
	return 0;
}
     470:	08 95       	ret

00000472 <main>:
#include "joystick_driver.h"
#include "oled_driver.h"
#include "menu.h"

int main(void) {
    uart_init(MYUBRR);
     472:	8f e1       	ldi	r24, 0x1F	; 31
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	0e 94 bb 06 	call	0xd76	; 0xd76 <uart_init>
	printf("\nREBOOTED\n");
     47a:	8c e2       	ldi	r24, 0x2C	; 44
     47c:	91 e0       	ldi	r25, 0x01	; 1
     47e:	0e 94 62 08 	call	0x10c4	; 0x10c4 <puts>
	SRAM_init();
     482:	0e 94 7d 06 	call	0xcfa	; 0xcfa <SRAM_init>
	joystick_init();
     486:	0e 94 de 01 	call	0x3bc	; 0x3bc <joystick_init>
	oled_init();
     48a:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <oled_init>
	
	while(1) { 
		//shell();

		
		menuitem* test_menu = MENU_create_menu();
     48e:	0e 94 a5 02 	call	0x54a	; 0x54a <MENU_create_menu>
		MENU_navigate(test_menu);
     492:	0e 94 4c 03 	call	0x698	; 0x698 <MENU_navigate>
		
		flash_diode();
     496:	0e 94 84 06 	call	0xd08	; 0xd08 <flash_diode>
     49a:	f9 cf       	rjmp	.-14     	; 0x48e <main+0x1c>

0000049c <MENU_new_item>:
	new_menu[0].items[0].child = NULL;
	
	return new_menu;	
}*/

menuitem* MENU_new_item(char *name, void (*handlerFunc)(void), uint8_t number_of_submenus) {
     49c:	df 92       	push	r13
     49e:	ef 92       	push	r14
     4a0:	ff 92       	push	r15
     4a2:	0f 93       	push	r16
     4a4:	1f 93       	push	r17
     4a6:	cf 93       	push	r28
     4a8:	df 93       	push	r29
     4aa:	7c 01       	movw	r14, r24
     4ac:	8b 01       	movw	r16, r22
     4ae:	d4 2e       	mov	r13, r20
	menuitem* new_item = malloc(sizeof(menuitem));
     4b0:	89 e0       	ldi	r24, 0x09	; 9
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	0e 94 c9 06 	call	0xd92	; 0xd92 <malloc>
     4b8:	ec 01       	movw	r28, r24
	
	new_item->name = name;
     4ba:	fe 82       	std	Y+6, r15	; 0x06
     4bc:	ed 82       	std	Y+5, r14	; 0x05
	new_item->handlerFunc = handlerFunc;
     4be:	18 87       	std	Y+8, r17	; 0x08
     4c0:	0f 83       	std	Y+7, r16	; 0x07
	new_item->number_of_submenus = number_of_submenus;
     4c2:	d8 82       	st	Y, r13
	new_item->submenus = malloc(number_of_submenus * sizeof(menuitem));
     4c4:	4d 2d       	mov	r20, r13
     4c6:	50 e0       	ldi	r21, 0x00	; 0
     4c8:	ca 01       	movw	r24, r20
     4ca:	88 0f       	add	r24, r24
     4cc:	99 1f       	adc	r25, r25
     4ce:	88 0f       	add	r24, r24
     4d0:	99 1f       	adc	r25, r25
     4d2:	88 0f       	add	r24, r24
     4d4:	99 1f       	adc	r25, r25
     4d6:	84 0f       	add	r24, r20
     4d8:	95 1f       	adc	r25, r21
     4da:	0e 94 c9 06 	call	0xd92	; 0xd92 <malloc>
     4de:	9a 83       	std	Y+2, r25	; 0x02
     4e0:	89 83       	std	Y+1, r24	; 0x01
	
	return new_item;
}
     4e2:	ce 01       	movw	r24, r28
     4e4:	df 91       	pop	r29
     4e6:	cf 91       	pop	r28
     4e8:	1f 91       	pop	r17
     4ea:	0f 91       	pop	r16
     4ec:	ff 90       	pop	r15
     4ee:	ef 90       	pop	r14
     4f0:	df 90       	pop	r13
     4f2:	08 95       	ret

000004f4 <MENU_assign_parents>:

void MENU_assign_parents(menuitem *current_menu){
     4f4:	1f 93       	push	r17
     4f6:	cf 93       	push	r28
     4f8:	df 93       	push	r29
     4fa:	ec 01       	movw	r28, r24
	for (uint8_t n = 0; n < current_menu->number_of_submenus; n++) {
     4fc:	88 81       	ld	r24, Y
     4fe:	88 23       	and	r24, r24
     500:	01 f1       	breq	.+64     	; 0x542 <__stack+0x43>
     502:	10 e0       	ldi	r17, 0x00	; 0
		current_menu->submenus[n]->parent = current_menu;
     504:	81 2f       	mov	r24, r17
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	88 0f       	add	r24, r24
     50a:	99 1f       	adc	r25, r25
     50c:	e9 81       	ldd	r30, Y+1	; 0x01
     50e:	fa 81       	ldd	r31, Y+2	; 0x02
     510:	e8 0f       	add	r30, r24
     512:	f9 1f       	adc	r31, r25
     514:	01 90       	ld	r0, Z+
     516:	f0 81       	ld	r31, Z
     518:	e0 2d       	mov	r30, r0
     51a:	d4 83       	std	Z+4, r29	; 0x04
     51c:	c3 83       	std	Z+3, r28	; 0x03
		if (current_menu->submenus[n]->number_of_submenus > 0) {
     51e:	29 81       	ldd	r18, Y+1	; 0x01
     520:	3a 81       	ldd	r19, Y+2	; 0x02
     522:	f9 01       	movw	r30, r18
     524:	e8 0f       	add	r30, r24
     526:	f9 1f       	adc	r31, r25
     528:	01 90       	ld	r0, Z+
     52a:	f0 81       	ld	r31, Z
     52c:	e0 2d       	mov	r30, r0
     52e:	80 81       	ld	r24, Z
     530:	88 23       	and	r24, r24
     532:	19 f0       	breq	.+6      	; 0x53a <__stack+0x3b>
			MENU_assign_parents(current_menu->submenus[n]);
     534:	cf 01       	movw	r24, r30
     536:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <MENU_assign_parents>
	
	return new_item;
}

void MENU_assign_parents(menuitem *current_menu){
	for (uint8_t n = 0; n < current_menu->number_of_submenus; n++) {
     53a:	1f 5f       	subi	r17, 0xFF	; 255
     53c:	88 81       	ld	r24, Y
     53e:	18 17       	cp	r17, r24
     540:	08 f3       	brcs	.-62     	; 0x504 <__stack+0x5>
		current_menu->submenus[n]->parent = current_menu;
		if (current_menu->submenus[n]->number_of_submenus > 0) {
			MENU_assign_parents(current_menu->submenus[n]);
		}
	}
}
     542:	df 91       	pop	r29
     544:	cf 91       	pop	r28
     546:	1f 91       	pop	r17
     548:	08 95       	ret

0000054a <MENU_create_menu>:


menuitem* MENU_create_menu(){
     54a:	0f 93       	push	r16
     54c:	1f 93       	push	r17
     54e:	cf 93       	push	r28
     550:	df 93       	push	r29
	menuitem* root_menu = MENU_new_item("Main", NULL, 4);
     552:	44 e0       	ldi	r20, 0x04	; 4
     554:	60 e0       	ldi	r22, 0x00	; 0
     556:	70 e0       	ldi	r23, 0x00	; 0
     558:	86 e3       	ldi	r24, 0x36	; 54
     55a:	91 e0       	ldi	r25, 0x01	; 1
     55c:	0e 94 4e 02 	call	0x49c	; 0x49c <MENU_new_item>
     560:	ec 01       	movw	r28, r24
	root_menu->parent = NULL;
     562:	1c 82       	std	Y+4, r1	; 0x04
     564:	1b 82       	std	Y+3, r1	; 0x03
	root_menu->submenus[0] = MENU_new_item("Test1", SRAM_test, 0);
     566:	09 81       	ldd	r16, Y+1	; 0x01
     568:	1a 81       	ldd	r17, Y+2	; 0x02
     56a:	40 e0       	ldi	r20, 0x00	; 0
     56c:	66 ea       	ldi	r22, 0xA6	; 166
     56e:	75 e0       	ldi	r23, 0x05	; 5
     570:	8b e3       	ldi	r24, 0x3B	; 59
     572:	91 e0       	ldi	r25, 0x01	; 1
     574:	0e 94 4e 02 	call	0x49c	; 0x49c <MENU_new_item>
     578:	f8 01       	movw	r30, r16
     57a:	91 83       	std	Z+1, r25	; 0x01
     57c:	80 83       	st	Z, r24
	root_menu->submenus[1] = MENU_new_item("Test2", SRAM_test, 0);
     57e:	09 81       	ldd	r16, Y+1	; 0x01
     580:	1a 81       	ldd	r17, Y+2	; 0x02
     582:	40 e0       	ldi	r20, 0x00	; 0
     584:	66 ea       	ldi	r22, 0xA6	; 166
     586:	75 e0       	ldi	r23, 0x05	; 5
     588:	81 e4       	ldi	r24, 0x41	; 65
     58a:	91 e0       	ldi	r25, 0x01	; 1
     58c:	0e 94 4e 02 	call	0x49c	; 0x49c <MENU_new_item>
     590:	f8 01       	movw	r30, r16
     592:	93 83       	std	Z+3, r25	; 0x03
     594:	82 83       	std	Z+2, r24	; 0x02
	root_menu->submenus[2] = MENU_new_item("Test3", SRAM_test, 0);
     596:	09 81       	ldd	r16, Y+1	; 0x01
     598:	1a 81       	ldd	r17, Y+2	; 0x02
     59a:	40 e0       	ldi	r20, 0x00	; 0
     59c:	66 ea       	ldi	r22, 0xA6	; 166
     59e:	75 e0       	ldi	r23, 0x05	; 5
     5a0:	87 e4       	ldi	r24, 0x47	; 71
     5a2:	91 e0       	ldi	r25, 0x01	; 1
     5a4:	0e 94 4e 02 	call	0x49c	; 0x49c <MENU_new_item>
     5a8:	f8 01       	movw	r30, r16
     5aa:	95 83       	std	Z+5, r25	; 0x05
     5ac:	84 83       	std	Z+4, r24	; 0x04
	root_menu->submenus[3] = MENU_new_item("Test4", NULL, 1);
     5ae:	09 81       	ldd	r16, Y+1	; 0x01
     5b0:	1a 81       	ldd	r17, Y+2	; 0x02
     5b2:	41 e0       	ldi	r20, 0x01	; 1
     5b4:	60 e0       	ldi	r22, 0x00	; 0
     5b6:	70 e0       	ldi	r23, 0x00	; 0
     5b8:	8d e4       	ldi	r24, 0x4D	; 77
     5ba:	91 e0       	ldi	r25, 0x01	; 1
     5bc:	0e 94 4e 02 	call	0x49c	; 0x49c <MENU_new_item>
     5c0:	f8 01       	movw	r30, r16
     5c2:	97 83       	std	Z+7, r25	; 0x07
     5c4:	86 83       	std	Z+6, r24	; 0x06
	root_menu->submenus[3]->submenus[0] = MENU_new_item("Flash diode", flash_diode, 0);
     5c6:	e9 81       	ldd	r30, Y+1	; 0x01
     5c8:	fa 81       	ldd	r31, Y+2	; 0x02
     5ca:	06 80       	ldd	r0, Z+6	; 0x06
     5cc:	f7 81       	ldd	r31, Z+7	; 0x07
     5ce:	e0 2d       	mov	r30, r0
     5d0:	01 81       	ldd	r16, Z+1	; 0x01
     5d2:	12 81       	ldd	r17, Z+2	; 0x02
     5d4:	40 e0       	ldi	r20, 0x00	; 0
     5d6:	64 e8       	ldi	r22, 0x84	; 132
     5d8:	76 e0       	ldi	r23, 0x06	; 6
     5da:	83 e5       	ldi	r24, 0x53	; 83
     5dc:	91 e0       	ldi	r25, 0x01	; 1
     5de:	0e 94 4e 02 	call	0x49c	; 0x49c <MENU_new_item>
     5e2:	f8 01       	movw	r30, r16
     5e4:	91 83       	std	Z+1, r25	; 0x01
     5e6:	80 83       	st	Z, r24

	

	
	MENU_assign_parents(root_menu);
     5e8:	ce 01       	movw	r24, r28
     5ea:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <MENU_assign_parents>
		
	return root_menu;
}
     5ee:	ce 01       	movw	r24, r28
     5f0:	df 91       	pop	r29
     5f2:	cf 91       	pop	r28
     5f4:	1f 91       	pop	r17
     5f6:	0f 91       	pop	r16
     5f8:	08 95       	ret

000005fa <MENU_print>:

//fixed
void MENU_print(menuitem *current_menu_item){
     5fa:	ef 92       	push	r14
     5fc:	ff 92       	push	r15
     5fe:	0f 93       	push	r16
     600:	1f 93       	push	r17
     602:	cf 93       	push	r28
     604:	df 93       	push	r29
     606:	7c 01       	movw	r14, r24
	oled_clear_screen();
     608:	0e 94 1e 04 	call	0x83c	; 0x83c <oled_clear_screen>
	oled_print_arrow(last_arrow_pos, 0);
     60c:	60 e0       	ldi	r22, 0x00	; 0
     60e:	80 91 0a 01 	lds	r24, 0x010A
     612:	0e 94 2a 05 	call	0xa54	; 0xa54 <oled_print_arrow>
	oled_pos(0,0);
     616:	60 e0       	ldi	r22, 0x00	; 0
     618:	70 e0       	ldi	r23, 0x00	; 0
     61a:	80 e0       	ldi	r24, 0x00	; 0
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	0e 94 34 04 	call	0x868	; 0x868 <oled_pos>
	oled_printf(current_menu_item->name);
     622:	d7 01       	movw	r26, r14
     624:	16 96       	adiw	r26, 0x06	; 6
     626:	8c 91       	ld	r24, X
     628:	16 97       	sbiw	r26, 0x06	; 6
     62a:	8f 93       	push	r24
     62c:	15 96       	adiw	r26, 0x05	; 5
     62e:	8c 91       	ld	r24, X
     630:	8f 93       	push	r24
     632:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <oled_printf>
	//printf("%s\n", current_menu_item->name);
	
	for (unsigned int i = 0; i < current_menu_item->number_of_submenus; i++) {
     636:	0f 90       	pop	r0
     638:	0f 90       	pop	r0
     63a:	f7 01       	movw	r30, r14
     63c:	80 81       	ld	r24, Z
     63e:	88 23       	and	r24, r24
     640:	21 f1       	breq	.+72     	; 0x68a <MENU_print+0x90>
     642:	00 e0       	ldi	r16, 0x00	; 0
     644:	10 e0       	ldi	r17, 0x00	; 0
     646:	c0 e0       	ldi	r28, 0x00	; 0
     648:	d0 e0       	ldi	r29, 0x00	; 0
		oled_pos(i + 1, MENU_INDENT);
     64a:	21 96       	adiw	r28, 0x01	; 1
     64c:	62 e0       	ldi	r22, 0x02	; 2
     64e:	70 e0       	ldi	r23, 0x00	; 0
     650:	ce 01       	movw	r24, r28
     652:	0e 94 34 04 	call	0x868	; 0x868 <oled_pos>
		oled_printf(current_menu_item->submenus[i]->name);
     656:	d7 01       	movw	r26, r14
     658:	11 96       	adiw	r26, 0x01	; 1
     65a:	ed 91       	ld	r30, X+
     65c:	fc 91       	ld	r31, X
     65e:	12 97       	sbiw	r26, 0x02	; 2
     660:	e0 0f       	add	r30, r16
     662:	f1 1f       	adc	r31, r17
     664:	01 90       	ld	r0, Z+
     666:	f0 81       	ld	r31, Z
     668:	e0 2d       	mov	r30, r0
     66a:	86 81       	ldd	r24, Z+6	; 0x06
     66c:	8f 93       	push	r24
     66e:	85 81       	ldd	r24, Z+5	; 0x05
     670:	8f 93       	push	r24
     672:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <oled_printf>
     676:	0e 5f       	subi	r16, 0xFE	; 254
     678:	1f 4f       	sbci	r17, 0xFF	; 255
	oled_print_arrow(last_arrow_pos, 0);
	oled_pos(0,0);
	oled_printf(current_menu_item->name);
	//printf("%s\n", current_menu_item->name);
	
	for (unsigned int i = 0; i < current_menu_item->number_of_submenus; i++) {
     67a:	f7 01       	movw	r30, r14
     67c:	80 81       	ld	r24, Z
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	0f 90       	pop	r0
     682:	0f 90       	pop	r0
     684:	c8 17       	cp	r28, r24
     686:	d9 07       	cpc	r29, r25
     688:	00 f3       	brcs	.-64     	; 0x64a <MENU_print+0x50>
		oled_pos(i + 1, MENU_INDENT);
		oled_printf(current_menu_item->submenus[i]->name);
		//printf("%s\n",current_menu_item->submenus[i]->name);
	}
}
     68a:	df 91       	pop	r29
     68c:	cf 91       	pop	r28
     68e:	1f 91       	pop	r17
     690:	0f 91       	pop	r16
     692:	ff 90       	pop	r15
     694:	ef 90       	pop	r14
     696:	08 95       	ret

00000698 <MENU_navigate>:

void MENU_navigate(menuitem *current_menu){
     698:	8c 01       	movw	r16, r24
	MENU_print(current_menu);
     69a:	0e 94 fd 02 	call	0x5fa	; 0x5fa <MENU_print>
	while(1){
		if(joystick_direction_Y() != 0){
     69e:	0e 94 0f 02 	call	0x41e	; 0x41e <joystick_direction_Y>
     6a2:	89 2b       	or	r24, r25
     6a4:	71 f0       	breq	.+28     	; 0x6c2 <MENU_navigate+0x2a>
			last_arrow_pos = oled_arrow_handler(joystick_direction_Y(), 1, current_menu->number_of_submenus);
     6a6:	d8 01       	movw	r26, r16
     6a8:	cc 91       	ld	r28, X
     6aa:	d0 e0       	ldi	r29, 0x00	; 0
     6ac:	0e 94 0f 02 	call	0x41e	; 0x41e <joystick_direction_Y>
     6b0:	ae 01       	movw	r20, r28
     6b2:	61 e0       	ldi	r22, 0x01	; 1
     6b4:	70 e0       	ldi	r23, 0x00	; 0
     6b6:	0e 94 97 05 	call	0xb2e	; 0xb2e <oled_arrow_handler>
     6ba:	90 93 0b 01 	sts	0x010B, r25
     6be:	80 93 0a 01 	sts	0x010A, r24
		}
		
		if(joystick_direction_X() != 0){
     6c2:	0e 94 24 02 	call	0x448	; 0x448 <joystick_direction_X>
     6c6:	89 2b       	or	r24, r25
     6c8:	51 f3       	breq	.-44     	; 0x69e <MENU_navigate+0x6>
			if (joystick_direction_X() == 1) {
     6ca:	0e 94 24 02 	call	0x448	; 0x448 <joystick_direction_X>
     6ce:	01 97       	sbiw	r24, 0x01	; 1
     6d0:	09 f0       	breq	.+2      	; 0x6d4 <MENU_navigate+0x3c>
     6d2:	6b c0       	rjmp	.+214    	; 0x7aa <MENU_navigate+0x112>
				if (current_menu->submenus[oled_get_arrow_page() - 1]->number_of_submenus > 0) {
     6d4:	f8 01       	movw	r30, r16
     6d6:	c1 81       	ldd	r28, Z+1	; 0x01
     6d8:	d2 81       	ldd	r29, Z+2	; 0x02
     6da:	0e 94 27 05 	call	0xa4e	; 0xa4e <oled_get_arrow_page>
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	81 50       	subi	r24, 0x01	; 1
     6e2:	90 48       	sbci	r25, 0x80	; 128
     6e4:	88 0f       	add	r24, r24
     6e6:	99 1f       	adc	r25, r25
     6e8:	c8 0f       	add	r28, r24
     6ea:	d9 1f       	adc	r29, r25
     6ec:	e8 81       	ld	r30, Y
     6ee:	f9 81       	ldd	r31, Y+1	; 0x01
     6f0:	80 81       	ld	r24, Z
     6f2:	88 23       	and	r24, r24
     6f4:	51 f1       	breq	.+84     	; 0x74a <MENU_navigate+0xb2>
					current_menu = current_menu->submenus[oled_get_arrow_page() - 1];
     6f6:	d8 01       	movw	r26, r16
     6f8:	11 96       	adiw	r26, 0x01	; 1
     6fa:	cd 91       	ld	r28, X+
     6fc:	dc 91       	ld	r29, X
     6fe:	12 97       	sbiw	r26, 0x02	; 2
     700:	0e 94 27 05 	call	0xa4e	; 0xa4e <oled_get_arrow_page>
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	81 50       	subi	r24, 0x01	; 1
     708:	90 48       	sbci	r25, 0x80	; 128
     70a:	88 0f       	add	r24, r24
     70c:	99 1f       	adc	r25, r25
     70e:	c8 0f       	add	r28, r24
     710:	d9 1f       	adc	r29, r25
     712:	08 81       	ld	r16, Y
     714:	19 81       	ldd	r17, Y+1	; 0x01
					printf(current_menu->submenus[0]->name);
     716:	d8 01       	movw	r26, r16
     718:	11 96       	adiw	r26, 0x01	; 1
     71a:	ed 91       	ld	r30, X+
     71c:	fc 91       	ld	r31, X
     71e:	12 97       	sbiw	r26, 0x02	; 2
     720:	01 90       	ld	r0, Z+
     722:	f0 81       	ld	r31, Z
     724:	e0 2d       	mov	r30, r0
     726:	86 81       	ldd	r24, Z+6	; 0x06
     728:	8f 93       	push	r24
     72a:	85 81       	ldd	r24, Z+5	; 0x05
     72c:	8f 93       	push	r24
     72e:	0e 94 4e 08 	call	0x109c	; 0x109c <printf>
					last_arrow_pos = 1;
     732:	81 e0       	ldi	r24, 0x01	; 1
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	90 93 0b 01 	sts	0x010B, r25
     73a:	80 93 0a 01 	sts	0x010A, r24
					MENU_print(current_menu);
     73e:	c8 01       	movw	r24, r16
     740:	0e 94 fd 02 	call	0x5fa	; 0x5fa <MENU_print>
     744:	0f 90       	pop	r0
     746:	0f 90       	pop	r0
     748:	43 c0       	rjmp	.+134    	; 0x7d0 <MENU_navigate+0x138>
				} else  if (current_menu->submenus[oled_get_arrow_page() - 1]->handlerFunc != NULL) {
     74a:	f8 01       	movw	r30, r16
     74c:	c1 81       	ldd	r28, Z+1	; 0x01
     74e:	d2 81       	ldd	r29, Z+2	; 0x02
     750:	0e 94 27 05 	call	0xa4e	; 0xa4e <oled_get_arrow_page>
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	81 50       	subi	r24, 0x01	; 1
     758:	90 48       	sbci	r25, 0x80	; 128
     75a:	88 0f       	add	r24, r24
     75c:	99 1f       	adc	r25, r25
     75e:	c8 0f       	add	r28, r24
     760:	d9 1f       	adc	r29, r25
     762:	e8 81       	ld	r30, Y
     764:	f9 81       	ldd	r31, Y+1	; 0x01
     766:	87 81       	ldd	r24, Z+7	; 0x07
     768:	90 85       	ldd	r25, Z+8	; 0x08
     76a:	89 2b       	or	r24, r25
     76c:	89 f1       	breq	.+98     	; 0x7d0 <MENU_navigate+0x138>
					current_menu->submenus[oled_get_arrow_page() - 1]->handlerFunc();
     76e:	d8 01       	movw	r26, r16
     770:	11 96       	adiw	r26, 0x01	; 1
     772:	cd 91       	ld	r28, X+
     774:	dc 91       	ld	r29, X
     776:	12 97       	sbiw	r26, 0x02	; 2
     778:	0e 94 27 05 	call	0xa4e	; 0xa4e <oled_get_arrow_page>
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	81 50       	subi	r24, 0x01	; 1
     780:	90 48       	sbci	r25, 0x80	; 128
     782:	88 0f       	add	r24, r24
     784:	99 1f       	adc	r25, r25
     786:	c8 0f       	add	r28, r24
     788:	d9 1f       	adc	r29, r25
     78a:	e8 81       	ld	r30, Y
     78c:	f9 81       	ldd	r31, Y+1	; 0x01
     78e:	07 80       	ldd	r0, Z+7	; 0x07
     790:	f0 85       	ldd	r31, Z+8	; 0x08
     792:	e0 2d       	mov	r30, r0
     794:	09 95       	icall
					last_arrow_pos = 1;
     796:	81 e0       	ldi	r24, 0x01	; 1
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	90 93 0b 01 	sts	0x010B, r25
     79e:	80 93 0a 01 	sts	0x010A, r24
					MENU_print(current_menu);
     7a2:	c8 01       	movw	r24, r16
     7a4:	0e 94 fd 02 	call	0x5fa	; 0x5fa <MENU_print>
     7a8:	13 c0       	rjmp	.+38     	; 0x7d0 <MENU_navigate+0x138>
				}
			} else if (joystick_direction_X() == -1 && current_menu->parent != NULL) {
     7aa:	0e 94 24 02 	call	0x448	; 0x448 <joystick_direction_X>
     7ae:	01 96       	adiw	r24, 0x01	; 1
     7b0:	79 f4       	brne	.+30     	; 0x7d0 <MENU_navigate+0x138>
     7b2:	f8 01       	movw	r30, r16
     7b4:	c3 81       	ldd	r28, Z+3	; 0x03
     7b6:	d4 81       	ldd	r29, Z+4	; 0x04
     7b8:	20 97       	sbiw	r28, 0x00	; 0
     7ba:	51 f0       	breq	.+20     	; 0x7d0 <MENU_navigate+0x138>
				current_menu = current_menu->parent;
				last_arrow_pos = 1;
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	90 93 0b 01 	sts	0x010B, r25
     7c4:	80 93 0a 01 	sts	0x010A, r24
				MENU_print(current_menu);
     7c8:	ce 01       	movw	r24, r28
     7ca:	0e 94 fd 02 	call	0x5fa	; 0x5fa <MENU_print>
					current_menu->submenus[oled_get_arrow_page() - 1]->handlerFunc();
					last_arrow_pos = 1;
					MENU_print(current_menu);
				}
			} else if (joystick_direction_X() == -1 && current_menu->parent != NULL) {
				current_menu = current_menu->parent;
     7ce:	8e 01       	movw	r16, r28
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7d0:	ff e9       	ldi	r31, 0x9F	; 159
     7d2:	26 e8       	ldi	r18, 0x86	; 134
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	f1 50       	subi	r31, 0x01	; 1
     7d8:	20 40       	sbci	r18, 0x00	; 0
     7da:	80 40       	sbci	r24, 0x00	; 0
     7dc:	e1 f7       	brne	.-8      	; 0x7d6 <MENU_navigate+0x13e>
     7de:	00 c0       	rjmp	.+0      	; 0x7e0 <MENU_navigate+0x148>
     7e0:	00 00       	nop
     7e2:	5d cf       	rjmp	.-326    	; 0x69e <MENU_navigate+0x6>

000007e4 <oled_print_char>:
		//Set higher column address                                                                                                                                                                                                                                                                                                                                                                     
		*oled_command_addr = 0x10 + (column * (FONTWIDTH)>>4);
	}
}

void oled_print_char(char ch){
     7e4:	28 e0       	ldi	r18, 0x08	; 8
     7e6:	82 9f       	mul	r24, r18
     7e8:	c0 01       	movw	r24, r0
     7ea:	11 24       	eor	r1, r1
     7ec:	fc 01       	movw	r30, r24
     7ee:	e0 59       	subi	r30, 0x90	; 144
     7f0:	f0 40       	sbci	r31, 0x00	; 0
	for (uint8_t i = 0; i<FONTWIDTH; i++) {
     7f2:	80 e0       	ldi	r24, 0x00	; 0
		oled_write_data(pgm_read_byte(&font[ch - FONTOFFSET][i]));
     7f4:	94 91       	lpm	r25, Z
void oled_write_command(uint8_t command){
	*oled_command_addr = command;
}

void oled_write_data(uint8_t data){
	*oled_data_addr = data;
     7f6:	a0 91 0c 01 	lds	r26, 0x010C
     7fa:	b0 91 0d 01 	lds	r27, 0x010D
     7fe:	9c 93       	st	X, r25
		*oled_command_addr = 0x10 + (column * (FONTWIDTH)>>4);
	}
}

void oled_print_char(char ch){
	for (uint8_t i = 0; i<FONTWIDTH; i++) {
     800:	8f 5f       	subi	r24, 0xFF	; 255
     802:	31 96       	adiw	r30, 0x01	; 1
     804:	88 30       	cpi	r24, 0x08	; 8
     806:	b1 f7       	brne	.-20     	; 0x7f4 <oled_print_char+0x10>
		oled_write_data(pgm_read_byte(&font[ch - FONTOFFSET][i]));
	}
}
     808:	08 95       	ret

0000080a <oled_goto_page>:
void oled_back(){
	
}

void oled_goto_page(unsigned int page) {
	oled_write_command(0xB0 + page);
     80a:	90 eb       	ldi	r25, 0xB0	; 176
     80c:	98 0f       	add	r25, r24
	_delay_ms(800);
	oled_clear_screen();
}

void oled_write_command(uint8_t command){
	*oled_command_addr = command;
     80e:	e0 91 0e 01 	lds	r30, 0x010E
     812:	f0 91 0f 01 	lds	r31, 0x010F
     816:	90 83       	st	Z, r25
	
}

void oled_goto_page(unsigned int page) {
	oled_write_command(0xB0 + page);
	global_page = page;
     818:	80 93 95 03 	sts	0x0395, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     81c:	80 e1       	ldi	r24, 0x10	; 16
     81e:	8a 95       	dec	r24
     820:	f1 f7       	brne	.-4      	; 0x81e <oled_goto_page+0x14>
     822:	00 c0       	rjmp	.+0      	; 0x824 <oled_goto_page+0x1a>
     824:	08 95       	ret

00000826 <oled_clear_line>:
	_delay_us(50);
}

void oled_clear_line(){
     826:	80 e8       	ldi	r24, 0x80	; 128
     828:	90 e0       	ldi	r25, 0x00	; 0
void oled_write_command(uint8_t command){
	*oled_command_addr = command;
}

void oled_write_data(uint8_t data){
	*oled_data_addr = data;
     82a:	e0 91 0c 01 	lds	r30, 0x010C
     82e:	f0 91 0d 01 	lds	r31, 0x010D
     832:	10 82       	st	Z, r1
     834:	01 97       	sbiw	r24, 0x01	; 1
	global_page = page;
	_delay_us(50);
}

void oled_clear_line(){
	for (int i = 0; i<128; i++) {
     836:	00 97       	sbiw	r24, 0x00	; 0
     838:	c1 f7       	brne	.-16     	; 0x82a <oled_clear_line+0x4>
		oled_write_data(0b00000000);
	}
}
     83a:	08 95       	ret

0000083c <oled_clear_screen>:

void oled_clear_screen() {
     83c:	cf 93       	push	r28
     83e:	df 93       	push	r29
     840:	c0 e0       	ldi	r28, 0x00	; 0
     842:	d0 e0       	ldi	r29, 0x00	; 0
	for (uint8_t i = 0; i<8; i++) {
		oled_goto_page(i);
     844:	ce 01       	movw	r24, r28
     846:	0e 94 05 04 	call	0x80a	; 0x80a <oled_goto_page>
		oled_clear_line();
     84a:	0e 94 13 04 	call	0x826	; 0x826 <oled_clear_line>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     84e:	83 ed       	ldi	r24, 0xD3	; 211
     850:	90 e3       	ldi	r25, 0x30	; 48
     852:	01 97       	sbiw	r24, 0x01	; 1
     854:	f1 f7       	brne	.-4      	; 0x852 <oled_clear_screen+0x16>
     856:	00 c0       	rjmp	.+0      	; 0x858 <oled_clear_screen+0x1c>
     858:	00 00       	nop
     85a:	21 96       	adiw	r28, 0x01	; 1
		oled_write_data(0b00000000);
	}
}

void oled_clear_screen() {
	for (uint8_t i = 0; i<8; i++) {
     85c:	c8 30       	cpi	r28, 0x08	; 8
     85e:	d1 05       	cpc	r29, r1
     860:	89 f7       	brne	.-30     	; 0x844 <oled_clear_screen+0x8>
		oled_goto_page(i);
		oled_clear_line();
		_delay_ms(50);
	}
}
     862:	df 91       	pop	r29
     864:	cf 91       	pop	r28
     866:	08 95       	ret

00000868 <oled_pos>:

void oled_pos(unsigned int row, unsigned int column){
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
     86c:	eb 01       	movw	r28, r22
	oled_goto_page(row);
     86e:	0e 94 05 04 	call	0x80a	; 0x80a <oled_goto_page>
	if(column < (128/FONTWIDTH)){
     872:	c0 31       	cpi	r28, 0x10	; 16
     874:	d1 05       	cpc	r29, r1
     876:	e8 f4       	brcc	.+58     	; 0x8b2 <oled_pos+0x4a>
		//Save column program goes to
		global_col = column * FONTWIDTH;
     878:	8c 2f       	mov	r24, r28
     87a:	88 0f       	add	r24, r24
     87c:	88 0f       	add	r24, r24
     87e:	88 0f       	add	r24, r24
     880:	80 93 96 03 	sts	0x0396, r24
		//Set lower column address
		*oled_command_addr = 0x00 + (column * (FONTWIDTH)>>4);
     884:	e0 91 0e 01 	lds	r30, 0x010E
     888:	f0 91 0f 01 	lds	r31, 0x010F
     88c:	cc 0f       	add	r28, r28
     88e:	dd 1f       	adc	r29, r29
     890:	cc 0f       	add	r28, r28
     892:	dd 1f       	adc	r29, r29
     894:	cc 0f       	add	r28, r28
     896:	dd 1f       	adc	r29, r29
     898:	d2 95       	swap	r29
     89a:	c2 95       	swap	r28
     89c:	cf 70       	andi	r28, 0x0F	; 15
     89e:	cd 27       	eor	r28, r29
     8a0:	df 70       	andi	r29, 0x0F	; 15
     8a2:	cd 27       	eor	r28, r29
     8a4:	c0 83       	st	Z, r28
		//Set higher column address                                                                                                                                                                                                                                                                                                                                                                     
		*oled_command_addr = 0x10 + (column * (FONTWIDTH)>>4);
     8a6:	e0 91 0e 01 	lds	r30, 0x010E
     8aa:	f0 91 0f 01 	lds	r31, 0x010F
     8ae:	c0 5f       	subi	r28, 0xF0	; 240
     8b0:	c0 83       	st	Z, r28
	}
}
     8b2:	df 91       	pop	r29
     8b4:	cf 91       	pop	r28
     8b6:	08 95       	ret

000008b8 <oled_printf>:
	for (uint8_t i = 0; i<FONTWIDTH; i++) {
		oled_write_data(pgm_read_byte(&font[ch - FONTOFFSET][i]));
	}
}

void oled_printf(char* fmt, ...){
     8b8:	cf 93       	push	r28
     8ba:	df 93       	push	r29
     8bc:	cd b7       	in	r28, 0x3d	; 61
     8be:	de b7       	in	r29, 0x3e	; 62
     8c0:	fe 01       	movw	r30, r28
     8c2:	35 96       	adiw	r30, 0x05	; 5
     8c4:	61 91       	ld	r22, Z+
     8c6:	71 91       	ld	r23, Z+
	va_list v;
	va_start(v, fmt);
	vfprintf(&oled_stdout, fmt, v);
     8c8:	af 01       	movw	r20, r30
     8ca:	80 e1       	ldi	r24, 0x10	; 16
     8cc:	91 e0       	ldi	r25, 0x01	; 1
     8ce:	0e 94 8f 08 	call	0x111e	; 0x111e <vfprintf>
	va_end(v);
}
     8d2:	df 91       	pop	r29
     8d4:	cf 91       	pop	r28
     8d6:	08 95       	ret

000008d8 <oled_init>:
	_delay_ms(800);
	oled_clear_screen();
}

void oled_write_command(uint8_t command){
	*oled_command_addr = command;
     8d8:	e0 91 0e 01 	lds	r30, 0x010E
     8dc:	f0 91 0f 01 	lds	r31, 0x010F
     8e0:	8e ea       	ldi	r24, 0xAE	; 174
     8e2:	80 83       	st	Z, r24
     8e4:	e0 91 0e 01 	lds	r30, 0x010E
     8e8:	f0 91 0f 01 	lds	r31, 0x010F
     8ec:	81 ea       	ldi	r24, 0xA1	; 161
     8ee:	80 83       	st	Z, r24
     8f0:	e0 91 0e 01 	lds	r30, 0x010E
     8f4:	f0 91 0f 01 	lds	r31, 0x010F
     8f8:	8a ed       	ldi	r24, 0xDA	; 218
     8fa:	80 83       	st	Z, r24
     8fc:	e0 91 0e 01 	lds	r30, 0x010E
     900:	f0 91 0f 01 	lds	r31, 0x010F
     904:	82 e1       	ldi	r24, 0x12	; 18
     906:	80 83       	st	Z, r24
     908:	e0 91 0e 01 	lds	r30, 0x010E
     90c:	f0 91 0f 01 	lds	r31, 0x010F
     910:	88 ec       	ldi	r24, 0xC8	; 200
     912:	80 83       	st	Z, r24
     914:	e0 91 0e 01 	lds	r30, 0x010E
     918:	f0 91 0f 01 	lds	r31, 0x010F
     91c:	88 ea       	ldi	r24, 0xA8	; 168
     91e:	80 83       	st	Z, r24
     920:	e0 91 0e 01 	lds	r30, 0x010E
     924:	f0 91 0f 01 	lds	r31, 0x010F
     928:	8f e3       	ldi	r24, 0x3F	; 63
     92a:	80 83       	st	Z, r24
     92c:	e0 91 0e 01 	lds	r30, 0x010E
     930:	f0 91 0f 01 	lds	r31, 0x010F
     934:	85 ed       	ldi	r24, 0xD5	; 213
     936:	80 83       	st	Z, r24
     938:	e0 91 0e 01 	lds	r30, 0x010E
     93c:	f0 91 0f 01 	lds	r31, 0x010F
     940:	80 e8       	ldi	r24, 0x80	; 128
     942:	80 83       	st	Z, r24
     944:	e0 91 0e 01 	lds	r30, 0x010E
     948:	f0 91 0f 01 	lds	r31, 0x010F
     94c:	81 e8       	ldi	r24, 0x81	; 129
     94e:	80 83       	st	Z, r24
     950:	e0 91 0e 01 	lds	r30, 0x010E
     954:	f0 91 0f 01 	lds	r31, 0x010F
     958:	80 e5       	ldi	r24, 0x50	; 80
     95a:	80 83       	st	Z, r24
     95c:	e0 91 0e 01 	lds	r30, 0x010E
     960:	f0 91 0f 01 	lds	r31, 0x010F
     964:	89 ed       	ldi	r24, 0xD9	; 217
     966:	80 83       	st	Z, r24
     968:	e0 91 0e 01 	lds	r30, 0x010E
     96c:	f0 91 0f 01 	lds	r31, 0x010F
     970:	81 e2       	ldi	r24, 0x21	; 33
     972:	80 83       	st	Z, r24
     974:	e0 91 0e 01 	lds	r30, 0x010E
     978:	f0 91 0f 01 	lds	r31, 0x010F
     97c:	80 e2       	ldi	r24, 0x20	; 32
     97e:	80 83       	st	Z, r24
     980:	e0 91 0e 01 	lds	r30, 0x010E
     984:	f0 91 0f 01 	lds	r31, 0x010F
     988:	82 e0       	ldi	r24, 0x02	; 2
     98a:	80 83       	st	Z, r24
     98c:	e0 91 0e 01 	lds	r30, 0x010E
     990:	f0 91 0f 01 	lds	r31, 0x010F
     994:	8b ed       	ldi	r24, 0xDB	; 219
     996:	80 83       	st	Z, r24
     998:	e0 91 0e 01 	lds	r30, 0x010E
     99c:	f0 91 0f 01 	lds	r31, 0x010F
     9a0:	80 e3       	ldi	r24, 0x30	; 48
     9a2:	80 83       	st	Z, r24
     9a4:	e0 91 0e 01 	lds	r30, 0x010E
     9a8:	f0 91 0f 01 	lds	r31, 0x010F
     9ac:	8d ea       	ldi	r24, 0xAD	; 173
     9ae:	80 83       	st	Z, r24
     9b0:	e0 91 0e 01 	lds	r30, 0x010E
     9b4:	f0 91 0f 01 	lds	r31, 0x010F
     9b8:	10 82       	st	Z, r1
     9ba:	e0 91 0e 01 	lds	r30, 0x010E
     9be:	f0 91 0f 01 	lds	r31, 0x010F
     9c2:	84 ea       	ldi	r24, 0xA4	; 164
     9c4:	80 83       	st	Z, r24
     9c6:	e0 91 0e 01 	lds	r30, 0x010E
     9ca:	f0 91 0f 01 	lds	r31, 0x010F
     9ce:	86 ea       	ldi	r24, 0xA6	; 166
     9d0:	80 83       	st	Z, r24
     9d2:	e0 91 0e 01 	lds	r30, 0x010E
     9d6:	f0 91 0f 01 	lds	r31, 0x010F
     9da:	8f ea       	ldi	r24, 0xAF	; 175
     9dc:	80 83       	st	Z, r24
	oled_write_command(0x00);
	oled_write_command(0xa4);    //out follows RAM content
	oled_write_command(0xa6);    //set normal display
	oled_write_command(0xaf);    // display on
	
	oled_clear_screen();
     9de:	0e 94 1e 04 	call	0x83c	; 0x83c <oled_clear_screen>
	oled_pos(2,3);
     9e2:	63 e0       	ldi	r22, 0x03	; 3
     9e4:	70 e0       	ldi	r23, 0x00	; 0
     9e6:	82 e0       	ldi	r24, 0x02	; 2
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	0e 94 34 04 	call	0x868	; 0x868 <oled_pos>
	oled_printf(" #SWAG");
     9ee:	8f e5       	ldi	r24, 0x5F	; 95
     9f0:	91 e0       	ldi	r25, 0x01	; 1
     9f2:	9f 93       	push	r25
     9f4:	8f 93       	push	r24
     9f6:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <oled_printf>
	oled_pos(3,7);
     9fa:	67 e0       	ldi	r22, 0x07	; 7
     9fc:	70 e0       	ldi	r23, 0x00	; 0
     9fe:	83 e0       	ldi	r24, 0x03	; 3
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	0e 94 34 04 	call	0x868	; 0x868 <oled_pos>
	oled_printf("  4");
     a06:	86 e6       	ldi	r24, 0x66	; 102
     a08:	91 e0       	ldi	r25, 0x01	; 1
     a0a:	9f 93       	push	r25
     a0c:	8f 93       	push	r24
     a0e:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <oled_printf>
	oled_pos(4,9);
     a12:	69 e0       	ldi	r22, 0x09	; 9
     a14:	70 e0       	ldi	r23, 0x00	; 0
     a16:	84 e0       	ldi	r24, 0x04	; 4
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	0e 94 34 04 	call	0x868	; 0x868 <oled_pos>
	oled_printf(" LYFE");
     a1e:	8a e6       	ldi	r24, 0x6A	; 106
     a20:	91 e0       	ldi	r25, 0x01	; 1
     a22:	9f 93       	push	r25
     a24:	8f 93       	push	r24
     a26:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <oled_printf>
     a2a:	2f ef       	ldi	r18, 0xFF	; 255
     a2c:	80 e7       	ldi	r24, 0x70	; 112
     a2e:	92 e0       	ldi	r25, 0x02	; 2
     a30:	21 50       	subi	r18, 0x01	; 1
     a32:	80 40       	sbci	r24, 0x00	; 0
     a34:	90 40       	sbci	r25, 0x00	; 0
     a36:	e1 f7       	brne	.-8      	; 0xa30 <oled_init+0x158>
     a38:	00 c0       	rjmp	.+0      	; 0xa3a <oled_init+0x162>
     a3a:	00 00       	nop
	_delay_ms(800);
	oled_clear_screen();
     a3c:	0e 94 1e 04 	call	0x83c	; 0x83c <oled_clear_screen>
     a40:	0f 90       	pop	r0
     a42:	0f 90       	pop	r0
     a44:	0f 90       	pop	r0
     a46:	0f 90       	pop	r0
     a48:	0f 90       	pop	r0
     a4a:	0f 90       	pop	r0
     a4c:	08 95       	ret

00000a4e <oled_get_arrow_page>:

//Arrow functions

uint8_t oled_get_arrow_page(){
	return arrow_global;
}
     a4e:	80 91 90 03 	lds	r24, 0x0390
     a52:	08 95       	ret

00000a54 <oled_print_arrow>:

void oled_print_arrow(uint8_t row, uint8_t col){
	arrow_global = row;
     a54:	80 93 90 03 	sts	0x0390, r24
	oled_pos(row, col);
     a58:	70 e0       	ldi	r23, 0x00	; 0
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	0e 94 34 04 	call	0x868	; 0x868 <oled_pos>
void oled_write_command(uint8_t command){
	*oled_command_addr = command;
}

void oled_write_data(uint8_t data){
	*oled_data_addr = data;
     a60:	e0 91 0c 01 	lds	r30, 0x010C
     a64:	f0 91 0d 01 	lds	r31, 0x010D
     a68:	88 e1       	ldi	r24, 0x18	; 24
     a6a:	80 83       	st	Z, r24
     a6c:	e0 91 0c 01 	lds	r30, 0x010C
     a70:	f0 91 0d 01 	lds	r31, 0x010D
     a74:	80 83       	st	Z, r24
     a76:	e0 91 0c 01 	lds	r30, 0x010C
     a7a:	f0 91 0d 01 	lds	r31, 0x010D
     a7e:	9e e7       	ldi	r25, 0x7E	; 126
     a80:	90 83       	st	Z, r25
     a82:	e0 91 0c 01 	lds	r30, 0x010C
     a86:	f0 91 0d 01 	lds	r31, 0x010D
     a8a:	9c e3       	ldi	r25, 0x3C	; 60
     a8c:	90 83       	st	Z, r25
     a8e:	e0 91 0c 01 	lds	r30, 0x010C
     a92:	f0 91 0d 01 	lds	r31, 0x010D
     a96:	80 83       	st	Z, r24
     a98:	08 95       	ret

00000a9a <oled_clear_arrow>:
	oled_write_data(0b00111100);
	oled_write_data(0b00011000);
}

void oled_clear_arrow(uint8_t row, uint8_t col){
	oled_pos(row, col);
     a9a:	70 e0       	ldi	r23, 0x00	; 0
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	0e 94 34 04 	call	0x868	; 0x868 <oled_pos>
void oled_write_command(uint8_t command){
	*oled_command_addr = command;
}

void oled_write_data(uint8_t data){
	*oled_data_addr = data;
     aa2:	e0 91 0c 01 	lds	r30, 0x010C
     aa6:	f0 91 0d 01 	lds	r31, 0x010D
     aaa:	10 82       	st	Z, r1
     aac:	e0 91 0c 01 	lds	r30, 0x010C
     ab0:	f0 91 0d 01 	lds	r31, 0x010D
     ab4:	10 82       	st	Z, r1
     ab6:	e0 91 0c 01 	lds	r30, 0x010C
     aba:	f0 91 0d 01 	lds	r31, 0x010D
     abe:	10 82       	st	Z, r1
     ac0:	e0 91 0c 01 	lds	r30, 0x010C
     ac4:	f0 91 0d 01 	lds	r31, 0x010D
     ac8:	10 82       	st	Z, r1
     aca:	e0 91 0c 01 	lds	r30, 0x010C
     ace:	f0 91 0d 01 	lds	r31, 0x010D
     ad2:	10 82       	st	Z, r1
     ad4:	08 95       	ret

00000ad6 <oled_move_arrow>:
	oled_write_data(0b00000000);
	oled_write_data(0b00000000);
}

void oled_move_arrow(signed int joystick_Y, unsigned int menu_min, unsigned int menu_max){
	if(joystick_Y < 0 && arrow_global < menu_max) {
     ad6:	99 23       	and	r25, r25
     ad8:	a4 f4       	brge	.+40     	; 0xb02 <oled_move_arrow+0x2c>
     ada:	e0 91 90 03 	lds	r30, 0x0390
     ade:	2e 2f       	mov	r18, r30
     ae0:	30 e0       	ldi	r19, 0x00	; 0
     ae2:	24 17       	cp	r18, r20
     ae4:	35 07       	cpc	r19, r21
     ae6:	68 f4       	brcc	.+26     	; 0xb02 <oled_move_arrow+0x2c>
		oled_clear_arrow(arrow_global, 0);
     ae8:	60 e0       	ldi	r22, 0x00	; 0
     aea:	8e 2f       	mov	r24, r30
     aec:	0e 94 4d 05 	call	0xa9a	; 0xa9a <oled_clear_arrow>
		arrow_global++;
     af0:	80 91 90 03 	lds	r24, 0x0390
     af4:	8f 5f       	subi	r24, 0xFF	; 255
     af6:	80 93 90 03 	sts	0x0390, r24
		oled_print_arrow(arrow_global, 0);
     afa:	60 e0       	ldi	r22, 0x00	; 0
     afc:	0e 94 2a 05 	call	0xa54	; 0xa54 <oled_print_arrow>
     b00:	08 95       	ret
	} else if (joystick_Y > 0 && arrow_global > menu_min) {
     b02:	18 16       	cp	r1, r24
     b04:	19 06       	cpc	r1, r25
     b06:	94 f4       	brge	.+36     	; 0xb2c <oled_move_arrow+0x56>
     b08:	80 91 90 03 	lds	r24, 0x0390
     b0c:	28 2f       	mov	r18, r24
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	62 17       	cp	r22, r18
     b12:	73 07       	cpc	r23, r19
     b14:	58 f4       	brcc	.+22     	; 0xb2c <oled_move_arrow+0x56>
		oled_clear_arrow(arrow_global, 0);
     b16:	60 e0       	ldi	r22, 0x00	; 0
     b18:	0e 94 4d 05 	call	0xa9a	; 0xa9a <oled_clear_arrow>
		arrow_global--;
     b1c:	80 91 90 03 	lds	r24, 0x0390
     b20:	81 50       	subi	r24, 0x01	; 1
     b22:	80 93 90 03 	sts	0x0390, r24
		oled_print_arrow(arrow_global, 0);
     b26:	60 e0       	ldi	r22, 0x00	; 0
     b28:	0e 94 2a 05 	call	0xa54	; 0xa54 <oled_print_arrow>
     b2c:	08 95       	ret

00000b2e <oled_arrow_handler>:
	}
}

unsigned int oled_arrow_handler(signed int joystick_Y, unsigned int menu_min, unsigned int menu_max){
	oled_move_arrow(joystick_Y, menu_min, menu_max);
     b2e:	0e 94 6b 05 	call	0xad6	; 0xad6 <oled_move_arrow>
     b32:	2f e9       	ldi	r18, 0x9F	; 159
     b34:	86 e8       	ldi	r24, 0x86	; 134
     b36:	91 e0       	ldi	r25, 0x01	; 1
     b38:	21 50       	subi	r18, 0x01	; 1
     b3a:	80 40       	sbci	r24, 0x00	; 0
     b3c:	90 40       	sbci	r25, 0x00	; 0
     b3e:	e1 f7       	brne	.-8      	; 0xb38 <oled_arrow_handler+0xa>
     b40:	00 c0       	rjmp	.+0      	; 0xb42 <oled_arrow_handler+0x14>
     b42:	00 00       	nop
	_delay_ms(500);
	return arrow_global;
     b44:	80 91 90 03 	lds	r24, 0x0390
}
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	08 95       	ret

00000b4c <SRAM_test>:
	if (address_offset > 0x100) { return 0; }
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	return ext_ram[address_offset];
}

void SRAM_test(void) {
     b4c:	cf 92       	push	r12
     b4e:	df 92       	push	r13
     b50:	ef 92       	push	r14
     b52:	ff 92       	push	r15
     b54:	0f 93       	push	r16
     b56:	1f 93       	push	r17
     b58:	cf 93       	push	r28
     b5a:	df 93       	push	r29
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size       = 0x800;
	uint16_t write_errors       = 0;
	uint16_t retrieval_errors   = 0;

	oled_clear_screen();
     b5c:	0e 94 1e 04 	call	0x83c	; 0x83c <oled_clear_screen>
	oled_pos(3,2);
     b60:	62 e0       	ldi	r22, 0x02	; 2
     b62:	70 e0       	ldi	r23, 0x00	; 0
     b64:	83 e0       	ldi	r24, 0x03	; 3
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	0e 94 34 04 	call	0x868	; 0x868 <oled_pos>
	oled_printf("TESTING SRAM");
     b6c:	80 e7       	ldi	r24, 0x70	; 112
     b6e:	91 e0       	ldi	r25, 0x01	; 1
     b70:	9f 93       	push	r25
     b72:	8f 93       	push	r24
     b74:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <oled_printf>
	printf("\nStarting SRAM test...\n");
     b78:	8d e7       	ldi	r24, 0x7D	; 125
     b7a:	91 e0       	ldi	r25, 0x01	; 1
     b7c:	0e 94 62 08 	call	0x10c4	; 0x10c4 <puts>

	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
     b80:	0e 94 3e 08 	call	0x107c	; 0x107c <rand>
     b84:	6c 01       	movw	r12, r24

	// Write phase: Immediately check that the correct value was stored
	srand(seed);
     b86:	0e 94 43 08 	call	0x1086	; 0x1086 <srand>
     b8a:	0f 90       	pop	r0
     b8c:	0f 90       	pop	r0
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     b8e:	c0 e0       	ldi	r28, 0x00	; 0
     b90:	d0 e0       	ldi	r29, 0x00	; 0
}

void SRAM_test(void) {
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size       = 0x800;
	uint16_t write_errors       = 0;
     b92:	00 e0       	ldi	r16, 0x00	; 0
     b94:	10 e0       	ldi	r17, 0x00	; 0
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		ext_ram[i] = some_value;
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
     b96:	0f 2e       	mov	r0, r31
     b98:	f4 e9       	ldi	r31, 0x94	; 148
     b9a:	ef 2e       	mov	r14, r31
     b9c:	f1 e0       	ldi	r31, 0x01	; 1
     b9e:	ff 2e       	mov	r15, r31
     ba0:	f0 2d       	mov	r31, r0
	uint16_t seed = rand();

	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     ba2:	0e 94 3e 08 	call	0x107c	; 0x107c <rand>
     ba6:	fe 01       	movw	r30, r28
     ba8:	f8 5e       	subi	r31, 0xE8	; 232
		ext_ram[i] = some_value;
     baa:	80 83       	st	Z, r24
		uint8_t retreived_value = ext_ram[i];
     bac:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     bae:	28 17       	cp	r18, r24
     bb0:	a9 f0       	breq	.+42     	; 0xbdc <SRAM_test+0x90>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
     bb2:	99 27       	eor	r25, r25
     bb4:	9f 93       	push	r25
     bb6:	8f 93       	push	r24
     bb8:	1f 92       	push	r1
     bba:	2f 93       	push	r18
     bbc:	df 93       	push	r29
     bbe:	cf 93       	push	r28
     bc0:	ff 92       	push	r15
     bc2:	ef 92       	push	r14
     bc4:	0e 94 4e 08 	call	0x109c	; 0x109c <printf>
			write_errors++;
     bc8:	0f 5f       	subi	r16, 0xFF	; 255
     bca:	1f 4f       	sbci	r17, 0xFF	; 255
     bcc:	8d b7       	in	r24, 0x3d	; 61
     bce:	9e b7       	in	r25, 0x3e	; 62
     bd0:	08 96       	adiw	r24, 0x08	; 8
     bd2:	0f b6       	in	r0, 0x3f	; 63
     bd4:	f8 94       	cli
     bd6:	9e bf       	out	0x3e, r25	; 62
     bd8:	0f be       	out	0x3f, r0	; 63
     bda:	8d bf       	out	0x3d, r24	; 61
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();

	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     bdc:	21 96       	adiw	r28, 0x01	; 1
     bde:	c1 15       	cp	r28, r1
     be0:	98 e0       	ldi	r25, 0x08	; 8
     be2:	d9 07       	cpc	r29, r25
     be4:	f1 f6       	brne	.-68     	; 0xba2 <SRAM_test+0x56>
			write_errors++;
		}
	}

	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);    // reset the PRNG to the state it had before the write phase
     be6:	c6 01       	movw	r24, r12
     be8:	0e 94 43 08 	call	0x1086	; 0x1086 <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     bec:	c0 e0       	ldi	r28, 0x00	; 0
     bee:	d0 e0       	ldi	r29, 0x00	; 0

void SRAM_test(void) {
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size       = 0x800;
	uint16_t write_errors       = 0;
	uint16_t retrieval_errors   = 0;
     bf0:	e1 2c       	mov	r14, r1
     bf2:	f1 2c       	mov	r15, r1
	srand(seed);    // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
     bf4:	0f 2e       	mov	r0, r31
     bf6:	fd ec       	ldi	r31, 0xCD	; 205
     bf8:	cf 2e       	mov	r12, r31
     bfa:	f1 e0       	ldi	r31, 0x01	; 1
     bfc:	df 2e       	mov	r13, r31
     bfe:	f0 2d       	mov	r31, r0
	}

	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);    // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     c00:	0e 94 3e 08 	call	0x107c	; 0x107c <rand>
     c04:	fe 01       	movw	r30, r28
     c06:	f8 5e       	subi	r31, 0xE8	; 232
		uint8_t retreived_value = ext_ram[i];
     c08:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     c0a:	28 17       	cp	r18, r24
     c0c:	b1 f0       	breq	.+44     	; 0xc3a <SRAM_test+0xee>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
     c0e:	99 27       	eor	r25, r25
     c10:	9f 93       	push	r25
     c12:	8f 93       	push	r24
     c14:	1f 92       	push	r1
     c16:	2f 93       	push	r18
     c18:	df 93       	push	r29
     c1a:	cf 93       	push	r28
     c1c:	df 92       	push	r13
     c1e:	cf 92       	push	r12
     c20:	0e 94 4e 08 	call	0x109c	; 0x109c <printf>
			retrieval_errors++;
     c24:	9f ef       	ldi	r25, 0xFF	; 255
     c26:	e9 1a       	sub	r14, r25
     c28:	f9 0a       	sbc	r15, r25
     c2a:	8d b7       	in	r24, 0x3d	; 61
     c2c:	9e b7       	in	r25, 0x3e	; 62
     c2e:	08 96       	adiw	r24, 0x08	; 8
     c30:	0f b6       	in	r0, 0x3f	; 63
     c32:	f8 94       	cli
     c34:	9e bf       	out	0x3e, r25	; 62
     c36:	0f be       	out	0x3f, r0	; 63
     c38:	8d bf       	out	0x3d, r24	; 61
		}
	}

	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);    // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     c3a:	21 96       	adiw	r28, 0x01	; 1
     c3c:	c1 15       	cp	r28, r1
     c3e:	98 e0       	ldi	r25, 0x08	; 8
     c40:	d9 07       	cpc	r29, r25
     c42:	f1 f6       	brne	.-68     	; 0xc00 <SRAM_test+0xb4>
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	if (retrieval_errors != 0 || write_errors != 0) { 
     c44:	e1 14       	cp	r14, r1
     c46:	f1 04       	cpc	r15, r1
     c48:	19 f4       	brne	.+6      	; 0xc50 <SRAM_test+0x104>
     c4a:	01 15       	cp	r16, r1
     c4c:	11 05       	cpc	r17, r1
     c4e:	71 f1       	breq	.+92     	; 0xcac <SRAM_test+0x160>
		oled_pos(5,0);
     c50:	60 e0       	ldi	r22, 0x00	; 0
     c52:	70 e0       	ldi	r23, 0x00	; 0
     c54:	85 e0       	ldi	r24, 0x05	; 5
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	0e 94 34 04 	call	0x868	; 0x868 <oled_pos>
		oled_printf("R ERRORS:  %4d",retrieval_errors);
     c5c:	ff 92       	push	r15
     c5e:	ef 92       	push	r14
     c60:	8a e0       	ldi	r24, 0x0A	; 10
     c62:	92 e0       	ldi	r25, 0x02	; 2
     c64:	9f 93       	push	r25
     c66:	8f 93       	push	r24
     c68:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <oled_printf>
		oled_pos(6,0);
     c6c:	60 e0       	ldi	r22, 0x00	; 0
     c6e:	70 e0       	ldi	r23, 0x00	; 0
     c70:	86 e0       	ldi	r24, 0x06	; 6
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	0e 94 34 04 	call	0x868	; 0x868 <oled_pos>
		oled_printf("W ERRORS:  %4d",write_errors);
     c78:	1f 93       	push	r17
     c7a:	0f 93       	push	r16
     c7c:	89 e1       	ldi	r24, 0x19	; 25
     c7e:	92 e0       	ldi	r25, 0x02	; 2
     c80:	9f 93       	push	r25
     c82:	8f 93       	push	r24
     c84:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <oled_printf>
     c88:	2f ef       	ldi	r18, 0xFF	; 255
     c8a:	8f ef       	ldi	r24, 0xFF	; 255
     c8c:	9b e3       	ldi	r25, 0x3B	; 59
     c8e:	21 50       	subi	r18, 0x01	; 1
     c90:	80 40       	sbci	r24, 0x00	; 0
     c92:	90 40       	sbci	r25, 0x00	; 0
     c94:	e1 f7       	brne	.-8      	; 0xc8e <SRAM_test+0x142>
     c96:	00 c0       	rjmp	.+0      	; 0xc98 <SRAM_test+0x14c>
     c98:	00 00       	nop
     c9a:	8d b7       	in	r24, 0x3d	; 61
     c9c:	9e b7       	in	r25, 0x3e	; 62
     c9e:	08 96       	adiw	r24, 0x08	; 8
     ca0:	0f b6       	in	r0, 0x3f	; 63
     ca2:	f8 94       	cli
     ca4:	9e bf       	out	0x3e, r25	; 62
     ca6:	0f be       	out	0x3f, r0	; 63
     ca8:	8d bf       	out	0x3d, r24	; 61
     caa:	0e c0       	rjmp	.+28     	; 0xcc8 <SRAM_test+0x17c>
		_delay_ms(4000);
	} else {
		oled_pos(6,4);
     cac:	64 e0       	ldi	r22, 0x04	; 4
     cae:	70 e0       	ldi	r23, 0x00	; 0
     cb0:	86 e0       	ldi	r24, 0x06	; 6
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	0e 94 34 04 	call	0x868	; 0x868 <oled_pos>
		oled_printf("NO ERRORS");
     cb8:	88 e2       	ldi	r24, 0x28	; 40
     cba:	92 e0       	ldi	r25, 0x02	; 2
     cbc:	9f 93       	push	r25
     cbe:	8f 93       	push	r24
     cc0:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <oled_printf>
     cc4:	0f 90       	pop	r0
     cc6:	0f 90       	pop	r0
	}
	printf("SRAM test completed with \n%4d errors in write phase and \n%4d errors in retrieval phase\n\n", write_errors, retrieval_errors);
     cc8:	ff 92       	push	r15
     cca:	ef 92       	push	r14
     ccc:	1f 93       	push	r17
     cce:	0f 93       	push	r16
     cd0:	82 e3       	ldi	r24, 0x32	; 50
     cd2:	92 e0       	ldi	r25, 0x02	; 2
     cd4:	9f 93       	push	r25
     cd6:	8f 93       	push	r24
     cd8:	0e 94 4e 08 	call	0x109c	; 0x109c <printf>
     cdc:	0f 90       	pop	r0
     cde:	0f 90       	pop	r0
     ce0:	0f 90       	pop	r0
     ce2:	0f 90       	pop	r0
     ce4:	0f 90       	pop	r0
     ce6:	0f 90       	pop	r0
     ce8:	df 91       	pop	r29
     cea:	cf 91       	pop	r28
     cec:	1f 91       	pop	r17
     cee:	0f 91       	pop	r16
     cf0:	ff 90       	pop	r15
     cf2:	ef 90       	pop	r14
     cf4:	df 90       	pop	r13
     cf6:	cf 90       	pop	r12
     cf8:	08 95       	ret

00000cfa <SRAM_init>:
#include "SRAM_driver.h"
#include "oled_driver.h"

//Simple setup for SRAM, also tests for correctness
void SRAM_init(){
	MCUCR = 0x80;
     cfa:	80 e8       	ldi	r24, 0x80	; 128
     cfc:	85 bf       	out	0x35, r24	; 53
	DDRA = 0xFF;
     cfe:	8f ef       	ldi	r24, 0xFF	; 255
     d00:	8a bb       	out	0x1a, r24	; 26
	SRAM_test();
     d02:	0e 94 a6 05 	call	0xb4c	; 0xb4c <SRAM_test>
     d06:	08 95       	ret

00000d08 <flash_diode>:
#include "oled_driver.h"
#include "menu.h"

//Simple test, Ex 1, task 6
void flash_diode(){
	oled_clear_screen();
     d08:	0e 94 1e 04 	call	0x83c	; 0x83c <oled_clear_screen>
	oled_pos(2,3);
     d0c:	63 e0       	ldi	r22, 0x03	; 3
     d0e:	70 e0       	ldi	r23, 0x00	; 0
     d10:	82 e0       	ldi	r24, 0x02	; 2
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	0e 94 34 04 	call	0x868	; 0x868 <oled_pos>
	oled_printf("FLASHING");
     d18:	8b e8       	ldi	r24, 0x8B	; 139
     d1a:	92 e0       	ldi	r25, 0x02	; 2
     d1c:	9f 93       	push	r25
     d1e:	8f 93       	push	r24
     d20:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <oled_printf>
	oled_pos(4,4);
     d24:	64 e0       	ldi	r22, 0x04	; 4
     d26:	70 e0       	ldi	r23, 0x00	; 0
     d28:	84 e0       	ldi	r24, 0x04	; 4
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	0e 94 34 04 	call	0x868	; 0x868 <oled_pos>
	oled_printf("DIODE");
     d30:	84 e9       	ldi	r24, 0x94	; 148
     d32:	92 e0       	ldi	r25, 0x02	; 2
     d34:	9f 93       	push	r25
     d36:	8f 93       	push	r24
     d38:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <oled_printf>
     d3c:	0f 90       	pop	r0
     d3e:	0f 90       	pop	r0
     d40:	0f 90       	pop	r0
     d42:	0f 90       	pop	r0
     d44:	84 e1       	ldi	r24, 0x14	; 20
     d46:	90 e0       	ldi	r25, 0x00	; 0
	for (int i = 0; i<20; i++) {
		PORTB |= (1<<PINB0);
     d48:	c0 9a       	sbi	0x18, 0	; 24
     d4a:	e0 e0       	ldi	r30, 0x00	; 0
     d4c:	f0 ef       	ldi	r31, 0xF0	; 240
     d4e:	31 97       	sbiw	r30, 0x01	; 1
     d50:	f1 f7       	brne	.-4      	; 0xd4e <flash_diode+0x46>
		_delay_ms(50);
		PORTB &= ~(1<<PINB0);
     d52:	c0 98       	cbi	0x18, 0	; 24
     d54:	e0 e0       	ldi	r30, 0x00	; 0
     d56:	f0 ef       	ldi	r31, 0xF0	; 240
     d58:	31 97       	sbiw	r30, 0x01	; 1
     d5a:	f1 f7       	brne	.-4      	; 0xd58 <flash_diode+0x50>
     d5c:	01 97       	sbiw	r24, 0x01	; 1
	oled_clear_screen();
	oled_pos(2,3);
	oled_printf("FLASHING");
	oled_pos(4,4);
	oled_printf("DIODE");
	for (int i = 0; i<20; i++) {
     d5e:	00 97       	sbiw	r24, 0x00	; 0
     d60:	99 f7       	brne	.-26     	; 0xd48 <flash_diode+0x40>
		PORTB |= (1<<PINB0);
		_delay_ms(50);
		PORTB &= ~(1<<PINB0);
		_delay_ms(50);
	}
}
     d62:	08 95       	ret

00000d64 <uart_sendChar>:
     d64:	5d 9b       	sbis	0x0b, 5	; 11
     d66:	fe cf       	rjmp	.-4      	; 0xd64 <uart_sendChar>
     d68:	8c b9       	out	0x0c, r24	; 12
     d6a:	08 95       	ret

00000d6c <uart_getChar>:
     d6c:	5f 9b       	sbis	0x0b, 7	; 11
     d6e:	fe cf       	rjmp	.-4      	; 0xd6c <uart_getChar>
     d70:	8c b1       	in	r24, 0x0c	; 12
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	08 95       	ret

00000d76 <uart_init>:
     d76:	89 b9       	out	0x09, r24	; 9
     d78:	88 e1       	ldi	r24, 0x18	; 24
     d7a:	8a b9       	out	0x0a, r24	; 10
     d7c:	8e e1       	ldi	r24, 0x1E	; 30
     d7e:	91 e0       	ldi	r25, 0x01	; 1
     d80:	90 93 9e 03 	sts	0x039E, r25
     d84:	80 93 9d 03 	sts	0x039D, r24
     d88:	90 93 9c 03 	sts	0x039C, r25
     d8c:	80 93 9b 03 	sts	0x039B, r24
     d90:	08 95       	ret

00000d92 <malloc>:
     d92:	cf 93       	push	r28
     d94:	df 93       	push	r29
     d96:	82 30       	cpi	r24, 0x02	; 2
     d98:	91 05       	cpc	r25, r1
     d9a:	10 f4       	brcc	.+4      	; 0xda0 <malloc+0xe>
     d9c:	82 e0       	ldi	r24, 0x02	; 2
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	e0 91 99 03 	lds	r30, 0x0399
     da4:	f0 91 9a 03 	lds	r31, 0x039A
     da8:	20 e0       	ldi	r18, 0x00	; 0
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	a0 e0       	ldi	r26, 0x00	; 0
     dae:	b0 e0       	ldi	r27, 0x00	; 0
     db0:	30 97       	sbiw	r30, 0x00	; 0
     db2:	39 f1       	breq	.+78     	; 0xe02 <malloc+0x70>
     db4:	40 81       	ld	r20, Z
     db6:	51 81       	ldd	r21, Z+1	; 0x01
     db8:	48 17       	cp	r20, r24
     dba:	59 07       	cpc	r21, r25
     dbc:	b8 f0       	brcs	.+46     	; 0xdec <malloc+0x5a>
     dbe:	48 17       	cp	r20, r24
     dc0:	59 07       	cpc	r21, r25
     dc2:	71 f4       	brne	.+28     	; 0xde0 <malloc+0x4e>
     dc4:	82 81       	ldd	r24, Z+2	; 0x02
     dc6:	93 81       	ldd	r25, Z+3	; 0x03
     dc8:	10 97       	sbiw	r26, 0x00	; 0
     dca:	29 f0       	breq	.+10     	; 0xdd6 <malloc+0x44>
     dcc:	13 96       	adiw	r26, 0x03	; 3
     dce:	9c 93       	st	X, r25
     dd0:	8e 93       	st	-X, r24
     dd2:	12 97       	sbiw	r26, 0x02	; 2
     dd4:	2c c0       	rjmp	.+88     	; 0xe2e <malloc+0x9c>
     dd6:	90 93 9a 03 	sts	0x039A, r25
     dda:	80 93 99 03 	sts	0x0399, r24
     dde:	27 c0       	rjmp	.+78     	; 0xe2e <malloc+0x9c>
     de0:	21 15       	cp	r18, r1
     de2:	31 05       	cpc	r19, r1
     de4:	31 f0       	breq	.+12     	; 0xdf2 <malloc+0x60>
     de6:	42 17       	cp	r20, r18
     de8:	53 07       	cpc	r21, r19
     dea:	18 f0       	brcs	.+6      	; 0xdf2 <malloc+0x60>
     dec:	a9 01       	movw	r20, r18
     dee:	db 01       	movw	r26, r22
     df0:	01 c0       	rjmp	.+2      	; 0xdf4 <malloc+0x62>
     df2:	ef 01       	movw	r28, r30
     df4:	9a 01       	movw	r18, r20
     df6:	bd 01       	movw	r22, r26
     df8:	df 01       	movw	r26, r30
     dfa:	02 80       	ldd	r0, Z+2	; 0x02
     dfc:	f3 81       	ldd	r31, Z+3	; 0x03
     dfe:	e0 2d       	mov	r30, r0
     e00:	d7 cf       	rjmp	.-82     	; 0xdb0 <malloc+0x1e>
     e02:	21 15       	cp	r18, r1
     e04:	31 05       	cpc	r19, r1
     e06:	f9 f0       	breq	.+62     	; 0xe46 <malloc+0xb4>
     e08:	28 1b       	sub	r18, r24
     e0a:	39 0b       	sbc	r19, r25
     e0c:	24 30       	cpi	r18, 0x04	; 4
     e0e:	31 05       	cpc	r19, r1
     e10:	80 f4       	brcc	.+32     	; 0xe32 <malloc+0xa0>
     e12:	8a 81       	ldd	r24, Y+2	; 0x02
     e14:	9b 81       	ldd	r25, Y+3	; 0x03
     e16:	61 15       	cp	r22, r1
     e18:	71 05       	cpc	r23, r1
     e1a:	21 f0       	breq	.+8      	; 0xe24 <malloc+0x92>
     e1c:	fb 01       	movw	r30, r22
     e1e:	93 83       	std	Z+3, r25	; 0x03
     e20:	82 83       	std	Z+2, r24	; 0x02
     e22:	04 c0       	rjmp	.+8      	; 0xe2c <malloc+0x9a>
     e24:	90 93 9a 03 	sts	0x039A, r25
     e28:	80 93 99 03 	sts	0x0399, r24
     e2c:	fe 01       	movw	r30, r28
     e2e:	32 96       	adiw	r30, 0x02	; 2
     e30:	44 c0       	rjmp	.+136    	; 0xeba <malloc+0x128>
     e32:	fe 01       	movw	r30, r28
     e34:	e2 0f       	add	r30, r18
     e36:	f3 1f       	adc	r31, r19
     e38:	81 93       	st	Z+, r24
     e3a:	91 93       	st	Z+, r25
     e3c:	22 50       	subi	r18, 0x02	; 2
     e3e:	31 09       	sbc	r19, r1
     e40:	39 83       	std	Y+1, r19	; 0x01
     e42:	28 83       	st	Y, r18
     e44:	3a c0       	rjmp	.+116    	; 0xeba <malloc+0x128>
     e46:	20 91 97 03 	lds	r18, 0x0397
     e4a:	30 91 98 03 	lds	r19, 0x0398
     e4e:	23 2b       	or	r18, r19
     e50:	41 f4       	brne	.+16     	; 0xe62 <malloc+0xd0>
     e52:	20 91 02 01 	lds	r18, 0x0102
     e56:	30 91 03 01 	lds	r19, 0x0103
     e5a:	30 93 98 03 	sts	0x0398, r19
     e5e:	20 93 97 03 	sts	0x0397, r18
     e62:	20 91 00 01 	lds	r18, 0x0100
     e66:	30 91 01 01 	lds	r19, 0x0101
     e6a:	21 15       	cp	r18, r1
     e6c:	31 05       	cpc	r19, r1
     e6e:	41 f4       	brne	.+16     	; 0xe80 <malloc+0xee>
     e70:	2d b7       	in	r18, 0x3d	; 61
     e72:	3e b7       	in	r19, 0x3e	; 62
     e74:	40 91 04 01 	lds	r20, 0x0104
     e78:	50 91 05 01 	lds	r21, 0x0105
     e7c:	24 1b       	sub	r18, r20
     e7e:	35 0b       	sbc	r19, r21
     e80:	e0 91 97 03 	lds	r30, 0x0397
     e84:	f0 91 98 03 	lds	r31, 0x0398
     e88:	e2 17       	cp	r30, r18
     e8a:	f3 07       	cpc	r31, r19
     e8c:	a0 f4       	brcc	.+40     	; 0xeb6 <malloc+0x124>
     e8e:	2e 1b       	sub	r18, r30
     e90:	3f 0b       	sbc	r19, r31
     e92:	28 17       	cp	r18, r24
     e94:	39 07       	cpc	r19, r25
     e96:	78 f0       	brcs	.+30     	; 0xeb6 <malloc+0x124>
     e98:	ac 01       	movw	r20, r24
     e9a:	4e 5f       	subi	r20, 0xFE	; 254
     e9c:	5f 4f       	sbci	r21, 0xFF	; 255
     e9e:	24 17       	cp	r18, r20
     ea0:	35 07       	cpc	r19, r21
     ea2:	48 f0       	brcs	.+18     	; 0xeb6 <malloc+0x124>
     ea4:	4e 0f       	add	r20, r30
     ea6:	5f 1f       	adc	r21, r31
     ea8:	50 93 98 03 	sts	0x0398, r21
     eac:	40 93 97 03 	sts	0x0397, r20
     eb0:	81 93       	st	Z+, r24
     eb2:	91 93       	st	Z+, r25
     eb4:	02 c0       	rjmp	.+4      	; 0xeba <malloc+0x128>
     eb6:	e0 e0       	ldi	r30, 0x00	; 0
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	cf 01       	movw	r24, r30
     ebc:	df 91       	pop	r29
     ebe:	cf 91       	pop	r28
     ec0:	08 95       	ret

00000ec2 <free>:
     ec2:	cf 93       	push	r28
     ec4:	df 93       	push	r29
     ec6:	00 97       	sbiw	r24, 0x00	; 0
     ec8:	09 f4       	brne	.+2      	; 0xecc <free+0xa>
     eca:	87 c0       	rjmp	.+270    	; 0xfda <free+0x118>
     ecc:	fc 01       	movw	r30, r24
     ece:	32 97       	sbiw	r30, 0x02	; 2
     ed0:	13 82       	std	Z+3, r1	; 0x03
     ed2:	12 82       	std	Z+2, r1	; 0x02
     ed4:	c0 91 99 03 	lds	r28, 0x0399
     ed8:	d0 91 9a 03 	lds	r29, 0x039A
     edc:	20 97       	sbiw	r28, 0x00	; 0
     ede:	81 f4       	brne	.+32     	; 0xf00 <free+0x3e>
     ee0:	20 81       	ld	r18, Z
     ee2:	31 81       	ldd	r19, Z+1	; 0x01
     ee4:	28 0f       	add	r18, r24
     ee6:	39 1f       	adc	r19, r25
     ee8:	80 91 97 03 	lds	r24, 0x0397
     eec:	90 91 98 03 	lds	r25, 0x0398
     ef0:	82 17       	cp	r24, r18
     ef2:	93 07       	cpc	r25, r19
     ef4:	79 f5       	brne	.+94     	; 0xf54 <free+0x92>
     ef6:	f0 93 98 03 	sts	0x0398, r31
     efa:	e0 93 97 03 	sts	0x0397, r30
     efe:	6d c0       	rjmp	.+218    	; 0xfda <free+0x118>
     f00:	de 01       	movw	r26, r28
     f02:	20 e0       	ldi	r18, 0x00	; 0
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	ae 17       	cp	r26, r30
     f08:	bf 07       	cpc	r27, r31
     f0a:	50 f4       	brcc	.+20     	; 0xf20 <free+0x5e>
     f0c:	12 96       	adiw	r26, 0x02	; 2
     f0e:	4d 91       	ld	r20, X+
     f10:	5c 91       	ld	r21, X
     f12:	13 97       	sbiw	r26, 0x03	; 3
     f14:	9d 01       	movw	r18, r26
     f16:	41 15       	cp	r20, r1
     f18:	51 05       	cpc	r21, r1
     f1a:	09 f1       	breq	.+66     	; 0xf5e <free+0x9c>
     f1c:	da 01       	movw	r26, r20
     f1e:	f3 cf       	rjmp	.-26     	; 0xf06 <free+0x44>
     f20:	b3 83       	std	Z+3, r27	; 0x03
     f22:	a2 83       	std	Z+2, r26	; 0x02
     f24:	40 81       	ld	r20, Z
     f26:	51 81       	ldd	r21, Z+1	; 0x01
     f28:	84 0f       	add	r24, r20
     f2a:	95 1f       	adc	r25, r21
     f2c:	8a 17       	cp	r24, r26
     f2e:	9b 07       	cpc	r25, r27
     f30:	71 f4       	brne	.+28     	; 0xf4e <free+0x8c>
     f32:	8d 91       	ld	r24, X+
     f34:	9c 91       	ld	r25, X
     f36:	11 97       	sbiw	r26, 0x01	; 1
     f38:	84 0f       	add	r24, r20
     f3a:	95 1f       	adc	r25, r21
     f3c:	02 96       	adiw	r24, 0x02	; 2
     f3e:	91 83       	std	Z+1, r25	; 0x01
     f40:	80 83       	st	Z, r24
     f42:	12 96       	adiw	r26, 0x02	; 2
     f44:	8d 91       	ld	r24, X+
     f46:	9c 91       	ld	r25, X
     f48:	13 97       	sbiw	r26, 0x03	; 3
     f4a:	93 83       	std	Z+3, r25	; 0x03
     f4c:	82 83       	std	Z+2, r24	; 0x02
     f4e:	21 15       	cp	r18, r1
     f50:	31 05       	cpc	r19, r1
     f52:	29 f4       	brne	.+10     	; 0xf5e <free+0x9c>
     f54:	f0 93 9a 03 	sts	0x039A, r31
     f58:	e0 93 99 03 	sts	0x0399, r30
     f5c:	3e c0       	rjmp	.+124    	; 0xfda <free+0x118>
     f5e:	d9 01       	movw	r26, r18
     f60:	13 96       	adiw	r26, 0x03	; 3
     f62:	fc 93       	st	X, r31
     f64:	ee 93       	st	-X, r30
     f66:	12 97       	sbiw	r26, 0x02	; 2
     f68:	4d 91       	ld	r20, X+
     f6a:	5d 91       	ld	r21, X+
     f6c:	a4 0f       	add	r26, r20
     f6e:	b5 1f       	adc	r27, r21
     f70:	ea 17       	cp	r30, r26
     f72:	fb 07       	cpc	r31, r27
     f74:	79 f4       	brne	.+30     	; 0xf94 <free+0xd2>
     f76:	80 81       	ld	r24, Z
     f78:	91 81       	ldd	r25, Z+1	; 0x01
     f7a:	84 0f       	add	r24, r20
     f7c:	95 1f       	adc	r25, r21
     f7e:	02 96       	adiw	r24, 0x02	; 2
     f80:	d9 01       	movw	r26, r18
     f82:	11 96       	adiw	r26, 0x01	; 1
     f84:	9c 93       	st	X, r25
     f86:	8e 93       	st	-X, r24
     f88:	82 81       	ldd	r24, Z+2	; 0x02
     f8a:	93 81       	ldd	r25, Z+3	; 0x03
     f8c:	13 96       	adiw	r26, 0x03	; 3
     f8e:	9c 93       	st	X, r25
     f90:	8e 93       	st	-X, r24
     f92:	12 97       	sbiw	r26, 0x02	; 2
     f94:	e0 e0       	ldi	r30, 0x00	; 0
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	8a 81       	ldd	r24, Y+2	; 0x02
     f9a:	9b 81       	ldd	r25, Y+3	; 0x03
     f9c:	00 97       	sbiw	r24, 0x00	; 0
     f9e:	19 f0       	breq	.+6      	; 0xfa6 <free+0xe4>
     fa0:	fe 01       	movw	r30, r28
     fa2:	ec 01       	movw	r28, r24
     fa4:	f9 cf       	rjmp	.-14     	; 0xf98 <free+0xd6>
     fa6:	ce 01       	movw	r24, r28
     fa8:	02 96       	adiw	r24, 0x02	; 2
     faa:	28 81       	ld	r18, Y
     fac:	39 81       	ldd	r19, Y+1	; 0x01
     fae:	82 0f       	add	r24, r18
     fb0:	93 1f       	adc	r25, r19
     fb2:	20 91 97 03 	lds	r18, 0x0397
     fb6:	30 91 98 03 	lds	r19, 0x0398
     fba:	28 17       	cp	r18, r24
     fbc:	39 07       	cpc	r19, r25
     fbe:	69 f4       	brne	.+26     	; 0xfda <free+0x118>
     fc0:	30 97       	sbiw	r30, 0x00	; 0
     fc2:	29 f4       	brne	.+10     	; 0xfce <free+0x10c>
     fc4:	10 92 9a 03 	sts	0x039A, r1
     fc8:	10 92 99 03 	sts	0x0399, r1
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <free+0x110>
     fce:	13 82       	std	Z+3, r1	; 0x03
     fd0:	12 82       	std	Z+2, r1	; 0x02
     fd2:	d0 93 98 03 	sts	0x0398, r29
     fd6:	c0 93 97 03 	sts	0x0397, r28
     fda:	df 91       	pop	r29
     fdc:	cf 91       	pop	r28
     fde:	08 95       	ret

00000fe0 <do_rand>:
     fe0:	8f 92       	push	r8
     fe2:	9f 92       	push	r9
     fe4:	af 92       	push	r10
     fe6:	bf 92       	push	r11
     fe8:	cf 92       	push	r12
     fea:	df 92       	push	r13
     fec:	ef 92       	push	r14
     fee:	ff 92       	push	r15
     ff0:	cf 93       	push	r28
     ff2:	df 93       	push	r29
     ff4:	ec 01       	movw	r28, r24
     ff6:	68 81       	ld	r22, Y
     ff8:	79 81       	ldd	r23, Y+1	; 0x01
     ffa:	8a 81       	ldd	r24, Y+2	; 0x02
     ffc:	9b 81       	ldd	r25, Y+3	; 0x03
     ffe:	61 15       	cp	r22, r1
    1000:	71 05       	cpc	r23, r1
    1002:	81 05       	cpc	r24, r1
    1004:	91 05       	cpc	r25, r1
    1006:	21 f4       	brne	.+8      	; 0x1010 <do_rand+0x30>
    1008:	64 e2       	ldi	r22, 0x24	; 36
    100a:	79 ed       	ldi	r23, 0xD9	; 217
    100c:	8b e5       	ldi	r24, 0x5B	; 91
    100e:	97 e0       	ldi	r25, 0x07	; 7
    1010:	2d e1       	ldi	r18, 0x1D	; 29
    1012:	33 ef       	ldi	r19, 0xF3	; 243
    1014:	41 e0       	ldi	r20, 0x01	; 1
    1016:	50 e0       	ldi	r21, 0x00	; 0
    1018:	0e 94 07 0b 	call	0x160e	; 0x160e <__divmodsi4>
    101c:	49 01       	movw	r8, r18
    101e:	5a 01       	movw	r10, r20
    1020:	9b 01       	movw	r18, r22
    1022:	ac 01       	movw	r20, r24
    1024:	a7 ea       	ldi	r26, 0xA7	; 167
    1026:	b1 e4       	ldi	r27, 0x41	; 65
    1028:	0e 94 26 0b 	call	0x164c	; 0x164c <__muluhisi3>
    102c:	6b 01       	movw	r12, r22
    102e:	7c 01       	movw	r14, r24
    1030:	ac ee       	ldi	r26, 0xEC	; 236
    1032:	b4 ef       	ldi	r27, 0xF4	; 244
    1034:	a5 01       	movw	r20, r10
    1036:	94 01       	movw	r18, r8
    1038:	0e 94 34 0b 	call	0x1668	; 0x1668 <__mulohisi3>
    103c:	c6 0e       	add	r12, r22
    103e:	d7 1e       	adc	r13, r23
    1040:	e8 1e       	adc	r14, r24
    1042:	f9 1e       	adc	r15, r25
    1044:	f7 fe       	sbrs	r15, 7
    1046:	06 c0       	rjmp	.+12     	; 0x1054 <do_rand+0x74>
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	c8 1a       	sub	r12, r24
    104c:	d1 08       	sbc	r13, r1
    104e:	e1 08       	sbc	r14, r1
    1050:	80 e8       	ldi	r24, 0x80	; 128
    1052:	f8 0a       	sbc	r15, r24
    1054:	c8 82       	st	Y, r12
    1056:	d9 82       	std	Y+1, r13	; 0x01
    1058:	ea 82       	std	Y+2, r14	; 0x02
    105a:	fb 82       	std	Y+3, r15	; 0x03
    105c:	c6 01       	movw	r24, r12
    105e:	9f 77       	andi	r25, 0x7F	; 127
    1060:	df 91       	pop	r29
    1062:	cf 91       	pop	r28
    1064:	ff 90       	pop	r15
    1066:	ef 90       	pop	r14
    1068:	df 90       	pop	r13
    106a:	cf 90       	pop	r12
    106c:	bf 90       	pop	r11
    106e:	af 90       	pop	r10
    1070:	9f 90       	pop	r9
    1072:	8f 90       	pop	r8
    1074:	08 95       	ret

00001076 <rand_r>:
    1076:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <do_rand>
    107a:	08 95       	ret

0000107c <rand>:
    107c:	86 e0       	ldi	r24, 0x06	; 6
    107e:	91 e0       	ldi	r25, 0x01	; 1
    1080:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <do_rand>
    1084:	08 95       	ret

00001086 <srand>:
    1086:	a0 e0       	ldi	r26, 0x00	; 0
    1088:	b0 e0       	ldi	r27, 0x00	; 0
    108a:	80 93 06 01 	sts	0x0106, r24
    108e:	90 93 07 01 	sts	0x0107, r25
    1092:	a0 93 08 01 	sts	0x0108, r26
    1096:	b0 93 09 01 	sts	0x0109, r27
    109a:	08 95       	ret

0000109c <printf>:
    109c:	a0 e0       	ldi	r26, 0x00	; 0
    109e:	b0 e0       	ldi	r27, 0x00	; 0
    10a0:	e4 e5       	ldi	r30, 0x54	; 84
    10a2:	f8 e0       	ldi	r31, 0x08	; 8
    10a4:	0c 94 49 0b 	jmp	0x1692	; 0x1692 <__prologue_saves__+0x20>
    10a8:	fe 01       	movw	r30, r28
    10aa:	35 96       	adiw	r30, 0x05	; 5
    10ac:	61 91       	ld	r22, Z+
    10ae:	71 91       	ld	r23, Z+
    10b0:	af 01       	movw	r20, r30
    10b2:	80 91 9d 03 	lds	r24, 0x039D
    10b6:	90 91 9e 03 	lds	r25, 0x039E
    10ba:	0e 94 8f 08 	call	0x111e	; 0x111e <vfprintf>
    10be:	e2 e0       	ldi	r30, 0x02	; 2
    10c0:	0c 94 65 0b 	jmp	0x16ca	; 0x16ca <__epilogue_restores__+0x20>

000010c4 <puts>:
    10c4:	0f 93       	push	r16
    10c6:	1f 93       	push	r17
    10c8:	cf 93       	push	r28
    10ca:	df 93       	push	r29
    10cc:	e0 91 9d 03 	lds	r30, 0x039D
    10d0:	f0 91 9e 03 	lds	r31, 0x039E
    10d4:	23 81       	ldd	r18, Z+3	; 0x03
    10d6:	21 ff       	sbrs	r18, 1
    10d8:	1b c0       	rjmp	.+54     	; 0x1110 <puts+0x4c>
    10da:	ec 01       	movw	r28, r24
    10dc:	00 e0       	ldi	r16, 0x00	; 0
    10de:	10 e0       	ldi	r17, 0x00	; 0
    10e0:	89 91       	ld	r24, Y+
    10e2:	60 91 9d 03 	lds	r22, 0x039D
    10e6:	70 91 9e 03 	lds	r23, 0x039E
    10ea:	db 01       	movw	r26, r22
    10ec:	18 96       	adiw	r26, 0x08	; 8
    10ee:	ed 91       	ld	r30, X+
    10f0:	fc 91       	ld	r31, X
    10f2:	19 97       	sbiw	r26, 0x09	; 9
    10f4:	88 23       	and	r24, r24
    10f6:	31 f0       	breq	.+12     	; 0x1104 <puts+0x40>
    10f8:	09 95       	icall
    10fa:	89 2b       	or	r24, r25
    10fc:	89 f3       	breq	.-30     	; 0x10e0 <puts+0x1c>
    10fe:	0f ef       	ldi	r16, 0xFF	; 255
    1100:	1f ef       	ldi	r17, 0xFF	; 255
    1102:	ee cf       	rjmp	.-36     	; 0x10e0 <puts+0x1c>
    1104:	8a e0       	ldi	r24, 0x0A	; 10
    1106:	09 95       	icall
    1108:	89 2b       	or	r24, r25
    110a:	11 f4       	brne	.+4      	; 0x1110 <puts+0x4c>
    110c:	c8 01       	movw	r24, r16
    110e:	02 c0       	rjmp	.+4      	; 0x1114 <puts+0x50>
    1110:	8f ef       	ldi	r24, 0xFF	; 255
    1112:	9f ef       	ldi	r25, 0xFF	; 255
    1114:	df 91       	pop	r29
    1116:	cf 91       	pop	r28
    1118:	1f 91       	pop	r17
    111a:	0f 91       	pop	r16
    111c:	08 95       	ret

0000111e <vfprintf>:
    111e:	ac e0       	ldi	r26, 0x0C	; 12
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	e5 e9       	ldi	r30, 0x95	; 149
    1124:	f8 e0       	ldi	r31, 0x08	; 8
    1126:	0c 94 39 0b 	jmp	0x1672	; 0x1672 <__prologue_saves__>
    112a:	7c 01       	movw	r14, r24
    112c:	6b 01       	movw	r12, r22
    112e:	8a 01       	movw	r16, r20
    1130:	fc 01       	movw	r30, r24
    1132:	17 82       	std	Z+7, r1	; 0x07
    1134:	16 82       	std	Z+6, r1	; 0x06
    1136:	83 81       	ldd	r24, Z+3	; 0x03
    1138:	81 ff       	sbrs	r24, 1
    113a:	bd c1       	rjmp	.+890    	; 0x14b6 <vfprintf+0x398>
    113c:	ce 01       	movw	r24, r28
    113e:	01 96       	adiw	r24, 0x01	; 1
    1140:	4c 01       	movw	r8, r24
    1142:	f7 01       	movw	r30, r14
    1144:	93 81       	ldd	r25, Z+3	; 0x03
    1146:	f6 01       	movw	r30, r12
    1148:	93 fd       	sbrc	r25, 3
    114a:	85 91       	lpm	r24, Z+
    114c:	93 ff       	sbrs	r25, 3
    114e:	81 91       	ld	r24, Z+
    1150:	6f 01       	movw	r12, r30
    1152:	88 23       	and	r24, r24
    1154:	09 f4       	brne	.+2      	; 0x1158 <vfprintf+0x3a>
    1156:	ab c1       	rjmp	.+854    	; 0x14ae <vfprintf+0x390>
    1158:	85 32       	cpi	r24, 0x25	; 37
    115a:	39 f4       	brne	.+14     	; 0x116a <vfprintf+0x4c>
    115c:	93 fd       	sbrc	r25, 3
    115e:	85 91       	lpm	r24, Z+
    1160:	93 ff       	sbrs	r25, 3
    1162:	81 91       	ld	r24, Z+
    1164:	6f 01       	movw	r12, r30
    1166:	85 32       	cpi	r24, 0x25	; 37
    1168:	29 f4       	brne	.+10     	; 0x1174 <vfprintf+0x56>
    116a:	b7 01       	movw	r22, r14
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	0e 94 77 0a 	call	0x14ee	; 0x14ee <fputc>
    1172:	e7 cf       	rjmp	.-50     	; 0x1142 <vfprintf+0x24>
    1174:	51 2c       	mov	r5, r1
    1176:	31 2c       	mov	r3, r1
    1178:	20 e0       	ldi	r18, 0x00	; 0
    117a:	20 32       	cpi	r18, 0x20	; 32
    117c:	a0 f4       	brcc	.+40     	; 0x11a6 <vfprintf+0x88>
    117e:	8b 32       	cpi	r24, 0x2B	; 43
    1180:	69 f0       	breq	.+26     	; 0x119c <vfprintf+0x7e>
    1182:	30 f4       	brcc	.+12     	; 0x1190 <vfprintf+0x72>
    1184:	80 32       	cpi	r24, 0x20	; 32
    1186:	59 f0       	breq	.+22     	; 0x119e <vfprintf+0x80>
    1188:	83 32       	cpi	r24, 0x23	; 35
    118a:	69 f4       	brne	.+26     	; 0x11a6 <vfprintf+0x88>
    118c:	20 61       	ori	r18, 0x10	; 16
    118e:	2c c0       	rjmp	.+88     	; 0x11e8 <vfprintf+0xca>
    1190:	8d 32       	cpi	r24, 0x2D	; 45
    1192:	39 f0       	breq	.+14     	; 0x11a2 <vfprintf+0x84>
    1194:	80 33       	cpi	r24, 0x30	; 48
    1196:	39 f4       	brne	.+14     	; 0x11a6 <vfprintf+0x88>
    1198:	21 60       	ori	r18, 0x01	; 1
    119a:	26 c0       	rjmp	.+76     	; 0x11e8 <vfprintf+0xca>
    119c:	22 60       	ori	r18, 0x02	; 2
    119e:	24 60       	ori	r18, 0x04	; 4
    11a0:	23 c0       	rjmp	.+70     	; 0x11e8 <vfprintf+0xca>
    11a2:	28 60       	ori	r18, 0x08	; 8
    11a4:	21 c0       	rjmp	.+66     	; 0x11e8 <vfprintf+0xca>
    11a6:	27 fd       	sbrc	r18, 7
    11a8:	27 c0       	rjmp	.+78     	; 0x11f8 <vfprintf+0xda>
    11aa:	30 ed       	ldi	r19, 0xD0	; 208
    11ac:	38 0f       	add	r19, r24
    11ae:	3a 30       	cpi	r19, 0x0A	; 10
    11b0:	78 f4       	brcc	.+30     	; 0x11d0 <vfprintf+0xb2>
    11b2:	26 ff       	sbrs	r18, 6
    11b4:	06 c0       	rjmp	.+12     	; 0x11c2 <vfprintf+0xa4>
    11b6:	fa e0       	ldi	r31, 0x0A	; 10
    11b8:	5f 9e       	mul	r5, r31
    11ba:	30 0d       	add	r19, r0
    11bc:	11 24       	eor	r1, r1
    11be:	53 2e       	mov	r5, r19
    11c0:	13 c0       	rjmp	.+38     	; 0x11e8 <vfprintf+0xca>
    11c2:	8a e0       	ldi	r24, 0x0A	; 10
    11c4:	38 9e       	mul	r3, r24
    11c6:	30 0d       	add	r19, r0
    11c8:	11 24       	eor	r1, r1
    11ca:	33 2e       	mov	r3, r19
    11cc:	20 62       	ori	r18, 0x20	; 32
    11ce:	0c c0       	rjmp	.+24     	; 0x11e8 <vfprintf+0xca>
    11d0:	8e 32       	cpi	r24, 0x2E	; 46
    11d2:	21 f4       	brne	.+8      	; 0x11dc <vfprintf+0xbe>
    11d4:	26 fd       	sbrc	r18, 6
    11d6:	6b c1       	rjmp	.+726    	; 0x14ae <vfprintf+0x390>
    11d8:	20 64       	ori	r18, 0x40	; 64
    11da:	06 c0       	rjmp	.+12     	; 0x11e8 <vfprintf+0xca>
    11dc:	8c 36       	cpi	r24, 0x6C	; 108
    11de:	11 f4       	brne	.+4      	; 0x11e4 <vfprintf+0xc6>
    11e0:	20 68       	ori	r18, 0x80	; 128
    11e2:	02 c0       	rjmp	.+4      	; 0x11e8 <vfprintf+0xca>
    11e4:	88 36       	cpi	r24, 0x68	; 104
    11e6:	41 f4       	brne	.+16     	; 0x11f8 <vfprintf+0xda>
    11e8:	f6 01       	movw	r30, r12
    11ea:	93 fd       	sbrc	r25, 3
    11ec:	85 91       	lpm	r24, Z+
    11ee:	93 ff       	sbrs	r25, 3
    11f0:	81 91       	ld	r24, Z+
    11f2:	6f 01       	movw	r12, r30
    11f4:	81 11       	cpse	r24, r1
    11f6:	c1 cf       	rjmp	.-126    	; 0x117a <vfprintf+0x5c>
    11f8:	98 2f       	mov	r25, r24
    11fa:	9f 7d       	andi	r25, 0xDF	; 223
    11fc:	95 54       	subi	r25, 0x45	; 69
    11fe:	93 30       	cpi	r25, 0x03	; 3
    1200:	28 f4       	brcc	.+10     	; 0x120c <vfprintf+0xee>
    1202:	0c 5f       	subi	r16, 0xFC	; 252
    1204:	1f 4f       	sbci	r17, 0xFF	; 255
    1206:	ff e3       	ldi	r31, 0x3F	; 63
    1208:	f9 83       	std	Y+1, r31	; 0x01
    120a:	0d c0       	rjmp	.+26     	; 0x1226 <vfprintf+0x108>
    120c:	83 36       	cpi	r24, 0x63	; 99
    120e:	31 f0       	breq	.+12     	; 0x121c <vfprintf+0xfe>
    1210:	83 37       	cpi	r24, 0x73	; 115
    1212:	71 f0       	breq	.+28     	; 0x1230 <vfprintf+0x112>
    1214:	83 35       	cpi	r24, 0x53	; 83
    1216:	09 f0       	breq	.+2      	; 0x121a <vfprintf+0xfc>
    1218:	5b c0       	rjmp	.+182    	; 0x12d0 <vfprintf+0x1b2>
    121a:	22 c0       	rjmp	.+68     	; 0x1260 <vfprintf+0x142>
    121c:	f8 01       	movw	r30, r16
    121e:	80 81       	ld	r24, Z
    1220:	89 83       	std	Y+1, r24	; 0x01
    1222:	0e 5f       	subi	r16, 0xFE	; 254
    1224:	1f 4f       	sbci	r17, 0xFF	; 255
    1226:	44 24       	eor	r4, r4
    1228:	43 94       	inc	r4
    122a:	51 2c       	mov	r5, r1
    122c:	54 01       	movw	r10, r8
    122e:	15 c0       	rjmp	.+42     	; 0x125a <vfprintf+0x13c>
    1230:	38 01       	movw	r6, r16
    1232:	f2 e0       	ldi	r31, 0x02	; 2
    1234:	6f 0e       	add	r6, r31
    1236:	71 1c       	adc	r7, r1
    1238:	f8 01       	movw	r30, r16
    123a:	a0 80       	ld	r10, Z
    123c:	b1 80       	ldd	r11, Z+1	; 0x01
    123e:	26 ff       	sbrs	r18, 6
    1240:	03 c0       	rjmp	.+6      	; 0x1248 <vfprintf+0x12a>
    1242:	65 2d       	mov	r22, r5
    1244:	70 e0       	ldi	r23, 0x00	; 0
    1246:	02 c0       	rjmp	.+4      	; 0x124c <vfprintf+0x12e>
    1248:	6f ef       	ldi	r22, 0xFF	; 255
    124a:	7f ef       	ldi	r23, 0xFF	; 255
    124c:	c5 01       	movw	r24, r10
    124e:	2c 87       	std	Y+12, r18	; 0x0c
    1250:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <strnlen>
    1254:	2c 01       	movw	r4, r24
    1256:	83 01       	movw	r16, r6
    1258:	2c 85       	ldd	r18, Y+12	; 0x0c
    125a:	2f 77       	andi	r18, 0x7F	; 127
    125c:	22 2e       	mov	r2, r18
    125e:	17 c0       	rjmp	.+46     	; 0x128e <vfprintf+0x170>
    1260:	38 01       	movw	r6, r16
    1262:	f2 e0       	ldi	r31, 0x02	; 2
    1264:	6f 0e       	add	r6, r31
    1266:	71 1c       	adc	r7, r1
    1268:	f8 01       	movw	r30, r16
    126a:	a0 80       	ld	r10, Z
    126c:	b1 80       	ldd	r11, Z+1	; 0x01
    126e:	26 ff       	sbrs	r18, 6
    1270:	03 c0       	rjmp	.+6      	; 0x1278 <vfprintf+0x15a>
    1272:	65 2d       	mov	r22, r5
    1274:	70 e0       	ldi	r23, 0x00	; 0
    1276:	02 c0       	rjmp	.+4      	; 0x127c <vfprintf+0x15e>
    1278:	6f ef       	ldi	r22, 0xFF	; 255
    127a:	7f ef       	ldi	r23, 0xFF	; 255
    127c:	c5 01       	movw	r24, r10
    127e:	2c 87       	std	Y+12, r18	; 0x0c
    1280:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <strnlen_P>
    1284:	2c 01       	movw	r4, r24
    1286:	2c 85       	ldd	r18, Y+12	; 0x0c
    1288:	20 68       	ori	r18, 0x80	; 128
    128a:	22 2e       	mov	r2, r18
    128c:	83 01       	movw	r16, r6
    128e:	23 fc       	sbrc	r2, 3
    1290:	1b c0       	rjmp	.+54     	; 0x12c8 <vfprintf+0x1aa>
    1292:	83 2d       	mov	r24, r3
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	48 16       	cp	r4, r24
    1298:	59 06       	cpc	r5, r25
    129a:	b0 f4       	brcc	.+44     	; 0x12c8 <vfprintf+0x1aa>
    129c:	b7 01       	movw	r22, r14
    129e:	80 e2       	ldi	r24, 0x20	; 32
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	0e 94 77 0a 	call	0x14ee	; 0x14ee <fputc>
    12a6:	3a 94       	dec	r3
    12a8:	f4 cf       	rjmp	.-24     	; 0x1292 <vfprintf+0x174>
    12aa:	f5 01       	movw	r30, r10
    12ac:	27 fc       	sbrc	r2, 7
    12ae:	85 91       	lpm	r24, Z+
    12b0:	27 fe       	sbrs	r2, 7
    12b2:	81 91       	ld	r24, Z+
    12b4:	5f 01       	movw	r10, r30
    12b6:	b7 01       	movw	r22, r14
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	0e 94 77 0a 	call	0x14ee	; 0x14ee <fputc>
    12be:	31 10       	cpse	r3, r1
    12c0:	3a 94       	dec	r3
    12c2:	f1 e0       	ldi	r31, 0x01	; 1
    12c4:	4f 1a       	sub	r4, r31
    12c6:	51 08       	sbc	r5, r1
    12c8:	41 14       	cp	r4, r1
    12ca:	51 04       	cpc	r5, r1
    12cc:	71 f7       	brne	.-36     	; 0x12aa <vfprintf+0x18c>
    12ce:	e5 c0       	rjmp	.+458    	; 0x149a <vfprintf+0x37c>
    12d0:	84 36       	cpi	r24, 0x64	; 100
    12d2:	11 f0       	breq	.+4      	; 0x12d8 <vfprintf+0x1ba>
    12d4:	89 36       	cpi	r24, 0x69	; 105
    12d6:	39 f5       	brne	.+78     	; 0x1326 <vfprintf+0x208>
    12d8:	f8 01       	movw	r30, r16
    12da:	27 ff       	sbrs	r18, 7
    12dc:	07 c0       	rjmp	.+14     	; 0x12ec <vfprintf+0x1ce>
    12de:	60 81       	ld	r22, Z
    12e0:	71 81       	ldd	r23, Z+1	; 0x01
    12e2:	82 81       	ldd	r24, Z+2	; 0x02
    12e4:	93 81       	ldd	r25, Z+3	; 0x03
    12e6:	0c 5f       	subi	r16, 0xFC	; 252
    12e8:	1f 4f       	sbci	r17, 0xFF	; 255
    12ea:	08 c0       	rjmp	.+16     	; 0x12fc <vfprintf+0x1de>
    12ec:	60 81       	ld	r22, Z
    12ee:	71 81       	ldd	r23, Z+1	; 0x01
    12f0:	88 27       	eor	r24, r24
    12f2:	77 fd       	sbrc	r23, 7
    12f4:	80 95       	com	r24
    12f6:	98 2f       	mov	r25, r24
    12f8:	0e 5f       	subi	r16, 0xFE	; 254
    12fa:	1f 4f       	sbci	r17, 0xFF	; 255
    12fc:	2f 76       	andi	r18, 0x6F	; 111
    12fe:	b2 2e       	mov	r11, r18
    1300:	97 ff       	sbrs	r25, 7
    1302:	09 c0       	rjmp	.+18     	; 0x1316 <vfprintf+0x1f8>
    1304:	90 95       	com	r25
    1306:	80 95       	com	r24
    1308:	70 95       	com	r23
    130a:	61 95       	neg	r22
    130c:	7f 4f       	sbci	r23, 0xFF	; 255
    130e:	8f 4f       	sbci	r24, 0xFF	; 255
    1310:	9f 4f       	sbci	r25, 0xFF	; 255
    1312:	20 68       	ori	r18, 0x80	; 128
    1314:	b2 2e       	mov	r11, r18
    1316:	2a e0       	ldi	r18, 0x0A	; 10
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	a4 01       	movw	r20, r8
    131c:	0e 94 a9 0a 	call	0x1552	; 0x1552 <__ultoa_invert>
    1320:	a8 2e       	mov	r10, r24
    1322:	a8 18       	sub	r10, r8
    1324:	44 c0       	rjmp	.+136    	; 0x13ae <vfprintf+0x290>
    1326:	85 37       	cpi	r24, 0x75	; 117
    1328:	29 f4       	brne	.+10     	; 0x1334 <vfprintf+0x216>
    132a:	2f 7e       	andi	r18, 0xEF	; 239
    132c:	b2 2e       	mov	r11, r18
    132e:	2a e0       	ldi	r18, 0x0A	; 10
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	25 c0       	rjmp	.+74     	; 0x137e <vfprintf+0x260>
    1334:	f2 2f       	mov	r31, r18
    1336:	f9 7f       	andi	r31, 0xF9	; 249
    1338:	bf 2e       	mov	r11, r31
    133a:	8f 36       	cpi	r24, 0x6F	; 111
    133c:	c1 f0       	breq	.+48     	; 0x136e <vfprintf+0x250>
    133e:	18 f4       	brcc	.+6      	; 0x1346 <vfprintf+0x228>
    1340:	88 35       	cpi	r24, 0x58	; 88
    1342:	79 f0       	breq	.+30     	; 0x1362 <vfprintf+0x244>
    1344:	b4 c0       	rjmp	.+360    	; 0x14ae <vfprintf+0x390>
    1346:	80 37       	cpi	r24, 0x70	; 112
    1348:	19 f0       	breq	.+6      	; 0x1350 <vfprintf+0x232>
    134a:	88 37       	cpi	r24, 0x78	; 120
    134c:	21 f0       	breq	.+8      	; 0x1356 <vfprintf+0x238>
    134e:	af c0       	rjmp	.+350    	; 0x14ae <vfprintf+0x390>
    1350:	2f 2f       	mov	r18, r31
    1352:	20 61       	ori	r18, 0x10	; 16
    1354:	b2 2e       	mov	r11, r18
    1356:	b4 fe       	sbrs	r11, 4
    1358:	0d c0       	rjmp	.+26     	; 0x1374 <vfprintf+0x256>
    135a:	8b 2d       	mov	r24, r11
    135c:	84 60       	ori	r24, 0x04	; 4
    135e:	b8 2e       	mov	r11, r24
    1360:	09 c0       	rjmp	.+18     	; 0x1374 <vfprintf+0x256>
    1362:	24 ff       	sbrs	r18, 4
    1364:	0a c0       	rjmp	.+20     	; 0x137a <vfprintf+0x25c>
    1366:	9f 2f       	mov	r25, r31
    1368:	96 60       	ori	r25, 0x06	; 6
    136a:	b9 2e       	mov	r11, r25
    136c:	06 c0       	rjmp	.+12     	; 0x137a <vfprintf+0x25c>
    136e:	28 e0       	ldi	r18, 0x08	; 8
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	05 c0       	rjmp	.+10     	; 0x137e <vfprintf+0x260>
    1374:	20 e1       	ldi	r18, 0x10	; 16
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	02 c0       	rjmp	.+4      	; 0x137e <vfprintf+0x260>
    137a:	20 e1       	ldi	r18, 0x10	; 16
    137c:	32 e0       	ldi	r19, 0x02	; 2
    137e:	f8 01       	movw	r30, r16
    1380:	b7 fe       	sbrs	r11, 7
    1382:	07 c0       	rjmp	.+14     	; 0x1392 <vfprintf+0x274>
    1384:	60 81       	ld	r22, Z
    1386:	71 81       	ldd	r23, Z+1	; 0x01
    1388:	82 81       	ldd	r24, Z+2	; 0x02
    138a:	93 81       	ldd	r25, Z+3	; 0x03
    138c:	0c 5f       	subi	r16, 0xFC	; 252
    138e:	1f 4f       	sbci	r17, 0xFF	; 255
    1390:	06 c0       	rjmp	.+12     	; 0x139e <vfprintf+0x280>
    1392:	60 81       	ld	r22, Z
    1394:	71 81       	ldd	r23, Z+1	; 0x01
    1396:	80 e0       	ldi	r24, 0x00	; 0
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	0e 5f       	subi	r16, 0xFE	; 254
    139c:	1f 4f       	sbci	r17, 0xFF	; 255
    139e:	a4 01       	movw	r20, r8
    13a0:	0e 94 a9 0a 	call	0x1552	; 0x1552 <__ultoa_invert>
    13a4:	a8 2e       	mov	r10, r24
    13a6:	a8 18       	sub	r10, r8
    13a8:	fb 2d       	mov	r31, r11
    13aa:	ff 77       	andi	r31, 0x7F	; 127
    13ac:	bf 2e       	mov	r11, r31
    13ae:	b6 fe       	sbrs	r11, 6
    13b0:	0b c0       	rjmp	.+22     	; 0x13c8 <vfprintf+0x2aa>
    13b2:	2b 2d       	mov	r18, r11
    13b4:	2e 7f       	andi	r18, 0xFE	; 254
    13b6:	a5 14       	cp	r10, r5
    13b8:	50 f4       	brcc	.+20     	; 0x13ce <vfprintf+0x2b0>
    13ba:	b4 fe       	sbrs	r11, 4
    13bc:	0a c0       	rjmp	.+20     	; 0x13d2 <vfprintf+0x2b4>
    13be:	b2 fc       	sbrc	r11, 2
    13c0:	08 c0       	rjmp	.+16     	; 0x13d2 <vfprintf+0x2b4>
    13c2:	2b 2d       	mov	r18, r11
    13c4:	2e 7e       	andi	r18, 0xEE	; 238
    13c6:	05 c0       	rjmp	.+10     	; 0x13d2 <vfprintf+0x2b4>
    13c8:	7a 2c       	mov	r7, r10
    13ca:	2b 2d       	mov	r18, r11
    13cc:	03 c0       	rjmp	.+6      	; 0x13d4 <vfprintf+0x2b6>
    13ce:	7a 2c       	mov	r7, r10
    13d0:	01 c0       	rjmp	.+2      	; 0x13d4 <vfprintf+0x2b6>
    13d2:	75 2c       	mov	r7, r5
    13d4:	24 ff       	sbrs	r18, 4
    13d6:	0d c0       	rjmp	.+26     	; 0x13f2 <vfprintf+0x2d4>
    13d8:	fe 01       	movw	r30, r28
    13da:	ea 0d       	add	r30, r10
    13dc:	f1 1d       	adc	r31, r1
    13de:	80 81       	ld	r24, Z
    13e0:	80 33       	cpi	r24, 0x30	; 48
    13e2:	11 f4       	brne	.+4      	; 0x13e8 <vfprintf+0x2ca>
    13e4:	29 7e       	andi	r18, 0xE9	; 233
    13e6:	09 c0       	rjmp	.+18     	; 0x13fa <vfprintf+0x2dc>
    13e8:	22 ff       	sbrs	r18, 2
    13ea:	06 c0       	rjmp	.+12     	; 0x13f8 <vfprintf+0x2da>
    13ec:	73 94       	inc	r7
    13ee:	73 94       	inc	r7
    13f0:	04 c0       	rjmp	.+8      	; 0x13fa <vfprintf+0x2dc>
    13f2:	82 2f       	mov	r24, r18
    13f4:	86 78       	andi	r24, 0x86	; 134
    13f6:	09 f0       	breq	.+2      	; 0x13fa <vfprintf+0x2dc>
    13f8:	73 94       	inc	r7
    13fa:	23 fd       	sbrc	r18, 3
    13fc:	13 c0       	rjmp	.+38     	; 0x1424 <vfprintf+0x306>
    13fe:	20 ff       	sbrs	r18, 0
    1400:	06 c0       	rjmp	.+12     	; 0x140e <vfprintf+0x2f0>
    1402:	5a 2c       	mov	r5, r10
    1404:	73 14       	cp	r7, r3
    1406:	18 f4       	brcc	.+6      	; 0x140e <vfprintf+0x2f0>
    1408:	53 0c       	add	r5, r3
    140a:	57 18       	sub	r5, r7
    140c:	73 2c       	mov	r7, r3
    140e:	73 14       	cp	r7, r3
    1410:	68 f4       	brcc	.+26     	; 0x142c <vfprintf+0x30e>
    1412:	b7 01       	movw	r22, r14
    1414:	80 e2       	ldi	r24, 0x20	; 32
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	2c 87       	std	Y+12, r18	; 0x0c
    141a:	0e 94 77 0a 	call	0x14ee	; 0x14ee <fputc>
    141e:	73 94       	inc	r7
    1420:	2c 85       	ldd	r18, Y+12	; 0x0c
    1422:	f5 cf       	rjmp	.-22     	; 0x140e <vfprintf+0x2f0>
    1424:	73 14       	cp	r7, r3
    1426:	10 f4       	brcc	.+4      	; 0x142c <vfprintf+0x30e>
    1428:	37 18       	sub	r3, r7
    142a:	01 c0       	rjmp	.+2      	; 0x142e <vfprintf+0x310>
    142c:	31 2c       	mov	r3, r1
    142e:	24 ff       	sbrs	r18, 4
    1430:	12 c0       	rjmp	.+36     	; 0x1456 <vfprintf+0x338>
    1432:	b7 01       	movw	r22, r14
    1434:	80 e3       	ldi	r24, 0x30	; 48
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	2c 87       	std	Y+12, r18	; 0x0c
    143a:	0e 94 77 0a 	call	0x14ee	; 0x14ee <fputc>
    143e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1440:	22 ff       	sbrs	r18, 2
    1442:	17 c0       	rjmp	.+46     	; 0x1472 <vfprintf+0x354>
    1444:	21 ff       	sbrs	r18, 1
    1446:	03 c0       	rjmp	.+6      	; 0x144e <vfprintf+0x330>
    1448:	88 e5       	ldi	r24, 0x58	; 88
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <vfprintf+0x334>
    144e:	88 e7       	ldi	r24, 0x78	; 120
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	b7 01       	movw	r22, r14
    1454:	0c c0       	rjmp	.+24     	; 0x146e <vfprintf+0x350>
    1456:	82 2f       	mov	r24, r18
    1458:	86 78       	andi	r24, 0x86	; 134
    145a:	59 f0       	breq	.+22     	; 0x1472 <vfprintf+0x354>
    145c:	21 fd       	sbrc	r18, 1
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <vfprintf+0x346>
    1460:	80 e2       	ldi	r24, 0x20	; 32
    1462:	01 c0       	rjmp	.+2      	; 0x1466 <vfprintf+0x348>
    1464:	8b e2       	ldi	r24, 0x2B	; 43
    1466:	27 fd       	sbrc	r18, 7
    1468:	8d e2       	ldi	r24, 0x2D	; 45
    146a:	b7 01       	movw	r22, r14
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	0e 94 77 0a 	call	0x14ee	; 0x14ee <fputc>
    1472:	a5 14       	cp	r10, r5
    1474:	38 f4       	brcc	.+14     	; 0x1484 <vfprintf+0x366>
    1476:	b7 01       	movw	r22, r14
    1478:	80 e3       	ldi	r24, 0x30	; 48
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	0e 94 77 0a 	call	0x14ee	; 0x14ee <fputc>
    1480:	5a 94       	dec	r5
    1482:	f7 cf       	rjmp	.-18     	; 0x1472 <vfprintf+0x354>
    1484:	aa 94       	dec	r10
    1486:	f4 01       	movw	r30, r8
    1488:	ea 0d       	add	r30, r10
    148a:	f1 1d       	adc	r31, r1
    148c:	80 81       	ld	r24, Z
    148e:	b7 01       	movw	r22, r14
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	0e 94 77 0a 	call	0x14ee	; 0x14ee <fputc>
    1496:	a1 10       	cpse	r10, r1
    1498:	f5 cf       	rjmp	.-22     	; 0x1484 <vfprintf+0x366>
    149a:	33 20       	and	r3, r3
    149c:	09 f4       	brne	.+2      	; 0x14a0 <vfprintf+0x382>
    149e:	51 ce       	rjmp	.-862    	; 0x1142 <vfprintf+0x24>
    14a0:	b7 01       	movw	r22, r14
    14a2:	80 e2       	ldi	r24, 0x20	; 32
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	0e 94 77 0a 	call	0x14ee	; 0x14ee <fputc>
    14aa:	3a 94       	dec	r3
    14ac:	f6 cf       	rjmp	.-20     	; 0x149a <vfprintf+0x37c>
    14ae:	f7 01       	movw	r30, r14
    14b0:	86 81       	ldd	r24, Z+6	; 0x06
    14b2:	97 81       	ldd	r25, Z+7	; 0x07
    14b4:	02 c0       	rjmp	.+4      	; 0x14ba <vfprintf+0x39c>
    14b6:	8f ef       	ldi	r24, 0xFF	; 255
    14b8:	9f ef       	ldi	r25, 0xFF	; 255
    14ba:	2c 96       	adiw	r28, 0x0c	; 12
    14bc:	e2 e1       	ldi	r30, 0x12	; 18
    14be:	0c 94 55 0b 	jmp	0x16aa	; 0x16aa <__epilogue_restores__>

000014c2 <strnlen_P>:
    14c2:	fc 01       	movw	r30, r24
    14c4:	05 90       	lpm	r0, Z+
    14c6:	61 50       	subi	r22, 0x01	; 1
    14c8:	70 40       	sbci	r23, 0x00	; 0
    14ca:	01 10       	cpse	r0, r1
    14cc:	d8 f7       	brcc	.-10     	; 0x14c4 <strnlen_P+0x2>
    14ce:	80 95       	com	r24
    14d0:	90 95       	com	r25
    14d2:	8e 0f       	add	r24, r30
    14d4:	9f 1f       	adc	r25, r31
    14d6:	08 95       	ret

000014d8 <strnlen>:
    14d8:	fc 01       	movw	r30, r24
    14da:	61 50       	subi	r22, 0x01	; 1
    14dc:	70 40       	sbci	r23, 0x00	; 0
    14de:	01 90       	ld	r0, Z+
    14e0:	01 10       	cpse	r0, r1
    14e2:	d8 f7       	brcc	.-10     	; 0x14da <strnlen+0x2>
    14e4:	80 95       	com	r24
    14e6:	90 95       	com	r25
    14e8:	8e 0f       	add	r24, r30
    14ea:	9f 1f       	adc	r25, r31
    14ec:	08 95       	ret

000014ee <fputc>:
    14ee:	0f 93       	push	r16
    14f0:	1f 93       	push	r17
    14f2:	cf 93       	push	r28
    14f4:	df 93       	push	r29
    14f6:	18 2f       	mov	r17, r24
    14f8:	09 2f       	mov	r16, r25
    14fa:	eb 01       	movw	r28, r22
    14fc:	8b 81       	ldd	r24, Y+3	; 0x03
    14fe:	81 fd       	sbrc	r24, 1
    1500:	03 c0       	rjmp	.+6      	; 0x1508 <fputc+0x1a>
    1502:	8f ef       	ldi	r24, 0xFF	; 255
    1504:	9f ef       	ldi	r25, 0xFF	; 255
    1506:	20 c0       	rjmp	.+64     	; 0x1548 <fputc+0x5a>
    1508:	82 ff       	sbrs	r24, 2
    150a:	10 c0       	rjmp	.+32     	; 0x152c <fputc+0x3e>
    150c:	4e 81       	ldd	r20, Y+6	; 0x06
    150e:	5f 81       	ldd	r21, Y+7	; 0x07
    1510:	2c 81       	ldd	r18, Y+4	; 0x04
    1512:	3d 81       	ldd	r19, Y+5	; 0x05
    1514:	42 17       	cp	r20, r18
    1516:	53 07       	cpc	r21, r19
    1518:	7c f4       	brge	.+30     	; 0x1538 <fputc+0x4a>
    151a:	e8 81       	ld	r30, Y
    151c:	f9 81       	ldd	r31, Y+1	; 0x01
    151e:	9f 01       	movw	r18, r30
    1520:	2f 5f       	subi	r18, 0xFF	; 255
    1522:	3f 4f       	sbci	r19, 0xFF	; 255
    1524:	39 83       	std	Y+1, r19	; 0x01
    1526:	28 83       	st	Y, r18
    1528:	10 83       	st	Z, r17
    152a:	06 c0       	rjmp	.+12     	; 0x1538 <fputc+0x4a>
    152c:	e8 85       	ldd	r30, Y+8	; 0x08
    152e:	f9 85       	ldd	r31, Y+9	; 0x09
    1530:	81 2f       	mov	r24, r17
    1532:	09 95       	icall
    1534:	89 2b       	or	r24, r25
    1536:	29 f7       	brne	.-54     	; 0x1502 <fputc+0x14>
    1538:	2e 81       	ldd	r18, Y+6	; 0x06
    153a:	3f 81       	ldd	r19, Y+7	; 0x07
    153c:	2f 5f       	subi	r18, 0xFF	; 255
    153e:	3f 4f       	sbci	r19, 0xFF	; 255
    1540:	3f 83       	std	Y+7, r19	; 0x07
    1542:	2e 83       	std	Y+6, r18	; 0x06
    1544:	81 2f       	mov	r24, r17
    1546:	90 2f       	mov	r25, r16
    1548:	df 91       	pop	r29
    154a:	cf 91       	pop	r28
    154c:	1f 91       	pop	r17
    154e:	0f 91       	pop	r16
    1550:	08 95       	ret

00001552 <__ultoa_invert>:
    1552:	fa 01       	movw	r30, r20
    1554:	aa 27       	eor	r26, r26
    1556:	28 30       	cpi	r18, 0x08	; 8
    1558:	51 f1       	breq	.+84     	; 0x15ae <__ultoa_invert+0x5c>
    155a:	20 31       	cpi	r18, 0x10	; 16
    155c:	81 f1       	breq	.+96     	; 0x15be <__ultoa_invert+0x6c>
    155e:	e8 94       	clt
    1560:	6f 93       	push	r22
    1562:	6e 7f       	andi	r22, 0xFE	; 254
    1564:	6e 5f       	subi	r22, 0xFE	; 254
    1566:	7f 4f       	sbci	r23, 0xFF	; 255
    1568:	8f 4f       	sbci	r24, 0xFF	; 255
    156a:	9f 4f       	sbci	r25, 0xFF	; 255
    156c:	af 4f       	sbci	r26, 0xFF	; 255
    156e:	b1 e0       	ldi	r27, 0x01	; 1
    1570:	3e d0       	rcall	.+124    	; 0x15ee <__ultoa_invert+0x9c>
    1572:	b4 e0       	ldi	r27, 0x04	; 4
    1574:	3c d0       	rcall	.+120    	; 0x15ee <__ultoa_invert+0x9c>
    1576:	67 0f       	add	r22, r23
    1578:	78 1f       	adc	r23, r24
    157a:	89 1f       	adc	r24, r25
    157c:	9a 1f       	adc	r25, r26
    157e:	a1 1d       	adc	r26, r1
    1580:	68 0f       	add	r22, r24
    1582:	79 1f       	adc	r23, r25
    1584:	8a 1f       	adc	r24, r26
    1586:	91 1d       	adc	r25, r1
    1588:	a1 1d       	adc	r26, r1
    158a:	6a 0f       	add	r22, r26
    158c:	71 1d       	adc	r23, r1
    158e:	81 1d       	adc	r24, r1
    1590:	91 1d       	adc	r25, r1
    1592:	a1 1d       	adc	r26, r1
    1594:	20 d0       	rcall	.+64     	; 0x15d6 <__ultoa_invert+0x84>
    1596:	09 f4       	brne	.+2      	; 0x159a <__ultoa_invert+0x48>
    1598:	68 94       	set
    159a:	3f 91       	pop	r19
    159c:	2a e0       	ldi	r18, 0x0A	; 10
    159e:	26 9f       	mul	r18, r22
    15a0:	11 24       	eor	r1, r1
    15a2:	30 19       	sub	r19, r0
    15a4:	30 5d       	subi	r19, 0xD0	; 208
    15a6:	31 93       	st	Z+, r19
    15a8:	de f6       	brtc	.-74     	; 0x1560 <__ultoa_invert+0xe>
    15aa:	cf 01       	movw	r24, r30
    15ac:	08 95       	ret
    15ae:	46 2f       	mov	r20, r22
    15b0:	47 70       	andi	r20, 0x07	; 7
    15b2:	40 5d       	subi	r20, 0xD0	; 208
    15b4:	41 93       	st	Z+, r20
    15b6:	b3 e0       	ldi	r27, 0x03	; 3
    15b8:	0f d0       	rcall	.+30     	; 0x15d8 <__ultoa_invert+0x86>
    15ba:	c9 f7       	brne	.-14     	; 0x15ae <__ultoa_invert+0x5c>
    15bc:	f6 cf       	rjmp	.-20     	; 0x15aa <__ultoa_invert+0x58>
    15be:	46 2f       	mov	r20, r22
    15c0:	4f 70       	andi	r20, 0x0F	; 15
    15c2:	40 5d       	subi	r20, 0xD0	; 208
    15c4:	4a 33       	cpi	r20, 0x3A	; 58
    15c6:	18 f0       	brcs	.+6      	; 0x15ce <__ultoa_invert+0x7c>
    15c8:	49 5d       	subi	r20, 0xD9	; 217
    15ca:	31 fd       	sbrc	r19, 1
    15cc:	40 52       	subi	r20, 0x20	; 32
    15ce:	41 93       	st	Z+, r20
    15d0:	02 d0       	rcall	.+4      	; 0x15d6 <__ultoa_invert+0x84>
    15d2:	a9 f7       	brne	.-22     	; 0x15be <__ultoa_invert+0x6c>
    15d4:	ea cf       	rjmp	.-44     	; 0x15aa <__ultoa_invert+0x58>
    15d6:	b4 e0       	ldi	r27, 0x04	; 4
    15d8:	a6 95       	lsr	r26
    15da:	97 95       	ror	r25
    15dc:	87 95       	ror	r24
    15de:	77 95       	ror	r23
    15e0:	67 95       	ror	r22
    15e2:	ba 95       	dec	r27
    15e4:	c9 f7       	brne	.-14     	; 0x15d8 <__ultoa_invert+0x86>
    15e6:	00 97       	sbiw	r24, 0x00	; 0
    15e8:	61 05       	cpc	r22, r1
    15ea:	71 05       	cpc	r23, r1
    15ec:	08 95       	ret
    15ee:	9b 01       	movw	r18, r22
    15f0:	ac 01       	movw	r20, r24
    15f2:	0a 2e       	mov	r0, r26
    15f4:	06 94       	lsr	r0
    15f6:	57 95       	ror	r21
    15f8:	47 95       	ror	r20
    15fa:	37 95       	ror	r19
    15fc:	27 95       	ror	r18
    15fe:	ba 95       	dec	r27
    1600:	c9 f7       	brne	.-14     	; 0x15f4 <__ultoa_invert+0xa2>
    1602:	62 0f       	add	r22, r18
    1604:	73 1f       	adc	r23, r19
    1606:	84 1f       	adc	r24, r20
    1608:	95 1f       	adc	r25, r21
    160a:	a0 1d       	adc	r26, r0
    160c:	08 95       	ret

0000160e <__divmodsi4>:
    160e:	05 2e       	mov	r0, r21
    1610:	97 fb       	bst	r25, 7
    1612:	1e f4       	brtc	.+6      	; 0x161a <__divmodsi4+0xc>
    1614:	00 94       	com	r0
    1616:	0e 94 1e 0b 	call	0x163c	; 0x163c <__negsi2>
    161a:	57 fd       	sbrc	r21, 7
    161c:	07 d0       	rcall	.+14     	; 0x162c <__divmodsi4_neg2>
    161e:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__udivmodsi4>
    1622:	07 fc       	sbrc	r0, 7
    1624:	03 d0       	rcall	.+6      	; 0x162c <__divmodsi4_neg2>
    1626:	4e f4       	brtc	.+18     	; 0x163a <__divmodsi4_exit>
    1628:	0c 94 1e 0b 	jmp	0x163c	; 0x163c <__negsi2>

0000162c <__divmodsi4_neg2>:
    162c:	50 95       	com	r21
    162e:	40 95       	com	r20
    1630:	30 95       	com	r19
    1632:	21 95       	neg	r18
    1634:	3f 4f       	sbci	r19, 0xFF	; 255
    1636:	4f 4f       	sbci	r20, 0xFF	; 255
    1638:	5f 4f       	sbci	r21, 0xFF	; 255

0000163a <__divmodsi4_exit>:
    163a:	08 95       	ret

0000163c <__negsi2>:
    163c:	90 95       	com	r25
    163e:	80 95       	com	r24
    1640:	70 95       	com	r23
    1642:	61 95       	neg	r22
    1644:	7f 4f       	sbci	r23, 0xFF	; 255
    1646:	8f 4f       	sbci	r24, 0xFF	; 255
    1648:	9f 4f       	sbci	r25, 0xFF	; 255
    164a:	08 95       	ret

0000164c <__muluhisi3>:
    164c:	0e 94 92 0b 	call	0x1724	; 0x1724 <__umulhisi3>
    1650:	a5 9f       	mul	r26, r21
    1652:	90 0d       	add	r25, r0
    1654:	b4 9f       	mul	r27, r20
    1656:	90 0d       	add	r25, r0
    1658:	a4 9f       	mul	r26, r20
    165a:	80 0d       	add	r24, r0
    165c:	91 1d       	adc	r25, r1
    165e:	11 24       	eor	r1, r1
    1660:	08 95       	ret

00001662 <__mulshisi3>:
    1662:	b7 ff       	sbrs	r27, 7
    1664:	0c 94 26 0b 	jmp	0x164c	; 0x164c <__muluhisi3>

00001668 <__mulohisi3>:
    1668:	0e 94 26 0b 	call	0x164c	; 0x164c <__muluhisi3>
    166c:	82 1b       	sub	r24, r18
    166e:	93 0b       	sbc	r25, r19
    1670:	08 95       	ret

00001672 <__prologue_saves__>:
    1672:	2f 92       	push	r2
    1674:	3f 92       	push	r3
    1676:	4f 92       	push	r4
    1678:	5f 92       	push	r5
    167a:	6f 92       	push	r6
    167c:	7f 92       	push	r7
    167e:	8f 92       	push	r8
    1680:	9f 92       	push	r9
    1682:	af 92       	push	r10
    1684:	bf 92       	push	r11
    1686:	cf 92       	push	r12
    1688:	df 92       	push	r13
    168a:	ef 92       	push	r14
    168c:	ff 92       	push	r15
    168e:	0f 93       	push	r16
    1690:	1f 93       	push	r17
    1692:	cf 93       	push	r28
    1694:	df 93       	push	r29
    1696:	cd b7       	in	r28, 0x3d	; 61
    1698:	de b7       	in	r29, 0x3e	; 62
    169a:	ca 1b       	sub	r28, r26
    169c:	db 0b       	sbc	r29, r27
    169e:	0f b6       	in	r0, 0x3f	; 63
    16a0:	f8 94       	cli
    16a2:	de bf       	out	0x3e, r29	; 62
    16a4:	0f be       	out	0x3f, r0	; 63
    16a6:	cd bf       	out	0x3d, r28	; 61
    16a8:	09 94       	ijmp

000016aa <__epilogue_restores__>:
    16aa:	2a 88       	ldd	r2, Y+18	; 0x12
    16ac:	39 88       	ldd	r3, Y+17	; 0x11
    16ae:	48 88       	ldd	r4, Y+16	; 0x10
    16b0:	5f 84       	ldd	r5, Y+15	; 0x0f
    16b2:	6e 84       	ldd	r6, Y+14	; 0x0e
    16b4:	7d 84       	ldd	r7, Y+13	; 0x0d
    16b6:	8c 84       	ldd	r8, Y+12	; 0x0c
    16b8:	9b 84       	ldd	r9, Y+11	; 0x0b
    16ba:	aa 84       	ldd	r10, Y+10	; 0x0a
    16bc:	b9 84       	ldd	r11, Y+9	; 0x09
    16be:	c8 84       	ldd	r12, Y+8	; 0x08
    16c0:	df 80       	ldd	r13, Y+7	; 0x07
    16c2:	ee 80       	ldd	r14, Y+6	; 0x06
    16c4:	fd 80       	ldd	r15, Y+5	; 0x05
    16c6:	0c 81       	ldd	r16, Y+4	; 0x04
    16c8:	1b 81       	ldd	r17, Y+3	; 0x03
    16ca:	aa 81       	ldd	r26, Y+2	; 0x02
    16cc:	b9 81       	ldd	r27, Y+1	; 0x01
    16ce:	ce 0f       	add	r28, r30
    16d0:	d1 1d       	adc	r29, r1
    16d2:	0f b6       	in	r0, 0x3f	; 63
    16d4:	f8 94       	cli
    16d6:	de bf       	out	0x3e, r29	; 62
    16d8:	0f be       	out	0x3f, r0	; 63
    16da:	cd bf       	out	0x3d, r28	; 61
    16dc:	ed 01       	movw	r28, r26
    16de:	08 95       	ret

000016e0 <__udivmodsi4>:
    16e0:	a1 e2       	ldi	r26, 0x21	; 33
    16e2:	1a 2e       	mov	r1, r26
    16e4:	aa 1b       	sub	r26, r26
    16e6:	bb 1b       	sub	r27, r27
    16e8:	fd 01       	movw	r30, r26
    16ea:	0d c0       	rjmp	.+26     	; 0x1706 <__udivmodsi4_ep>

000016ec <__udivmodsi4_loop>:
    16ec:	aa 1f       	adc	r26, r26
    16ee:	bb 1f       	adc	r27, r27
    16f0:	ee 1f       	adc	r30, r30
    16f2:	ff 1f       	adc	r31, r31
    16f4:	a2 17       	cp	r26, r18
    16f6:	b3 07       	cpc	r27, r19
    16f8:	e4 07       	cpc	r30, r20
    16fa:	f5 07       	cpc	r31, r21
    16fc:	20 f0       	brcs	.+8      	; 0x1706 <__udivmodsi4_ep>
    16fe:	a2 1b       	sub	r26, r18
    1700:	b3 0b       	sbc	r27, r19
    1702:	e4 0b       	sbc	r30, r20
    1704:	f5 0b       	sbc	r31, r21

00001706 <__udivmodsi4_ep>:
    1706:	66 1f       	adc	r22, r22
    1708:	77 1f       	adc	r23, r23
    170a:	88 1f       	adc	r24, r24
    170c:	99 1f       	adc	r25, r25
    170e:	1a 94       	dec	r1
    1710:	69 f7       	brne	.-38     	; 0x16ec <__udivmodsi4_loop>
    1712:	60 95       	com	r22
    1714:	70 95       	com	r23
    1716:	80 95       	com	r24
    1718:	90 95       	com	r25
    171a:	9b 01       	movw	r18, r22
    171c:	ac 01       	movw	r20, r24
    171e:	bd 01       	movw	r22, r26
    1720:	cf 01       	movw	r24, r30
    1722:	08 95       	ret

00001724 <__umulhisi3>:
    1724:	a2 9f       	mul	r26, r18
    1726:	b0 01       	movw	r22, r0
    1728:	b3 9f       	mul	r27, r19
    172a:	c0 01       	movw	r24, r0
    172c:	a3 9f       	mul	r26, r19
    172e:	70 0d       	add	r23, r0
    1730:	81 1d       	adc	r24, r1
    1732:	11 24       	eor	r1, r1
    1734:	91 1d       	adc	r25, r1
    1736:	b2 9f       	mul	r27, r18
    1738:	70 0d       	add	r23, r0
    173a:	81 1d       	adc	r24, r1
    173c:	11 24       	eor	r1, r1
    173e:	91 1d       	adc	r25, r1
    1740:	08 95       	ret

00001742 <_exit>:
    1742:	f8 94       	cli

00001744 <__stop_program>:
    1744:	ff cf       	rjmp	.-2      	; 0x1744 <__stop_program>
