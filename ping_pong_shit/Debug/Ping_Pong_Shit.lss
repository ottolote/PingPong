
Ping_Pong_Shit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000386  00800100  00001b2c  00001bc0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b2c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800486  00800486  00001f46  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001f46  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002f0  00000000  00000000  00001fa2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000030eb  00000000  00000000  00002292  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001250  00000000  00000000  0000537d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000012f3  00000000  00000000  000065cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000007c0  00000000  00000000  000078c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000883  00000000  00000000  00008080  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001796  00000000  00000000  00008903  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000298  00000000  00000000  0000a099  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 af 02 	jmp	0x55e	; 0x55e <__vector_1>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <oled_move_arrow+0x14>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	14 e0       	ldi	r17, 0x04	; 4
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	ec e2       	ldi	r30, 0x2C	; 44
     37c:	fb e1       	ldi	r31, 0x1B	; 27
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a6 38       	cpi	r26, 0x86	; 134
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	24 e0       	ldi	r18, 0x04	; 4
     38c:	a6 e8       	ldi	r26, 0x86	; 134
     38e:	b4 e0       	ldi	r27, 0x04	; 4
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a8 39       	cpi	r26, 0x98	; 152
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 de 06 	call	0xdbc	; 0xdbc <main>
     39e:	0c 94 94 0d 	jmp	0x1b28	; 0x1b28 <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <can_init>:
#define UART_BAUD 9600
#include <util/delay.h>

void can_init(){
	//Enter config mode
	mcp2515_init();
     3a6:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <mcp2515_init>
	printf("CANCTRL (expect 0x87): 0x%02x\n", mcp2515_read(MCP_CANCTRL));
     3aa:	8f e0       	ldi	r24, 0x0F	; 15
     3ac:	0e 94 c2 03 	call	0x784	; 0x784 <mcp2515_read>
     3b0:	1f 92       	push	r1
     3b2:	8f 93       	push	r24
     3b4:	8c e2       	ldi	r24, 0x2C	; 44
     3b6:	91 e0       	ldi	r25, 0x01	; 1
     3b8:	9f 93       	push	r25
     3ba:	8f 93       	push	r24
     3bc:	0e 94 41 0a 	call	0x1482	; 0x1482 <printf>

	//RX0 - Turn mask/filter off
	mcp2515_bit_modify(MCP_RXB0CTRL, 0b01100000, 0xFF);
     3c0:	4f ef       	ldi	r20, 0xFF	; 255
     3c2:	60 e6       	ldi	r22, 0x60	; 96
     3c4:	80 e6       	ldi	r24, 0x60	; 96
     3c6:	0e 94 a0 03 	call	0x740	; 0x740 <mcp2515_bit_modify>
	//RX0 - Disable rollover
	mcp2515_bit_modify(MCP_RXB0CTRL, 0b00000100, 0);
     3ca:	40 e0       	ldi	r20, 0x00	; 0
     3cc:	64 e0       	ldi	r22, 0x04	; 4
     3ce:	80 e6       	ldi	r24, 0x60	; 96
     3d0:	0e 94 a0 03 	call	0x740	; 0x740 <mcp2515_bit_modify>

	//Enable normal mode
	mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
     3d4:	40 e0       	ldi	r20, 0x00	; 0
     3d6:	60 ee       	ldi	r22, 0xE0	; 224
     3d8:	8f e0       	ldi	r24, 0x0F	; 15
     3da:	0e 94 a0 03 	call	0x740	; 0x740 <mcp2515_bit_modify>

	//Enable interrupt when message is recieved (RX0IE = 1)
	mcp2515_bit_modify(MCP_CANINTE, MCP_RX0IF, 0xff);
     3de:	4f ef       	ldi	r20, 0xFF	; 255
     3e0:	61 e0       	ldi	r22, 0x01	; 1
     3e2:	8b e2       	ldi	r24, 0x2B	; 43
     3e4:	0e 94 a0 03 	call	0x740	; 0x740 <mcp2515_bit_modify>
     3e8:	0f 90       	pop	r0
     3ea:	0f 90       	pop	r0
     3ec:	0f 90       	pop	r0
     3ee:	0f 90       	pop	r0
     3f0:	08 95       	ret

000003f2 <can_transmit_complete>:
	return 1;
}

int can_transmit_complete(){
	//Check if TX buffer is not pending
	if(test_bit(mcp2515_read(MCP_TXB0CTRL), 3)) {
     3f2:	80 e3       	ldi	r24, 0x30	; 48
     3f4:	0e 94 c2 03 	call	0x784	; 0x784 <mcp2515_read>
     3f8:	86 95       	lsr	r24
     3fa:	86 95       	lsr	r24
     3fc:	86 95       	lsr	r24
     3fe:	91 e0       	ldi	r25, 0x01	; 1
     400:	89 27       	eor	r24, r25
		return 0;
	} else {
		return 1;
	 }
}
     402:	81 70       	andi	r24, 0x01	; 1
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	08 95       	ret

00000408 <can_message_send>:

	//Enable interrupt when message is recieved (RX0IE = 1)
	mcp2515_bit_modify(MCP_CANINTE, MCP_RX0IF, 0xff);
}

void can_message_send(can_message_t* message){
     408:	1f 93       	push	r17
     40a:	cf 93       	push	r28
     40c:	df 93       	push	r29
     40e:	ec 01       	movw	r28, r24
	while (!can_transmit_complete()) {}
     410:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <can_transmit_complete>
     414:	89 2b       	or	r24, r25
     416:	e1 f3       	breq	.-8      	; 0x410 <can_message_send+0x8>
	//Use standard ID to set the message
	mcp2515_write(MCP_TXB0SIDH, (int8_t)(message->id >> 3));
     418:	68 81       	ld	r22, Y
     41a:	79 81       	ldd	r23, Y+1	; 0x01
     41c:	75 95       	asr	r23
     41e:	67 95       	ror	r22
     420:	75 95       	asr	r23
     422:	67 95       	ror	r22
     424:	75 95       	asr	r23
     426:	67 95       	ror	r22
     428:	81 e3       	ldi	r24, 0x31	; 49
     42a:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <mcp2515_write>
	mcp2515_write(MCP_TXB0SIDL, (int8_t)(message->id << 5));
     42e:	68 81       	ld	r22, Y
     430:	79 81       	ldd	r23, Y+1	; 0x01
     432:	66 0f       	add	r22, r22
     434:	77 1f       	adc	r23, r23
     436:	62 95       	swap	r22
     438:	72 95       	swap	r23
     43a:	70 7f       	andi	r23, 0xF0	; 240
     43c:	76 27       	eor	r23, r22
     43e:	60 7f       	andi	r22, 0xF0	; 240
     440:	76 27       	eor	r23, r22
     442:	82 e3       	ldi	r24, 0x32	; 50
     444:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <mcp2515_write>

	//Set correct data lenght and use data frame, max 8 bytes
	mcp2515_write(MCP_TXB0DLC, (0x0F) & (message->lenght));
     448:	6a 81       	ldd	r22, Y+2	; 0x02
     44a:	6f 70       	andi	r22, 0x0F	; 15
     44c:	85 e3       	ldi	r24, 0x35	; 53
     44e:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <mcp2515_write>

	//For loop to set data bytes
	for (uint8_t i = 0; i < message->lenght; i++) {
     452:	8a 81       	ldd	r24, Y+2	; 0x02
     454:	88 23       	and	r24, r24
     456:	69 f0       	breq	.+26     	; 0x472 <can_message_send+0x6a>
     458:	10 e0       	ldi	r17, 0x00	; 0
		mcp2515_write(MCP_TXB0D0 + i, message->data[i]);
     45a:	fe 01       	movw	r30, r28
     45c:	e1 0f       	add	r30, r17
     45e:	f1 1d       	adc	r31, r1
     460:	63 81       	ldd	r22, Z+3	; 0x03
     462:	86 e3       	ldi	r24, 0x36	; 54
     464:	81 0f       	add	r24, r17
     466:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <mcp2515_write>

	//Set correct data lenght and use data frame, max 8 bytes
	mcp2515_write(MCP_TXB0DLC, (0x0F) & (message->lenght));

	//For loop to set data bytes
	for (uint8_t i = 0; i < message->lenght; i++) {
     46a:	1f 5f       	subi	r17, 0xFF	; 255
     46c:	8a 81       	ldd	r24, Y+2	; 0x02
     46e:	18 17       	cp	r17, r24
     470:	a0 f3       	brcs	.-24     	; 0x45a <can_message_send+0x52>
		mcp2515_write(MCP_TXB0D0 + i, message->data[i]);
	}

	mcp2515_request_to_send(1);
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	0e 94 90 03 	call	0x720	; 0x720 <mcp2515_request_to_send>
}
     478:	df 91       	pop	r29
     47a:	cf 91       	pop	r28
     47c:	1f 91       	pop	r17
     47e:	08 95       	ret

00000480 <can_data_receive>:
void can_interrupt_vector(){
	//Clear interrupt flag
	rx_flag = 1;
}

can_message_t can_data_receive(){
     480:	9f 92       	push	r9
     482:	af 92       	push	r10
     484:	bf 92       	push	r11
     486:	cf 92       	push	r12
     488:	df 92       	push	r13
     48a:	ef 92       	push	r14
     48c:	ff 92       	push	r15
     48e:	0f 93       	push	r16
     490:	1f 93       	push	r17
     492:	cf 93       	push	r28
     494:	df 93       	push	r29
     496:	cd b7       	in	r28, 0x3d	; 61
     498:	de b7       	in	r29, 0x3e	; 62
     49a:	2b 97       	sbiw	r28, 0x0b	; 11
     49c:	0f b6       	in	r0, 0x3f	; 63
     49e:	f8 94       	cli
     4a0:	de bf       	out	0x3e, r29	; 62
     4a2:	0f be       	out	0x3f, r0	; 63
     4a4:	cd bf       	out	0x3d, r28	; 61
     4a6:	7c 01       	movw	r14, r24
	can_message_t message;
	
	//Check if RX buffer have message
	//if (rx_flag == 1) {
	if (mcp2515_read(MCP_CANINTF) & MCP_RX0IF) {
     4a8:	8c e2       	ldi	r24, 0x2C	; 44
     4aa:	0e 94 c2 03 	call	0x784	; 0x784 <mcp2515_read>
     4ae:	80 ff       	sbrs	r24, 0
     4b0:	35 c0       	rjmp	.+106    	; 0x51c <__stack+0x1d>
		//Get ID if message
		message.id = (mcp2515_read(MCP_RXB0SIDH) << 3) | (mcp2515_read(MCP_RXB0SIDL) >> 5);
     4b2:	81 e6       	ldi	r24, 0x61	; 97
     4b4:	0e 94 c2 03 	call	0x784	; 0x784 <mcp2515_read>
     4b8:	c8 2e       	mov	r12, r24
     4ba:	82 e6       	ldi	r24, 0x62	; 98
     4bc:	0e 94 c2 03 	call	0x784	; 0x784 <mcp2515_read>
     4c0:	82 95       	swap	r24
     4c2:	86 95       	lsr	r24
     4c4:	87 70       	andi	r24, 0x07	; 7
     4c6:	d1 2c       	mov	r13, r1
     4c8:	cc 0c       	add	r12, r12
     4ca:	dd 1c       	adc	r13, r13
     4cc:	cc 0c       	add	r12, r12
     4ce:	dd 1c       	adc	r13, r13
     4d0:	cc 0c       	add	r12, r12
     4d2:	dd 1c       	adc	r13, r13
     4d4:	c8 2a       	or	r12, r24

		//Get lenght of message
		message.lenght = (0x0F) & (mcp2515_read(MCP_RXB0D0));
     4d6:	86 e6       	ldi	r24, 0x66	; 102
     4d8:	0e 94 c2 03 	call	0x784	; 0x784 <mcp2515_read>
     4dc:	8f 70       	andi	r24, 0x0F	; 15
     4de:	98 2e       	mov	r9, r24

		//Get message data
		for(uint8_t i = 0; i < message.lenght; i++){
     4e0:	a9 f0       	breq	.+42     	; 0x50c <__stack+0xd>
     4e2:	8e 01       	movw	r16, r28
     4e4:	0c 5f       	subi	r16, 0xFC	; 252
     4e6:	1f 4f       	sbci	r17, 0xFF	; 255
     4e8:	0f 2e       	mov	r0, r31
     4ea:	f6 e6       	ldi	r31, 0x66	; 102
     4ec:	af 2e       	mov	r10, r31
     4ee:	f0 2d       	mov	r31, r0
     4f0:	a8 0e       	add	r10, r24
     4f2:	0f 2e       	mov	r0, r31
     4f4:	f6 e6       	ldi	r31, 0x66	; 102
     4f6:	bf 2e       	mov	r11, r31
     4f8:	f0 2d       	mov	r31, r0
			message.data[i] = mcp2515_read(MCP_RXB0D0 + i);
     4fa:	8b 2d       	mov	r24, r11
     4fc:	0e 94 c2 03 	call	0x784	; 0x784 <mcp2515_read>
     500:	f8 01       	movw	r30, r16
     502:	81 93       	st	Z+, r24
     504:	8f 01       	movw	r16, r30
     506:	b3 94       	inc	r11

		//Get lenght of message
		message.lenght = (0x0F) & (mcp2515_read(MCP_RXB0D0));

		//Get message data
		for(uint8_t i = 0; i < message.lenght; i++){
     508:	ba 10       	cpse	r11, r10
     50a:	f7 cf       	rjmp	.-18     	; 0x4fa <can_data_receive+0x7a>
			message.data[i] = mcp2515_read(MCP_RXB0D0 + i);
		}

		//Clear flag
		rx_flag = 0;
     50c:	10 92 87 04 	sts	0x0487, r1
		mcp2515_bit_modify(MCP_CANINTF, MCP_RX0IF, 0);
     510:	40 e0       	ldi	r20, 0x00	; 0
     512:	61 e0       	ldi	r22, 0x01	; 1
     514:	8c e2       	ldi	r24, 0x2C	; 44
     516:	0e 94 a0 03 	call	0x740	; 0x740 <mcp2515_bit_modify>
     51a:	03 c0       	rjmp	.+6      	; 0x522 <__stack+0x23>
	} else {
		message.id = -1;
     51c:	cc 24       	eor	r12, r12
     51e:	ca 94       	dec	r12
     520:	dc 2c       	mov	r13, r12
	}

	return message;
     522:	da 82       	std	Y+2, r13	; 0x02
     524:	c9 82       	std	Y+1, r12	; 0x01
     526:	9b 82       	std	Y+3, r9	; 0x03
     528:	8b e0       	ldi	r24, 0x0B	; 11
     52a:	fe 01       	movw	r30, r28
     52c:	31 96       	adiw	r30, 0x01	; 1
     52e:	d7 01       	movw	r26, r14
     530:	01 90       	ld	r0, Z+
     532:	0d 92       	st	X+, r0
     534:	8a 95       	dec	r24
     536:	e1 f7       	brne	.-8      	; 0x530 <__stack+0x31>
}
     538:	c7 01       	movw	r24, r14
     53a:	2b 96       	adiw	r28, 0x0b	; 11
     53c:	0f b6       	in	r0, 0x3f	; 63
     53e:	f8 94       	cli
     540:	de bf       	out	0x3e, r29	; 62
     542:	0f be       	out	0x3f, r0	; 63
     544:	cd bf       	out	0x3d, r28	; 61
     546:	df 91       	pop	r29
     548:	cf 91       	pop	r28
     54a:	1f 91       	pop	r17
     54c:	0f 91       	pop	r16
     54e:	ff 90       	pop	r15
     550:	ef 90       	pop	r14
     552:	df 90       	pop	r13
     554:	cf 90       	pop	r12
     556:	bf 90       	pop	r11
     558:	af 90       	pop	r10
     55a:	9f 90       	pop	r9
     55c:	08 95       	ret

0000055e <__vector_1>:

//Interrupt routine for CAN bus
ISR(INT0_vect){
     55e:	1f 92       	push	r1
     560:	0f 92       	push	r0
     562:	0f b6       	in	r0, 0x3f	; 63
     564:	0f 92       	push	r0
     566:	11 24       	eor	r1, r1
     568:	8f 93       	push	r24
     56a:	9f 93       	push	r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     56c:	8f ef       	ldi	r24, 0xFF	; 255
     56e:	9f e2       	ldi	r25, 0x2F	; 47
     570:	01 97       	sbiw	r24, 0x01	; 1
     572:	f1 f7       	brne	.-4      	; 0x570 <__vector_1+0x12>
     574:	00 c0       	rjmp	.+0      	; 0x576 <__vector_1+0x18>
     576:	00 00       	nop
	 }
}

void can_interrupt_vector(){
	//Clear interrupt flag
	rx_flag = 1;
     578:	81 e0       	ldi	r24, 0x01	; 1
     57a:	80 93 87 04 	sts	0x0487, r24

//Interrupt routine for CAN bus
ISR(INT0_vect){
	_delay_ms(10);
	can_interrupt_vector();
}
     57e:	9f 91       	pop	r25
     580:	8f 91       	pop	r24
     582:	0f 90       	pop	r0
     584:	0f be       	out	0x3f, r0	; 63
     586:	0f 90       	pop	r0
     588:	1f 90       	pop	r1
     58a:	18 95       	reti

0000058c <can_test>:

void can_test(){
     58c:	cf 93       	push	r28
     58e:	df 93       	push	r29
     590:	cd b7       	in	r28, 0x3d	; 61
     592:	de b7       	in	r29, 0x3e	; 62
     594:	66 97       	sbiw	r28, 0x16	; 22
     596:	0f b6       	in	r0, 0x3f	; 63
     598:	f8 94       	cli
     59a:	de bf       	out	0x3e, r29	; 62
     59c:	0f be       	out	0x3f, r0	; 63
     59e:	cd bf       	out	0x3d, r28	; 61
	printf("CANCTRL: %02x\n", mcp2515_read(MCP_CANCTRL));
     5a0:	8f e0       	ldi	r24, 0x0F	; 15
     5a2:	0e 94 c2 03 	call	0x784	; 0x784 <mcp2515_read>
     5a6:	1f 92       	push	r1
     5a8:	8f 93       	push	r24
     5aa:	0b e4       	ldi	r16, 0x4B	; 75
     5ac:	11 e0       	ldi	r17, 0x01	; 1
     5ae:	1f 93       	push	r17
     5b0:	0f 93       	push	r16
     5b2:	0e 94 41 0a 	call	0x1482	; 0x1482 <printf>
	mcp2515_set_loopback_mode();
     5b6:	0e 94 ed 03 	call	0x7da	; 0x7da <mcp2515_set_loopback_mode>

	can_message_t testmessage;

	testmessage.id = 3;
     5ba:	83 e0       	ldi	r24, 0x03	; 3
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	9d 87       	std	Y+13, r25	; 0x0d
     5c0:	8c 87       	std	Y+12, r24	; 0x0c
	testmessage.lenght = 1;
     5c2:	81 e0       	ldi	r24, 0x01	; 1
     5c4:	8e 87       	std	Y+14, r24	; 0x0e
	testmessage.data[0] = 2;
     5c6:	82 e0       	ldi	r24, 0x02	; 2
     5c8:	8f 87       	std	Y+15, r24	; 0x0f
		//testmessage.data[i] = i;
	//}
	


	printf("CANCTRL: %02x\n", mcp2515_read(MCP_CANCTRL));
     5ca:	8f e0       	ldi	r24, 0x0F	; 15
     5cc:	0e 94 c2 03 	call	0x784	; 0x784 <mcp2515_read>
     5d0:	1f 92       	push	r1
     5d2:	8f 93       	push	r24
     5d4:	1f 93       	push	r17
     5d6:	0f 93       	push	r16
     5d8:	0e 94 41 0a 	call	0x1482	; 0x1482 <printf>
     5dc:	0f b6       	in	r0, 0x3f	; 63
     5de:	f8 94       	cli
     5e0:	de bf       	out	0x3e, r29	; 62
     5e2:	0f be       	out	0x3f, r0	; 63
     5e4:	cd bf       	out	0x3d, r28	; 61
//	printf("Before death\n");

	while(1){
		can_message_send(&testmessage);
		printf("Message data[0]: %d\n", can_data_receive().data[0]);
     5e6:	0a e5       	ldi	r16, 0x5A	; 90
     5e8:	11 e0       	ldi	r17, 0x01	; 1

	printf("CANCTRL: %02x\n", mcp2515_read(MCP_CANCTRL));
//	printf("Before death\n");

	while(1){
		can_message_send(&testmessage);
     5ea:	ce 01       	movw	r24, r28
     5ec:	0c 96       	adiw	r24, 0x0c	; 12
     5ee:	0e 94 04 02 	call	0x408	; 0x408 <can_message_send>
		printf("Message data[0]: %d\n", can_data_receive().data[0]);
     5f2:	ce 01       	movw	r24, r28
     5f4:	01 96       	adiw	r24, 0x01	; 1
     5f6:	0e 94 40 02 	call	0x480	; 0x480 <can_data_receive>
     5fa:	2c 81       	ldd	r18, Y+4	; 0x04
     5fc:	82 2f       	mov	r24, r18
     5fe:	99 27       	eor	r25, r25
     600:	87 fd       	sbrc	r24, 7
     602:	90 95       	com	r25
     604:	9f 93       	push	r25
     606:	2f 93       	push	r18
     608:	1f 93       	push	r17
     60a:	0f 93       	push	r16
     60c:	0e 94 41 0a 	call	0x1482	; 0x1482 <printf>
     610:	9f ef       	ldi	r25, 0xFF	; 255
     612:	2f ef       	ldi	r18, 0xFF	; 255
     614:	88 e0       	ldi	r24, 0x08	; 8
     616:	91 50       	subi	r25, 0x01	; 1
     618:	20 40       	sbci	r18, 0x00	; 0
     61a:	80 40       	sbci	r24, 0x00	; 0
     61c:	e1 f7       	brne	.-8      	; 0x616 <can_test+0x8a>
     61e:	00 c0       	rjmp	.+0      	; 0x620 <can_test+0x94>
     620:	00 00       	nop
     622:	0f 90       	pop	r0
     624:	0f 90       	pop	r0
     626:	0f 90       	pop	r0
     628:	0f 90       	pop	r0
     62a:	df cf       	rjmp	.-66     	; 0x5ea <can_test+0x5e>

0000062c <joystick_read>:
			 v;
}

unsigned int joystick_read(joy_channel channel){
	volatile char* ext_ram = (char*) 0x1400;
	ext_ram[0] = 0x4 + channel;
     62c:	8c 5f       	subi	r24, 0xFC	; 252
     62e:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     632:	81 e4       	ldi	r24, 0x41	; 65
     634:	8a 95       	dec	r24
     636:	f1 f7       	brne	.-4      	; 0x634 <joystick_read+0x8>
     638:	00 c0       	rjmp	.+0      	; 0x63a <joystick_read+0xe>
	_delay_us(40);
	//sleep_enable();
	return (uint8_t) ext_ram[0];
     63a:	80 91 00 14 	lds	r24, 0x1400
}
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	08 95       	ret

00000642 <joystick_init>:
	/*EMCUCR |= (0 << SM0);
	MCUCSR |= (1 << SM1);
	MCUCSR |= (0 << SM2);
	GICR |= (1 << INT0);
	sei();*/
	center_val_X = joystick_read(JOYSTICK_X);
     642:	80 e0       	ldi	r24, 0x00	; 0
     644:	0e 94 16 03 	call	0x62c	; 0x62c <joystick_read>
     648:	90 93 89 04 	sts	0x0489, r25
     64c:	80 93 88 04 	sts	0x0488, r24
	center_val_Y = joystick_read(JOYSTICK_Y);
     650:	81 e0       	ldi	r24, 0x01	; 1
     652:	0e 94 16 03 	call	0x62c	; 0x62c <joystick_read>
     656:	90 93 8b 04 	sts	0x048B, r25
     65a:	80 93 8a 04 	sts	0x048A, r24
     65e:	08 95       	ret

00000660 <read_converted>:
}

signed int read_converted(joy_channel channel){
     660:	cf 93       	push	r28
     662:	c8 2f       	mov	r28, r24

	int v = (joystick_read(channel));
     664:	0e 94 16 03 	call	0x62c	; 0x62c <joystick_read>

	if      (channel == JOYSTICK_X)  {v -= center_val_X;}
     668:	c1 11       	cpse	r28, r1
     66a:	07 c0       	rjmp	.+14     	; 0x67a <read_converted+0x1a>
     66c:	20 91 88 04 	lds	r18, 0x0488
     670:	30 91 89 04 	lds	r19, 0x0489
     674:	82 1b       	sub	r24, r18
     676:	93 0b       	sbc	r25, r19
     678:	08 c0       	rjmp	.+16     	; 0x68a <read_converted+0x2a>
	else if (channel == JOYSTICK_Y)  {v -= center_val_Y;}
     67a:	c1 30       	cpi	r28, 0x01	; 1
     67c:	31 f4       	brne	.+12     	; 0x68a <read_converted+0x2a>
     67e:	20 91 8a 04 	lds	r18, 0x048A
     682:	30 91 8b 04 	lds	r19, 0x048B
     686:	82 1b       	sub	r24, r18
     688:	93 0b       	sbc	r25, r19

	return  (v > 127)	? 127 :
     68a:	80 38       	cpi	r24, 0x80	; 128
     68c:	2f ef       	ldi	r18, 0xFF	; 255
     68e:	92 07       	cpc	r25, r18
     690:	14 f4       	brge	.+4      	; 0x696 <read_converted+0x36>
     692:	80 e8       	ldi	r24, 0x80	; 128
     694:	9f ef       	ldi	r25, 0xFF	; 255
     696:	80 38       	cpi	r24, 0x80	; 128
     698:	91 05       	cpc	r25, r1
     69a:	14 f0       	brlt	.+4      	; 0x6a0 <read_converted+0x40>
     69c:	8f e7       	ldi	r24, 0x7F	; 127
     69e:	90 e0       	ldi	r25, 0x00	; 0
			(v < -128)	? -128 :
			 v;
}
     6a0:	cf 91       	pop	r28
     6a2:	08 95       	ret

000006a4 <joystick_direction_Y>:
	//sleep_enable();
	return (uint8_t) ext_ram[0];
}

signed int joystick_direction_Y(){
	signed int joy_Y = read_converted(JOYSTICK_Y);
     6a4:	81 e0       	ldi	r24, 0x01	; 1
     6a6:	0e 94 30 03 	call	0x660	; 0x660 <read_converted>
	if(joy_Y >= 100){
     6aa:	84 36       	cpi	r24, 0x64	; 100
     6ac:	91 05       	cpc	r25, r1
     6ae:	64 f4       	brge	.+24     	; 0x6c8 <joystick_direction_Y+0x24>
		return 1;
	} else if (joy_Y <= -100) {
     6b0:	21 e0       	ldi	r18, 0x01	; 1
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	8d 39       	cpi	r24, 0x9D	; 157
     6b6:	9f 4f       	sbci	r25, 0xFF	; 255
     6b8:	14 f0       	brlt	.+4      	; 0x6be <joystick_direction_Y+0x1a>
     6ba:	20 e0       	ldi	r18, 0x00	; 0
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	88 27       	eor	r24, r24
     6c0:	99 27       	eor	r25, r25
     6c2:	82 1b       	sub	r24, r18
     6c4:	93 0b       	sbc	r25, r19
     6c6:	08 95       	ret
}

signed int joystick_direction_Y(){
	signed int joy_Y = read_converted(JOYSTICK_Y);
	if(joy_Y >= 100){
		return 1;
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	90 e0       	ldi	r25, 0x00	; 0
	} else if (joy_Y <= -100) {
		return -1;
	} 
	return 0;
}
     6cc:	08 95       	ret

000006ce <joystick_direction_X>:

signed int joystick_direction_X(){
	signed int joy_X = read_converted(JOYSTICK_X);
     6ce:	80 e0       	ldi	r24, 0x00	; 0
     6d0:	0e 94 30 03 	call	0x660	; 0x660 <read_converted>
	if(joy_X >= 100){
     6d4:	84 36       	cpi	r24, 0x64	; 100
     6d6:	91 05       	cpc	r25, r1
     6d8:	64 f4       	brge	.+24     	; 0x6f2 <joystick_direction_X+0x24>
		return 1;
	} else if (joy_X <= -100) {
     6da:	21 e0       	ldi	r18, 0x01	; 1
     6dc:	30 e0       	ldi	r19, 0x00	; 0
     6de:	8d 39       	cpi	r24, 0x9D	; 157
     6e0:	9f 4f       	sbci	r25, 0xFF	; 255
     6e2:	14 f0       	brlt	.+4      	; 0x6e8 <joystick_direction_X+0x1a>
     6e4:	20 e0       	ldi	r18, 0x00	; 0
     6e6:	30 e0       	ldi	r19, 0x00	; 0
     6e8:	88 27       	eor	r24, r24
     6ea:	99 27       	eor	r25, r25
     6ec:	82 1b       	sub	r24, r18
     6ee:	93 0b       	sbc	r25, r19
     6f0:	08 95       	ret
}

signed int joystick_direction_X(){
	signed int joy_X = read_converted(JOYSTICK_X);
	if(joy_X >= 100){
		return 1;
     6f2:	81 e0       	ldi	r24, 0x01	; 1
     6f4:	90 e0       	ldi	r25, 0x00	; 0
	} else if (joy_X <= -100) {
		return -1;
	}
	return 0;
}
     6f6:	08 95       	ret

000006f8 <mcp2515_write>:
	} else {
		;//printf("MCP2515 is in config mode after reset\n");
	}
}

void mcp2515_write(uint8_t address, uint8_t data){
     6f8:	cf 93       	push	r28
     6fa:	df 93       	push	r29
     6fc:	d8 2f       	mov	r29, r24
     6fe:	c6 2f       	mov	r28, r22
	spi_select();
     700:	0e 94 e5 05 	call	0xbca	; 0xbca <spi_select>

	spi_send(MCP_WRITE);
     704:	82 e0       	ldi	r24, 0x02	; 2
     706:	0e 94 da 05 	call	0xbb4	; 0xbb4 <spi_send>
	spi_send(address);
     70a:	8d 2f       	mov	r24, r29
     70c:	0e 94 da 05 	call	0xbb4	; 0xbb4 <spi_send>
	spi_send(data);
     710:	8c 2f       	mov	r24, r28
     712:	0e 94 da 05 	call	0xbb4	; 0xbb4 <spi_send>

	spi_deselect();
     716:	0e 94 e7 05 	call	0xbce	; 0xbce <spi_deselect>
}
     71a:	df 91       	pop	r29
     71c:	cf 91       	pop	r28
     71e:	08 95       	ret

00000720 <mcp2515_request_to_send>:

void mcp2515_request_to_send(uint8_t command){
     720:	cf 93       	push	r28
	//Check last 3 bits of given command
	if (command <= 7) {
     722:	88 30       	cpi	r24, 0x08	; 8
     724:	18 f4       	brcc	.+6      	; 0x72c <mcp2515_request_to_send+0xc>
		command = MCP_RTS | command;
     726:	c8 2f       	mov	r28, r24
     728:	c0 68       	ori	r28, 0x80	; 128
     72a:	01 c0       	rjmp	.+2      	; 0x72e <mcp2515_request_to_send+0xe>
	} else {
		command = MCP_RTS;
     72c:	c0 e8       	ldi	r28, 0x80	; 128
	}

	//Select, send RTS command, then deselect
	spi_select();
     72e:	0e 94 e5 05 	call	0xbca	; 0xbca <spi_select>
	spi_send(command);
     732:	8c 2f       	mov	r24, r28
     734:	0e 94 da 05 	call	0xbb4	; 0xbb4 <spi_send>
	spi_deselect();
     738:	0e 94 e7 05 	call	0xbce	; 0xbce <spi_deselect>
}
     73c:	cf 91       	pop	r28
     73e:	08 95       	ret

00000740 <mcp2515_bit_modify>:

void mcp2515_bit_modify(uint8_t address, uint8_t mask, uint8_t data){
     740:	1f 93       	push	r17
     742:	cf 93       	push	r28
     744:	df 93       	push	r29
     746:	18 2f       	mov	r17, r24
     748:	d6 2f       	mov	r29, r22
     74a:	c4 2f       	mov	r28, r20
	spi_select();
     74c:	0e 94 e5 05 	call	0xbca	; 0xbca <spi_select>

	spi_send(MCP_BITMOD);
     750:	85 e0       	ldi	r24, 0x05	; 5
     752:	0e 94 da 05 	call	0xbb4	; 0xbb4 <spi_send>
	spi_send(address);
     756:	81 2f       	mov	r24, r17
     758:	0e 94 da 05 	call	0xbb4	; 0xbb4 <spi_send>
	spi_send(mask);
     75c:	8d 2f       	mov	r24, r29
     75e:	0e 94 da 05 	call	0xbb4	; 0xbb4 <spi_send>
	spi_send(data);
     762:	8c 2f       	mov	r24, r28
     764:	0e 94 da 05 	call	0xbb4	; 0xbb4 <spi_send>

	spi_deselect();
     768:	0e 94 e7 05 	call	0xbce	; 0xbce <spi_deselect>
}
     76c:	df 91       	pop	r29
     76e:	cf 91       	pop	r28
     770:	1f 91       	pop	r17
     772:	08 95       	ret

00000774 <mcp2515_reset>:

void mcp2515_reset(){
	spi_select();
     774:	0e 94 e5 05 	call	0xbca	; 0xbca <spi_select>
	spi_send(MCP_RESET);	
     778:	80 ec       	ldi	r24, 0xC0	; 192
     77a:	0e 94 da 05 	call	0xbb4	; 0xbb4 <spi_send>
	spi_deselect();
     77e:	0e 94 e7 05 	call	0xbce	; 0xbce <spi_deselect>
     782:	08 95       	ret

00000784 <mcp2515_read>:
}


uint8_t mcp2515_read(uint8_t address){
     784:	cf 93       	push	r28
     786:	c8 2f       	mov	r28, r24
	uint8_t result;

	spi_select();
     788:	0e 94 e5 05 	call	0xbca	; 0xbca <spi_select>
	
	//Send command and address, then read result
	spi_send(MCP_READ);
     78c:	83 e0       	ldi	r24, 0x03	; 3
     78e:	0e 94 da 05 	call	0xbb4	; 0xbb4 <spi_send>
	spi_send(address);
     792:	8c 2f       	mov	r24, r28
     794:	0e 94 da 05 	call	0xbb4	; 0xbb4 <spi_send>

	result = spi_read();
     798:	0e 94 de 05 	call	0xbbc	; 0xbbc <spi_read>
     79c:	c8 2f       	mov	r28, r24
	spi_deselect();
     79e:	0e 94 e7 05 	call	0xbce	; 0xbce <spi_deselect>

	return result;	
}
     7a2:	8c 2f       	mov	r24, r28
     7a4:	cf 91       	pop	r28
     7a6:	08 95       	ret

000007a8 <mcp2515_init>:
#include <avr/io.h>
#include "uart_driver.h"
#include "spi_driver.h"
#include "mcp2515_driver.h"

void mcp2515_init() {
     7a8:	cf 93       	push	r28
     7aa:	df 93       	push	r29
     7ac:	1f 92       	push	r1
     7ae:	cd b7       	in	r28, 0x3d	; 61
     7b0:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t value_check;

	//Start SPI driver
	spi_init();
     7b2:	0e 94 d2 05 	call	0xba4	; 0xba4 <spi_init>

	mcp2515_reset();
     7b6:	0e 94 ba 03 	call	0x774	; 0x774 <mcp2515_reset>
	
	//Testing for correct initialization
	value_check = mcp2515_read(MCP_CANSTAT);
     7ba:	8e e0       	ldi	r24, 0x0E	; 14
     7bc:	0e 94 c2 03 	call	0x784	; 0x784 <mcp2515_read>
     7c0:	89 83       	std	Y+1, r24	; 0x01
	if ((value_check & MODE_MASK) != MODE_CONFIG) {
     7c2:	89 81       	ldd	r24, Y+1	; 0x01
     7c4:	80 7e       	andi	r24, 0xE0	; 224
     7c6:	80 38       	cpi	r24, 0x80	; 128
     7c8:	21 f0       	breq	.+8      	; 0x7d2 <mcp2515_init+0x2a>
		printf("MCP2515 is not in config mode after reset\n");
     7ca:	8f e6       	ldi	r24, 0x6F	; 111
     7cc:	91 e0       	ldi	r25, 0x01	; 1
     7ce:	0e 94 55 0a 	call	0x14aa	; 0x14aa <puts>
	} else {
		;//printf("MCP2515 is in config mode after reset\n");
	}
}
     7d2:	0f 90       	pop	r0
     7d4:	df 91       	pop	r29
     7d6:	cf 91       	pop	r28
     7d8:	08 95       	ret

000007da <mcp2515_set_loopback_mode>:
	spi_deselect();

	return result;
}

void mcp2515_set_loopback_mode(){
     7da:	cf 93       	push	r28
	mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_LOOPBACK);
     7dc:	40 e4       	ldi	r20, 0x40	; 64
     7de:	60 ee       	ldi	r22, 0xE0	; 224
     7e0:	8f e0       	ldi	r24, 0x0F	; 15
     7e2:	0e 94 a0 03 	call	0x740	; 0x740 <mcp2515_bit_modify>

	uint8_t operation_mode = mcp2515_read(MCP_CANSTAT) & MODE_MASK;
     7e6:	8e e0       	ldi	r24, 0x0E	; 14
     7e8:	0e 94 c2 03 	call	0x784	; 0x784 <mcp2515_read>
     7ec:	c8 2f       	mov	r28, r24
     7ee:	c0 7e       	andi	r28, 0xE0	; 224

	if (operation_mode != MODE_LOOPBACK) {
     7f0:	c0 34       	cpi	r28, 0x40	; 64
     7f2:	29 f0       	breq	.+10     	; 0x7fe <mcp2515_set_loopback_mode+0x24>
		printf("Not in loopback operation mode\n");
     7f4:	89 e9       	ldi	r24, 0x99	; 153
     7f6:	91 e0       	ldi	r25, 0x01	; 1
     7f8:	0e 94 55 0a 	call	0x14aa	; 0x14aa <puts>
     7fc:	04 c0       	rjmp	.+8      	; 0x806 <mcp2515_set_loopback_mode+0x2c>
	} else {
		printf("In loopback operation mode\n");
     7fe:	88 eb       	ldi	r24, 0xB8	; 184
     800:	91 e0       	ldi	r25, 0x01	; 1
     802:	0e 94 55 0a 	call	0x14aa	; 0x14aa <puts>
	}
	printf("MODE_LOOPBACK: %x\n", MODE_LOOPBACK);
     806:	1f 92       	push	r1
     808:	80 e4       	ldi	r24, 0x40	; 64
     80a:	8f 93       	push	r24
     80c:	23 ed       	ldi	r18, 0xD3	; 211
     80e:	31 e0       	ldi	r19, 0x01	; 1
     810:	3f 93       	push	r19
     812:	2f 93       	push	r18
     814:	0e 94 41 0a 	call	0x1482	; 0x1482 <printf>
	printf("Op mode: %x\n", operation_mode);
     818:	1f 92       	push	r1
     81a:	cf 93       	push	r28
     81c:	86 ee       	ldi	r24, 0xE6	; 230
     81e:	91 e0       	ldi	r25, 0x01	; 1
     820:	9f 93       	push	r25
     822:	8f 93       	push	r24
     824:	0e 94 41 0a 	call	0x1482	; 0x1482 <printf>
     828:	8d b7       	in	r24, 0x3d	; 61
     82a:	9e b7       	in	r25, 0x3e	; 62
     82c:	08 96       	adiw	r24, 0x08	; 8
     82e:	0f b6       	in	r0, 0x3f	; 63
     830:	f8 94       	cli
     832:	9e bf       	out	0x3e, r25	; 62
     834:	0f be       	out	0x3f, r0	; 63
     836:	8d bf       	out	0x3d, r24	; 61
}
     838:	cf 91       	pop	r28
     83a:	08 95       	ret

0000083c <oled_print_char>:
		//Set higher column address                                                                                                                                                                                                                                                                                                                                                                     
		*oled_command_addr = 0x10 + (column * (FONTWIDTH)>>4);
	}
}

void oled_print_char(char ch){
     83c:	28 e0       	ldi	r18, 0x08	; 8
     83e:	82 9f       	mul	r24, r18
     840:	c0 01       	movw	r24, r0
     842:	11 24       	eor	r1, r1
     844:	fc 01       	movw	r30, r24
     846:	e0 59       	subi	r30, 0x90	; 144
     848:	f0 40       	sbci	r31, 0x00	; 0
	for (uint8_t i = 0; i<FONTWIDTH; i++) {
     84a:	80 e0       	ldi	r24, 0x00	; 0
		oled_write_data(pgm_read_byte(&font[ch - FONTOFFSET][i]));
     84c:	94 91       	lpm	r25, Z
void oled_write_command(uint8_t command){
	*oled_command_addr = command;
}

void oled_write_data(uint8_t data){
	*oled_data_addr = data;
     84e:	a0 91 0a 01 	lds	r26, 0x010A
     852:	b0 91 0b 01 	lds	r27, 0x010B
     856:	9c 93       	st	X, r25
		*oled_command_addr = 0x10 + (column * (FONTWIDTH)>>4);
	}
}

void oled_print_char(char ch){
	for (uint8_t i = 0; i<FONTWIDTH; i++) {
     858:	8f 5f       	subi	r24, 0xFF	; 255
     85a:	31 96       	adiw	r30, 0x01	; 1
     85c:	88 30       	cpi	r24, 0x08	; 8
     85e:	b1 f7       	brne	.-20     	; 0x84c <oled_print_char+0x10>
		oled_write_data(pgm_read_byte(&font[ch - FONTOFFSET][i]));
	}
}
     860:	08 95       	ret

00000862 <oled_goto_page>:
void oled_back(){
	
}

void oled_goto_page(unsigned int page) {
	oled_write_command(0xB0 + page);
     862:	90 eb       	ldi	r25, 0xB0	; 176
     864:	98 0f       	add	r25, r24
	_delay_ms(800);
	oled_clear_screen();
}

void oled_write_command(uint8_t command){
	*oled_command_addr = command;
     866:	e0 91 0c 01 	lds	r30, 0x010C
     86a:	f0 91 0d 01 	lds	r31, 0x010D
     86e:	90 83       	st	Z, r25
	
}

void oled_goto_page(unsigned int page) {
	oled_write_command(0xB0 + page);
	global_page = page;
     870:	80 93 8c 04 	sts	0x048C, r24
     874:	80 e1       	ldi	r24, 0x10	; 16
     876:	8a 95       	dec	r24
     878:	f1 f7       	brne	.-4      	; 0x876 <oled_goto_page+0x14>
     87a:	00 c0       	rjmp	.+0      	; 0x87c <oled_goto_page+0x1a>
     87c:	08 95       	ret

0000087e <oled_clear_line>:
	_delay_us(50);
}

void oled_clear_line(){
     87e:	80 e8       	ldi	r24, 0x80	; 128
     880:	90 e0       	ldi	r25, 0x00	; 0
void oled_write_command(uint8_t command){
	*oled_command_addr = command;
}

void oled_write_data(uint8_t data){
	*oled_data_addr = data;
     882:	e0 91 0a 01 	lds	r30, 0x010A
     886:	f0 91 0b 01 	lds	r31, 0x010B
     88a:	10 82       	st	Z, r1
     88c:	01 97       	sbiw	r24, 0x01	; 1
	global_page = page;
	_delay_us(50);
}

void oled_clear_line(){
	for (int i = 0; i<128; i++) {
     88e:	00 97       	sbiw	r24, 0x00	; 0
     890:	c1 f7       	brne	.-16     	; 0x882 <oled_clear_line+0x4>
		oled_write_data(0b00000000);
	}
}
     892:	08 95       	ret

00000894 <oled_clear_screen>:

void oled_clear_screen() {
     894:	cf 93       	push	r28
     896:	df 93       	push	r29
     898:	c0 e0       	ldi	r28, 0x00	; 0
     89a:	d0 e0       	ldi	r29, 0x00	; 0
	for (uint8_t i = 0; i<8; i++) {
		oled_goto_page(i);
     89c:	ce 01       	movw	r24, r28
     89e:	0e 94 31 04 	call	0x862	; 0x862 <oled_goto_page>
		oled_clear_line();
     8a2:	0e 94 3f 04 	call	0x87e	; 0x87e <oled_clear_line>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8a6:	83 ed       	ldi	r24, 0xD3	; 211
     8a8:	90 e3       	ldi	r25, 0x30	; 48
     8aa:	01 97       	sbiw	r24, 0x01	; 1
     8ac:	f1 f7       	brne	.-4      	; 0x8aa <oled_clear_screen+0x16>
     8ae:	00 c0       	rjmp	.+0      	; 0x8b0 <oled_clear_screen+0x1c>
     8b0:	00 00       	nop
     8b2:	21 96       	adiw	r28, 0x01	; 1
		oled_write_data(0b00000000);
	}
}

void oled_clear_screen() {
	for (uint8_t i = 0; i<8; i++) {
     8b4:	c8 30       	cpi	r28, 0x08	; 8
     8b6:	d1 05       	cpc	r29, r1
     8b8:	89 f7       	brne	.-30     	; 0x89c <oled_clear_screen+0x8>
		oled_goto_page(i);
		oled_clear_line();
		_delay_ms(50);
	}
}
     8ba:	df 91       	pop	r29
     8bc:	cf 91       	pop	r28
     8be:	08 95       	ret

000008c0 <oled_pos>:

void oled_pos(unsigned int row, unsigned int column){
     8c0:	cf 93       	push	r28
     8c2:	df 93       	push	r29
     8c4:	eb 01       	movw	r28, r22
	oled_goto_page(row);
     8c6:	0e 94 31 04 	call	0x862	; 0x862 <oled_goto_page>
	if(column < (128/FONTWIDTH)){
     8ca:	c0 31       	cpi	r28, 0x10	; 16
     8cc:	d1 05       	cpc	r29, r1
     8ce:	e8 f4       	brcc	.+58     	; 0x90a <oled_pos+0x4a>
		//Save column program goes to
		global_col = column * FONTWIDTH;
     8d0:	8c 2f       	mov	r24, r28
     8d2:	88 0f       	add	r24, r24
     8d4:	88 0f       	add	r24, r24
     8d6:	88 0f       	add	r24, r24
     8d8:	80 93 8d 04 	sts	0x048D, r24
		//Set lower column address
		*oled_command_addr = 0x00 + (column * (FONTWIDTH)>>4);
     8dc:	e0 91 0c 01 	lds	r30, 0x010C
     8e0:	f0 91 0d 01 	lds	r31, 0x010D
     8e4:	cc 0f       	add	r28, r28
     8e6:	dd 1f       	adc	r29, r29
     8e8:	cc 0f       	add	r28, r28
     8ea:	dd 1f       	adc	r29, r29
     8ec:	cc 0f       	add	r28, r28
     8ee:	dd 1f       	adc	r29, r29
     8f0:	d2 95       	swap	r29
     8f2:	c2 95       	swap	r28
     8f4:	cf 70       	andi	r28, 0x0F	; 15
     8f6:	cd 27       	eor	r28, r29
     8f8:	df 70       	andi	r29, 0x0F	; 15
     8fa:	cd 27       	eor	r28, r29
     8fc:	c0 83       	st	Z, r28
		//Set higher column address                                                                                                                                                                                                                                                                                                                                                                     
		*oled_command_addr = 0x10 + (column * (FONTWIDTH)>>4);
     8fe:	e0 91 0c 01 	lds	r30, 0x010C
     902:	f0 91 0d 01 	lds	r31, 0x010D
     906:	c0 5f       	subi	r28, 0xF0	; 240
     908:	c0 83       	st	Z, r28
	}
}
     90a:	df 91       	pop	r29
     90c:	cf 91       	pop	r28
     90e:	08 95       	ret

00000910 <oled_printf>:
	for (uint8_t i = 0; i<FONTWIDTH; i++) {
		oled_write_data(pgm_read_byte(&font[ch - FONTOFFSET][i]));
	}
}

void oled_printf(char* fmt, ...){
     910:	cf 93       	push	r28
     912:	df 93       	push	r29
     914:	cd b7       	in	r28, 0x3d	; 61
     916:	de b7       	in	r29, 0x3e	; 62
     918:	fe 01       	movw	r30, r28
     91a:	35 96       	adiw	r30, 0x05	; 5
     91c:	61 91       	ld	r22, Z+
     91e:	71 91       	ld	r23, Z+
	va_list v;
	va_start(v, fmt);
	vfprintf(&oled_stdout, fmt, v);
     920:	af 01       	movw	r20, r30
     922:	8e e0       	ldi	r24, 0x0E	; 14
     924:	91 e0       	ldi	r25, 0x01	; 1
     926:	0e 94 82 0a 	call	0x1504	; 0x1504 <vfprintf>
	va_end(v);
}
     92a:	df 91       	pop	r29
     92c:	cf 91       	pop	r28
     92e:	08 95       	ret

00000930 <oled_init>:
	_delay_ms(800);
	oled_clear_screen();
}

void oled_write_command(uint8_t command){
	*oled_command_addr = command;
     930:	e0 91 0c 01 	lds	r30, 0x010C
     934:	f0 91 0d 01 	lds	r31, 0x010D
     938:	8e ea       	ldi	r24, 0xAE	; 174
     93a:	80 83       	st	Z, r24
     93c:	e0 91 0c 01 	lds	r30, 0x010C
     940:	f0 91 0d 01 	lds	r31, 0x010D
     944:	81 ea       	ldi	r24, 0xA1	; 161
     946:	80 83       	st	Z, r24
     948:	e0 91 0c 01 	lds	r30, 0x010C
     94c:	f0 91 0d 01 	lds	r31, 0x010D
     950:	8a ed       	ldi	r24, 0xDA	; 218
     952:	80 83       	st	Z, r24
     954:	e0 91 0c 01 	lds	r30, 0x010C
     958:	f0 91 0d 01 	lds	r31, 0x010D
     95c:	82 e1       	ldi	r24, 0x12	; 18
     95e:	80 83       	st	Z, r24
     960:	e0 91 0c 01 	lds	r30, 0x010C
     964:	f0 91 0d 01 	lds	r31, 0x010D
     968:	88 ec       	ldi	r24, 0xC8	; 200
     96a:	80 83       	st	Z, r24
     96c:	e0 91 0c 01 	lds	r30, 0x010C
     970:	f0 91 0d 01 	lds	r31, 0x010D
     974:	88 ea       	ldi	r24, 0xA8	; 168
     976:	80 83       	st	Z, r24
     978:	e0 91 0c 01 	lds	r30, 0x010C
     97c:	f0 91 0d 01 	lds	r31, 0x010D
     980:	8f e3       	ldi	r24, 0x3F	; 63
     982:	80 83       	st	Z, r24
     984:	e0 91 0c 01 	lds	r30, 0x010C
     988:	f0 91 0d 01 	lds	r31, 0x010D
     98c:	85 ed       	ldi	r24, 0xD5	; 213
     98e:	80 83       	st	Z, r24
     990:	e0 91 0c 01 	lds	r30, 0x010C
     994:	f0 91 0d 01 	lds	r31, 0x010D
     998:	80 e8       	ldi	r24, 0x80	; 128
     99a:	80 83       	st	Z, r24
     99c:	e0 91 0c 01 	lds	r30, 0x010C
     9a0:	f0 91 0d 01 	lds	r31, 0x010D
     9a4:	81 e8       	ldi	r24, 0x81	; 129
     9a6:	80 83       	st	Z, r24
     9a8:	e0 91 0c 01 	lds	r30, 0x010C
     9ac:	f0 91 0d 01 	lds	r31, 0x010D
     9b0:	80 e5       	ldi	r24, 0x50	; 80
     9b2:	80 83       	st	Z, r24
     9b4:	e0 91 0c 01 	lds	r30, 0x010C
     9b8:	f0 91 0d 01 	lds	r31, 0x010D
     9bc:	89 ed       	ldi	r24, 0xD9	; 217
     9be:	80 83       	st	Z, r24
     9c0:	e0 91 0c 01 	lds	r30, 0x010C
     9c4:	f0 91 0d 01 	lds	r31, 0x010D
     9c8:	81 e2       	ldi	r24, 0x21	; 33
     9ca:	80 83       	st	Z, r24
     9cc:	e0 91 0c 01 	lds	r30, 0x010C
     9d0:	f0 91 0d 01 	lds	r31, 0x010D
     9d4:	80 e2       	ldi	r24, 0x20	; 32
     9d6:	80 83       	st	Z, r24
     9d8:	e0 91 0c 01 	lds	r30, 0x010C
     9dc:	f0 91 0d 01 	lds	r31, 0x010D
     9e0:	82 e0       	ldi	r24, 0x02	; 2
     9e2:	80 83       	st	Z, r24
     9e4:	e0 91 0c 01 	lds	r30, 0x010C
     9e8:	f0 91 0d 01 	lds	r31, 0x010D
     9ec:	8b ed       	ldi	r24, 0xDB	; 219
     9ee:	80 83       	st	Z, r24
     9f0:	e0 91 0c 01 	lds	r30, 0x010C
     9f4:	f0 91 0d 01 	lds	r31, 0x010D
     9f8:	80 e3       	ldi	r24, 0x30	; 48
     9fa:	80 83       	st	Z, r24
     9fc:	e0 91 0c 01 	lds	r30, 0x010C
     a00:	f0 91 0d 01 	lds	r31, 0x010D
     a04:	8d ea       	ldi	r24, 0xAD	; 173
     a06:	80 83       	st	Z, r24
     a08:	e0 91 0c 01 	lds	r30, 0x010C
     a0c:	f0 91 0d 01 	lds	r31, 0x010D
     a10:	10 82       	st	Z, r1
     a12:	e0 91 0c 01 	lds	r30, 0x010C
     a16:	f0 91 0d 01 	lds	r31, 0x010D
     a1a:	84 ea       	ldi	r24, 0xA4	; 164
     a1c:	80 83       	st	Z, r24
     a1e:	e0 91 0c 01 	lds	r30, 0x010C
     a22:	f0 91 0d 01 	lds	r31, 0x010D
     a26:	86 ea       	ldi	r24, 0xA6	; 166
     a28:	80 83       	st	Z, r24
     a2a:	e0 91 0c 01 	lds	r30, 0x010C
     a2e:	f0 91 0d 01 	lds	r31, 0x010D
     a32:	8f ea       	ldi	r24, 0xAF	; 175
     a34:	80 83       	st	Z, r24
	oled_write_command(0x00);
	oled_write_command(0xa4);    //out follows RAM content
	oled_write_command(0xa6);    //set normal display
	oled_write_command(0xaf);    // display on
	
	oled_clear_screen();
     a36:	0e 94 4a 04 	call	0x894	; 0x894 <oled_clear_screen>
	oled_pos(2,3);
     a3a:	63 e0       	ldi	r22, 0x03	; 3
     a3c:	70 e0       	ldi	r23, 0x00	; 0
     a3e:	82 e0       	ldi	r24, 0x02	; 2
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	0e 94 60 04 	call	0x8c0	; 0x8c0 <oled_pos>
	oled_printf(" #SWAG");
     a46:	8e ef       	ldi	r24, 0xFE	; 254
     a48:	91 e0       	ldi	r25, 0x01	; 1
     a4a:	9f 93       	push	r25
     a4c:	8f 93       	push	r24
     a4e:	0e 94 88 04 	call	0x910	; 0x910 <oled_printf>
	oled_pos(3,7);
     a52:	67 e0       	ldi	r22, 0x07	; 7
     a54:	70 e0       	ldi	r23, 0x00	; 0
     a56:	83 e0       	ldi	r24, 0x03	; 3
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	0e 94 60 04 	call	0x8c0	; 0x8c0 <oled_pos>
	oled_printf("  4");
     a5e:	85 e0       	ldi	r24, 0x05	; 5
     a60:	92 e0       	ldi	r25, 0x02	; 2
     a62:	9f 93       	push	r25
     a64:	8f 93       	push	r24
     a66:	0e 94 88 04 	call	0x910	; 0x910 <oled_printf>
	oled_pos(4,9);
     a6a:	69 e0       	ldi	r22, 0x09	; 9
     a6c:	70 e0       	ldi	r23, 0x00	; 0
     a6e:	84 e0       	ldi	r24, 0x04	; 4
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	0e 94 60 04 	call	0x8c0	; 0x8c0 <oled_pos>
	oled_printf(" LYFE");
     a76:	89 e0       	ldi	r24, 0x09	; 9
     a78:	92 e0       	ldi	r25, 0x02	; 2
     a7a:	9f 93       	push	r25
     a7c:	8f 93       	push	r24
     a7e:	0e 94 88 04 	call	0x910	; 0x910 <oled_printf>
     a82:	2f ef       	ldi	r18, 0xFF	; 255
     a84:	80 e7       	ldi	r24, 0x70	; 112
     a86:	92 e0       	ldi	r25, 0x02	; 2
     a88:	21 50       	subi	r18, 0x01	; 1
     a8a:	80 40       	sbci	r24, 0x00	; 0
     a8c:	90 40       	sbci	r25, 0x00	; 0
     a8e:	e1 f7       	brne	.-8      	; 0xa88 <oled_init+0x158>
     a90:	00 c0       	rjmp	.+0      	; 0xa92 <oled_init+0x162>
     a92:	00 00       	nop
	_delay_ms(800);
	oled_clear_screen();
     a94:	0e 94 4a 04 	call	0x894	; 0x894 <oled_clear_screen>
     a98:	0f 90       	pop	r0
     a9a:	0f 90       	pop	r0
     a9c:	0f 90       	pop	r0
     a9e:	0f 90       	pop	r0
     aa0:	0f 90       	pop	r0
     aa2:	0f 90       	pop	r0
     aa4:	08 95       	ret

00000aa6 <oled_get_arrow_page>:

//Arrow functions

uint8_t oled_get_arrow_page(){
	return arrow_global;
}
     aa6:	80 91 86 04 	lds	r24, 0x0486
     aaa:	08 95       	ret

00000aac <oled_print_arrow>:

void oled_print_arrow(uint8_t row, uint8_t col){
	arrow_global = row;
     aac:	80 93 86 04 	sts	0x0486, r24
	oled_pos(row, col);
     ab0:	70 e0       	ldi	r23, 0x00	; 0
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	0e 94 60 04 	call	0x8c0	; 0x8c0 <oled_pos>
void oled_write_command(uint8_t command){
	*oled_command_addr = command;
}

void oled_write_data(uint8_t data){
	*oled_data_addr = data;
     ab8:	e0 91 0a 01 	lds	r30, 0x010A
     abc:	f0 91 0b 01 	lds	r31, 0x010B
     ac0:	88 e1       	ldi	r24, 0x18	; 24
     ac2:	80 83       	st	Z, r24
     ac4:	e0 91 0a 01 	lds	r30, 0x010A
     ac8:	f0 91 0b 01 	lds	r31, 0x010B
     acc:	80 83       	st	Z, r24
     ace:	e0 91 0a 01 	lds	r30, 0x010A
     ad2:	f0 91 0b 01 	lds	r31, 0x010B
     ad6:	9e e7       	ldi	r25, 0x7E	; 126
     ad8:	90 83       	st	Z, r25
     ada:	e0 91 0a 01 	lds	r30, 0x010A
     ade:	f0 91 0b 01 	lds	r31, 0x010B
     ae2:	9c e3       	ldi	r25, 0x3C	; 60
     ae4:	90 83       	st	Z, r25
     ae6:	e0 91 0a 01 	lds	r30, 0x010A
     aea:	f0 91 0b 01 	lds	r31, 0x010B
     aee:	80 83       	st	Z, r24
     af0:	08 95       	ret

00000af2 <oled_clear_arrow>:
	oled_write_data(0b00111100);
	oled_write_data(0b00011000);
}

void oled_clear_arrow(uint8_t row, uint8_t col){
	oled_pos(row, col);
     af2:	70 e0       	ldi	r23, 0x00	; 0
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	0e 94 60 04 	call	0x8c0	; 0x8c0 <oled_pos>
void oled_write_command(uint8_t command){
	*oled_command_addr = command;
}

void oled_write_data(uint8_t data){
	*oled_data_addr = data;
     afa:	e0 91 0a 01 	lds	r30, 0x010A
     afe:	f0 91 0b 01 	lds	r31, 0x010B
     b02:	10 82       	st	Z, r1
     b04:	e0 91 0a 01 	lds	r30, 0x010A
     b08:	f0 91 0b 01 	lds	r31, 0x010B
     b0c:	10 82       	st	Z, r1
     b0e:	e0 91 0a 01 	lds	r30, 0x010A
     b12:	f0 91 0b 01 	lds	r31, 0x010B
     b16:	10 82       	st	Z, r1
     b18:	e0 91 0a 01 	lds	r30, 0x010A
     b1c:	f0 91 0b 01 	lds	r31, 0x010B
     b20:	10 82       	st	Z, r1
     b22:	e0 91 0a 01 	lds	r30, 0x010A
     b26:	f0 91 0b 01 	lds	r31, 0x010B
     b2a:	10 82       	st	Z, r1
     b2c:	08 95       	ret

00000b2e <oled_move_arrow>:
	oled_write_data(0b00000000);
	oled_write_data(0b00000000);
}

void oled_move_arrow(signed int joystick_Y, unsigned int menu_min, unsigned int menu_max){
	if(joystick_Y < 0 && arrow_global < menu_max) {
     b2e:	99 23       	and	r25, r25
     b30:	a4 f4       	brge	.+40     	; 0xb5a <oled_move_arrow+0x2c>
     b32:	e0 91 86 04 	lds	r30, 0x0486
     b36:	2e 2f       	mov	r18, r30
     b38:	30 e0       	ldi	r19, 0x00	; 0
     b3a:	24 17       	cp	r18, r20
     b3c:	35 07       	cpc	r19, r21
     b3e:	68 f4       	brcc	.+26     	; 0xb5a <oled_move_arrow+0x2c>
		oled_clear_arrow(arrow_global, 0);
     b40:	60 e0       	ldi	r22, 0x00	; 0
     b42:	8e 2f       	mov	r24, r30
     b44:	0e 94 79 05 	call	0xaf2	; 0xaf2 <oled_clear_arrow>
		arrow_global++;
     b48:	80 91 86 04 	lds	r24, 0x0486
     b4c:	8f 5f       	subi	r24, 0xFF	; 255
     b4e:	80 93 86 04 	sts	0x0486, r24
		oled_print_arrow(arrow_global, 0);
     b52:	60 e0       	ldi	r22, 0x00	; 0
     b54:	0e 94 56 05 	call	0xaac	; 0xaac <oled_print_arrow>
     b58:	08 95       	ret
	} else if (joystick_Y > 0 && arrow_global > menu_min) {
     b5a:	18 16       	cp	r1, r24
     b5c:	19 06       	cpc	r1, r25
     b5e:	94 f4       	brge	.+36     	; 0xb84 <oled_move_arrow+0x56>
     b60:	80 91 86 04 	lds	r24, 0x0486
     b64:	28 2f       	mov	r18, r24
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	62 17       	cp	r22, r18
     b6a:	73 07       	cpc	r23, r19
     b6c:	58 f4       	brcc	.+22     	; 0xb84 <oled_move_arrow+0x56>
		oled_clear_arrow(arrow_global, 0);
     b6e:	60 e0       	ldi	r22, 0x00	; 0
     b70:	0e 94 79 05 	call	0xaf2	; 0xaf2 <oled_clear_arrow>
		arrow_global--;
     b74:	80 91 86 04 	lds	r24, 0x0486
     b78:	81 50       	subi	r24, 0x01	; 1
     b7a:	80 93 86 04 	sts	0x0486, r24
		oled_print_arrow(arrow_global, 0);
     b7e:	60 e0       	ldi	r22, 0x00	; 0
     b80:	0e 94 56 05 	call	0xaac	; 0xaac <oled_print_arrow>
     b84:	08 95       	ret

00000b86 <oled_arrow_handler>:
	}
}

unsigned int oled_arrow_handler(signed int joystick_Y, unsigned int menu_min, unsigned int menu_max){
	oled_move_arrow(joystick_Y, menu_min, menu_max);
     b86:	0e 94 97 05 	call	0xb2e	; 0xb2e <oled_move_arrow>
     b8a:	2f e9       	ldi	r18, 0x9F	; 159
     b8c:	86 e8       	ldi	r24, 0x86	; 134
     b8e:	91 e0       	ldi	r25, 0x01	; 1
     b90:	21 50       	subi	r18, 0x01	; 1
     b92:	80 40       	sbci	r24, 0x00	; 0
     b94:	90 40       	sbci	r25, 0x00	; 0
     b96:	e1 f7       	brne	.-8      	; 0xb90 <oled_arrow_handler+0xa>
     b98:	00 c0       	rjmp	.+0      	; 0xb9a <oled_arrow_handler+0x14>
     b9a:	00 00       	nop
	_delay_ms(500);
	return arrow_global;
     b9c:	80 91 86 04 	lds	r24, 0x0486
}
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	08 95       	ret

00000ba4 <spi_init>:
#define SPI_MISO PB6
#define SPI_SCK PB7 

void spi_init(){
	//Set MOSI, SCK and SS as output pins 	
	DDRB |= (1 << SPI_MOSI) | (1 << SPI_SCK) | (1 << SPI_SS);
     ba4:	87 b3       	in	r24, 0x17	; 23
     ba6:	80 6b       	ori	r24, 0xB0	; 176
     ba8:	87 bb       	out	0x17, r24	; 23
	
	//Set MISO as input pin
	DDRB &= ~(1 << SPI_MISO);
     baa:	be 98       	cbi	0x17, 6	; 23
	
	//Enable SPI in master mode and set clock rate fosc/16
	SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0);
     bac:	8d b1       	in	r24, 0x0d	; 13
     bae:	81 65       	ori	r24, 0x51	; 81
     bb0:	8d b9       	out	0x0d, r24	; 13
     bb2:	08 95       	ret

00000bb4 <spi_send>:
	return SPDR;
}

void spi_send(char data){
	//Start transmission
	SPDR = data;
     bb4:	8f b9       	out	0x0f, r24	; 15
	
	//Wait for transmission, checks if register is empty 
	while(!(SPSR & (1 << SPIF)));
     bb6:	77 9b       	sbis	0x0e, 7	; 14
     bb8:	fe cf       	rjmp	.-4      	; 0xbb6 <spi_send+0x2>
}
     bba:	08 95       	ret

00000bbc <spi_read>:
}


uint8_t spi_read(){
	//Dummy send in order to read from slave
	spi_send(0xaa);
     bbc:	8a ea       	ldi	r24, 0xAA	; 170
     bbe:	0e 94 da 05 	call	0xbb4	; 0xbb4 <spi_send>
	
	while(!(SPSR & (1 << SPIF)));
     bc2:	77 9b       	sbis	0x0e, 7	; 14
     bc4:	fe cf       	rjmp	.-4      	; 0xbc2 <spi_read+0x6>

	return SPDR;
     bc6:	8f b1       	in	r24, 0x0f	; 15
}
     bc8:	08 95       	ret

00000bca <spi_select>:
	while(!(SPSR & (1 << SPIF)));
}

void spi_select(){
	//Set !SS to 0 for selection of slave
	PORTB &= ~(1 << SPI_SS);
     bca:	c4 98       	cbi	0x18, 4	; 24
     bcc:	08 95       	ret

00000bce <spi_deselect>:
}

void spi_deselect(){
	//Set !SS to 1 for deselection of slave
	PORTB |= (1 << SPI_SS);
     bce:	c4 9a       	sbi	0x18, 4	; 24
     bd0:	08 95       	ret

00000bd2 <SRAM_test>:
	if (address_offset > 0x100) { return 0; }
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	return ext_ram[address_offset];
}

void SRAM_test(void) {
     bd2:	cf 92       	push	r12
     bd4:	df 92       	push	r13
     bd6:	ef 92       	push	r14
     bd8:	ff 92       	push	r15
     bda:	0f 93       	push	r16
     bdc:	1f 93       	push	r17
     bde:	cf 93       	push	r28
     be0:	df 93       	push	r29
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size       = 0x800;
	uint16_t write_errors       = 0;
	uint16_t retrieval_errors   = 0;

	oled_clear_screen();
     be2:	0e 94 4a 04 	call	0x894	; 0x894 <oled_clear_screen>
	oled_pos(3,2);
     be6:	62 e0       	ldi	r22, 0x02	; 2
     be8:	70 e0       	ldi	r23, 0x00	; 0
     bea:	83 e0       	ldi	r24, 0x03	; 3
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	0e 94 60 04 	call	0x8c0	; 0x8c0 <oled_pos>
	oled_printf("TESTING SRAM");
     bf2:	8f e0       	ldi	r24, 0x0F	; 15
     bf4:	92 e0       	ldi	r25, 0x02	; 2
     bf6:	9f 93       	push	r25
     bf8:	8f 93       	push	r24
     bfa:	0e 94 88 04 	call	0x910	; 0x910 <oled_printf>
	printf("\nStarting SRAM test...\n");
     bfe:	8c e1       	ldi	r24, 0x1C	; 28
     c00:	92 e0       	ldi	r25, 0x02	; 2
     c02:	0e 94 55 0a 	call	0x14aa	; 0x14aa <puts>

	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
     c06:	0e 94 31 0a 	call	0x1462	; 0x1462 <rand>
     c0a:	6c 01       	movw	r12, r24

	// Write phase: Immediately check that the correct value was stored
	srand(seed);
     c0c:	0e 94 36 0a 	call	0x146c	; 0x146c <srand>
     c10:	0f 90       	pop	r0
     c12:	0f 90       	pop	r0
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     c14:	c0 e0       	ldi	r28, 0x00	; 0
     c16:	d0 e0       	ldi	r29, 0x00	; 0
}

void SRAM_test(void) {
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size       = 0x800;
	uint16_t write_errors       = 0;
     c18:	00 e0       	ldi	r16, 0x00	; 0
     c1a:	10 e0       	ldi	r17, 0x00	; 0
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		ext_ram[i] = some_value;
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
     c1c:	0f 2e       	mov	r0, r31
     c1e:	f3 e3       	ldi	r31, 0x33	; 51
     c20:	ef 2e       	mov	r14, r31
     c22:	f2 e0       	ldi	r31, 0x02	; 2
     c24:	ff 2e       	mov	r15, r31
     c26:	f0 2d       	mov	r31, r0
	uint16_t seed = rand();

	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     c28:	0e 94 31 0a 	call	0x1462	; 0x1462 <rand>
     c2c:	fe 01       	movw	r30, r28
     c2e:	f8 5e       	subi	r31, 0xE8	; 232
		ext_ram[i] = some_value;
     c30:	80 83       	st	Z, r24
		uint8_t retreived_value = ext_ram[i];
     c32:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     c34:	28 17       	cp	r18, r24
     c36:	a9 f0       	breq	.+42     	; 0xc62 <SRAM_test+0x90>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
     c38:	99 27       	eor	r25, r25
     c3a:	9f 93       	push	r25
     c3c:	8f 93       	push	r24
     c3e:	1f 92       	push	r1
     c40:	2f 93       	push	r18
     c42:	df 93       	push	r29
     c44:	cf 93       	push	r28
     c46:	ff 92       	push	r15
     c48:	ef 92       	push	r14
     c4a:	0e 94 41 0a 	call	0x1482	; 0x1482 <printf>
			write_errors++;
     c4e:	0f 5f       	subi	r16, 0xFF	; 255
     c50:	1f 4f       	sbci	r17, 0xFF	; 255
     c52:	8d b7       	in	r24, 0x3d	; 61
     c54:	9e b7       	in	r25, 0x3e	; 62
     c56:	08 96       	adiw	r24, 0x08	; 8
     c58:	0f b6       	in	r0, 0x3f	; 63
     c5a:	f8 94       	cli
     c5c:	9e bf       	out	0x3e, r25	; 62
     c5e:	0f be       	out	0x3f, r0	; 63
     c60:	8d bf       	out	0x3d, r24	; 61
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();

	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     c62:	21 96       	adiw	r28, 0x01	; 1
     c64:	c1 15       	cp	r28, r1
     c66:	98 e0       	ldi	r25, 0x08	; 8
     c68:	d9 07       	cpc	r29, r25
     c6a:	f1 f6       	brne	.-68     	; 0xc28 <SRAM_test+0x56>
			write_errors++;
		}
	}

	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);    // reset the PRNG to the state it had before the write phase
     c6c:	c6 01       	movw	r24, r12
     c6e:	0e 94 36 0a 	call	0x146c	; 0x146c <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     c72:	c0 e0       	ldi	r28, 0x00	; 0
     c74:	d0 e0       	ldi	r29, 0x00	; 0

void SRAM_test(void) {
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size       = 0x800;
	uint16_t write_errors       = 0;
	uint16_t retrieval_errors   = 0;
     c76:	e1 2c       	mov	r14, r1
     c78:	f1 2c       	mov	r15, r1
	srand(seed);    // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
     c7a:	0f 2e       	mov	r0, r31
     c7c:	fc e6       	ldi	r31, 0x6C	; 108
     c7e:	cf 2e       	mov	r12, r31
     c80:	f2 e0       	ldi	r31, 0x02	; 2
     c82:	df 2e       	mov	r13, r31
     c84:	f0 2d       	mov	r31, r0
	}

	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);    // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     c86:	0e 94 31 0a 	call	0x1462	; 0x1462 <rand>
     c8a:	fe 01       	movw	r30, r28
     c8c:	f8 5e       	subi	r31, 0xE8	; 232
		uint8_t retreived_value = ext_ram[i];
     c8e:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     c90:	28 17       	cp	r18, r24
     c92:	b1 f0       	breq	.+44     	; 0xcc0 <SRAM_test+0xee>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
     c94:	99 27       	eor	r25, r25
     c96:	9f 93       	push	r25
     c98:	8f 93       	push	r24
     c9a:	1f 92       	push	r1
     c9c:	2f 93       	push	r18
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	df 92       	push	r13
     ca4:	cf 92       	push	r12
     ca6:	0e 94 41 0a 	call	0x1482	; 0x1482 <printf>
			retrieval_errors++;
     caa:	9f ef       	ldi	r25, 0xFF	; 255
     cac:	e9 1a       	sub	r14, r25
     cae:	f9 0a       	sbc	r15, r25
     cb0:	8d b7       	in	r24, 0x3d	; 61
     cb2:	9e b7       	in	r25, 0x3e	; 62
     cb4:	08 96       	adiw	r24, 0x08	; 8
     cb6:	0f b6       	in	r0, 0x3f	; 63
     cb8:	f8 94       	cli
     cba:	9e bf       	out	0x3e, r25	; 62
     cbc:	0f be       	out	0x3f, r0	; 63
     cbe:	8d bf       	out	0x3d, r24	; 61
		}
	}

	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);    // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     cc0:	21 96       	adiw	r28, 0x01	; 1
     cc2:	c1 15       	cp	r28, r1
     cc4:	98 e0       	ldi	r25, 0x08	; 8
     cc6:	d9 07       	cpc	r29, r25
     cc8:	f1 f6       	brne	.-68     	; 0xc86 <SRAM_test+0xb4>
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	if (retrieval_errors != 0 || write_errors != 0) { 
     cca:	e1 14       	cp	r14, r1
     ccc:	f1 04       	cpc	r15, r1
     cce:	19 f4       	brne	.+6      	; 0xcd6 <SRAM_test+0x104>
     cd0:	01 15       	cp	r16, r1
     cd2:	11 05       	cpc	r17, r1
     cd4:	71 f1       	breq	.+92     	; 0xd32 <SRAM_test+0x160>
		oled_pos(5,0);
     cd6:	60 e0       	ldi	r22, 0x00	; 0
     cd8:	70 e0       	ldi	r23, 0x00	; 0
     cda:	85 e0       	ldi	r24, 0x05	; 5
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	0e 94 60 04 	call	0x8c0	; 0x8c0 <oled_pos>
		oled_printf("R ERRORS:  %4d",retrieval_errors);
     ce2:	ff 92       	push	r15
     ce4:	ef 92       	push	r14
     ce6:	89 ea       	ldi	r24, 0xA9	; 169
     ce8:	92 e0       	ldi	r25, 0x02	; 2
     cea:	9f 93       	push	r25
     cec:	8f 93       	push	r24
     cee:	0e 94 88 04 	call	0x910	; 0x910 <oled_printf>
		oled_pos(6,0);
     cf2:	60 e0       	ldi	r22, 0x00	; 0
     cf4:	70 e0       	ldi	r23, 0x00	; 0
     cf6:	86 e0       	ldi	r24, 0x06	; 6
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	0e 94 60 04 	call	0x8c0	; 0x8c0 <oled_pos>
		oled_printf("W ERRORS:  %4d",write_errors);
     cfe:	1f 93       	push	r17
     d00:	0f 93       	push	r16
     d02:	88 eb       	ldi	r24, 0xB8	; 184
     d04:	92 e0       	ldi	r25, 0x02	; 2
     d06:	9f 93       	push	r25
     d08:	8f 93       	push	r24
     d0a:	0e 94 88 04 	call	0x910	; 0x910 <oled_printf>
     d0e:	2f ef       	ldi	r18, 0xFF	; 255
     d10:	8f ef       	ldi	r24, 0xFF	; 255
     d12:	9b e3       	ldi	r25, 0x3B	; 59
     d14:	21 50       	subi	r18, 0x01	; 1
     d16:	80 40       	sbci	r24, 0x00	; 0
     d18:	90 40       	sbci	r25, 0x00	; 0
     d1a:	e1 f7       	brne	.-8      	; 0xd14 <SRAM_test+0x142>
     d1c:	00 c0       	rjmp	.+0      	; 0xd1e <SRAM_test+0x14c>
     d1e:	00 00       	nop
     d20:	8d b7       	in	r24, 0x3d	; 61
     d22:	9e b7       	in	r25, 0x3e	; 62
     d24:	08 96       	adiw	r24, 0x08	; 8
     d26:	0f b6       	in	r0, 0x3f	; 63
     d28:	f8 94       	cli
     d2a:	9e bf       	out	0x3e, r25	; 62
     d2c:	0f be       	out	0x3f, r0	; 63
     d2e:	8d bf       	out	0x3d, r24	; 61
     d30:	0e c0       	rjmp	.+28     	; 0xd4e <SRAM_test+0x17c>
		_delay_ms(4000);
	} else {
		oled_pos(6,4);
     d32:	64 e0       	ldi	r22, 0x04	; 4
     d34:	70 e0       	ldi	r23, 0x00	; 0
     d36:	86 e0       	ldi	r24, 0x06	; 6
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	0e 94 60 04 	call	0x8c0	; 0x8c0 <oled_pos>
		oled_printf("NO ERRORS");
     d3e:	87 ec       	ldi	r24, 0xC7	; 199
     d40:	92 e0       	ldi	r25, 0x02	; 2
     d42:	9f 93       	push	r25
     d44:	8f 93       	push	r24
     d46:	0e 94 88 04 	call	0x910	; 0x910 <oled_printf>
     d4a:	0f 90       	pop	r0
     d4c:	0f 90       	pop	r0
	}
	printf("SRAM test completed with \n%4d errors in write phase and \n%4d errors in retrieval phase\n\n", write_errors, retrieval_errors);
     d4e:	ff 92       	push	r15
     d50:	ef 92       	push	r14
     d52:	1f 93       	push	r17
     d54:	0f 93       	push	r16
     d56:	81 ed       	ldi	r24, 0xD1	; 209
     d58:	92 e0       	ldi	r25, 0x02	; 2
     d5a:	9f 93       	push	r25
     d5c:	8f 93       	push	r24
     d5e:	0e 94 41 0a 	call	0x1482	; 0x1482 <printf>
     d62:	0f 90       	pop	r0
     d64:	0f 90       	pop	r0
     d66:	0f 90       	pop	r0
     d68:	0f 90       	pop	r0
     d6a:	0f 90       	pop	r0
     d6c:	0f 90       	pop	r0
     d6e:	df 91       	pop	r29
     d70:	cf 91       	pop	r28
     d72:	1f 91       	pop	r17
     d74:	0f 91       	pop	r16
     d76:	ff 90       	pop	r15
     d78:	ef 90       	pop	r14
     d7a:	df 90       	pop	r13
     d7c:	cf 90       	pop	r12
     d7e:	08 95       	ret

00000d80 <SRAM_init>:
#include "SRAM_driver.h"
#include "oled_driver.h"

//Simple setup for SRAM, also tests for correctness
void SRAM_init(){
	MCUCR = 0x80;
     d80:	80 e8       	ldi	r24, 0x80	; 128
     d82:	85 bf       	out	0x35, r24	; 53
	DDRA = 0xFF;
     d84:	8f ef       	ldi	r24, 0xFF	; 255
     d86:	8a bb       	out	0x1a, r24	; 26
	SRAM_test();
     d88:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <SRAM_test>
     d8c:	08 95       	ret

00000d8e <uart_sendChar>:

}

void uart_sendChar(unsigned char data){
	//Wait for empty transmitter buffer
	while(!(UCSR0A & (1<<UDRE0)));
     d8e:	5d 9b       	sbis	0x0b, 5	; 11
     d90:	fe cf       	rjmp	.-4      	; 0xd8e <uart_sendChar>
		
	//Put data into buffer, then send the data
	UDR0 = data;
     d92:	8c b9       	out	0x0c, r24	; 12
     d94:	08 95       	ret

00000d96 <uart_getChar>:
}


unsigned int uart_getChar(){
	//Wait for the data to be received 
	while(!(UCSR0A & (1<<RXC0))){}
     d96:	5f 9b       	sbis	0x0b, 7	; 11
     d98:	fe cf       	rjmp	.-4      	; 0xd96 <uart_getChar>
	
	//Get status and the 9th bit, then data from buffer
	return UDR0;
     d9a:	8c b1       	in	r24, 0x0c	; 12
}
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	08 95       	ret

00000da0 <uart_init>:

static FILE uart_io = FDEV_SETUP_STREAM(uart_sendChar, uart_getChar, _FDEV_SETUP_RW);

void uart_init(unsigned int ubrr){
	//Set baud rate
	UBRR0L = (unsigned int) ubrr;
     da0:	89 b9       	out	0x09, r24	; 9
	
	//Enable receiver and transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
     da2:	88 e1       	ldi	r24, 0x18	; 24
     da4:	8a b9       	out	0x0a, r24	; 10
	
	stdout = &uart_io;
     da6:	8c e1       	ldi	r24, 0x1C	; 28
     da8:	91 e0       	ldi	r25, 0x01	; 1
     daa:	90 93 95 04 	sts	0x0495, r25
     dae:	80 93 94 04 	sts	0x0494, r24
	stdin = &uart_io;
     db2:	90 93 93 04 	sts	0x0493, r25
     db6:	80 93 92 04 	sts	0x0492, r24
     dba:	08 95       	ret

00000dbc <main>:
#include "Drivers/uart_driver.h"
#include "Drivers/mcp2515_driver.h"
#include "Drivers/can_driver.h"

int main(void) {
    uart_init(MYUBRR);
     dbc:	8f e1       	ldi	r24, 0x1F	; 31
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	0e 94 d0 06 	call	0xda0	; 0xda0 <uart_init>
	printf("\nREBOOTED\n");
     dc4:	8a e2       	ldi	r24, 0x2A	; 42
     dc6:	93 e0       	ldi	r25, 0x03	; 3
     dc8:	0e 94 55 0a 	call	0x14aa	; 0x14aa <puts>
	SRAM_init();
     dcc:	0e 94 c0 06 	call	0xd80	; 0xd80 <SRAM_init>
	joystick_init();
     dd0:	0e 94 21 03 	call	0x642	; 0x642 <joystick_init>
	oled_init();
     dd4:	0e 94 98 04 	call	0x930	; 0x930 <oled_init>
	//mcp2515_init();
	can_init();	
     dd8:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <can_init>

	printf("\nAll init done\n\n");
     ddc:	84 e3       	ldi	r24, 0x34	; 52
     dde:	93 e0       	ldi	r25, 0x03	; 3
     de0:	0e 94 55 0a 	call	0x14aa	; 0x14aa <puts>

	//mcp2515_test();
	can_test();
     de4:	0e 94 c6 02 	call	0x58c	; 0x58c <can_test>

	while(1) { 
		//shell();
		//spi_test();

		menuitem* test_menu = MENU_create_menu();
     de8:	0e 94 50 07 	call	0xea0	; 0xea0 <MENU_create_menu>
		MENU_navigate(test_menu);
     dec:	0e 94 fc 07 	call	0xff8	; 0xff8 <MENU_navigate>
     df0:	fb cf       	rjmp	.-10     	; 0xde8 <main+0x2c>

00000df2 <MENU_new_item>:
	new_menu[0].items[0].child = NULL;
	
	return new_menu;	
}*/

menuitem* MENU_new_item(char *name, void (*handlerFunc)(void), uint8_t number_of_submenus) {
     df2:	df 92       	push	r13
     df4:	ef 92       	push	r14
     df6:	ff 92       	push	r15
     df8:	0f 93       	push	r16
     dfa:	1f 93       	push	r17
     dfc:	cf 93       	push	r28
     dfe:	df 93       	push	r29
     e00:	7c 01       	movw	r14, r24
     e02:	8b 01       	movw	r16, r22
     e04:	d4 2e       	mov	r13, r20
	menuitem* new_item = malloc(sizeof(menuitem));
     e06:	89 e0       	ldi	r24, 0x09	; 9
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	0e 94 bc 08 	call	0x1178	; 0x1178 <malloc>
     e0e:	ec 01       	movw	r28, r24
	
	new_item->name = name;
     e10:	fe 82       	std	Y+6, r15	; 0x06
     e12:	ed 82       	std	Y+5, r14	; 0x05
	new_item->handlerFunc = handlerFunc;
     e14:	18 87       	std	Y+8, r17	; 0x08
     e16:	0f 83       	std	Y+7, r16	; 0x07
	new_item->number_of_submenus = number_of_submenus;
     e18:	d8 82       	st	Y, r13
	new_item->submenus = malloc(number_of_submenus * sizeof(menuitem));
     e1a:	4d 2d       	mov	r20, r13
     e1c:	50 e0       	ldi	r21, 0x00	; 0
     e1e:	ca 01       	movw	r24, r20
     e20:	88 0f       	add	r24, r24
     e22:	99 1f       	adc	r25, r25
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	88 0f       	add	r24, r24
     e2a:	99 1f       	adc	r25, r25
     e2c:	84 0f       	add	r24, r20
     e2e:	95 1f       	adc	r25, r21
     e30:	0e 94 bc 08 	call	0x1178	; 0x1178 <malloc>
     e34:	9a 83       	std	Y+2, r25	; 0x02
     e36:	89 83       	std	Y+1, r24	; 0x01
	
	return new_item;
}
     e38:	ce 01       	movw	r24, r28
     e3a:	df 91       	pop	r29
     e3c:	cf 91       	pop	r28
     e3e:	1f 91       	pop	r17
     e40:	0f 91       	pop	r16
     e42:	ff 90       	pop	r15
     e44:	ef 90       	pop	r14
     e46:	df 90       	pop	r13
     e48:	08 95       	ret

00000e4a <MENU_assign_parents>:

void MENU_assign_parents(menuitem *current_menu){
     e4a:	1f 93       	push	r17
     e4c:	cf 93       	push	r28
     e4e:	df 93       	push	r29
     e50:	ec 01       	movw	r28, r24
	for (uint8_t n = 0; n < current_menu->number_of_submenus; n++) {
     e52:	88 81       	ld	r24, Y
     e54:	88 23       	and	r24, r24
     e56:	01 f1       	breq	.+64     	; 0xe98 <MENU_assign_parents+0x4e>
     e58:	10 e0       	ldi	r17, 0x00	; 0
		current_menu->submenus[n]->parent = current_menu;
     e5a:	81 2f       	mov	r24, r17
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	88 0f       	add	r24, r24
     e60:	99 1f       	adc	r25, r25
     e62:	e9 81       	ldd	r30, Y+1	; 0x01
     e64:	fa 81       	ldd	r31, Y+2	; 0x02
     e66:	e8 0f       	add	r30, r24
     e68:	f9 1f       	adc	r31, r25
     e6a:	01 90       	ld	r0, Z+
     e6c:	f0 81       	ld	r31, Z
     e6e:	e0 2d       	mov	r30, r0
     e70:	d4 83       	std	Z+4, r29	; 0x04
     e72:	c3 83       	std	Z+3, r28	; 0x03
		if (current_menu->submenus[n]->number_of_submenus > 0) {
     e74:	29 81       	ldd	r18, Y+1	; 0x01
     e76:	3a 81       	ldd	r19, Y+2	; 0x02
     e78:	f9 01       	movw	r30, r18
     e7a:	e8 0f       	add	r30, r24
     e7c:	f9 1f       	adc	r31, r25
     e7e:	01 90       	ld	r0, Z+
     e80:	f0 81       	ld	r31, Z
     e82:	e0 2d       	mov	r30, r0
     e84:	80 81       	ld	r24, Z
     e86:	88 23       	and	r24, r24
     e88:	19 f0       	breq	.+6      	; 0xe90 <MENU_assign_parents+0x46>
			MENU_assign_parents(current_menu->submenus[n]);
     e8a:	cf 01       	movw	r24, r30
     e8c:	0e 94 25 07 	call	0xe4a	; 0xe4a <MENU_assign_parents>
	
	return new_item;
}

void MENU_assign_parents(menuitem *current_menu){
	for (uint8_t n = 0; n < current_menu->number_of_submenus; n++) {
     e90:	1f 5f       	subi	r17, 0xFF	; 255
     e92:	88 81       	ld	r24, Y
     e94:	18 17       	cp	r17, r24
     e96:	08 f3       	brcs	.-62     	; 0xe5a <MENU_assign_parents+0x10>
		current_menu->submenus[n]->parent = current_menu;
		if (current_menu->submenus[n]->number_of_submenus > 0) {
			MENU_assign_parents(current_menu->submenus[n]);
		}
	}
}
     e98:	df 91       	pop	r29
     e9a:	cf 91       	pop	r28
     e9c:	1f 91       	pop	r17
     e9e:	08 95       	ret

00000ea0 <MENU_create_menu>:


menuitem* MENU_create_menu(){
     ea0:	0f 93       	push	r16
     ea2:	1f 93       	push	r17
     ea4:	cf 93       	push	r28
     ea6:	df 93       	push	r29
	menuitem* root_menu = MENU_new_item("Main", NULL, 3);
     ea8:	43 e0       	ldi	r20, 0x03	; 3
     eaa:	60 e0       	ldi	r22, 0x00	; 0
     eac:	70 e0       	ldi	r23, 0x00	; 0
     eae:	84 e4       	ldi	r24, 0x44	; 68
     eb0:	93 e0       	ldi	r25, 0x03	; 3
     eb2:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <MENU_new_item>
     eb6:	ec 01       	movw	r28, r24
	root_menu->parent = NULL;
     eb8:	1c 82       	std	Y+4, r1	; 0x04
     eba:	1b 82       	std	Y+3, r1	; 0x03
	root_menu->submenus[0] = MENU_new_item("Play game", SRAM_test, 0);
     ebc:	09 81       	ldd	r16, Y+1	; 0x01
     ebe:	1a 81       	ldd	r17, Y+2	; 0x02
     ec0:	40 e0       	ldi	r20, 0x00	; 0
     ec2:	69 ee       	ldi	r22, 0xE9	; 233
     ec4:	75 e0       	ldi	r23, 0x05	; 5
     ec6:	89 e4       	ldi	r24, 0x49	; 73
     ec8:	93 e0       	ldi	r25, 0x03	; 3
     eca:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <MENU_new_item>
     ece:	f8 01       	movw	r30, r16
     ed0:	91 83       	std	Z+1, r25	; 0x01
     ed2:	80 83       	st	Z, r24
	root_menu->submenus[1] = MENU_new_item("Snake", SRAM_test, 0);
     ed4:	09 81       	ldd	r16, Y+1	; 0x01
     ed6:	1a 81       	ldd	r17, Y+2	; 0x02
     ed8:	40 e0       	ldi	r20, 0x00	; 0
     eda:	69 ee       	ldi	r22, 0xE9	; 233
     edc:	75 e0       	ldi	r23, 0x05	; 5
     ede:	83 e5       	ldi	r24, 0x53	; 83
     ee0:	93 e0       	ldi	r25, 0x03	; 3
     ee2:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <MENU_new_item>
     ee6:	f8 01       	movw	r30, r16
     ee8:	93 83       	std	Z+3, r25	; 0x03
     eea:	82 83       	std	Z+2, r24	; 0x02
	root_menu->submenus[2] = MENU_new_item("Test functions", NULL, 2);
     eec:	09 81       	ldd	r16, Y+1	; 0x01
     eee:	1a 81       	ldd	r17, Y+2	; 0x02
     ef0:	42 e0       	ldi	r20, 0x02	; 2
     ef2:	60 e0       	ldi	r22, 0x00	; 0
     ef4:	70 e0       	ldi	r23, 0x00	; 0
     ef6:	89 e5       	ldi	r24, 0x59	; 89
     ef8:	93 e0       	ldi	r25, 0x03	; 3
     efa:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <MENU_new_item>
     efe:	f8 01       	movw	r30, r16
     f00:	95 83       	std	Z+5, r25	; 0x05
     f02:	84 83       	std	Z+4, r24	; 0x04
	root_menu->submenus[2]->submenus[0] = MENU_new_item("Flash diode", flash_diode, 0);
     f04:	e9 81       	ldd	r30, Y+1	; 0x01
     f06:	fa 81       	ldd	r31, Y+2	; 0x02
     f08:	04 80       	ldd	r0, Z+4	; 0x04
     f0a:	f5 81       	ldd	r31, Z+5	; 0x05
     f0c:	e0 2d       	mov	r30, r0
     f0e:	01 81       	ldd	r16, Z+1	; 0x01
     f10:	12 81       	ldd	r17, Z+2	; 0x02
     f12:	40 e0       	ldi	r20, 0x00	; 0
     f14:	6e e8       	ldi	r22, 0x8E	; 142
     f16:	78 e0       	ldi	r23, 0x08	; 8
     f18:	88 e6       	ldi	r24, 0x68	; 104
     f1a:	93 e0       	ldi	r25, 0x03	; 3
     f1c:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <MENU_new_item>
     f20:	f8 01       	movw	r30, r16
     f22:	91 83       	std	Z+1, r25	; 0x01
     f24:	80 83       	st	Z, r24
	root_menu->submenus[2]->submenus[1] = MENU_new_item("CAN loopback", SRAM_test, 0);
     f26:	e9 81       	ldd	r30, Y+1	; 0x01
     f28:	fa 81       	ldd	r31, Y+2	; 0x02
     f2a:	04 80       	ldd	r0, Z+4	; 0x04
     f2c:	f5 81       	ldd	r31, Z+5	; 0x05
     f2e:	e0 2d       	mov	r30, r0
     f30:	01 81       	ldd	r16, Z+1	; 0x01
     f32:	12 81       	ldd	r17, Z+2	; 0x02
     f34:	40 e0       	ldi	r20, 0x00	; 0
     f36:	69 ee       	ldi	r22, 0xE9	; 233
     f38:	75 e0       	ldi	r23, 0x05	; 5
     f3a:	84 e7       	ldi	r24, 0x74	; 116
     f3c:	93 e0       	ldi	r25, 0x03	; 3
     f3e:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <MENU_new_item>
     f42:	f8 01       	movw	r30, r16
     f44:	93 83       	std	Z+3, r25	; 0x03
     f46:	82 83       	std	Z+2, r24	; 0x02

	
	MENU_assign_parents(root_menu);
     f48:	ce 01       	movw	r24, r28
     f4a:	0e 94 25 07 	call	0xe4a	; 0xe4a <MENU_assign_parents>
		
	return root_menu;
}
     f4e:	ce 01       	movw	r24, r28
     f50:	df 91       	pop	r29
     f52:	cf 91       	pop	r28
     f54:	1f 91       	pop	r17
     f56:	0f 91       	pop	r16
     f58:	08 95       	ret

00000f5a <MENU_print>:

//fixed
void MENU_print(menuitem *current_menu_item){
     f5a:	ef 92       	push	r14
     f5c:	ff 92       	push	r15
     f5e:	0f 93       	push	r16
     f60:	1f 93       	push	r17
     f62:	cf 93       	push	r28
     f64:	df 93       	push	r29
     f66:	7c 01       	movw	r14, r24
	oled_clear_screen();
     f68:	0e 94 4a 04 	call	0x894	; 0x894 <oled_clear_screen>
	oled_print_arrow(last_arrow_pos, 0);
     f6c:	60 e0       	ldi	r22, 0x00	; 0
     f6e:	80 91 2a 01 	lds	r24, 0x012A
     f72:	0e 94 56 05 	call	0xaac	; 0xaac <oled_print_arrow>
	oled_pos(0,0);
     f76:	60 e0       	ldi	r22, 0x00	; 0
     f78:	70 e0       	ldi	r23, 0x00	; 0
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	0e 94 60 04 	call	0x8c0	; 0x8c0 <oled_pos>
	oled_printf(current_menu_item->name);
     f82:	d7 01       	movw	r26, r14
     f84:	16 96       	adiw	r26, 0x06	; 6
     f86:	8c 91       	ld	r24, X
     f88:	16 97       	sbiw	r26, 0x06	; 6
     f8a:	8f 93       	push	r24
     f8c:	15 96       	adiw	r26, 0x05	; 5
     f8e:	8c 91       	ld	r24, X
     f90:	8f 93       	push	r24
     f92:	0e 94 88 04 	call	0x910	; 0x910 <oled_printf>
	//printf("%s\n", current_menu_item->name);
	
	for (unsigned int i = 0; i < current_menu_item->number_of_submenus; i++) {
     f96:	0f 90       	pop	r0
     f98:	0f 90       	pop	r0
     f9a:	f7 01       	movw	r30, r14
     f9c:	80 81       	ld	r24, Z
     f9e:	88 23       	and	r24, r24
     fa0:	21 f1       	breq	.+72     	; 0xfea <MENU_print+0x90>
     fa2:	00 e0       	ldi	r16, 0x00	; 0
     fa4:	10 e0       	ldi	r17, 0x00	; 0
     fa6:	c0 e0       	ldi	r28, 0x00	; 0
     fa8:	d0 e0       	ldi	r29, 0x00	; 0
		oled_pos(i + 1, MENU_INDENT);
     faa:	21 96       	adiw	r28, 0x01	; 1
     fac:	62 e0       	ldi	r22, 0x02	; 2
     fae:	70 e0       	ldi	r23, 0x00	; 0
     fb0:	ce 01       	movw	r24, r28
     fb2:	0e 94 60 04 	call	0x8c0	; 0x8c0 <oled_pos>
		oled_printf(current_menu_item->submenus[i]->name);
     fb6:	d7 01       	movw	r26, r14
     fb8:	11 96       	adiw	r26, 0x01	; 1
     fba:	ed 91       	ld	r30, X+
     fbc:	fc 91       	ld	r31, X
     fbe:	12 97       	sbiw	r26, 0x02	; 2
     fc0:	e0 0f       	add	r30, r16
     fc2:	f1 1f       	adc	r31, r17
     fc4:	01 90       	ld	r0, Z+
     fc6:	f0 81       	ld	r31, Z
     fc8:	e0 2d       	mov	r30, r0
     fca:	86 81       	ldd	r24, Z+6	; 0x06
     fcc:	8f 93       	push	r24
     fce:	85 81       	ldd	r24, Z+5	; 0x05
     fd0:	8f 93       	push	r24
     fd2:	0e 94 88 04 	call	0x910	; 0x910 <oled_printf>
     fd6:	0e 5f       	subi	r16, 0xFE	; 254
     fd8:	1f 4f       	sbci	r17, 0xFF	; 255
	oled_print_arrow(last_arrow_pos, 0);
	oled_pos(0,0);
	oled_printf(current_menu_item->name);
	//printf("%s\n", current_menu_item->name);
	
	for (unsigned int i = 0; i < current_menu_item->number_of_submenus; i++) {
     fda:	f7 01       	movw	r30, r14
     fdc:	80 81       	ld	r24, Z
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	0f 90       	pop	r0
     fe2:	0f 90       	pop	r0
     fe4:	c8 17       	cp	r28, r24
     fe6:	d9 07       	cpc	r29, r25
     fe8:	00 f3       	brcs	.-64     	; 0xfaa <MENU_print+0x50>
		oled_pos(i + 1, MENU_INDENT);
		oled_printf(current_menu_item->submenus[i]->name);
		//printf("%s\n",current_menu_item->submenus[i]->name);
	}
}
     fea:	df 91       	pop	r29
     fec:	cf 91       	pop	r28
     fee:	1f 91       	pop	r17
     ff0:	0f 91       	pop	r16
     ff2:	ff 90       	pop	r15
     ff4:	ef 90       	pop	r14
     ff6:	08 95       	ret

00000ff8 <MENU_navigate>:

void MENU_navigate(menuitem *current_menu){
     ff8:	8c 01       	movw	r16, r24
	MENU_print(current_menu);
     ffa:	0e 94 ad 07 	call	0xf5a	; 0xf5a <MENU_print>
	while(1){
		if(joystick_direction_Y() != 0){
     ffe:	0e 94 52 03 	call	0x6a4	; 0x6a4 <joystick_direction_Y>
    1002:	89 2b       	or	r24, r25
    1004:	71 f0       	breq	.+28     	; 0x1022 <MENU_navigate+0x2a>
			last_arrow_pos = oled_arrow_handler(joystick_direction_Y(), 1, current_menu->number_of_submenus);
    1006:	f8 01       	movw	r30, r16
    1008:	c0 81       	ld	r28, Z
    100a:	d0 e0       	ldi	r29, 0x00	; 0
    100c:	0e 94 52 03 	call	0x6a4	; 0x6a4 <joystick_direction_Y>
    1010:	ae 01       	movw	r20, r28
    1012:	61 e0       	ldi	r22, 0x01	; 1
    1014:	70 e0       	ldi	r23, 0x00	; 0
    1016:	0e 94 c3 05 	call	0xb86	; 0xb86 <oled_arrow_handler>
    101a:	90 93 2b 01 	sts	0x012B, r25
    101e:	80 93 2a 01 	sts	0x012A, r24
		}
		
		if(joystick_direction_X() != 0){
    1022:	0e 94 67 03 	call	0x6ce	; 0x6ce <joystick_direction_X>
    1026:	89 2b       	or	r24, r25
    1028:	51 f3       	breq	.-44     	; 0xffe <MENU_navigate+0x6>
			if (joystick_direction_X() == 1) {
    102a:	0e 94 67 03 	call	0x6ce	; 0x6ce <joystick_direction_X>
    102e:	01 97       	sbiw	r24, 0x01	; 1
    1030:	09 f0       	breq	.+2      	; 0x1034 <MENU_navigate+0x3c>
    1032:	57 c0       	rjmp	.+174    	; 0x10e2 <MENU_navigate+0xea>
				if (current_menu->submenus[oled_get_arrow_page() - 1]->number_of_submenus > 0) {
    1034:	f8 01       	movw	r30, r16
    1036:	c1 81       	ldd	r28, Z+1	; 0x01
    1038:	d2 81       	ldd	r29, Z+2	; 0x02
    103a:	0e 94 53 05 	call	0xaa6	; 0xaa6 <oled_get_arrow_page>
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	81 50       	subi	r24, 0x01	; 1
    1042:	90 48       	sbci	r25, 0x80	; 128
    1044:	88 0f       	add	r24, r24
    1046:	99 1f       	adc	r25, r25
    1048:	c8 0f       	add	r28, r24
    104a:	d9 1f       	adc	r29, r25
    104c:	e8 81       	ld	r30, Y
    104e:	f9 81       	ldd	r31, Y+1	; 0x01
    1050:	80 81       	ld	r24, Z
    1052:	88 23       	and	r24, r24
    1054:	c1 f0       	breq	.+48     	; 0x1086 <MENU_navigate+0x8e>
					current_menu = current_menu->submenus[oled_get_arrow_page() - 1];
    1056:	f8 01       	movw	r30, r16
    1058:	c1 81       	ldd	r28, Z+1	; 0x01
    105a:	d2 81       	ldd	r29, Z+2	; 0x02
    105c:	0e 94 53 05 	call	0xaa6	; 0xaa6 <oled_get_arrow_page>
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	81 50       	subi	r24, 0x01	; 1
    1064:	90 48       	sbci	r25, 0x80	; 128
    1066:	88 0f       	add	r24, r24
    1068:	99 1f       	adc	r25, r25
    106a:	c8 0f       	add	r28, r24
    106c:	d9 1f       	adc	r29, r25
    106e:	08 81       	ld	r16, Y
    1070:	19 81       	ldd	r17, Y+1	; 0x01
					//printf(current_menu->submenus[0]->name);
					last_arrow_pos = 1;
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	90 93 2b 01 	sts	0x012B, r25
    107a:	80 93 2a 01 	sts	0x012A, r24
					MENU_print(current_menu);
    107e:	c8 01       	movw	r24, r16
    1080:	0e 94 ad 07 	call	0xf5a	; 0xf5a <MENU_print>
    1084:	41 c0       	rjmp	.+130    	; 0x1108 <MENU_navigate+0x110>
				} else  if (current_menu->submenus[oled_get_arrow_page() - 1]->handlerFunc != NULL) {
    1086:	f8 01       	movw	r30, r16
    1088:	c1 81       	ldd	r28, Z+1	; 0x01
    108a:	d2 81       	ldd	r29, Z+2	; 0x02
    108c:	0e 94 53 05 	call	0xaa6	; 0xaa6 <oled_get_arrow_page>
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	81 50       	subi	r24, 0x01	; 1
    1094:	90 48       	sbci	r25, 0x80	; 128
    1096:	88 0f       	add	r24, r24
    1098:	99 1f       	adc	r25, r25
    109a:	c8 0f       	add	r28, r24
    109c:	d9 1f       	adc	r29, r25
    109e:	e8 81       	ld	r30, Y
    10a0:	f9 81       	ldd	r31, Y+1	; 0x01
    10a2:	87 81       	ldd	r24, Z+7	; 0x07
    10a4:	90 85       	ldd	r25, Z+8	; 0x08
    10a6:	89 2b       	or	r24, r25
    10a8:	79 f1       	breq	.+94     	; 0x1108 <MENU_navigate+0x110>
					current_menu->submenus[oled_get_arrow_page() - 1]->handlerFunc();
    10aa:	f8 01       	movw	r30, r16
    10ac:	c1 81       	ldd	r28, Z+1	; 0x01
    10ae:	d2 81       	ldd	r29, Z+2	; 0x02
    10b0:	0e 94 53 05 	call	0xaa6	; 0xaa6 <oled_get_arrow_page>
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	81 50       	subi	r24, 0x01	; 1
    10b8:	90 48       	sbci	r25, 0x80	; 128
    10ba:	88 0f       	add	r24, r24
    10bc:	99 1f       	adc	r25, r25
    10be:	c8 0f       	add	r28, r24
    10c0:	d9 1f       	adc	r29, r25
    10c2:	e8 81       	ld	r30, Y
    10c4:	f9 81       	ldd	r31, Y+1	; 0x01
    10c6:	07 80       	ldd	r0, Z+7	; 0x07
    10c8:	f0 85       	ldd	r31, Z+8	; 0x08
    10ca:	e0 2d       	mov	r30, r0
    10cc:	09 95       	icall
					last_arrow_pos = 1;
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	90 93 2b 01 	sts	0x012B, r25
    10d6:	80 93 2a 01 	sts	0x012A, r24
					MENU_print(current_menu);
    10da:	c8 01       	movw	r24, r16
    10dc:	0e 94 ad 07 	call	0xf5a	; 0xf5a <MENU_print>
    10e0:	13 c0       	rjmp	.+38     	; 0x1108 <MENU_navigate+0x110>
				}
			} else if (joystick_direction_X() == -1 && current_menu->parent != NULL) {
    10e2:	0e 94 67 03 	call	0x6ce	; 0x6ce <joystick_direction_X>
    10e6:	01 96       	adiw	r24, 0x01	; 1
    10e8:	79 f4       	brne	.+30     	; 0x1108 <MENU_navigate+0x110>
    10ea:	f8 01       	movw	r30, r16
    10ec:	c3 81       	ldd	r28, Z+3	; 0x03
    10ee:	d4 81       	ldd	r29, Z+4	; 0x04
    10f0:	20 97       	sbiw	r28, 0x00	; 0
    10f2:	51 f0       	breq	.+20     	; 0x1108 <MENU_navigate+0x110>
				current_menu = current_menu->parent;
				last_arrow_pos = 1;
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	90 93 2b 01 	sts	0x012B, r25
    10fc:	80 93 2a 01 	sts	0x012A, r24
				MENU_print(current_menu);
    1100:	ce 01       	movw	r24, r28
    1102:	0e 94 ad 07 	call	0xf5a	; 0xf5a <MENU_print>
					current_menu->submenus[oled_get_arrow_page() - 1]->handlerFunc();
					last_arrow_pos = 1;
					MENU_print(current_menu);
				}
			} else if (joystick_direction_X() == -1 && current_menu->parent != NULL) {
				current_menu = current_menu->parent;
    1106:	8e 01       	movw	r16, r28
    1108:	ff e9       	ldi	r31, 0x9F	; 159
    110a:	26 e8       	ldi	r18, 0x86	; 134
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	f1 50       	subi	r31, 0x01	; 1
    1110:	20 40       	sbci	r18, 0x00	; 0
    1112:	80 40       	sbci	r24, 0x00	; 0
    1114:	e1 f7       	brne	.-8      	; 0x110e <MENU_navigate+0x116>
    1116:	00 c0       	rjmp	.+0      	; 0x1118 <MENU_navigate+0x120>
    1118:	00 00       	nop
    111a:	71 cf       	rjmp	.-286    	; 0xffe <MENU_navigate+0x6>

0000111c <flash_diode>:
#include "Drivers/oled_driver.h"


//Simple test, Ex 1, task 6
void flash_diode(){
	oled_clear_screen();
    111c:	0e 94 4a 04 	call	0x894	; 0x894 <oled_clear_screen>
	oled_pos(2,3);
    1120:	63 e0       	ldi	r22, 0x03	; 3
    1122:	70 e0       	ldi	r23, 0x00	; 0
    1124:	82 e0       	ldi	r24, 0x02	; 2
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	0e 94 60 04 	call	0x8c0	; 0x8c0 <oled_pos>
	oled_printf("FLASHING");
    112c:	81 e8       	ldi	r24, 0x81	; 129
    112e:	93 e0       	ldi	r25, 0x03	; 3
    1130:	9f 93       	push	r25
    1132:	8f 93       	push	r24
    1134:	0e 94 88 04 	call	0x910	; 0x910 <oled_printf>
	oled_pos(4,4);
    1138:	64 e0       	ldi	r22, 0x04	; 4
    113a:	70 e0       	ldi	r23, 0x00	; 0
    113c:	84 e0       	ldi	r24, 0x04	; 4
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	0e 94 60 04 	call	0x8c0	; 0x8c0 <oled_pos>
	oled_printf("DIODE");
    1144:	8a e8       	ldi	r24, 0x8A	; 138
    1146:	93 e0       	ldi	r25, 0x03	; 3
    1148:	9f 93       	push	r25
    114a:	8f 93       	push	r24
    114c:	0e 94 88 04 	call	0x910	; 0x910 <oled_printf>
    1150:	0f 90       	pop	r0
    1152:	0f 90       	pop	r0
    1154:	0f 90       	pop	r0
    1156:	0f 90       	pop	r0
    1158:	84 e1       	ldi	r24, 0x14	; 20
    115a:	90 e0       	ldi	r25, 0x00	; 0
	for (int i = 0; i<20; i++) {
		PORTB |= (1<<PINB0);
    115c:	c0 9a       	sbi	0x18, 0	; 24
    115e:	e0 e0       	ldi	r30, 0x00	; 0
    1160:	f0 ef       	ldi	r31, 0xF0	; 240
    1162:	31 97       	sbiw	r30, 0x01	; 1
    1164:	f1 f7       	brne	.-4      	; 0x1162 <flash_diode+0x46>
		_delay_ms(50);
		PORTB &= ~(1<<PINB0);
    1166:	c0 98       	cbi	0x18, 0	; 24
    1168:	e0 e0       	ldi	r30, 0x00	; 0
    116a:	f0 ef       	ldi	r31, 0xF0	; 240
    116c:	31 97       	sbiw	r30, 0x01	; 1
    116e:	f1 f7       	brne	.-4      	; 0x116c <flash_diode+0x50>
    1170:	01 97       	sbiw	r24, 0x01	; 1
	oled_clear_screen();
	oled_pos(2,3);
	oled_printf("FLASHING");
	oled_pos(4,4);
	oled_printf("DIODE");
	for (int i = 0; i<20; i++) {
    1172:	00 97       	sbiw	r24, 0x00	; 0
    1174:	99 f7       	brne	.-26     	; 0x115c <flash_diode+0x40>
		PORTB |= (1<<PINB0);
		_delay_ms(50);
		PORTB &= ~(1<<PINB0);
		_delay_ms(50);
	}
}
    1176:	08 95       	ret

00001178 <malloc>:
    1178:	cf 93       	push	r28
    117a:	df 93       	push	r29
    117c:	82 30       	cpi	r24, 0x02	; 2
    117e:	91 05       	cpc	r25, r1
    1180:	10 f4       	brcc	.+4      	; 0x1186 <malloc+0xe>
    1182:	82 e0       	ldi	r24, 0x02	; 2
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	e0 91 90 04 	lds	r30, 0x0490
    118a:	f0 91 91 04 	lds	r31, 0x0491
    118e:	20 e0       	ldi	r18, 0x00	; 0
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	a0 e0       	ldi	r26, 0x00	; 0
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	30 97       	sbiw	r30, 0x00	; 0
    1198:	39 f1       	breq	.+78     	; 0x11e8 <malloc+0x70>
    119a:	40 81       	ld	r20, Z
    119c:	51 81       	ldd	r21, Z+1	; 0x01
    119e:	48 17       	cp	r20, r24
    11a0:	59 07       	cpc	r21, r25
    11a2:	b8 f0       	brcs	.+46     	; 0x11d2 <malloc+0x5a>
    11a4:	48 17       	cp	r20, r24
    11a6:	59 07       	cpc	r21, r25
    11a8:	71 f4       	brne	.+28     	; 0x11c6 <malloc+0x4e>
    11aa:	82 81       	ldd	r24, Z+2	; 0x02
    11ac:	93 81       	ldd	r25, Z+3	; 0x03
    11ae:	10 97       	sbiw	r26, 0x00	; 0
    11b0:	29 f0       	breq	.+10     	; 0x11bc <malloc+0x44>
    11b2:	13 96       	adiw	r26, 0x03	; 3
    11b4:	9c 93       	st	X, r25
    11b6:	8e 93       	st	-X, r24
    11b8:	12 97       	sbiw	r26, 0x02	; 2
    11ba:	2c c0       	rjmp	.+88     	; 0x1214 <malloc+0x9c>
    11bc:	90 93 91 04 	sts	0x0491, r25
    11c0:	80 93 90 04 	sts	0x0490, r24
    11c4:	27 c0       	rjmp	.+78     	; 0x1214 <malloc+0x9c>
    11c6:	21 15       	cp	r18, r1
    11c8:	31 05       	cpc	r19, r1
    11ca:	31 f0       	breq	.+12     	; 0x11d8 <malloc+0x60>
    11cc:	42 17       	cp	r20, r18
    11ce:	53 07       	cpc	r21, r19
    11d0:	18 f0       	brcs	.+6      	; 0x11d8 <malloc+0x60>
    11d2:	a9 01       	movw	r20, r18
    11d4:	db 01       	movw	r26, r22
    11d6:	01 c0       	rjmp	.+2      	; 0x11da <malloc+0x62>
    11d8:	ef 01       	movw	r28, r30
    11da:	9a 01       	movw	r18, r20
    11dc:	bd 01       	movw	r22, r26
    11de:	df 01       	movw	r26, r30
    11e0:	02 80       	ldd	r0, Z+2	; 0x02
    11e2:	f3 81       	ldd	r31, Z+3	; 0x03
    11e4:	e0 2d       	mov	r30, r0
    11e6:	d7 cf       	rjmp	.-82     	; 0x1196 <malloc+0x1e>
    11e8:	21 15       	cp	r18, r1
    11ea:	31 05       	cpc	r19, r1
    11ec:	f9 f0       	breq	.+62     	; 0x122c <malloc+0xb4>
    11ee:	28 1b       	sub	r18, r24
    11f0:	39 0b       	sbc	r19, r25
    11f2:	24 30       	cpi	r18, 0x04	; 4
    11f4:	31 05       	cpc	r19, r1
    11f6:	80 f4       	brcc	.+32     	; 0x1218 <malloc+0xa0>
    11f8:	8a 81       	ldd	r24, Y+2	; 0x02
    11fa:	9b 81       	ldd	r25, Y+3	; 0x03
    11fc:	61 15       	cp	r22, r1
    11fe:	71 05       	cpc	r23, r1
    1200:	21 f0       	breq	.+8      	; 0x120a <malloc+0x92>
    1202:	fb 01       	movw	r30, r22
    1204:	93 83       	std	Z+3, r25	; 0x03
    1206:	82 83       	std	Z+2, r24	; 0x02
    1208:	04 c0       	rjmp	.+8      	; 0x1212 <malloc+0x9a>
    120a:	90 93 91 04 	sts	0x0491, r25
    120e:	80 93 90 04 	sts	0x0490, r24
    1212:	fe 01       	movw	r30, r28
    1214:	32 96       	adiw	r30, 0x02	; 2
    1216:	44 c0       	rjmp	.+136    	; 0x12a0 <malloc+0x128>
    1218:	fe 01       	movw	r30, r28
    121a:	e2 0f       	add	r30, r18
    121c:	f3 1f       	adc	r31, r19
    121e:	81 93       	st	Z+, r24
    1220:	91 93       	st	Z+, r25
    1222:	22 50       	subi	r18, 0x02	; 2
    1224:	31 09       	sbc	r19, r1
    1226:	39 83       	std	Y+1, r19	; 0x01
    1228:	28 83       	st	Y, r18
    122a:	3a c0       	rjmp	.+116    	; 0x12a0 <malloc+0x128>
    122c:	20 91 8e 04 	lds	r18, 0x048E
    1230:	30 91 8f 04 	lds	r19, 0x048F
    1234:	23 2b       	or	r18, r19
    1236:	41 f4       	brne	.+16     	; 0x1248 <malloc+0xd0>
    1238:	20 91 02 01 	lds	r18, 0x0102
    123c:	30 91 03 01 	lds	r19, 0x0103
    1240:	30 93 8f 04 	sts	0x048F, r19
    1244:	20 93 8e 04 	sts	0x048E, r18
    1248:	20 91 00 01 	lds	r18, 0x0100
    124c:	30 91 01 01 	lds	r19, 0x0101
    1250:	21 15       	cp	r18, r1
    1252:	31 05       	cpc	r19, r1
    1254:	41 f4       	brne	.+16     	; 0x1266 <malloc+0xee>
    1256:	2d b7       	in	r18, 0x3d	; 61
    1258:	3e b7       	in	r19, 0x3e	; 62
    125a:	40 91 04 01 	lds	r20, 0x0104
    125e:	50 91 05 01 	lds	r21, 0x0105
    1262:	24 1b       	sub	r18, r20
    1264:	35 0b       	sbc	r19, r21
    1266:	e0 91 8e 04 	lds	r30, 0x048E
    126a:	f0 91 8f 04 	lds	r31, 0x048F
    126e:	e2 17       	cp	r30, r18
    1270:	f3 07       	cpc	r31, r19
    1272:	a0 f4       	brcc	.+40     	; 0x129c <malloc+0x124>
    1274:	2e 1b       	sub	r18, r30
    1276:	3f 0b       	sbc	r19, r31
    1278:	28 17       	cp	r18, r24
    127a:	39 07       	cpc	r19, r25
    127c:	78 f0       	brcs	.+30     	; 0x129c <malloc+0x124>
    127e:	ac 01       	movw	r20, r24
    1280:	4e 5f       	subi	r20, 0xFE	; 254
    1282:	5f 4f       	sbci	r21, 0xFF	; 255
    1284:	24 17       	cp	r18, r20
    1286:	35 07       	cpc	r19, r21
    1288:	48 f0       	brcs	.+18     	; 0x129c <malloc+0x124>
    128a:	4e 0f       	add	r20, r30
    128c:	5f 1f       	adc	r21, r31
    128e:	50 93 8f 04 	sts	0x048F, r21
    1292:	40 93 8e 04 	sts	0x048E, r20
    1296:	81 93       	st	Z+, r24
    1298:	91 93       	st	Z+, r25
    129a:	02 c0       	rjmp	.+4      	; 0x12a0 <malloc+0x128>
    129c:	e0 e0       	ldi	r30, 0x00	; 0
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	cf 01       	movw	r24, r30
    12a2:	df 91       	pop	r29
    12a4:	cf 91       	pop	r28
    12a6:	08 95       	ret

000012a8 <free>:
    12a8:	cf 93       	push	r28
    12aa:	df 93       	push	r29
    12ac:	00 97       	sbiw	r24, 0x00	; 0
    12ae:	09 f4       	brne	.+2      	; 0x12b2 <free+0xa>
    12b0:	87 c0       	rjmp	.+270    	; 0x13c0 <free+0x118>
    12b2:	fc 01       	movw	r30, r24
    12b4:	32 97       	sbiw	r30, 0x02	; 2
    12b6:	13 82       	std	Z+3, r1	; 0x03
    12b8:	12 82       	std	Z+2, r1	; 0x02
    12ba:	c0 91 90 04 	lds	r28, 0x0490
    12be:	d0 91 91 04 	lds	r29, 0x0491
    12c2:	20 97       	sbiw	r28, 0x00	; 0
    12c4:	81 f4       	brne	.+32     	; 0x12e6 <free+0x3e>
    12c6:	20 81       	ld	r18, Z
    12c8:	31 81       	ldd	r19, Z+1	; 0x01
    12ca:	28 0f       	add	r18, r24
    12cc:	39 1f       	adc	r19, r25
    12ce:	80 91 8e 04 	lds	r24, 0x048E
    12d2:	90 91 8f 04 	lds	r25, 0x048F
    12d6:	82 17       	cp	r24, r18
    12d8:	93 07       	cpc	r25, r19
    12da:	79 f5       	brne	.+94     	; 0x133a <free+0x92>
    12dc:	f0 93 8f 04 	sts	0x048F, r31
    12e0:	e0 93 8e 04 	sts	0x048E, r30
    12e4:	6d c0       	rjmp	.+218    	; 0x13c0 <free+0x118>
    12e6:	de 01       	movw	r26, r28
    12e8:	20 e0       	ldi	r18, 0x00	; 0
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	ae 17       	cp	r26, r30
    12ee:	bf 07       	cpc	r27, r31
    12f0:	50 f4       	brcc	.+20     	; 0x1306 <free+0x5e>
    12f2:	12 96       	adiw	r26, 0x02	; 2
    12f4:	4d 91       	ld	r20, X+
    12f6:	5c 91       	ld	r21, X
    12f8:	13 97       	sbiw	r26, 0x03	; 3
    12fa:	9d 01       	movw	r18, r26
    12fc:	41 15       	cp	r20, r1
    12fe:	51 05       	cpc	r21, r1
    1300:	09 f1       	breq	.+66     	; 0x1344 <free+0x9c>
    1302:	da 01       	movw	r26, r20
    1304:	f3 cf       	rjmp	.-26     	; 0x12ec <free+0x44>
    1306:	b3 83       	std	Z+3, r27	; 0x03
    1308:	a2 83       	std	Z+2, r26	; 0x02
    130a:	40 81       	ld	r20, Z
    130c:	51 81       	ldd	r21, Z+1	; 0x01
    130e:	84 0f       	add	r24, r20
    1310:	95 1f       	adc	r25, r21
    1312:	8a 17       	cp	r24, r26
    1314:	9b 07       	cpc	r25, r27
    1316:	71 f4       	brne	.+28     	; 0x1334 <free+0x8c>
    1318:	8d 91       	ld	r24, X+
    131a:	9c 91       	ld	r25, X
    131c:	11 97       	sbiw	r26, 0x01	; 1
    131e:	84 0f       	add	r24, r20
    1320:	95 1f       	adc	r25, r21
    1322:	02 96       	adiw	r24, 0x02	; 2
    1324:	91 83       	std	Z+1, r25	; 0x01
    1326:	80 83       	st	Z, r24
    1328:	12 96       	adiw	r26, 0x02	; 2
    132a:	8d 91       	ld	r24, X+
    132c:	9c 91       	ld	r25, X
    132e:	13 97       	sbiw	r26, 0x03	; 3
    1330:	93 83       	std	Z+3, r25	; 0x03
    1332:	82 83       	std	Z+2, r24	; 0x02
    1334:	21 15       	cp	r18, r1
    1336:	31 05       	cpc	r19, r1
    1338:	29 f4       	brne	.+10     	; 0x1344 <free+0x9c>
    133a:	f0 93 91 04 	sts	0x0491, r31
    133e:	e0 93 90 04 	sts	0x0490, r30
    1342:	3e c0       	rjmp	.+124    	; 0x13c0 <free+0x118>
    1344:	d9 01       	movw	r26, r18
    1346:	13 96       	adiw	r26, 0x03	; 3
    1348:	fc 93       	st	X, r31
    134a:	ee 93       	st	-X, r30
    134c:	12 97       	sbiw	r26, 0x02	; 2
    134e:	4d 91       	ld	r20, X+
    1350:	5d 91       	ld	r21, X+
    1352:	a4 0f       	add	r26, r20
    1354:	b5 1f       	adc	r27, r21
    1356:	ea 17       	cp	r30, r26
    1358:	fb 07       	cpc	r31, r27
    135a:	79 f4       	brne	.+30     	; 0x137a <free+0xd2>
    135c:	80 81       	ld	r24, Z
    135e:	91 81       	ldd	r25, Z+1	; 0x01
    1360:	84 0f       	add	r24, r20
    1362:	95 1f       	adc	r25, r21
    1364:	02 96       	adiw	r24, 0x02	; 2
    1366:	d9 01       	movw	r26, r18
    1368:	11 96       	adiw	r26, 0x01	; 1
    136a:	9c 93       	st	X, r25
    136c:	8e 93       	st	-X, r24
    136e:	82 81       	ldd	r24, Z+2	; 0x02
    1370:	93 81       	ldd	r25, Z+3	; 0x03
    1372:	13 96       	adiw	r26, 0x03	; 3
    1374:	9c 93       	st	X, r25
    1376:	8e 93       	st	-X, r24
    1378:	12 97       	sbiw	r26, 0x02	; 2
    137a:	e0 e0       	ldi	r30, 0x00	; 0
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	8a 81       	ldd	r24, Y+2	; 0x02
    1380:	9b 81       	ldd	r25, Y+3	; 0x03
    1382:	00 97       	sbiw	r24, 0x00	; 0
    1384:	19 f0       	breq	.+6      	; 0x138c <free+0xe4>
    1386:	fe 01       	movw	r30, r28
    1388:	ec 01       	movw	r28, r24
    138a:	f9 cf       	rjmp	.-14     	; 0x137e <free+0xd6>
    138c:	ce 01       	movw	r24, r28
    138e:	02 96       	adiw	r24, 0x02	; 2
    1390:	28 81       	ld	r18, Y
    1392:	39 81       	ldd	r19, Y+1	; 0x01
    1394:	82 0f       	add	r24, r18
    1396:	93 1f       	adc	r25, r19
    1398:	20 91 8e 04 	lds	r18, 0x048E
    139c:	30 91 8f 04 	lds	r19, 0x048F
    13a0:	28 17       	cp	r18, r24
    13a2:	39 07       	cpc	r19, r25
    13a4:	69 f4       	brne	.+26     	; 0x13c0 <free+0x118>
    13a6:	30 97       	sbiw	r30, 0x00	; 0
    13a8:	29 f4       	brne	.+10     	; 0x13b4 <free+0x10c>
    13aa:	10 92 91 04 	sts	0x0491, r1
    13ae:	10 92 90 04 	sts	0x0490, r1
    13b2:	02 c0       	rjmp	.+4      	; 0x13b8 <free+0x110>
    13b4:	13 82       	std	Z+3, r1	; 0x03
    13b6:	12 82       	std	Z+2, r1	; 0x02
    13b8:	d0 93 8f 04 	sts	0x048F, r29
    13bc:	c0 93 8e 04 	sts	0x048E, r28
    13c0:	df 91       	pop	r29
    13c2:	cf 91       	pop	r28
    13c4:	08 95       	ret

000013c6 <do_rand>:
    13c6:	8f 92       	push	r8
    13c8:	9f 92       	push	r9
    13ca:	af 92       	push	r10
    13cc:	bf 92       	push	r11
    13ce:	cf 92       	push	r12
    13d0:	df 92       	push	r13
    13d2:	ef 92       	push	r14
    13d4:	ff 92       	push	r15
    13d6:	cf 93       	push	r28
    13d8:	df 93       	push	r29
    13da:	ec 01       	movw	r28, r24
    13dc:	68 81       	ld	r22, Y
    13de:	79 81       	ldd	r23, Y+1	; 0x01
    13e0:	8a 81       	ldd	r24, Y+2	; 0x02
    13e2:	9b 81       	ldd	r25, Y+3	; 0x03
    13e4:	61 15       	cp	r22, r1
    13e6:	71 05       	cpc	r23, r1
    13e8:	81 05       	cpc	r24, r1
    13ea:	91 05       	cpc	r25, r1
    13ec:	21 f4       	brne	.+8      	; 0x13f6 <do_rand+0x30>
    13ee:	64 e2       	ldi	r22, 0x24	; 36
    13f0:	79 ed       	ldi	r23, 0xD9	; 217
    13f2:	8b e5       	ldi	r24, 0x5B	; 91
    13f4:	97 e0       	ldi	r25, 0x07	; 7
    13f6:	2d e1       	ldi	r18, 0x1D	; 29
    13f8:	33 ef       	ldi	r19, 0xF3	; 243
    13fa:	41 e0       	ldi	r20, 0x01	; 1
    13fc:	50 e0       	ldi	r21, 0x00	; 0
    13fe:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <__divmodsi4>
    1402:	49 01       	movw	r8, r18
    1404:	5a 01       	movw	r10, r20
    1406:	9b 01       	movw	r18, r22
    1408:	ac 01       	movw	r20, r24
    140a:	a7 ea       	ldi	r26, 0xA7	; 167
    140c:	b1 e4       	ldi	r27, 0x41	; 65
    140e:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <__muluhisi3>
    1412:	6b 01       	movw	r12, r22
    1414:	7c 01       	movw	r14, r24
    1416:	ac ee       	ldi	r26, 0xEC	; 236
    1418:	b4 ef       	ldi	r27, 0xF4	; 244
    141a:	a5 01       	movw	r20, r10
    141c:	94 01       	movw	r18, r8
    141e:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <__mulohisi3>
    1422:	c6 0e       	add	r12, r22
    1424:	d7 1e       	adc	r13, r23
    1426:	e8 1e       	adc	r14, r24
    1428:	f9 1e       	adc	r15, r25
    142a:	f7 fe       	sbrs	r15, 7
    142c:	06 c0       	rjmp	.+12     	; 0x143a <do_rand+0x74>
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	c8 1a       	sub	r12, r24
    1432:	d1 08       	sbc	r13, r1
    1434:	e1 08       	sbc	r14, r1
    1436:	80 e8       	ldi	r24, 0x80	; 128
    1438:	f8 0a       	sbc	r15, r24
    143a:	c8 82       	st	Y, r12
    143c:	d9 82       	std	Y+1, r13	; 0x01
    143e:	ea 82       	std	Y+2, r14	; 0x02
    1440:	fb 82       	std	Y+3, r15	; 0x03
    1442:	c6 01       	movw	r24, r12
    1444:	9f 77       	andi	r25, 0x7F	; 127
    1446:	df 91       	pop	r29
    1448:	cf 91       	pop	r28
    144a:	ff 90       	pop	r15
    144c:	ef 90       	pop	r14
    144e:	df 90       	pop	r13
    1450:	cf 90       	pop	r12
    1452:	bf 90       	pop	r11
    1454:	af 90       	pop	r10
    1456:	9f 90       	pop	r9
    1458:	8f 90       	pop	r8
    145a:	08 95       	ret

0000145c <rand_r>:
    145c:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <do_rand>
    1460:	08 95       	ret

00001462 <rand>:
    1462:	86 e0       	ldi	r24, 0x06	; 6
    1464:	91 e0       	ldi	r25, 0x01	; 1
    1466:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <do_rand>
    146a:	08 95       	ret

0000146c <srand>:
    146c:	a0 e0       	ldi	r26, 0x00	; 0
    146e:	b0 e0       	ldi	r27, 0x00	; 0
    1470:	80 93 06 01 	sts	0x0106, r24
    1474:	90 93 07 01 	sts	0x0107, r25
    1478:	a0 93 08 01 	sts	0x0108, r26
    147c:	b0 93 09 01 	sts	0x0109, r27
    1480:	08 95       	ret

00001482 <printf>:
    1482:	a0 e0       	ldi	r26, 0x00	; 0
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	e7 e4       	ldi	r30, 0x47	; 71
    1488:	fa e0       	ldi	r31, 0x0A	; 10
    148a:	0c 94 3c 0d 	jmp	0x1a78	; 0x1a78 <__prologue_saves__+0x20>
    148e:	fe 01       	movw	r30, r28
    1490:	35 96       	adiw	r30, 0x05	; 5
    1492:	61 91       	ld	r22, Z+
    1494:	71 91       	ld	r23, Z+
    1496:	af 01       	movw	r20, r30
    1498:	80 91 94 04 	lds	r24, 0x0494
    149c:	90 91 95 04 	lds	r25, 0x0495
    14a0:	0e 94 82 0a 	call	0x1504	; 0x1504 <vfprintf>
    14a4:	e2 e0       	ldi	r30, 0x02	; 2
    14a6:	0c 94 58 0d 	jmp	0x1ab0	; 0x1ab0 <__epilogue_restores__+0x20>

000014aa <puts>:
    14aa:	0f 93       	push	r16
    14ac:	1f 93       	push	r17
    14ae:	cf 93       	push	r28
    14b0:	df 93       	push	r29
    14b2:	e0 91 94 04 	lds	r30, 0x0494
    14b6:	f0 91 95 04 	lds	r31, 0x0495
    14ba:	23 81       	ldd	r18, Z+3	; 0x03
    14bc:	21 ff       	sbrs	r18, 1
    14be:	1b c0       	rjmp	.+54     	; 0x14f6 <puts+0x4c>
    14c0:	ec 01       	movw	r28, r24
    14c2:	00 e0       	ldi	r16, 0x00	; 0
    14c4:	10 e0       	ldi	r17, 0x00	; 0
    14c6:	89 91       	ld	r24, Y+
    14c8:	60 91 94 04 	lds	r22, 0x0494
    14cc:	70 91 95 04 	lds	r23, 0x0495
    14d0:	db 01       	movw	r26, r22
    14d2:	18 96       	adiw	r26, 0x08	; 8
    14d4:	ed 91       	ld	r30, X+
    14d6:	fc 91       	ld	r31, X
    14d8:	19 97       	sbiw	r26, 0x09	; 9
    14da:	88 23       	and	r24, r24
    14dc:	31 f0       	breq	.+12     	; 0x14ea <puts+0x40>
    14de:	09 95       	icall
    14e0:	89 2b       	or	r24, r25
    14e2:	89 f3       	breq	.-30     	; 0x14c6 <puts+0x1c>
    14e4:	0f ef       	ldi	r16, 0xFF	; 255
    14e6:	1f ef       	ldi	r17, 0xFF	; 255
    14e8:	ee cf       	rjmp	.-36     	; 0x14c6 <puts+0x1c>
    14ea:	8a e0       	ldi	r24, 0x0A	; 10
    14ec:	09 95       	icall
    14ee:	89 2b       	or	r24, r25
    14f0:	11 f4       	brne	.+4      	; 0x14f6 <puts+0x4c>
    14f2:	c8 01       	movw	r24, r16
    14f4:	02 c0       	rjmp	.+4      	; 0x14fa <puts+0x50>
    14f6:	8f ef       	ldi	r24, 0xFF	; 255
    14f8:	9f ef       	ldi	r25, 0xFF	; 255
    14fa:	df 91       	pop	r29
    14fc:	cf 91       	pop	r28
    14fe:	1f 91       	pop	r17
    1500:	0f 91       	pop	r16
    1502:	08 95       	ret

00001504 <vfprintf>:
    1504:	ac e0       	ldi	r26, 0x0C	; 12
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	e8 e8       	ldi	r30, 0x88	; 136
    150a:	fa e0       	ldi	r31, 0x0A	; 10
    150c:	0c 94 2c 0d 	jmp	0x1a58	; 0x1a58 <__prologue_saves__>
    1510:	7c 01       	movw	r14, r24
    1512:	6b 01       	movw	r12, r22
    1514:	8a 01       	movw	r16, r20
    1516:	fc 01       	movw	r30, r24
    1518:	17 82       	std	Z+7, r1	; 0x07
    151a:	16 82       	std	Z+6, r1	; 0x06
    151c:	83 81       	ldd	r24, Z+3	; 0x03
    151e:	81 ff       	sbrs	r24, 1
    1520:	bd c1       	rjmp	.+890    	; 0x189c <vfprintf+0x398>
    1522:	ce 01       	movw	r24, r28
    1524:	01 96       	adiw	r24, 0x01	; 1
    1526:	4c 01       	movw	r8, r24
    1528:	f7 01       	movw	r30, r14
    152a:	93 81       	ldd	r25, Z+3	; 0x03
    152c:	f6 01       	movw	r30, r12
    152e:	93 fd       	sbrc	r25, 3
    1530:	85 91       	lpm	r24, Z+
    1532:	93 ff       	sbrs	r25, 3
    1534:	81 91       	ld	r24, Z+
    1536:	6f 01       	movw	r12, r30
    1538:	88 23       	and	r24, r24
    153a:	09 f4       	brne	.+2      	; 0x153e <vfprintf+0x3a>
    153c:	ab c1       	rjmp	.+854    	; 0x1894 <vfprintf+0x390>
    153e:	85 32       	cpi	r24, 0x25	; 37
    1540:	39 f4       	brne	.+14     	; 0x1550 <vfprintf+0x4c>
    1542:	93 fd       	sbrc	r25, 3
    1544:	85 91       	lpm	r24, Z+
    1546:	93 ff       	sbrs	r25, 3
    1548:	81 91       	ld	r24, Z+
    154a:	6f 01       	movw	r12, r30
    154c:	85 32       	cpi	r24, 0x25	; 37
    154e:	29 f4       	brne	.+10     	; 0x155a <vfprintf+0x56>
    1550:	b7 01       	movw	r22, r14
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <fputc>
    1558:	e7 cf       	rjmp	.-50     	; 0x1528 <vfprintf+0x24>
    155a:	51 2c       	mov	r5, r1
    155c:	31 2c       	mov	r3, r1
    155e:	20 e0       	ldi	r18, 0x00	; 0
    1560:	20 32       	cpi	r18, 0x20	; 32
    1562:	a0 f4       	brcc	.+40     	; 0x158c <vfprintf+0x88>
    1564:	8b 32       	cpi	r24, 0x2B	; 43
    1566:	69 f0       	breq	.+26     	; 0x1582 <vfprintf+0x7e>
    1568:	30 f4       	brcc	.+12     	; 0x1576 <vfprintf+0x72>
    156a:	80 32       	cpi	r24, 0x20	; 32
    156c:	59 f0       	breq	.+22     	; 0x1584 <vfprintf+0x80>
    156e:	83 32       	cpi	r24, 0x23	; 35
    1570:	69 f4       	brne	.+26     	; 0x158c <vfprintf+0x88>
    1572:	20 61       	ori	r18, 0x10	; 16
    1574:	2c c0       	rjmp	.+88     	; 0x15ce <vfprintf+0xca>
    1576:	8d 32       	cpi	r24, 0x2D	; 45
    1578:	39 f0       	breq	.+14     	; 0x1588 <vfprintf+0x84>
    157a:	80 33       	cpi	r24, 0x30	; 48
    157c:	39 f4       	brne	.+14     	; 0x158c <vfprintf+0x88>
    157e:	21 60       	ori	r18, 0x01	; 1
    1580:	26 c0       	rjmp	.+76     	; 0x15ce <vfprintf+0xca>
    1582:	22 60       	ori	r18, 0x02	; 2
    1584:	24 60       	ori	r18, 0x04	; 4
    1586:	23 c0       	rjmp	.+70     	; 0x15ce <vfprintf+0xca>
    1588:	28 60       	ori	r18, 0x08	; 8
    158a:	21 c0       	rjmp	.+66     	; 0x15ce <vfprintf+0xca>
    158c:	27 fd       	sbrc	r18, 7
    158e:	27 c0       	rjmp	.+78     	; 0x15de <vfprintf+0xda>
    1590:	30 ed       	ldi	r19, 0xD0	; 208
    1592:	38 0f       	add	r19, r24
    1594:	3a 30       	cpi	r19, 0x0A	; 10
    1596:	78 f4       	brcc	.+30     	; 0x15b6 <vfprintf+0xb2>
    1598:	26 ff       	sbrs	r18, 6
    159a:	06 c0       	rjmp	.+12     	; 0x15a8 <vfprintf+0xa4>
    159c:	fa e0       	ldi	r31, 0x0A	; 10
    159e:	5f 9e       	mul	r5, r31
    15a0:	30 0d       	add	r19, r0
    15a2:	11 24       	eor	r1, r1
    15a4:	53 2e       	mov	r5, r19
    15a6:	13 c0       	rjmp	.+38     	; 0x15ce <vfprintf+0xca>
    15a8:	8a e0       	ldi	r24, 0x0A	; 10
    15aa:	38 9e       	mul	r3, r24
    15ac:	30 0d       	add	r19, r0
    15ae:	11 24       	eor	r1, r1
    15b0:	33 2e       	mov	r3, r19
    15b2:	20 62       	ori	r18, 0x20	; 32
    15b4:	0c c0       	rjmp	.+24     	; 0x15ce <vfprintf+0xca>
    15b6:	8e 32       	cpi	r24, 0x2E	; 46
    15b8:	21 f4       	brne	.+8      	; 0x15c2 <vfprintf+0xbe>
    15ba:	26 fd       	sbrc	r18, 6
    15bc:	6b c1       	rjmp	.+726    	; 0x1894 <vfprintf+0x390>
    15be:	20 64       	ori	r18, 0x40	; 64
    15c0:	06 c0       	rjmp	.+12     	; 0x15ce <vfprintf+0xca>
    15c2:	8c 36       	cpi	r24, 0x6C	; 108
    15c4:	11 f4       	brne	.+4      	; 0x15ca <vfprintf+0xc6>
    15c6:	20 68       	ori	r18, 0x80	; 128
    15c8:	02 c0       	rjmp	.+4      	; 0x15ce <vfprintf+0xca>
    15ca:	88 36       	cpi	r24, 0x68	; 104
    15cc:	41 f4       	brne	.+16     	; 0x15de <vfprintf+0xda>
    15ce:	f6 01       	movw	r30, r12
    15d0:	93 fd       	sbrc	r25, 3
    15d2:	85 91       	lpm	r24, Z+
    15d4:	93 ff       	sbrs	r25, 3
    15d6:	81 91       	ld	r24, Z+
    15d8:	6f 01       	movw	r12, r30
    15da:	81 11       	cpse	r24, r1
    15dc:	c1 cf       	rjmp	.-126    	; 0x1560 <vfprintf+0x5c>
    15de:	98 2f       	mov	r25, r24
    15e0:	9f 7d       	andi	r25, 0xDF	; 223
    15e2:	95 54       	subi	r25, 0x45	; 69
    15e4:	93 30       	cpi	r25, 0x03	; 3
    15e6:	28 f4       	brcc	.+10     	; 0x15f2 <vfprintf+0xee>
    15e8:	0c 5f       	subi	r16, 0xFC	; 252
    15ea:	1f 4f       	sbci	r17, 0xFF	; 255
    15ec:	ff e3       	ldi	r31, 0x3F	; 63
    15ee:	f9 83       	std	Y+1, r31	; 0x01
    15f0:	0d c0       	rjmp	.+26     	; 0x160c <vfprintf+0x108>
    15f2:	83 36       	cpi	r24, 0x63	; 99
    15f4:	31 f0       	breq	.+12     	; 0x1602 <vfprintf+0xfe>
    15f6:	83 37       	cpi	r24, 0x73	; 115
    15f8:	71 f0       	breq	.+28     	; 0x1616 <vfprintf+0x112>
    15fa:	83 35       	cpi	r24, 0x53	; 83
    15fc:	09 f0       	breq	.+2      	; 0x1600 <vfprintf+0xfc>
    15fe:	5b c0       	rjmp	.+182    	; 0x16b6 <vfprintf+0x1b2>
    1600:	22 c0       	rjmp	.+68     	; 0x1646 <vfprintf+0x142>
    1602:	f8 01       	movw	r30, r16
    1604:	80 81       	ld	r24, Z
    1606:	89 83       	std	Y+1, r24	; 0x01
    1608:	0e 5f       	subi	r16, 0xFE	; 254
    160a:	1f 4f       	sbci	r17, 0xFF	; 255
    160c:	44 24       	eor	r4, r4
    160e:	43 94       	inc	r4
    1610:	51 2c       	mov	r5, r1
    1612:	54 01       	movw	r10, r8
    1614:	15 c0       	rjmp	.+42     	; 0x1640 <vfprintf+0x13c>
    1616:	38 01       	movw	r6, r16
    1618:	f2 e0       	ldi	r31, 0x02	; 2
    161a:	6f 0e       	add	r6, r31
    161c:	71 1c       	adc	r7, r1
    161e:	f8 01       	movw	r30, r16
    1620:	a0 80       	ld	r10, Z
    1622:	b1 80       	ldd	r11, Z+1	; 0x01
    1624:	26 ff       	sbrs	r18, 6
    1626:	03 c0       	rjmp	.+6      	; 0x162e <vfprintf+0x12a>
    1628:	65 2d       	mov	r22, r5
    162a:	70 e0       	ldi	r23, 0x00	; 0
    162c:	02 c0       	rjmp	.+4      	; 0x1632 <vfprintf+0x12e>
    162e:	6f ef       	ldi	r22, 0xFF	; 255
    1630:	7f ef       	ldi	r23, 0xFF	; 255
    1632:	c5 01       	movw	r24, r10
    1634:	2c 87       	std	Y+12, r18	; 0x0c
    1636:	0e 94 5f 0c 	call	0x18be	; 0x18be <strnlen>
    163a:	2c 01       	movw	r4, r24
    163c:	83 01       	movw	r16, r6
    163e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1640:	2f 77       	andi	r18, 0x7F	; 127
    1642:	22 2e       	mov	r2, r18
    1644:	17 c0       	rjmp	.+46     	; 0x1674 <vfprintf+0x170>
    1646:	38 01       	movw	r6, r16
    1648:	f2 e0       	ldi	r31, 0x02	; 2
    164a:	6f 0e       	add	r6, r31
    164c:	71 1c       	adc	r7, r1
    164e:	f8 01       	movw	r30, r16
    1650:	a0 80       	ld	r10, Z
    1652:	b1 80       	ldd	r11, Z+1	; 0x01
    1654:	26 ff       	sbrs	r18, 6
    1656:	03 c0       	rjmp	.+6      	; 0x165e <vfprintf+0x15a>
    1658:	65 2d       	mov	r22, r5
    165a:	70 e0       	ldi	r23, 0x00	; 0
    165c:	02 c0       	rjmp	.+4      	; 0x1662 <vfprintf+0x15e>
    165e:	6f ef       	ldi	r22, 0xFF	; 255
    1660:	7f ef       	ldi	r23, 0xFF	; 255
    1662:	c5 01       	movw	r24, r10
    1664:	2c 87       	std	Y+12, r18	; 0x0c
    1666:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <strnlen_P>
    166a:	2c 01       	movw	r4, r24
    166c:	2c 85       	ldd	r18, Y+12	; 0x0c
    166e:	20 68       	ori	r18, 0x80	; 128
    1670:	22 2e       	mov	r2, r18
    1672:	83 01       	movw	r16, r6
    1674:	23 fc       	sbrc	r2, 3
    1676:	1b c0       	rjmp	.+54     	; 0x16ae <vfprintf+0x1aa>
    1678:	83 2d       	mov	r24, r3
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	48 16       	cp	r4, r24
    167e:	59 06       	cpc	r5, r25
    1680:	b0 f4       	brcc	.+44     	; 0x16ae <vfprintf+0x1aa>
    1682:	b7 01       	movw	r22, r14
    1684:	80 e2       	ldi	r24, 0x20	; 32
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <fputc>
    168c:	3a 94       	dec	r3
    168e:	f4 cf       	rjmp	.-24     	; 0x1678 <vfprintf+0x174>
    1690:	f5 01       	movw	r30, r10
    1692:	27 fc       	sbrc	r2, 7
    1694:	85 91       	lpm	r24, Z+
    1696:	27 fe       	sbrs	r2, 7
    1698:	81 91       	ld	r24, Z+
    169a:	5f 01       	movw	r10, r30
    169c:	b7 01       	movw	r22, r14
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <fputc>
    16a4:	31 10       	cpse	r3, r1
    16a6:	3a 94       	dec	r3
    16a8:	f1 e0       	ldi	r31, 0x01	; 1
    16aa:	4f 1a       	sub	r4, r31
    16ac:	51 08       	sbc	r5, r1
    16ae:	41 14       	cp	r4, r1
    16b0:	51 04       	cpc	r5, r1
    16b2:	71 f7       	brne	.-36     	; 0x1690 <vfprintf+0x18c>
    16b4:	e5 c0       	rjmp	.+458    	; 0x1880 <vfprintf+0x37c>
    16b6:	84 36       	cpi	r24, 0x64	; 100
    16b8:	11 f0       	breq	.+4      	; 0x16be <vfprintf+0x1ba>
    16ba:	89 36       	cpi	r24, 0x69	; 105
    16bc:	39 f5       	brne	.+78     	; 0x170c <vfprintf+0x208>
    16be:	f8 01       	movw	r30, r16
    16c0:	27 ff       	sbrs	r18, 7
    16c2:	07 c0       	rjmp	.+14     	; 0x16d2 <vfprintf+0x1ce>
    16c4:	60 81       	ld	r22, Z
    16c6:	71 81       	ldd	r23, Z+1	; 0x01
    16c8:	82 81       	ldd	r24, Z+2	; 0x02
    16ca:	93 81       	ldd	r25, Z+3	; 0x03
    16cc:	0c 5f       	subi	r16, 0xFC	; 252
    16ce:	1f 4f       	sbci	r17, 0xFF	; 255
    16d0:	08 c0       	rjmp	.+16     	; 0x16e2 <vfprintf+0x1de>
    16d2:	60 81       	ld	r22, Z
    16d4:	71 81       	ldd	r23, Z+1	; 0x01
    16d6:	88 27       	eor	r24, r24
    16d8:	77 fd       	sbrc	r23, 7
    16da:	80 95       	com	r24
    16dc:	98 2f       	mov	r25, r24
    16de:	0e 5f       	subi	r16, 0xFE	; 254
    16e0:	1f 4f       	sbci	r17, 0xFF	; 255
    16e2:	2f 76       	andi	r18, 0x6F	; 111
    16e4:	b2 2e       	mov	r11, r18
    16e6:	97 ff       	sbrs	r25, 7
    16e8:	09 c0       	rjmp	.+18     	; 0x16fc <vfprintf+0x1f8>
    16ea:	90 95       	com	r25
    16ec:	80 95       	com	r24
    16ee:	70 95       	com	r23
    16f0:	61 95       	neg	r22
    16f2:	7f 4f       	sbci	r23, 0xFF	; 255
    16f4:	8f 4f       	sbci	r24, 0xFF	; 255
    16f6:	9f 4f       	sbci	r25, 0xFF	; 255
    16f8:	20 68       	ori	r18, 0x80	; 128
    16fa:	b2 2e       	mov	r11, r18
    16fc:	2a e0       	ldi	r18, 0x0A	; 10
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	a4 01       	movw	r20, r8
    1702:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__ultoa_invert>
    1706:	a8 2e       	mov	r10, r24
    1708:	a8 18       	sub	r10, r8
    170a:	44 c0       	rjmp	.+136    	; 0x1794 <vfprintf+0x290>
    170c:	85 37       	cpi	r24, 0x75	; 117
    170e:	29 f4       	brne	.+10     	; 0x171a <vfprintf+0x216>
    1710:	2f 7e       	andi	r18, 0xEF	; 239
    1712:	b2 2e       	mov	r11, r18
    1714:	2a e0       	ldi	r18, 0x0A	; 10
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	25 c0       	rjmp	.+74     	; 0x1764 <vfprintf+0x260>
    171a:	f2 2f       	mov	r31, r18
    171c:	f9 7f       	andi	r31, 0xF9	; 249
    171e:	bf 2e       	mov	r11, r31
    1720:	8f 36       	cpi	r24, 0x6F	; 111
    1722:	c1 f0       	breq	.+48     	; 0x1754 <vfprintf+0x250>
    1724:	18 f4       	brcc	.+6      	; 0x172c <vfprintf+0x228>
    1726:	88 35       	cpi	r24, 0x58	; 88
    1728:	79 f0       	breq	.+30     	; 0x1748 <vfprintf+0x244>
    172a:	b4 c0       	rjmp	.+360    	; 0x1894 <vfprintf+0x390>
    172c:	80 37       	cpi	r24, 0x70	; 112
    172e:	19 f0       	breq	.+6      	; 0x1736 <vfprintf+0x232>
    1730:	88 37       	cpi	r24, 0x78	; 120
    1732:	21 f0       	breq	.+8      	; 0x173c <vfprintf+0x238>
    1734:	af c0       	rjmp	.+350    	; 0x1894 <vfprintf+0x390>
    1736:	2f 2f       	mov	r18, r31
    1738:	20 61       	ori	r18, 0x10	; 16
    173a:	b2 2e       	mov	r11, r18
    173c:	b4 fe       	sbrs	r11, 4
    173e:	0d c0       	rjmp	.+26     	; 0x175a <vfprintf+0x256>
    1740:	8b 2d       	mov	r24, r11
    1742:	84 60       	ori	r24, 0x04	; 4
    1744:	b8 2e       	mov	r11, r24
    1746:	09 c0       	rjmp	.+18     	; 0x175a <vfprintf+0x256>
    1748:	24 ff       	sbrs	r18, 4
    174a:	0a c0       	rjmp	.+20     	; 0x1760 <vfprintf+0x25c>
    174c:	9f 2f       	mov	r25, r31
    174e:	96 60       	ori	r25, 0x06	; 6
    1750:	b9 2e       	mov	r11, r25
    1752:	06 c0       	rjmp	.+12     	; 0x1760 <vfprintf+0x25c>
    1754:	28 e0       	ldi	r18, 0x08	; 8
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	05 c0       	rjmp	.+10     	; 0x1764 <vfprintf+0x260>
    175a:	20 e1       	ldi	r18, 0x10	; 16
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	02 c0       	rjmp	.+4      	; 0x1764 <vfprintf+0x260>
    1760:	20 e1       	ldi	r18, 0x10	; 16
    1762:	32 e0       	ldi	r19, 0x02	; 2
    1764:	f8 01       	movw	r30, r16
    1766:	b7 fe       	sbrs	r11, 7
    1768:	07 c0       	rjmp	.+14     	; 0x1778 <vfprintf+0x274>
    176a:	60 81       	ld	r22, Z
    176c:	71 81       	ldd	r23, Z+1	; 0x01
    176e:	82 81       	ldd	r24, Z+2	; 0x02
    1770:	93 81       	ldd	r25, Z+3	; 0x03
    1772:	0c 5f       	subi	r16, 0xFC	; 252
    1774:	1f 4f       	sbci	r17, 0xFF	; 255
    1776:	06 c0       	rjmp	.+12     	; 0x1784 <vfprintf+0x280>
    1778:	60 81       	ld	r22, Z
    177a:	71 81       	ldd	r23, Z+1	; 0x01
    177c:	80 e0       	ldi	r24, 0x00	; 0
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	0e 5f       	subi	r16, 0xFE	; 254
    1782:	1f 4f       	sbci	r17, 0xFF	; 255
    1784:	a4 01       	movw	r20, r8
    1786:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__ultoa_invert>
    178a:	a8 2e       	mov	r10, r24
    178c:	a8 18       	sub	r10, r8
    178e:	fb 2d       	mov	r31, r11
    1790:	ff 77       	andi	r31, 0x7F	; 127
    1792:	bf 2e       	mov	r11, r31
    1794:	b6 fe       	sbrs	r11, 6
    1796:	0b c0       	rjmp	.+22     	; 0x17ae <vfprintf+0x2aa>
    1798:	2b 2d       	mov	r18, r11
    179a:	2e 7f       	andi	r18, 0xFE	; 254
    179c:	a5 14       	cp	r10, r5
    179e:	50 f4       	brcc	.+20     	; 0x17b4 <vfprintf+0x2b0>
    17a0:	b4 fe       	sbrs	r11, 4
    17a2:	0a c0       	rjmp	.+20     	; 0x17b8 <vfprintf+0x2b4>
    17a4:	b2 fc       	sbrc	r11, 2
    17a6:	08 c0       	rjmp	.+16     	; 0x17b8 <vfprintf+0x2b4>
    17a8:	2b 2d       	mov	r18, r11
    17aa:	2e 7e       	andi	r18, 0xEE	; 238
    17ac:	05 c0       	rjmp	.+10     	; 0x17b8 <vfprintf+0x2b4>
    17ae:	7a 2c       	mov	r7, r10
    17b0:	2b 2d       	mov	r18, r11
    17b2:	03 c0       	rjmp	.+6      	; 0x17ba <vfprintf+0x2b6>
    17b4:	7a 2c       	mov	r7, r10
    17b6:	01 c0       	rjmp	.+2      	; 0x17ba <vfprintf+0x2b6>
    17b8:	75 2c       	mov	r7, r5
    17ba:	24 ff       	sbrs	r18, 4
    17bc:	0d c0       	rjmp	.+26     	; 0x17d8 <vfprintf+0x2d4>
    17be:	fe 01       	movw	r30, r28
    17c0:	ea 0d       	add	r30, r10
    17c2:	f1 1d       	adc	r31, r1
    17c4:	80 81       	ld	r24, Z
    17c6:	80 33       	cpi	r24, 0x30	; 48
    17c8:	11 f4       	brne	.+4      	; 0x17ce <vfprintf+0x2ca>
    17ca:	29 7e       	andi	r18, 0xE9	; 233
    17cc:	09 c0       	rjmp	.+18     	; 0x17e0 <vfprintf+0x2dc>
    17ce:	22 ff       	sbrs	r18, 2
    17d0:	06 c0       	rjmp	.+12     	; 0x17de <vfprintf+0x2da>
    17d2:	73 94       	inc	r7
    17d4:	73 94       	inc	r7
    17d6:	04 c0       	rjmp	.+8      	; 0x17e0 <vfprintf+0x2dc>
    17d8:	82 2f       	mov	r24, r18
    17da:	86 78       	andi	r24, 0x86	; 134
    17dc:	09 f0       	breq	.+2      	; 0x17e0 <vfprintf+0x2dc>
    17de:	73 94       	inc	r7
    17e0:	23 fd       	sbrc	r18, 3
    17e2:	13 c0       	rjmp	.+38     	; 0x180a <vfprintf+0x306>
    17e4:	20 ff       	sbrs	r18, 0
    17e6:	06 c0       	rjmp	.+12     	; 0x17f4 <vfprintf+0x2f0>
    17e8:	5a 2c       	mov	r5, r10
    17ea:	73 14       	cp	r7, r3
    17ec:	18 f4       	brcc	.+6      	; 0x17f4 <vfprintf+0x2f0>
    17ee:	53 0c       	add	r5, r3
    17f0:	57 18       	sub	r5, r7
    17f2:	73 2c       	mov	r7, r3
    17f4:	73 14       	cp	r7, r3
    17f6:	68 f4       	brcc	.+26     	; 0x1812 <vfprintf+0x30e>
    17f8:	b7 01       	movw	r22, r14
    17fa:	80 e2       	ldi	r24, 0x20	; 32
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	2c 87       	std	Y+12, r18	; 0x0c
    1800:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <fputc>
    1804:	73 94       	inc	r7
    1806:	2c 85       	ldd	r18, Y+12	; 0x0c
    1808:	f5 cf       	rjmp	.-22     	; 0x17f4 <vfprintf+0x2f0>
    180a:	73 14       	cp	r7, r3
    180c:	10 f4       	brcc	.+4      	; 0x1812 <vfprintf+0x30e>
    180e:	37 18       	sub	r3, r7
    1810:	01 c0       	rjmp	.+2      	; 0x1814 <vfprintf+0x310>
    1812:	31 2c       	mov	r3, r1
    1814:	24 ff       	sbrs	r18, 4
    1816:	12 c0       	rjmp	.+36     	; 0x183c <vfprintf+0x338>
    1818:	b7 01       	movw	r22, r14
    181a:	80 e3       	ldi	r24, 0x30	; 48
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	2c 87       	std	Y+12, r18	; 0x0c
    1820:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <fputc>
    1824:	2c 85       	ldd	r18, Y+12	; 0x0c
    1826:	22 ff       	sbrs	r18, 2
    1828:	17 c0       	rjmp	.+46     	; 0x1858 <vfprintf+0x354>
    182a:	21 ff       	sbrs	r18, 1
    182c:	03 c0       	rjmp	.+6      	; 0x1834 <vfprintf+0x330>
    182e:	88 e5       	ldi	r24, 0x58	; 88
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	02 c0       	rjmp	.+4      	; 0x1838 <vfprintf+0x334>
    1834:	88 e7       	ldi	r24, 0x78	; 120
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	b7 01       	movw	r22, r14
    183a:	0c c0       	rjmp	.+24     	; 0x1854 <vfprintf+0x350>
    183c:	82 2f       	mov	r24, r18
    183e:	86 78       	andi	r24, 0x86	; 134
    1840:	59 f0       	breq	.+22     	; 0x1858 <vfprintf+0x354>
    1842:	21 fd       	sbrc	r18, 1
    1844:	02 c0       	rjmp	.+4      	; 0x184a <vfprintf+0x346>
    1846:	80 e2       	ldi	r24, 0x20	; 32
    1848:	01 c0       	rjmp	.+2      	; 0x184c <vfprintf+0x348>
    184a:	8b e2       	ldi	r24, 0x2B	; 43
    184c:	27 fd       	sbrc	r18, 7
    184e:	8d e2       	ldi	r24, 0x2D	; 45
    1850:	b7 01       	movw	r22, r14
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <fputc>
    1858:	a5 14       	cp	r10, r5
    185a:	38 f4       	brcc	.+14     	; 0x186a <vfprintf+0x366>
    185c:	b7 01       	movw	r22, r14
    185e:	80 e3       	ldi	r24, 0x30	; 48
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <fputc>
    1866:	5a 94       	dec	r5
    1868:	f7 cf       	rjmp	.-18     	; 0x1858 <vfprintf+0x354>
    186a:	aa 94       	dec	r10
    186c:	f4 01       	movw	r30, r8
    186e:	ea 0d       	add	r30, r10
    1870:	f1 1d       	adc	r31, r1
    1872:	80 81       	ld	r24, Z
    1874:	b7 01       	movw	r22, r14
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <fputc>
    187c:	a1 10       	cpse	r10, r1
    187e:	f5 cf       	rjmp	.-22     	; 0x186a <vfprintf+0x366>
    1880:	33 20       	and	r3, r3
    1882:	09 f4       	brne	.+2      	; 0x1886 <vfprintf+0x382>
    1884:	51 ce       	rjmp	.-862    	; 0x1528 <vfprintf+0x24>
    1886:	b7 01       	movw	r22, r14
    1888:	80 e2       	ldi	r24, 0x20	; 32
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <fputc>
    1890:	3a 94       	dec	r3
    1892:	f6 cf       	rjmp	.-20     	; 0x1880 <vfprintf+0x37c>
    1894:	f7 01       	movw	r30, r14
    1896:	86 81       	ldd	r24, Z+6	; 0x06
    1898:	97 81       	ldd	r25, Z+7	; 0x07
    189a:	02 c0       	rjmp	.+4      	; 0x18a0 <vfprintf+0x39c>
    189c:	8f ef       	ldi	r24, 0xFF	; 255
    189e:	9f ef       	ldi	r25, 0xFF	; 255
    18a0:	2c 96       	adiw	r28, 0x0c	; 12
    18a2:	e2 e1       	ldi	r30, 0x12	; 18
    18a4:	0c 94 48 0d 	jmp	0x1a90	; 0x1a90 <__epilogue_restores__>

000018a8 <strnlen_P>:
    18a8:	fc 01       	movw	r30, r24
    18aa:	05 90       	lpm	r0, Z+
    18ac:	61 50       	subi	r22, 0x01	; 1
    18ae:	70 40       	sbci	r23, 0x00	; 0
    18b0:	01 10       	cpse	r0, r1
    18b2:	d8 f7       	brcc	.-10     	; 0x18aa <strnlen_P+0x2>
    18b4:	80 95       	com	r24
    18b6:	90 95       	com	r25
    18b8:	8e 0f       	add	r24, r30
    18ba:	9f 1f       	adc	r25, r31
    18bc:	08 95       	ret

000018be <strnlen>:
    18be:	fc 01       	movw	r30, r24
    18c0:	61 50       	subi	r22, 0x01	; 1
    18c2:	70 40       	sbci	r23, 0x00	; 0
    18c4:	01 90       	ld	r0, Z+
    18c6:	01 10       	cpse	r0, r1
    18c8:	d8 f7       	brcc	.-10     	; 0x18c0 <strnlen+0x2>
    18ca:	80 95       	com	r24
    18cc:	90 95       	com	r25
    18ce:	8e 0f       	add	r24, r30
    18d0:	9f 1f       	adc	r25, r31
    18d2:	08 95       	ret

000018d4 <fputc>:
    18d4:	0f 93       	push	r16
    18d6:	1f 93       	push	r17
    18d8:	cf 93       	push	r28
    18da:	df 93       	push	r29
    18dc:	18 2f       	mov	r17, r24
    18de:	09 2f       	mov	r16, r25
    18e0:	eb 01       	movw	r28, r22
    18e2:	8b 81       	ldd	r24, Y+3	; 0x03
    18e4:	81 fd       	sbrc	r24, 1
    18e6:	03 c0       	rjmp	.+6      	; 0x18ee <fputc+0x1a>
    18e8:	8f ef       	ldi	r24, 0xFF	; 255
    18ea:	9f ef       	ldi	r25, 0xFF	; 255
    18ec:	20 c0       	rjmp	.+64     	; 0x192e <fputc+0x5a>
    18ee:	82 ff       	sbrs	r24, 2
    18f0:	10 c0       	rjmp	.+32     	; 0x1912 <fputc+0x3e>
    18f2:	4e 81       	ldd	r20, Y+6	; 0x06
    18f4:	5f 81       	ldd	r21, Y+7	; 0x07
    18f6:	2c 81       	ldd	r18, Y+4	; 0x04
    18f8:	3d 81       	ldd	r19, Y+5	; 0x05
    18fa:	42 17       	cp	r20, r18
    18fc:	53 07       	cpc	r21, r19
    18fe:	7c f4       	brge	.+30     	; 0x191e <fputc+0x4a>
    1900:	e8 81       	ld	r30, Y
    1902:	f9 81       	ldd	r31, Y+1	; 0x01
    1904:	9f 01       	movw	r18, r30
    1906:	2f 5f       	subi	r18, 0xFF	; 255
    1908:	3f 4f       	sbci	r19, 0xFF	; 255
    190a:	39 83       	std	Y+1, r19	; 0x01
    190c:	28 83       	st	Y, r18
    190e:	10 83       	st	Z, r17
    1910:	06 c0       	rjmp	.+12     	; 0x191e <fputc+0x4a>
    1912:	e8 85       	ldd	r30, Y+8	; 0x08
    1914:	f9 85       	ldd	r31, Y+9	; 0x09
    1916:	81 2f       	mov	r24, r17
    1918:	09 95       	icall
    191a:	89 2b       	or	r24, r25
    191c:	29 f7       	brne	.-54     	; 0x18e8 <fputc+0x14>
    191e:	2e 81       	ldd	r18, Y+6	; 0x06
    1920:	3f 81       	ldd	r19, Y+7	; 0x07
    1922:	2f 5f       	subi	r18, 0xFF	; 255
    1924:	3f 4f       	sbci	r19, 0xFF	; 255
    1926:	3f 83       	std	Y+7, r19	; 0x07
    1928:	2e 83       	std	Y+6, r18	; 0x06
    192a:	81 2f       	mov	r24, r17
    192c:	90 2f       	mov	r25, r16
    192e:	df 91       	pop	r29
    1930:	cf 91       	pop	r28
    1932:	1f 91       	pop	r17
    1934:	0f 91       	pop	r16
    1936:	08 95       	ret

00001938 <__ultoa_invert>:
    1938:	fa 01       	movw	r30, r20
    193a:	aa 27       	eor	r26, r26
    193c:	28 30       	cpi	r18, 0x08	; 8
    193e:	51 f1       	breq	.+84     	; 0x1994 <__ultoa_invert+0x5c>
    1940:	20 31       	cpi	r18, 0x10	; 16
    1942:	81 f1       	breq	.+96     	; 0x19a4 <__ultoa_invert+0x6c>
    1944:	e8 94       	clt
    1946:	6f 93       	push	r22
    1948:	6e 7f       	andi	r22, 0xFE	; 254
    194a:	6e 5f       	subi	r22, 0xFE	; 254
    194c:	7f 4f       	sbci	r23, 0xFF	; 255
    194e:	8f 4f       	sbci	r24, 0xFF	; 255
    1950:	9f 4f       	sbci	r25, 0xFF	; 255
    1952:	af 4f       	sbci	r26, 0xFF	; 255
    1954:	b1 e0       	ldi	r27, 0x01	; 1
    1956:	3e d0       	rcall	.+124    	; 0x19d4 <__ultoa_invert+0x9c>
    1958:	b4 e0       	ldi	r27, 0x04	; 4
    195a:	3c d0       	rcall	.+120    	; 0x19d4 <__ultoa_invert+0x9c>
    195c:	67 0f       	add	r22, r23
    195e:	78 1f       	adc	r23, r24
    1960:	89 1f       	adc	r24, r25
    1962:	9a 1f       	adc	r25, r26
    1964:	a1 1d       	adc	r26, r1
    1966:	68 0f       	add	r22, r24
    1968:	79 1f       	adc	r23, r25
    196a:	8a 1f       	adc	r24, r26
    196c:	91 1d       	adc	r25, r1
    196e:	a1 1d       	adc	r26, r1
    1970:	6a 0f       	add	r22, r26
    1972:	71 1d       	adc	r23, r1
    1974:	81 1d       	adc	r24, r1
    1976:	91 1d       	adc	r25, r1
    1978:	a1 1d       	adc	r26, r1
    197a:	20 d0       	rcall	.+64     	; 0x19bc <__ultoa_invert+0x84>
    197c:	09 f4       	brne	.+2      	; 0x1980 <__ultoa_invert+0x48>
    197e:	68 94       	set
    1980:	3f 91       	pop	r19
    1982:	2a e0       	ldi	r18, 0x0A	; 10
    1984:	26 9f       	mul	r18, r22
    1986:	11 24       	eor	r1, r1
    1988:	30 19       	sub	r19, r0
    198a:	30 5d       	subi	r19, 0xD0	; 208
    198c:	31 93       	st	Z+, r19
    198e:	de f6       	brtc	.-74     	; 0x1946 <__ultoa_invert+0xe>
    1990:	cf 01       	movw	r24, r30
    1992:	08 95       	ret
    1994:	46 2f       	mov	r20, r22
    1996:	47 70       	andi	r20, 0x07	; 7
    1998:	40 5d       	subi	r20, 0xD0	; 208
    199a:	41 93       	st	Z+, r20
    199c:	b3 e0       	ldi	r27, 0x03	; 3
    199e:	0f d0       	rcall	.+30     	; 0x19be <__ultoa_invert+0x86>
    19a0:	c9 f7       	brne	.-14     	; 0x1994 <__ultoa_invert+0x5c>
    19a2:	f6 cf       	rjmp	.-20     	; 0x1990 <__ultoa_invert+0x58>
    19a4:	46 2f       	mov	r20, r22
    19a6:	4f 70       	andi	r20, 0x0F	; 15
    19a8:	40 5d       	subi	r20, 0xD0	; 208
    19aa:	4a 33       	cpi	r20, 0x3A	; 58
    19ac:	18 f0       	brcs	.+6      	; 0x19b4 <__ultoa_invert+0x7c>
    19ae:	49 5d       	subi	r20, 0xD9	; 217
    19b0:	31 fd       	sbrc	r19, 1
    19b2:	40 52       	subi	r20, 0x20	; 32
    19b4:	41 93       	st	Z+, r20
    19b6:	02 d0       	rcall	.+4      	; 0x19bc <__ultoa_invert+0x84>
    19b8:	a9 f7       	brne	.-22     	; 0x19a4 <__ultoa_invert+0x6c>
    19ba:	ea cf       	rjmp	.-44     	; 0x1990 <__ultoa_invert+0x58>
    19bc:	b4 e0       	ldi	r27, 0x04	; 4
    19be:	a6 95       	lsr	r26
    19c0:	97 95       	ror	r25
    19c2:	87 95       	ror	r24
    19c4:	77 95       	ror	r23
    19c6:	67 95       	ror	r22
    19c8:	ba 95       	dec	r27
    19ca:	c9 f7       	brne	.-14     	; 0x19be <__ultoa_invert+0x86>
    19cc:	00 97       	sbiw	r24, 0x00	; 0
    19ce:	61 05       	cpc	r22, r1
    19d0:	71 05       	cpc	r23, r1
    19d2:	08 95       	ret
    19d4:	9b 01       	movw	r18, r22
    19d6:	ac 01       	movw	r20, r24
    19d8:	0a 2e       	mov	r0, r26
    19da:	06 94       	lsr	r0
    19dc:	57 95       	ror	r21
    19de:	47 95       	ror	r20
    19e0:	37 95       	ror	r19
    19e2:	27 95       	ror	r18
    19e4:	ba 95       	dec	r27
    19e6:	c9 f7       	brne	.-14     	; 0x19da <__ultoa_invert+0xa2>
    19e8:	62 0f       	add	r22, r18
    19ea:	73 1f       	adc	r23, r19
    19ec:	84 1f       	adc	r24, r20
    19ee:	95 1f       	adc	r25, r21
    19f0:	a0 1d       	adc	r26, r0
    19f2:	08 95       	ret

000019f4 <__divmodsi4>:
    19f4:	05 2e       	mov	r0, r21
    19f6:	97 fb       	bst	r25, 7
    19f8:	1e f4       	brtc	.+6      	; 0x1a00 <__divmodsi4+0xc>
    19fa:	00 94       	com	r0
    19fc:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <__negsi2>
    1a00:	57 fd       	sbrc	r21, 7
    1a02:	07 d0       	rcall	.+14     	; 0x1a12 <__divmodsi4_neg2>
    1a04:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__udivmodsi4>
    1a08:	07 fc       	sbrc	r0, 7
    1a0a:	03 d0       	rcall	.+6      	; 0x1a12 <__divmodsi4_neg2>
    1a0c:	4e f4       	brtc	.+18     	; 0x1a20 <__divmodsi4_exit>
    1a0e:	0c 94 11 0d 	jmp	0x1a22	; 0x1a22 <__negsi2>

00001a12 <__divmodsi4_neg2>:
    1a12:	50 95       	com	r21
    1a14:	40 95       	com	r20
    1a16:	30 95       	com	r19
    1a18:	21 95       	neg	r18
    1a1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a1c:	4f 4f       	sbci	r20, 0xFF	; 255
    1a1e:	5f 4f       	sbci	r21, 0xFF	; 255

00001a20 <__divmodsi4_exit>:
    1a20:	08 95       	ret

00001a22 <__negsi2>:
    1a22:	90 95       	com	r25
    1a24:	80 95       	com	r24
    1a26:	70 95       	com	r23
    1a28:	61 95       	neg	r22
    1a2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a2c:	8f 4f       	sbci	r24, 0xFF	; 255
    1a2e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a30:	08 95       	ret

00001a32 <__muluhisi3>:
    1a32:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__umulhisi3>
    1a36:	a5 9f       	mul	r26, r21
    1a38:	90 0d       	add	r25, r0
    1a3a:	b4 9f       	mul	r27, r20
    1a3c:	90 0d       	add	r25, r0
    1a3e:	a4 9f       	mul	r26, r20
    1a40:	80 0d       	add	r24, r0
    1a42:	91 1d       	adc	r25, r1
    1a44:	11 24       	eor	r1, r1
    1a46:	08 95       	ret

00001a48 <__mulshisi3>:
    1a48:	b7 ff       	sbrs	r27, 7
    1a4a:	0c 94 19 0d 	jmp	0x1a32	; 0x1a32 <__muluhisi3>

00001a4e <__mulohisi3>:
    1a4e:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <__muluhisi3>
    1a52:	82 1b       	sub	r24, r18
    1a54:	93 0b       	sbc	r25, r19
    1a56:	08 95       	ret

00001a58 <__prologue_saves__>:
    1a58:	2f 92       	push	r2
    1a5a:	3f 92       	push	r3
    1a5c:	4f 92       	push	r4
    1a5e:	5f 92       	push	r5
    1a60:	6f 92       	push	r6
    1a62:	7f 92       	push	r7
    1a64:	8f 92       	push	r8
    1a66:	9f 92       	push	r9
    1a68:	af 92       	push	r10
    1a6a:	bf 92       	push	r11
    1a6c:	cf 92       	push	r12
    1a6e:	df 92       	push	r13
    1a70:	ef 92       	push	r14
    1a72:	ff 92       	push	r15
    1a74:	0f 93       	push	r16
    1a76:	1f 93       	push	r17
    1a78:	cf 93       	push	r28
    1a7a:	df 93       	push	r29
    1a7c:	cd b7       	in	r28, 0x3d	; 61
    1a7e:	de b7       	in	r29, 0x3e	; 62
    1a80:	ca 1b       	sub	r28, r26
    1a82:	db 0b       	sbc	r29, r27
    1a84:	0f b6       	in	r0, 0x3f	; 63
    1a86:	f8 94       	cli
    1a88:	de bf       	out	0x3e, r29	; 62
    1a8a:	0f be       	out	0x3f, r0	; 63
    1a8c:	cd bf       	out	0x3d, r28	; 61
    1a8e:	09 94       	ijmp

00001a90 <__epilogue_restores__>:
    1a90:	2a 88       	ldd	r2, Y+18	; 0x12
    1a92:	39 88       	ldd	r3, Y+17	; 0x11
    1a94:	48 88       	ldd	r4, Y+16	; 0x10
    1a96:	5f 84       	ldd	r5, Y+15	; 0x0f
    1a98:	6e 84       	ldd	r6, Y+14	; 0x0e
    1a9a:	7d 84       	ldd	r7, Y+13	; 0x0d
    1a9c:	8c 84       	ldd	r8, Y+12	; 0x0c
    1a9e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1aa0:	aa 84       	ldd	r10, Y+10	; 0x0a
    1aa2:	b9 84       	ldd	r11, Y+9	; 0x09
    1aa4:	c8 84       	ldd	r12, Y+8	; 0x08
    1aa6:	df 80       	ldd	r13, Y+7	; 0x07
    1aa8:	ee 80       	ldd	r14, Y+6	; 0x06
    1aaa:	fd 80       	ldd	r15, Y+5	; 0x05
    1aac:	0c 81       	ldd	r16, Y+4	; 0x04
    1aae:	1b 81       	ldd	r17, Y+3	; 0x03
    1ab0:	aa 81       	ldd	r26, Y+2	; 0x02
    1ab2:	b9 81       	ldd	r27, Y+1	; 0x01
    1ab4:	ce 0f       	add	r28, r30
    1ab6:	d1 1d       	adc	r29, r1
    1ab8:	0f b6       	in	r0, 0x3f	; 63
    1aba:	f8 94       	cli
    1abc:	de bf       	out	0x3e, r29	; 62
    1abe:	0f be       	out	0x3f, r0	; 63
    1ac0:	cd bf       	out	0x3d, r28	; 61
    1ac2:	ed 01       	movw	r28, r26
    1ac4:	08 95       	ret

00001ac6 <__udivmodsi4>:
    1ac6:	a1 e2       	ldi	r26, 0x21	; 33
    1ac8:	1a 2e       	mov	r1, r26
    1aca:	aa 1b       	sub	r26, r26
    1acc:	bb 1b       	sub	r27, r27
    1ace:	fd 01       	movw	r30, r26
    1ad0:	0d c0       	rjmp	.+26     	; 0x1aec <__udivmodsi4_ep>

00001ad2 <__udivmodsi4_loop>:
    1ad2:	aa 1f       	adc	r26, r26
    1ad4:	bb 1f       	adc	r27, r27
    1ad6:	ee 1f       	adc	r30, r30
    1ad8:	ff 1f       	adc	r31, r31
    1ada:	a2 17       	cp	r26, r18
    1adc:	b3 07       	cpc	r27, r19
    1ade:	e4 07       	cpc	r30, r20
    1ae0:	f5 07       	cpc	r31, r21
    1ae2:	20 f0       	brcs	.+8      	; 0x1aec <__udivmodsi4_ep>
    1ae4:	a2 1b       	sub	r26, r18
    1ae6:	b3 0b       	sbc	r27, r19
    1ae8:	e4 0b       	sbc	r30, r20
    1aea:	f5 0b       	sbc	r31, r21

00001aec <__udivmodsi4_ep>:
    1aec:	66 1f       	adc	r22, r22
    1aee:	77 1f       	adc	r23, r23
    1af0:	88 1f       	adc	r24, r24
    1af2:	99 1f       	adc	r25, r25
    1af4:	1a 94       	dec	r1
    1af6:	69 f7       	brne	.-38     	; 0x1ad2 <__udivmodsi4_loop>
    1af8:	60 95       	com	r22
    1afa:	70 95       	com	r23
    1afc:	80 95       	com	r24
    1afe:	90 95       	com	r25
    1b00:	9b 01       	movw	r18, r22
    1b02:	ac 01       	movw	r20, r24
    1b04:	bd 01       	movw	r22, r26
    1b06:	cf 01       	movw	r24, r30
    1b08:	08 95       	ret

00001b0a <__umulhisi3>:
    1b0a:	a2 9f       	mul	r26, r18
    1b0c:	b0 01       	movw	r22, r0
    1b0e:	b3 9f       	mul	r27, r19
    1b10:	c0 01       	movw	r24, r0
    1b12:	a3 9f       	mul	r26, r19
    1b14:	70 0d       	add	r23, r0
    1b16:	81 1d       	adc	r24, r1
    1b18:	11 24       	eor	r1, r1
    1b1a:	91 1d       	adc	r25, r1
    1b1c:	b2 9f       	mul	r27, r18
    1b1e:	70 0d       	add	r23, r0
    1b20:	81 1d       	adc	r24, r1
    1b22:	11 24       	eor	r1, r1
    1b24:	91 1d       	adc	r25, r1
    1b26:	08 95       	ret

00001b28 <_exit>:
    1b28:	f8 94       	cli

00001b2a <__stop_program>:
    1b2a:	ff cf       	rjmp	.-2      	; 0x1b2a <__stop_program>
