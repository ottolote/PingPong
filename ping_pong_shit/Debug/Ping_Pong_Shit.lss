
Ping_Pong_Shit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000152  00800100  0000164c  000016e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000164c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800252  00800252  00001832  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001832  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001f8  00000000  00000000  0000188e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000023f2  00000000  00000000  00001a86  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d12  00000000  00000000  00003e78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d45  00000000  00000000  00004b8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000050c  00000000  00000000  000058d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006c9  00000000  00000000  00005ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001036  00000000  00000000  000064a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001d0  00000000  00000000  000074db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <SRAM_test+0x8>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	12 e0       	ldi	r17, 0x02	; 2
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	ec e4       	ldi	r30, 0x4C	; 76
     37c:	f6 e1       	ldi	r31, 0x16	; 22
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a2 35       	cpi	r26, 0x52	; 82
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	22 e0       	ldi	r18, 0x02	; 2
     38c:	a2 e5       	ldi	r26, 0x52	; 82
     38e:	b2 e0       	ldi	r27, 0x02	; 2
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a3 36       	cpi	r26, 0x63	; 99
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 39 02 	call	0x472	; 0x472 <main>
     39e:	0c 94 24 0b 	jmp	0x1648	; 0x1648 <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <joystick_read>:
}


unsigned int joystick_read(joy_channel channel){
	volatile char* ext_ram = (char*) 0x1400;
	ext_ram[0] = 0x4 + channel;
     3a6:	8c 5f       	subi	r24, 0xFC	; 252
     3a8:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3ac:	81 e4       	ldi	r24, 0x41	; 65
     3ae:	8a 95       	dec	r24
     3b0:	f1 f7       	brne	.-4      	; 0x3ae <joystick_read+0x8>
     3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <joystick_read+0xe>
	_delay_us(40);
	//sleep_enable();
	return (uint8_t) ext_ram[0];
     3b4:	80 91 00 14 	lds	r24, 0x1400
}
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	08 95       	ret

000003bc <joystick_init>:
	/*EMCUCR |= (0 << SM0);
	MCUCSR |= (1 << SM1);
	MCUCSR |= (0 << SM2);
	GICR |= (1 << INT0);
	sei();*/
	center_val_X = joystick_read(JOYSTICK_X);
     3bc:	80 e0       	ldi	r24, 0x00	; 0
     3be:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <joystick_read>
     3c2:	90 93 54 02 	sts	0x0254, r25
     3c6:	80 93 53 02 	sts	0x0253, r24
	center_val_Y = joystick_read(JOYSTICK_Y);
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <joystick_read>
     3d0:	90 93 56 02 	sts	0x0256, r25
     3d4:	80 93 55 02 	sts	0x0255, r24
     3d8:	08 95       	ret

000003da <read_converted>:
}*/




signed int read_converted(joy_channel channel){
     3da:	cf 93       	push	r28
     3dc:	c8 2f       	mov	r28, r24

	int v = (joystick_read(channel));
     3de:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <joystick_read>

	if      (channel == JOYSTICK_X)  {v -= center_val_X;}
     3e2:	c1 11       	cpse	r28, r1
     3e4:	07 c0       	rjmp	.+14     	; 0x3f4 <read_converted+0x1a>
     3e6:	20 91 53 02 	lds	r18, 0x0253
     3ea:	30 91 54 02 	lds	r19, 0x0254
     3ee:	82 1b       	sub	r24, r18
     3f0:	93 0b       	sbc	r25, r19
     3f2:	08 c0       	rjmp	.+16     	; 0x404 <read_converted+0x2a>
	else if (channel == JOYSTICK_Y)  {v -= center_val_Y;}
     3f4:	c1 30       	cpi	r28, 0x01	; 1
     3f6:	31 f4       	brne	.+12     	; 0x404 <read_converted+0x2a>
     3f8:	20 91 55 02 	lds	r18, 0x0255
     3fc:	30 91 56 02 	lds	r19, 0x0256
     400:	82 1b       	sub	r24, r18
     402:	93 0b       	sbc	r25, r19

	return  (v > 127)	? 127 :
     404:	80 38       	cpi	r24, 0x80	; 128
     406:	2f ef       	ldi	r18, 0xFF	; 255
     408:	92 07       	cpc	r25, r18
     40a:	14 f4       	brge	.+4      	; 0x410 <read_converted+0x36>
     40c:	80 e8       	ldi	r24, 0x80	; 128
     40e:	9f ef       	ldi	r25, 0xFF	; 255
     410:	80 38       	cpi	r24, 0x80	; 128
     412:	91 05       	cpc	r25, r1
     414:	14 f0       	brlt	.+4      	; 0x41a <read_converted+0x40>
     416:	8f e7       	ldi	r24, 0x7F	; 127
     418:	90 e0       	ldi	r25, 0x00	; 0
			(v < -128)	? -128 :
			 v;
}
     41a:	cf 91       	pop	r28
     41c:	08 95       	ret

0000041e <joystick_direction_Y>:
	//sleep_enable();
	return (uint8_t) ext_ram[0];
}

signed int joystick_direction_Y(){
	signed int joy_Y = read_converted(JOYSTICK_Y);
     41e:	81 e0       	ldi	r24, 0x01	; 1
     420:	0e 94 ed 01 	call	0x3da	; 0x3da <read_converted>
	if(joy_Y >= 100){
     424:	84 36       	cpi	r24, 0x64	; 100
     426:	91 05       	cpc	r25, r1
     428:	64 f4       	brge	.+24     	; 0x442 <joystick_direction_Y+0x24>
		return 1;
	} else if (joy_Y <= -100) {
     42a:	21 e0       	ldi	r18, 0x01	; 1
     42c:	30 e0       	ldi	r19, 0x00	; 0
     42e:	8d 39       	cpi	r24, 0x9D	; 157
     430:	9f 4f       	sbci	r25, 0xFF	; 255
     432:	14 f0       	brlt	.+4      	; 0x438 <joystick_direction_Y+0x1a>
     434:	20 e0       	ldi	r18, 0x00	; 0
     436:	30 e0       	ldi	r19, 0x00	; 0
     438:	88 27       	eor	r24, r24
     43a:	99 27       	eor	r25, r25
     43c:	82 1b       	sub	r24, r18
     43e:	93 0b       	sbc	r25, r19
     440:	08 95       	ret
}

signed int joystick_direction_Y(){
	signed int joy_Y = read_converted(JOYSTICK_Y);
	if(joy_Y >= 100){
		return 1;
     442:	81 e0       	ldi	r24, 0x01	; 1
     444:	90 e0       	ldi	r25, 0x00	; 0
	} else if (joy_Y <= -100) {
		return -1;
	} 
	return 0;
}
     446:	08 95       	ret

00000448 <joystick_direction_X>:

signed int joystick_direction_X(){
	signed int joy_X = read_converted(JOYSTICK_X);
     448:	80 e0       	ldi	r24, 0x00	; 0
     44a:	0e 94 ed 01 	call	0x3da	; 0x3da <read_converted>
	if(joy_X >= 100){
     44e:	84 36       	cpi	r24, 0x64	; 100
     450:	91 05       	cpc	r25, r1
     452:	64 f4       	brge	.+24     	; 0x46c <joystick_direction_X+0x24>
		return 1;
	} else if (joy_X <= -100) {
     454:	21 e0       	ldi	r18, 0x01	; 1
     456:	30 e0       	ldi	r19, 0x00	; 0
     458:	8d 39       	cpi	r24, 0x9D	; 157
     45a:	9f 4f       	sbci	r25, 0xFF	; 255
     45c:	14 f0       	brlt	.+4      	; 0x462 <joystick_direction_X+0x1a>
     45e:	20 e0       	ldi	r18, 0x00	; 0
     460:	30 e0       	ldi	r19, 0x00	; 0
     462:	88 27       	eor	r24, r24
     464:	99 27       	eor	r25, r25
     466:	82 1b       	sub	r24, r18
     468:	93 0b       	sbc	r25, r19
     46a:	08 95       	ret
}

signed int joystick_direction_X(){
	signed int joy_X = read_converted(JOYSTICK_X);
	if(joy_X >= 100){
		return 1;
     46c:	81 e0       	ldi	r24, 0x01	; 1
     46e:	90 e0       	ldi	r25, 0x00	; 0
	} else if (joy_X <= -100) {
		return -1;
	}
	return 0;
}
     470:	08 95       	ret

00000472 <main>:
#include "joystick_driver.h"
#include "oled_driver.h"
#include "menu.h"

int main(void) {
    uart_init(MYUBRR);
     472:	8f e1       	ldi	r24, 0x1F	; 31
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	0e 94 3e 06 	call	0xc7c	; 0xc7c <uart_init>
	printf("\nREBOOTED\n");
     47a:	8a e2       	ldi	r24, 0x2A	; 42
     47c:	91 e0       	ldi	r25, 0x01	; 1
     47e:	0e 94 e5 07 	call	0xfca	; 0xfca <puts>
	SRAM_init();
     482:	0e 94 22 06 	call	0xc44	; 0xc44 <SRAM_init>
	joystick_init();
     486:	0e 94 de 01 	call	0x3bc	; 0x3bc <joystick_init>
	oled_init();
     48a:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <oled_init>
	
	while(1) { 
		//shell();

		
		menuitem* test_menu = MENU_create_menu();
     48e:	0e 94 a5 02 	call	0x54a	; 0x54a <MENU_create_menu>
		MENU_navigate(test_menu);
     492:	0e 94 5e 03 	call	0x6bc	; 0x6bc <MENU_navigate>
		
		flash_diode();
     496:	0e 94 29 06 	call	0xc52	; 0xc52 <flash_diode>
     49a:	f9 cf       	rjmp	.-14     	; 0x48e <main+0x1c>

0000049c <MENU_new_item>:
	new_menu[0].items[0].child = NULL;
	
	return new_menu;	
}*/

menuitem* MENU_new_item(char *name, void (*handlerFunc)(void), uint8_t number_of_submenus) {
     49c:	df 92       	push	r13
     49e:	ef 92       	push	r14
     4a0:	ff 92       	push	r15
     4a2:	0f 93       	push	r16
     4a4:	1f 93       	push	r17
     4a6:	cf 93       	push	r28
     4a8:	df 93       	push	r29
     4aa:	7c 01       	movw	r14, r24
     4ac:	8b 01       	movw	r16, r22
     4ae:	d4 2e       	mov	r13, r20
	menuitem* new_item = malloc(sizeof(menuitem));
     4b0:	89 e0       	ldi	r24, 0x09	; 9
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	0e 94 4c 06 	call	0xc98	; 0xc98 <malloc>
     4b8:	ec 01       	movw	r28, r24
	
	new_item->name = name;
     4ba:	fe 82       	std	Y+6, r15	; 0x06
     4bc:	ed 82       	std	Y+5, r14	; 0x05
	new_item->handlerFunc = handlerFunc;
     4be:	18 87       	std	Y+8, r17	; 0x08
     4c0:	0f 83       	std	Y+7, r16	; 0x07
	new_item->number_of_submenus = number_of_submenus;
     4c2:	d8 82       	st	Y, r13
	new_item->submenus = malloc(number_of_submenus * sizeof(menuitem));
     4c4:	4d 2d       	mov	r20, r13
     4c6:	50 e0       	ldi	r21, 0x00	; 0
     4c8:	ca 01       	movw	r24, r20
     4ca:	88 0f       	add	r24, r24
     4cc:	99 1f       	adc	r25, r25
     4ce:	88 0f       	add	r24, r24
     4d0:	99 1f       	adc	r25, r25
     4d2:	88 0f       	add	r24, r24
     4d4:	99 1f       	adc	r25, r25
     4d6:	84 0f       	add	r24, r20
     4d8:	95 1f       	adc	r25, r21
     4da:	0e 94 4c 06 	call	0xc98	; 0xc98 <malloc>
     4de:	9a 83       	std	Y+2, r25	; 0x02
     4e0:	89 83       	std	Y+1, r24	; 0x01
	
	return new_item;
}
     4e2:	ce 01       	movw	r24, r28
     4e4:	df 91       	pop	r29
     4e6:	cf 91       	pop	r28
     4e8:	1f 91       	pop	r17
     4ea:	0f 91       	pop	r16
     4ec:	ff 90       	pop	r15
     4ee:	ef 90       	pop	r14
     4f0:	df 90       	pop	r13
     4f2:	08 95       	ret

000004f4 <MENU_assign_parents>:

void MENU_assign_parents(menuitem *current_menu){
     4f4:	1f 93       	push	r17
     4f6:	cf 93       	push	r28
     4f8:	df 93       	push	r29
     4fa:	ec 01       	movw	r28, r24
	for (uint8_t n = 0; n < current_menu->number_of_submenus; n++) {
     4fc:	88 81       	ld	r24, Y
     4fe:	88 23       	and	r24, r24
     500:	01 f1       	breq	.+64     	; 0x542 <__stack+0x43>
     502:	10 e0       	ldi	r17, 0x00	; 0
		current_menu->submenus[n]->parent = current_menu;
     504:	81 2f       	mov	r24, r17
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	88 0f       	add	r24, r24
     50a:	99 1f       	adc	r25, r25
     50c:	e9 81       	ldd	r30, Y+1	; 0x01
     50e:	fa 81       	ldd	r31, Y+2	; 0x02
     510:	e8 0f       	add	r30, r24
     512:	f9 1f       	adc	r31, r25
     514:	01 90       	ld	r0, Z+
     516:	f0 81       	ld	r31, Z
     518:	e0 2d       	mov	r30, r0
     51a:	d4 83       	std	Z+4, r29	; 0x04
     51c:	c3 83       	std	Z+3, r28	; 0x03
		if (current_menu->submenus[n]->number_of_submenus > 0) {
     51e:	29 81       	ldd	r18, Y+1	; 0x01
     520:	3a 81       	ldd	r19, Y+2	; 0x02
     522:	f9 01       	movw	r30, r18
     524:	e8 0f       	add	r30, r24
     526:	f9 1f       	adc	r31, r25
     528:	01 90       	ld	r0, Z+
     52a:	f0 81       	ld	r31, Z
     52c:	e0 2d       	mov	r30, r0
     52e:	80 81       	ld	r24, Z
     530:	88 23       	and	r24, r24
     532:	19 f0       	breq	.+6      	; 0x53a <__stack+0x3b>
			MENU_assign_parents(current_menu->submenus[n]);
     534:	cf 01       	movw	r24, r30
     536:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <MENU_assign_parents>
	
	return new_item;
}

void MENU_assign_parents(menuitem *current_menu){
	for (uint8_t n = 0; n < current_menu->number_of_submenus; n++) {
     53a:	1f 5f       	subi	r17, 0xFF	; 255
     53c:	88 81       	ld	r24, Y
     53e:	18 17       	cp	r17, r24
     540:	08 f3       	brcs	.-62     	; 0x504 <__stack+0x5>
		current_menu->submenus[n]->parent = current_menu;
		if (current_menu->submenus[n]->number_of_submenus > 0) {
			MENU_assign_parents(current_menu->submenus[n]);
		}
	}
}
     542:	df 91       	pop	r29
     544:	cf 91       	pop	r28
     546:	1f 91       	pop	r17
     548:	08 95       	ret

0000054a <MENU_create_menu>:


menuitem* MENU_create_menu(){
     54a:	0f 93       	push	r16
     54c:	1f 93       	push	r17
     54e:	cf 93       	push	r28
     550:	df 93       	push	r29
	menuitem* root_menu = MENU_new_item("Main", NULL, 4);
     552:	44 e0       	ldi	r20, 0x04	; 4
     554:	60 e0       	ldi	r22, 0x00	; 0
     556:	70 e0       	ldi	r23, 0x00	; 0
     558:	84 e3       	ldi	r24, 0x34	; 52
     55a:	91 e0       	ldi	r25, 0x01	; 1
     55c:	0e 94 4e 02 	call	0x49c	; 0x49c <MENU_new_item>
     560:	ec 01       	movw	r28, r24
	root_menu->parent = NULL;
     562:	1c 82       	std	Y+4, r1	; 0x04
     564:	1b 82       	std	Y+3, r1	; 0x03
	root_menu->submenus[0] = MENU_new_item("Test1", SRAM_test, 0);
     566:	09 81       	ldd	r16, Y+1	; 0x01
     568:	1a 81       	ldd	r17, Y+2	; 0x02
     56a:	40 e0       	ldi	r20, 0x00	; 0
     56c:	6d e9       	ldi	r22, 0x9D	; 157
     56e:	75 e0       	ldi	r23, 0x05	; 5
     570:	89 e3       	ldi	r24, 0x39	; 57
     572:	91 e0       	ldi	r25, 0x01	; 1
     574:	0e 94 4e 02 	call	0x49c	; 0x49c <MENU_new_item>
     578:	f8 01       	movw	r30, r16
     57a:	91 83       	std	Z+1, r25	; 0x01
     57c:	80 83       	st	Z, r24
	root_menu->submenus[1] = MENU_new_item("Test2", SRAM_test, 2);
     57e:	09 81       	ldd	r16, Y+1	; 0x01
     580:	1a 81       	ldd	r17, Y+2	; 0x02
     582:	42 e0       	ldi	r20, 0x02	; 2
     584:	6d e9       	ldi	r22, 0x9D	; 157
     586:	75 e0       	ldi	r23, 0x05	; 5
     588:	8f e3       	ldi	r24, 0x3F	; 63
     58a:	91 e0       	ldi	r25, 0x01	; 1
     58c:	0e 94 4e 02 	call	0x49c	; 0x49c <MENU_new_item>
     590:	f8 01       	movw	r30, r16
     592:	93 83       	std	Z+3, r25	; 0x03
     594:	82 83       	std	Z+2, r24	; 0x02


	root_menu->submenus[2] = MENU_new_item("Test3", SRAM_test, 0);
     596:	09 81       	ldd	r16, Y+1	; 0x01
     598:	1a 81       	ldd	r17, Y+2	; 0x02
     59a:	40 e0       	ldi	r20, 0x00	; 0
     59c:	6d e9       	ldi	r22, 0x9D	; 157
     59e:	75 e0       	ldi	r23, 0x05	; 5
     5a0:	85 e4       	ldi	r24, 0x45	; 69
     5a2:	91 e0       	ldi	r25, 0x01	; 1
     5a4:	0e 94 4e 02 	call	0x49c	; 0x49c <MENU_new_item>
     5a8:	f8 01       	movw	r30, r16
     5aa:	95 83       	std	Z+5, r25	; 0x05
     5ac:	84 83       	std	Z+4, r24	; 0x04
	root_menu->submenus[3] = MENU_new_item("Test4", NULL, 1);
     5ae:	09 81       	ldd	r16, Y+1	; 0x01
     5b0:	1a 81       	ldd	r17, Y+2	; 0x02
     5b2:	41 e0       	ldi	r20, 0x01	; 1
     5b4:	60 e0       	ldi	r22, 0x00	; 0
     5b6:	70 e0       	ldi	r23, 0x00	; 0
     5b8:	8b e4       	ldi	r24, 0x4B	; 75
     5ba:	91 e0       	ldi	r25, 0x01	; 1
     5bc:	0e 94 4e 02 	call	0x49c	; 0x49c <MENU_new_item>
     5c0:	f8 01       	movw	r30, r16
     5c2:	97 83       	std	Z+7, r25	; 0x07
     5c4:	86 83       	std	Z+6, r24	; 0x06
	root_menu->submenus[3]->submenus[0] = MENU_new_item("Subtest1", SRAM_test, 0);
     5c6:	e9 81       	ldd	r30, Y+1	; 0x01
     5c8:	fa 81       	ldd	r31, Y+2	; 0x02
     5ca:	06 80       	ldd	r0, Z+6	; 0x06
     5cc:	f7 81       	ldd	r31, Z+7	; 0x07
     5ce:	e0 2d       	mov	r30, r0
     5d0:	01 81       	ldd	r16, Z+1	; 0x01
     5d2:	12 81       	ldd	r17, Z+2	; 0x02
     5d4:	40 e0       	ldi	r20, 0x00	; 0
     5d6:	6d e9       	ldi	r22, 0x9D	; 157
     5d8:	75 e0       	ldi	r23, 0x05	; 5
     5da:	81 e5       	ldi	r24, 0x51	; 81
     5dc:	91 e0       	ldi	r25, 0x01	; 1
     5de:	0e 94 4e 02 	call	0x49c	; 0x49c <MENU_new_item>
     5e2:	f8 01       	movw	r30, r16
     5e4:	91 83       	std	Z+1, r25	; 0x01
     5e6:	80 83       	st	Z, r24

	

	
	MENU_assign_parents(root_menu);
     5e8:	ce 01       	movw	r24, r28
     5ea:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <MENU_assign_parents>
		
	return root_menu;
}
     5ee:	ce 01       	movw	r24, r28
     5f0:	df 91       	pop	r29
     5f2:	cf 91       	pop	r28
     5f4:	1f 91       	pop	r17
     5f6:	0f 91       	pop	r16
     5f8:	08 95       	ret

000005fa <MENU_print>:

//fixed
void MENU_print(menuitem *current_menu_item){
     5fa:	ef 92       	push	r14
     5fc:	ff 92       	push	r15
     5fe:	0f 93       	push	r16
     600:	1f 93       	push	r17
     602:	cf 93       	push	r28
     604:	df 93       	push	r29
     606:	7c 01       	movw	r14, r24
	oled_clear_screen();
     608:	0e 94 1e 04 	call	0x83c	; 0x83c <oled_clear_screen>
	oled_print_arrow(1, 0);
     60c:	60 e0       	ldi	r22, 0x00	; 0
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	0e 94 24 05 	call	0xa48	; 0xa48 <oled_print_arrow>
	oled_pos(0,0);
     614:	60 e0       	ldi	r22, 0x00	; 0
     616:	70 e0       	ldi	r23, 0x00	; 0
     618:	80 e0       	ldi	r24, 0x00	; 0
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	0e 94 34 04 	call	0x868	; 0x868 <oled_pos>
	oled_printf(current_menu_item->name);
     620:	d7 01       	movw	r26, r14
     622:	16 96       	adiw	r26, 0x06	; 6
     624:	8c 91       	ld	r24, X
     626:	16 97       	sbiw	r26, 0x06	; 6
     628:	8f 93       	push	r24
     62a:	15 96       	adiw	r26, 0x05	; 5
     62c:	8c 91       	ld	r24, X
     62e:	8f 93       	push	r24
     630:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <oled_printf>
	printf("%s\n", current_menu_item->name);
     634:	f7 01       	movw	r30, r14
     636:	85 81       	ldd	r24, Z+5	; 0x05
     638:	96 81       	ldd	r25, Z+6	; 0x06
     63a:	0e 94 e5 07 	call	0xfca	; 0xfca <puts>
	
	for (unsigned int i = 0; i < current_menu_item->number_of_submenus; i++) {
     63e:	0f 90       	pop	r0
     640:	0f 90       	pop	r0
     642:	d7 01       	movw	r26, r14
     644:	8c 91       	ld	r24, X
     646:	88 23       	and	r24, r24
     648:	91 f1       	breq	.+100    	; 0x6ae <MENU_print+0xb4>
     64a:	c0 e0       	ldi	r28, 0x00	; 0
     64c:	d0 e0       	ldi	r29, 0x00	; 0
     64e:	00 e0       	ldi	r16, 0x00	; 0
     650:	10 e0       	ldi	r17, 0x00	; 0
		oled_pos(i + 1, MENU_INDENT);
     652:	0f 5f       	subi	r16, 0xFF	; 255
     654:	1f 4f       	sbci	r17, 0xFF	; 255
     656:	62 e0       	ldi	r22, 0x02	; 2
     658:	70 e0       	ldi	r23, 0x00	; 0
     65a:	c8 01       	movw	r24, r16
     65c:	0e 94 34 04 	call	0x868	; 0x868 <oled_pos>
		oled_printf(current_menu_item->submenus[i]->name);
     660:	d7 01       	movw	r26, r14
     662:	11 96       	adiw	r26, 0x01	; 1
     664:	ed 91       	ld	r30, X+
     666:	fc 91       	ld	r31, X
     668:	12 97       	sbiw	r26, 0x02	; 2
     66a:	ec 0f       	add	r30, r28
     66c:	fd 1f       	adc	r31, r29
     66e:	01 90       	ld	r0, Z+
     670:	f0 81       	ld	r31, Z
     672:	e0 2d       	mov	r30, r0
     674:	86 81       	ldd	r24, Z+6	; 0x06
     676:	8f 93       	push	r24
     678:	85 81       	ldd	r24, Z+5	; 0x05
     67a:	8f 93       	push	r24
     67c:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <oled_printf>
		printf("%s\n",current_menu_item->submenus[i]->name);
     680:	d7 01       	movw	r26, r14
     682:	11 96       	adiw	r26, 0x01	; 1
     684:	ed 91       	ld	r30, X+
     686:	fc 91       	ld	r31, X
     688:	12 97       	sbiw	r26, 0x02	; 2
     68a:	ec 0f       	add	r30, r28
     68c:	fd 1f       	adc	r31, r29
     68e:	01 90       	ld	r0, Z+
     690:	f0 81       	ld	r31, Z
     692:	e0 2d       	mov	r30, r0
     694:	85 81       	ldd	r24, Z+5	; 0x05
     696:	96 81       	ldd	r25, Z+6	; 0x06
     698:	0e 94 e5 07 	call	0xfca	; 0xfca <puts>
     69c:	22 96       	adiw	r28, 0x02	; 2
	oled_print_arrow(1, 0);
	oled_pos(0,0);
	oled_printf(current_menu_item->name);
	printf("%s\n", current_menu_item->name);
	
	for (unsigned int i = 0; i < current_menu_item->number_of_submenus; i++) {
     69e:	f7 01       	movw	r30, r14
     6a0:	80 81       	ld	r24, Z
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	0f 90       	pop	r0
     6a6:	0f 90       	pop	r0
     6a8:	08 17       	cp	r16, r24
     6aa:	19 07       	cpc	r17, r25
     6ac:	90 f2       	brcs	.-92     	; 0x652 <MENU_print+0x58>
		oled_pos(i + 1, MENU_INDENT);
		oled_printf(current_menu_item->submenus[i]->name);
		printf("%s\n",current_menu_item->submenus[i]->name);
	}
}
     6ae:	df 91       	pop	r29
     6b0:	cf 91       	pop	r28
     6b2:	1f 91       	pop	r17
     6b4:	0f 91       	pop	r16
     6b6:	ff 90       	pop	r15
     6b8:	ef 90       	pop	r14
     6ba:	08 95       	ret

000006bc <MENU_navigate>:

void MENU_navigate(menuitem *current_menu){
     6bc:	8c 01       	movw	r16, r24
	MENU_print(current_menu);
     6be:	0e 94 fd 02 	call	0x5fa	; 0x5fa <MENU_print>
	oled_print_arrow(1, 0);
     6c2:	60 e0       	ldi	r22, 0x00	; 0
     6c4:	81 e0       	ldi	r24, 0x01	; 1
     6c6:	0e 94 24 05 	call	0xa48	; 0xa48 <oled_print_arrow>
	while(1){
		if(joystick_direction_Y() != 0){
     6ca:	0e 94 0f 02 	call	0x41e	; 0x41e <joystick_direction_Y>
     6ce:	89 2b       	or	r24, r25
     6d0:	51 f0       	breq	.+20     	; 0x6e6 <MENU_navigate+0x2a>
			oled_arrow_handler(joystick_direction_Y(), 1, current_menu->number_of_submenus);
     6d2:	d8 01       	movw	r26, r16
     6d4:	cc 91       	ld	r28, X
     6d6:	d0 e0       	ldi	r29, 0x00	; 0
     6d8:	0e 94 0f 02 	call	0x41e	; 0x41e <joystick_direction_Y>
     6dc:	ae 01       	movw	r20, r28
     6de:	61 e0       	ldi	r22, 0x01	; 1
     6e0:	70 e0       	ldi	r23, 0x00	; 0
     6e2:	0e 94 91 05 	call	0xb22	; 0xb22 <oled_arrow_handler>
		}
		
		if(joystick_direction_X() != 0){
     6e6:	0e 94 24 02 	call	0x448	; 0x448 <joystick_direction_X>
     6ea:	89 2b       	or	r24, r25
     6ec:	71 f3       	breq	.-36     	; 0x6ca <MENU_navigate+0xe>
			if (joystick_direction_X() == 1) {
     6ee:	0e 94 24 02 	call	0x448	; 0x448 <joystick_direction_X>
     6f2:	01 97       	sbiw	r24, 0x01	; 1
     6f4:	09 f0       	breq	.+2      	; 0x6f8 <MENU_navigate+0x3c>
     6f6:	5f c0       	rjmp	.+190    	; 0x7b6 <MENU_navigate+0xfa>
				if (current_menu->submenus[oled_get_arrow_page() - 1]->number_of_submenus > 0) {
     6f8:	f8 01       	movw	r30, r16
     6fa:	c1 81       	ldd	r28, Z+1	; 0x01
     6fc:	d2 81       	ldd	r29, Z+2	; 0x02
     6fe:	0e 94 21 05 	call	0xa42	; 0xa42 <oled_get_arrow_page>
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	81 50       	subi	r24, 0x01	; 1
     706:	90 48       	sbci	r25, 0x80	; 128
     708:	88 0f       	add	r24, r24
     70a:	99 1f       	adc	r25, r25
     70c:	c8 0f       	add	r28, r24
     70e:	d9 1f       	adc	r29, r25
     710:	e8 81       	ld	r30, Y
     712:	f9 81       	ldd	r31, Y+1	; 0x01
     714:	80 81       	ld	r24, Z
     716:	88 23       	and	r24, r24
     718:	21 f1       	breq	.+72     	; 0x762 <MENU_navigate+0xa6>
					current_menu = current_menu->submenus[oled_get_arrow_page() - 1];
     71a:	d8 01       	movw	r26, r16
     71c:	11 96       	adiw	r26, 0x01	; 1
     71e:	cd 91       	ld	r28, X+
     720:	dc 91       	ld	r29, X
     722:	12 97       	sbiw	r26, 0x02	; 2
     724:	0e 94 21 05 	call	0xa42	; 0xa42 <oled_get_arrow_page>
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	81 50       	subi	r24, 0x01	; 1
     72c:	90 48       	sbci	r25, 0x80	; 128
     72e:	88 0f       	add	r24, r24
     730:	99 1f       	adc	r25, r25
     732:	c8 0f       	add	r28, r24
     734:	d9 1f       	adc	r29, r25
     736:	08 81       	ld	r16, Y
     738:	19 81       	ldd	r17, Y+1	; 0x01
					printf(current_menu->submenus[0]->name);
     73a:	d8 01       	movw	r26, r16
     73c:	11 96       	adiw	r26, 0x01	; 1
     73e:	ed 91       	ld	r30, X+
     740:	fc 91       	ld	r31, X
     742:	12 97       	sbiw	r26, 0x02	; 2
     744:	01 90       	ld	r0, Z+
     746:	f0 81       	ld	r31, Z
     748:	e0 2d       	mov	r30, r0
     74a:	86 81       	ldd	r24, Z+6	; 0x06
     74c:	8f 93       	push	r24
     74e:	85 81       	ldd	r24, Z+5	; 0x05
     750:	8f 93       	push	r24
     752:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <printf>
					MENU_print(current_menu);
     756:	c8 01       	movw	r24, r16
     758:	0e 94 fd 02 	call	0x5fa	; 0x5fa <MENU_print>
     75c:	0f 90       	pop	r0
     75e:	0f 90       	pop	r0
     760:	37 c0       	rjmp	.+110    	; 0x7d0 <MENU_navigate+0x114>
				} else  if (current_menu->submenus[oled_get_arrow_page() - 1]->handlerFunc != NULL) {
     762:	f8 01       	movw	r30, r16
     764:	c1 81       	ldd	r28, Z+1	; 0x01
     766:	d2 81       	ldd	r29, Z+2	; 0x02
     768:	0e 94 21 05 	call	0xa42	; 0xa42 <oled_get_arrow_page>
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	81 50       	subi	r24, 0x01	; 1
     770:	90 48       	sbci	r25, 0x80	; 128
     772:	88 0f       	add	r24, r24
     774:	99 1f       	adc	r25, r25
     776:	c8 0f       	add	r28, r24
     778:	d9 1f       	adc	r29, r25
     77a:	e8 81       	ld	r30, Y
     77c:	f9 81       	ldd	r31, Y+1	; 0x01
     77e:	87 81       	ldd	r24, Z+7	; 0x07
     780:	90 85       	ldd	r25, Z+8	; 0x08
     782:	89 2b       	or	r24, r25
     784:	29 f1       	breq	.+74     	; 0x7d0 <MENU_navigate+0x114>
					current_menu->submenus[oled_get_arrow_page() - 1]->handlerFunc();
     786:	d8 01       	movw	r26, r16
     788:	11 96       	adiw	r26, 0x01	; 1
     78a:	cd 91       	ld	r28, X+
     78c:	dc 91       	ld	r29, X
     78e:	12 97       	sbiw	r26, 0x02	; 2
     790:	0e 94 21 05 	call	0xa42	; 0xa42 <oled_get_arrow_page>
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	81 50       	subi	r24, 0x01	; 1
     798:	90 48       	sbci	r25, 0x80	; 128
     79a:	88 0f       	add	r24, r24
     79c:	99 1f       	adc	r25, r25
     79e:	c8 0f       	add	r28, r24
     7a0:	d9 1f       	adc	r29, r25
     7a2:	e8 81       	ld	r30, Y
     7a4:	f9 81       	ldd	r31, Y+1	; 0x01
     7a6:	07 80       	ldd	r0, Z+7	; 0x07
     7a8:	f0 85       	ldd	r31, Z+8	; 0x08
     7aa:	e0 2d       	mov	r30, r0
     7ac:	09 95       	icall
					MENU_print(current_menu);
     7ae:	c8 01       	movw	r24, r16
     7b0:	0e 94 fd 02 	call	0x5fa	; 0x5fa <MENU_print>
     7b4:	0d c0       	rjmp	.+26     	; 0x7d0 <MENU_navigate+0x114>
				}
			} else if (joystick_direction_X() == -1 && current_menu->parent != NULL) {
     7b6:	0e 94 24 02 	call	0x448	; 0x448 <joystick_direction_X>
     7ba:	01 96       	adiw	r24, 0x01	; 1
     7bc:	49 f4       	brne	.+18     	; 0x7d0 <MENU_navigate+0x114>
     7be:	f8 01       	movw	r30, r16
     7c0:	c3 81       	ldd	r28, Z+3	; 0x03
     7c2:	d4 81       	ldd	r29, Z+4	; 0x04
     7c4:	20 97       	sbiw	r28, 0x00	; 0
     7c6:	21 f0       	breq	.+8      	; 0x7d0 <MENU_navigate+0x114>
				current_menu = current_menu->parent;
				MENU_print(current_menu);
     7c8:	ce 01       	movw	r24, r28
     7ca:	0e 94 fd 02 	call	0x5fa	; 0x5fa <MENU_print>
				} else  if (current_menu->submenus[oled_get_arrow_page() - 1]->handlerFunc != NULL) {
					current_menu->submenus[oled_get_arrow_page() - 1]->handlerFunc();
					MENU_print(current_menu);
				}
			} else if (joystick_direction_X() == -1 && current_menu->parent != NULL) {
				current_menu = current_menu->parent;
     7ce:	8e 01       	movw	r16, r28
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7d0:	ff e9       	ldi	r31, 0x9F	; 159
     7d2:	26 e8       	ldi	r18, 0x86	; 134
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	f1 50       	subi	r31, 0x01	; 1
     7d8:	20 40       	sbci	r18, 0x00	; 0
     7da:	80 40       	sbci	r24, 0x00	; 0
     7dc:	e1 f7       	brne	.-8      	; 0x7d6 <MENU_navigate+0x11a>
     7de:	00 c0       	rjmp	.+0      	; 0x7e0 <MENU_navigate+0x124>
     7e0:	00 00       	nop
     7e2:	73 cf       	rjmp	.-282    	; 0x6ca <MENU_navigate+0xe>

000007e4 <oled_print_char>:
		//Set higher column address                                                                                                                                                                                                                                                                                                                                                                     
		*oled_command_addr = 0x10 + (column * (FONTWIDTH)>>4);
	}
}

void oled_print_char(char ch){
     7e4:	28 e0       	ldi	r18, 0x08	; 8
     7e6:	82 9f       	mul	r24, r18
     7e8:	c0 01       	movw	r24, r0
     7ea:	11 24       	eor	r1, r1
     7ec:	fc 01       	movw	r30, r24
     7ee:	e0 59       	subi	r30, 0x90	; 144
     7f0:	f0 40       	sbci	r31, 0x00	; 0
	for (uint8_t i = 0; i<FONTWIDTH; i++) {
     7f2:	80 e0       	ldi	r24, 0x00	; 0
		oled_write_data(pgm_read_byte(&font[ch - FONTOFFSET][i]));
     7f4:	94 91       	lpm	r25, Z
void oled_write_command(uint8_t command){
	*oled_command_addr = command;
}

void oled_write_data(uint8_t data){
	*oled_data_addr = data;
     7f6:	a0 91 0a 01 	lds	r26, 0x010A
     7fa:	b0 91 0b 01 	lds	r27, 0x010B
     7fe:	9c 93       	st	X, r25
		*oled_command_addr = 0x10 + (column * (FONTWIDTH)>>4);
	}
}

void oled_print_char(char ch){
	for (uint8_t i = 0; i<FONTWIDTH; i++) {
     800:	8f 5f       	subi	r24, 0xFF	; 255
     802:	31 96       	adiw	r30, 0x01	; 1
     804:	88 30       	cpi	r24, 0x08	; 8
     806:	b1 f7       	brne	.-20     	; 0x7f4 <oled_print_char+0x10>
		oled_write_data(pgm_read_byte(&font[ch - FONTOFFSET][i]));
	}
}
     808:	08 95       	ret

0000080a <oled_goto_page>:
void oled_back(){
	
}

void oled_goto_page(unsigned int page) {
	oled_write_command(0xB0 + page);
     80a:	90 eb       	ldi	r25, 0xB0	; 176
     80c:	98 0f       	add	r25, r24
	_delay_ms(3000);
	oled_clear_screen();
}

void oled_write_command(uint8_t command){
	*oled_command_addr = command;
     80e:	e0 91 0c 01 	lds	r30, 0x010C
     812:	f0 91 0d 01 	lds	r31, 0x010D
     816:	90 83       	st	Z, r25
	
}

void oled_goto_page(unsigned int page) {
	oled_write_command(0xB0 + page);
	global_page = page;
     818:	80 93 57 02 	sts	0x0257, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     81c:	80 e1       	ldi	r24, 0x10	; 16
     81e:	8a 95       	dec	r24
     820:	f1 f7       	brne	.-4      	; 0x81e <oled_goto_page+0x14>
     822:	00 c0       	rjmp	.+0      	; 0x824 <oled_goto_page+0x1a>
     824:	08 95       	ret

00000826 <oled_clear_line>:
	_delay_us(50);
}

void oled_clear_line(){
     826:	80 e8       	ldi	r24, 0x80	; 128
     828:	90 e0       	ldi	r25, 0x00	; 0
void oled_write_command(uint8_t command){
	*oled_command_addr = command;
}

void oled_write_data(uint8_t data){
	*oled_data_addr = data;
     82a:	e0 91 0a 01 	lds	r30, 0x010A
     82e:	f0 91 0b 01 	lds	r31, 0x010B
     832:	10 82       	st	Z, r1
     834:	01 97       	sbiw	r24, 0x01	; 1
	global_page = page;
	_delay_us(50);
}

void oled_clear_line(){
	for (int i = 0; i<128; i++) {
     836:	00 97       	sbiw	r24, 0x00	; 0
     838:	c1 f7       	brne	.-16     	; 0x82a <oled_clear_line+0x4>
		oled_write_data(0b00000000);
	}
}
     83a:	08 95       	ret

0000083c <oled_clear_screen>:

void oled_clear_screen() {
     83c:	cf 93       	push	r28
     83e:	df 93       	push	r29
     840:	c0 e0       	ldi	r28, 0x00	; 0
     842:	d0 e0       	ldi	r29, 0x00	; 0
	for (uint8_t i = 0; i<8; i++) {
		oled_goto_page(i);
     844:	ce 01       	movw	r24, r28
     846:	0e 94 05 04 	call	0x80a	; 0x80a <oled_goto_page>
		oled_clear_line();
     84a:	0e 94 13 04 	call	0x826	; 0x826 <oled_clear_line>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     84e:	83 ed       	ldi	r24, 0xD3	; 211
     850:	90 e3       	ldi	r25, 0x30	; 48
     852:	01 97       	sbiw	r24, 0x01	; 1
     854:	f1 f7       	brne	.-4      	; 0x852 <oled_clear_screen+0x16>
     856:	00 c0       	rjmp	.+0      	; 0x858 <oled_clear_screen+0x1c>
     858:	00 00       	nop
     85a:	21 96       	adiw	r28, 0x01	; 1
		oled_write_data(0b00000000);
	}
}

void oled_clear_screen() {
	for (uint8_t i = 0; i<8; i++) {
     85c:	c8 30       	cpi	r28, 0x08	; 8
     85e:	d1 05       	cpc	r29, r1
     860:	89 f7       	brne	.-30     	; 0x844 <oled_clear_screen+0x8>
		oled_goto_page(i);
		oled_clear_line();
		_delay_ms(50);
	}
}
     862:	df 91       	pop	r29
     864:	cf 91       	pop	r28
     866:	08 95       	ret

00000868 <oled_pos>:

void oled_pos(unsigned int row, unsigned int column){
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
     86c:	eb 01       	movw	r28, r22
	oled_goto_page(row);
     86e:	0e 94 05 04 	call	0x80a	; 0x80a <oled_goto_page>
	if(column < (128/FONTWIDTH)){
     872:	c0 31       	cpi	r28, 0x10	; 16
     874:	d1 05       	cpc	r29, r1
     876:	e8 f4       	brcc	.+58     	; 0x8b2 <oled_pos+0x4a>
		//Save column program goes to
		global_col = column * FONTWIDTH;
     878:	8c 2f       	mov	r24, r28
     87a:	88 0f       	add	r24, r24
     87c:	88 0f       	add	r24, r24
     87e:	88 0f       	add	r24, r24
     880:	80 93 58 02 	sts	0x0258, r24
		//Set lower column address
		*oled_command_addr = 0x00 + (column * (FONTWIDTH)>>4);
     884:	e0 91 0c 01 	lds	r30, 0x010C
     888:	f0 91 0d 01 	lds	r31, 0x010D
     88c:	cc 0f       	add	r28, r28
     88e:	dd 1f       	adc	r29, r29
     890:	cc 0f       	add	r28, r28
     892:	dd 1f       	adc	r29, r29
     894:	cc 0f       	add	r28, r28
     896:	dd 1f       	adc	r29, r29
     898:	d2 95       	swap	r29
     89a:	c2 95       	swap	r28
     89c:	cf 70       	andi	r28, 0x0F	; 15
     89e:	cd 27       	eor	r28, r29
     8a0:	df 70       	andi	r29, 0x0F	; 15
     8a2:	cd 27       	eor	r28, r29
     8a4:	c0 83       	st	Z, r28
		//Set higher column address                                                                                                                                                                                                                                                                                                                                                                     
		*oled_command_addr = 0x10 + (column * (FONTWIDTH)>>4);
     8a6:	e0 91 0c 01 	lds	r30, 0x010C
     8aa:	f0 91 0d 01 	lds	r31, 0x010D
     8ae:	c0 5f       	subi	r28, 0xF0	; 240
     8b0:	c0 83       	st	Z, r28
	}
}
     8b2:	df 91       	pop	r29
     8b4:	cf 91       	pop	r28
     8b6:	08 95       	ret

000008b8 <oled_printf>:
	for (uint8_t i = 0; i<FONTWIDTH; i++) {
		oled_write_data(pgm_read_byte(&font[ch - FONTOFFSET][i]));
	}
}

void oled_printf(char* fmt, ...){
     8b8:	cf 93       	push	r28
     8ba:	df 93       	push	r29
     8bc:	cd b7       	in	r28, 0x3d	; 61
     8be:	de b7       	in	r29, 0x3e	; 62
     8c0:	fe 01       	movw	r30, r28
     8c2:	35 96       	adiw	r30, 0x05	; 5
     8c4:	61 91       	ld	r22, Z+
     8c6:	71 91       	ld	r23, Z+
	va_list v;
	va_start(v, fmt);
	vfprintf(&oled_stdout, fmt, v);
     8c8:	af 01       	movw	r20, r30
     8ca:	8e e0       	ldi	r24, 0x0E	; 14
     8cc:	91 e0       	ldi	r25, 0x01	; 1
     8ce:	0e 94 12 08 	call	0x1024	; 0x1024 <vfprintf>
	va_end(v);
}
     8d2:	df 91       	pop	r29
     8d4:	cf 91       	pop	r28
     8d6:	08 95       	ret

000008d8 <oled_init>:
	_delay_ms(3000);
	oled_clear_screen();
}

void oled_write_command(uint8_t command){
	*oled_command_addr = command;
     8d8:	e0 91 0c 01 	lds	r30, 0x010C
     8dc:	f0 91 0d 01 	lds	r31, 0x010D
     8e0:	8e ea       	ldi	r24, 0xAE	; 174
     8e2:	80 83       	st	Z, r24
     8e4:	e0 91 0c 01 	lds	r30, 0x010C
     8e8:	f0 91 0d 01 	lds	r31, 0x010D
     8ec:	81 ea       	ldi	r24, 0xA1	; 161
     8ee:	80 83       	st	Z, r24
     8f0:	e0 91 0c 01 	lds	r30, 0x010C
     8f4:	f0 91 0d 01 	lds	r31, 0x010D
     8f8:	8a ed       	ldi	r24, 0xDA	; 218
     8fa:	80 83       	st	Z, r24
     8fc:	e0 91 0c 01 	lds	r30, 0x010C
     900:	f0 91 0d 01 	lds	r31, 0x010D
     904:	82 e1       	ldi	r24, 0x12	; 18
     906:	80 83       	st	Z, r24
     908:	e0 91 0c 01 	lds	r30, 0x010C
     90c:	f0 91 0d 01 	lds	r31, 0x010D
     910:	88 ec       	ldi	r24, 0xC8	; 200
     912:	80 83       	st	Z, r24
     914:	e0 91 0c 01 	lds	r30, 0x010C
     918:	f0 91 0d 01 	lds	r31, 0x010D
     91c:	88 ea       	ldi	r24, 0xA8	; 168
     91e:	80 83       	st	Z, r24
     920:	e0 91 0c 01 	lds	r30, 0x010C
     924:	f0 91 0d 01 	lds	r31, 0x010D
     928:	8f e3       	ldi	r24, 0x3F	; 63
     92a:	80 83       	st	Z, r24
     92c:	e0 91 0c 01 	lds	r30, 0x010C
     930:	f0 91 0d 01 	lds	r31, 0x010D
     934:	85 ed       	ldi	r24, 0xD5	; 213
     936:	80 83       	st	Z, r24
     938:	e0 91 0c 01 	lds	r30, 0x010C
     93c:	f0 91 0d 01 	lds	r31, 0x010D
     940:	80 e8       	ldi	r24, 0x80	; 128
     942:	80 83       	st	Z, r24
     944:	e0 91 0c 01 	lds	r30, 0x010C
     948:	f0 91 0d 01 	lds	r31, 0x010D
     94c:	81 e8       	ldi	r24, 0x81	; 129
     94e:	80 83       	st	Z, r24
     950:	e0 91 0c 01 	lds	r30, 0x010C
     954:	f0 91 0d 01 	lds	r31, 0x010D
     958:	80 e5       	ldi	r24, 0x50	; 80
     95a:	80 83       	st	Z, r24
     95c:	e0 91 0c 01 	lds	r30, 0x010C
     960:	f0 91 0d 01 	lds	r31, 0x010D
     964:	89 ed       	ldi	r24, 0xD9	; 217
     966:	80 83       	st	Z, r24
     968:	e0 91 0c 01 	lds	r30, 0x010C
     96c:	f0 91 0d 01 	lds	r31, 0x010D
     970:	81 e2       	ldi	r24, 0x21	; 33
     972:	80 83       	st	Z, r24
     974:	e0 91 0c 01 	lds	r30, 0x010C
     978:	f0 91 0d 01 	lds	r31, 0x010D
     97c:	80 e2       	ldi	r24, 0x20	; 32
     97e:	80 83       	st	Z, r24
     980:	e0 91 0c 01 	lds	r30, 0x010C
     984:	f0 91 0d 01 	lds	r31, 0x010D
     988:	82 e0       	ldi	r24, 0x02	; 2
     98a:	80 83       	st	Z, r24
     98c:	e0 91 0c 01 	lds	r30, 0x010C
     990:	f0 91 0d 01 	lds	r31, 0x010D
     994:	8b ed       	ldi	r24, 0xDB	; 219
     996:	80 83       	st	Z, r24
     998:	e0 91 0c 01 	lds	r30, 0x010C
     99c:	f0 91 0d 01 	lds	r31, 0x010D
     9a0:	80 e3       	ldi	r24, 0x30	; 48
     9a2:	80 83       	st	Z, r24
     9a4:	e0 91 0c 01 	lds	r30, 0x010C
     9a8:	f0 91 0d 01 	lds	r31, 0x010D
     9ac:	8d ea       	ldi	r24, 0xAD	; 173
     9ae:	80 83       	st	Z, r24
     9b0:	e0 91 0c 01 	lds	r30, 0x010C
     9b4:	f0 91 0d 01 	lds	r31, 0x010D
     9b8:	10 82       	st	Z, r1
     9ba:	e0 91 0c 01 	lds	r30, 0x010C
     9be:	f0 91 0d 01 	lds	r31, 0x010D
     9c2:	84 ea       	ldi	r24, 0xA4	; 164
     9c4:	80 83       	st	Z, r24
     9c6:	e0 91 0c 01 	lds	r30, 0x010C
     9ca:	f0 91 0d 01 	lds	r31, 0x010D
     9ce:	86 ea       	ldi	r24, 0xA6	; 166
     9d0:	80 83       	st	Z, r24
     9d2:	e0 91 0c 01 	lds	r30, 0x010C
     9d6:	f0 91 0d 01 	lds	r31, 0x010D
     9da:	8f ea       	ldi	r24, 0xAF	; 175
     9dc:	80 83       	st	Z, r24
	oled_write_command(0x00);
	oled_write_command(0xa4);    //out follows RAM content
	oled_write_command(0xa6);    //set normal display
	oled_write_command(0xaf);    // display on
	
	oled_clear_screen();
     9de:	0e 94 1e 04 	call	0x83c	; 0x83c <oled_clear_screen>
	oled_goto_page(2);
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	0e 94 05 04 	call	0x80a	; 0x80a <oled_goto_page>
	oled_printf(" #SWAG");
     9ea:	8a e5       	ldi	r24, 0x5A	; 90
     9ec:	91 e0       	ldi	r25, 0x01	; 1
     9ee:	9f 93       	push	r25
     9f0:	8f 93       	push	r24
     9f2:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <oled_printf>
	oled_goto_page(3);
     9f6:	83 e0       	ldi	r24, 0x03	; 3
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	0e 94 05 04 	call	0x80a	; 0x80a <oled_goto_page>
	oled_printf("  4");
     9fe:	81 e6       	ldi	r24, 0x61	; 97
     a00:	91 e0       	ldi	r25, 0x01	; 1
     a02:	9f 93       	push	r25
     a04:	8f 93       	push	r24
     a06:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <oled_printf>
	oled_goto_page(4);
     a0a:	84 e0       	ldi	r24, 0x04	; 4
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	0e 94 05 04 	call	0x80a	; 0x80a <oled_goto_page>
	oled_printf(" LYFE");
     a12:	85 e6       	ldi	r24, 0x65	; 101
     a14:	91 e0       	ldi	r25, 0x01	; 1
     a16:	9f 93       	push	r25
     a18:	8f 93       	push	r24
     a1a:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <oled_printf>
     a1e:	2f eb       	ldi	r18, 0xBF	; 191
     a20:	87 e2       	ldi	r24, 0x27	; 39
     a22:	99 e0       	ldi	r25, 0x09	; 9
     a24:	21 50       	subi	r18, 0x01	; 1
     a26:	80 40       	sbci	r24, 0x00	; 0
     a28:	90 40       	sbci	r25, 0x00	; 0
     a2a:	e1 f7       	brne	.-8      	; 0xa24 <oled_init+0x14c>
     a2c:	00 c0       	rjmp	.+0      	; 0xa2e <oled_init+0x156>
     a2e:	00 00       	nop
	_delay_ms(3000);
	oled_clear_screen();
     a30:	0e 94 1e 04 	call	0x83c	; 0x83c <oled_clear_screen>
     a34:	0f 90       	pop	r0
     a36:	0f 90       	pop	r0
     a38:	0f 90       	pop	r0
     a3a:	0f 90       	pop	r0
     a3c:	0f 90       	pop	r0
     a3e:	0f 90       	pop	r0
     a40:	08 95       	ret

00000a42 <oled_get_arrow_page>:

//Arrow functions

uint8_t oled_get_arrow_page(){
	return arrow_global;
}
     a42:	80 91 52 02 	lds	r24, 0x0252
     a46:	08 95       	ret

00000a48 <oled_print_arrow>:

void oled_print_arrow(uint8_t row, uint8_t col){
	arrow_global = row;
     a48:	80 93 52 02 	sts	0x0252, r24
	oled_pos(row, col);
     a4c:	70 e0       	ldi	r23, 0x00	; 0
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	0e 94 34 04 	call	0x868	; 0x868 <oled_pos>
void oled_write_command(uint8_t command){
	*oled_command_addr = command;
}

void oled_write_data(uint8_t data){
	*oled_data_addr = data;
     a54:	e0 91 0a 01 	lds	r30, 0x010A
     a58:	f0 91 0b 01 	lds	r31, 0x010B
     a5c:	88 e1       	ldi	r24, 0x18	; 24
     a5e:	80 83       	st	Z, r24
     a60:	e0 91 0a 01 	lds	r30, 0x010A
     a64:	f0 91 0b 01 	lds	r31, 0x010B
     a68:	80 83       	st	Z, r24
     a6a:	e0 91 0a 01 	lds	r30, 0x010A
     a6e:	f0 91 0b 01 	lds	r31, 0x010B
     a72:	9e e7       	ldi	r25, 0x7E	; 126
     a74:	90 83       	st	Z, r25
     a76:	e0 91 0a 01 	lds	r30, 0x010A
     a7a:	f0 91 0b 01 	lds	r31, 0x010B
     a7e:	9c e3       	ldi	r25, 0x3C	; 60
     a80:	90 83       	st	Z, r25
     a82:	e0 91 0a 01 	lds	r30, 0x010A
     a86:	f0 91 0b 01 	lds	r31, 0x010B
     a8a:	80 83       	st	Z, r24
     a8c:	08 95       	ret

00000a8e <oled_clear_arrow>:
	oled_write_data(0b00111100);
	oled_write_data(0b00011000);
}

void oled_clear_arrow(uint8_t row, uint8_t col){
	oled_pos(row, col);
     a8e:	70 e0       	ldi	r23, 0x00	; 0
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	0e 94 34 04 	call	0x868	; 0x868 <oled_pos>
void oled_write_command(uint8_t command){
	*oled_command_addr = command;
}

void oled_write_data(uint8_t data){
	*oled_data_addr = data;
     a96:	e0 91 0a 01 	lds	r30, 0x010A
     a9a:	f0 91 0b 01 	lds	r31, 0x010B
     a9e:	10 82       	st	Z, r1
     aa0:	e0 91 0a 01 	lds	r30, 0x010A
     aa4:	f0 91 0b 01 	lds	r31, 0x010B
     aa8:	10 82       	st	Z, r1
     aaa:	e0 91 0a 01 	lds	r30, 0x010A
     aae:	f0 91 0b 01 	lds	r31, 0x010B
     ab2:	10 82       	st	Z, r1
     ab4:	e0 91 0a 01 	lds	r30, 0x010A
     ab8:	f0 91 0b 01 	lds	r31, 0x010B
     abc:	10 82       	st	Z, r1
     abe:	e0 91 0a 01 	lds	r30, 0x010A
     ac2:	f0 91 0b 01 	lds	r31, 0x010B
     ac6:	10 82       	st	Z, r1
     ac8:	08 95       	ret

00000aca <oled_move_arrow>:
	oled_write_data(0b00000000);
	oled_write_data(0b00000000);
}

void oled_move_arrow(signed int joystick_Y, unsigned int menu_min, unsigned int menu_max){
	if(joystick_Y < 0 && arrow_global < menu_max) {
     aca:	99 23       	and	r25, r25
     acc:	a4 f4       	brge	.+40     	; 0xaf6 <oled_move_arrow+0x2c>
     ace:	e0 91 52 02 	lds	r30, 0x0252
     ad2:	2e 2f       	mov	r18, r30
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	24 17       	cp	r18, r20
     ad8:	35 07       	cpc	r19, r21
     ada:	68 f4       	brcc	.+26     	; 0xaf6 <oled_move_arrow+0x2c>
		oled_clear_arrow(arrow_global, 0);
     adc:	60 e0       	ldi	r22, 0x00	; 0
     ade:	8e 2f       	mov	r24, r30
     ae0:	0e 94 47 05 	call	0xa8e	; 0xa8e <oled_clear_arrow>
		arrow_global++;
     ae4:	80 91 52 02 	lds	r24, 0x0252
     ae8:	8f 5f       	subi	r24, 0xFF	; 255
     aea:	80 93 52 02 	sts	0x0252, r24
		oled_print_arrow(arrow_global, 0);
     aee:	60 e0       	ldi	r22, 0x00	; 0
     af0:	0e 94 24 05 	call	0xa48	; 0xa48 <oled_print_arrow>
     af4:	08 95       	ret
	} else if (joystick_Y > 0 && arrow_global > menu_min) {
     af6:	18 16       	cp	r1, r24
     af8:	19 06       	cpc	r1, r25
     afa:	94 f4       	brge	.+36     	; 0xb20 <oled_move_arrow+0x56>
     afc:	80 91 52 02 	lds	r24, 0x0252
     b00:	28 2f       	mov	r18, r24
     b02:	30 e0       	ldi	r19, 0x00	; 0
     b04:	62 17       	cp	r22, r18
     b06:	73 07       	cpc	r23, r19
     b08:	58 f4       	brcc	.+22     	; 0xb20 <oled_move_arrow+0x56>
		oled_clear_arrow(arrow_global, 0);
     b0a:	60 e0       	ldi	r22, 0x00	; 0
     b0c:	0e 94 47 05 	call	0xa8e	; 0xa8e <oled_clear_arrow>
		arrow_global--;
     b10:	80 91 52 02 	lds	r24, 0x0252
     b14:	81 50       	subi	r24, 0x01	; 1
     b16:	80 93 52 02 	sts	0x0252, r24
		oled_print_arrow(arrow_global, 0);
     b1a:	60 e0       	ldi	r22, 0x00	; 0
     b1c:	0e 94 24 05 	call	0xa48	; 0xa48 <oled_print_arrow>
     b20:	08 95       	ret

00000b22 <oled_arrow_handler>:
	}
}

void oled_arrow_handler(signed int joystick_Y, unsigned int menu_min, unsigned int menu_max){
	oled_move_arrow(joystick_Y, menu_min, menu_max);
     b22:	0e 94 65 05 	call	0xaca	; 0xaca <oled_move_arrow>
     b26:	2f e9       	ldi	r18, 0x9F	; 159
     b28:	86 e8       	ldi	r24, 0x86	; 134
     b2a:	91 e0       	ldi	r25, 0x01	; 1
     b2c:	21 50       	subi	r18, 0x01	; 1
     b2e:	80 40       	sbci	r24, 0x00	; 0
     b30:	90 40       	sbci	r25, 0x00	; 0
     b32:	e1 f7       	brne	.-8      	; 0xb2c <oled_arrow_handler+0xa>
     b34:	00 c0       	rjmp	.+0      	; 0xb36 <oled_arrow_handler+0x14>
     b36:	00 00       	nop
     b38:	08 95       	ret

00000b3a <SRAM_test>:
	if (address_offset > 0x100) { return 0; }
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	return ext_ram[address_offset];
}

void SRAM_test(void) {
     b3a:	cf 92       	push	r12
     b3c:	df 92       	push	r13
     b3e:	ef 92       	push	r14
     b40:	ff 92       	push	r15
     b42:	0f 93       	push	r16
     b44:	1f 93       	push	r17
     b46:	cf 93       	push	r28
     b48:	df 93       	push	r29
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size       = 0x800;
	uint16_t write_errors       = 0;
	uint16_t retrieval_errors   = 0;

	printf("\nStarting SRAM test...\n");
     b4a:	8b e6       	ldi	r24, 0x6B	; 107
     b4c:	91 e0       	ldi	r25, 0x01	; 1
     b4e:	0e 94 e5 07 	call	0xfca	; 0xfca <puts>

	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
     b52:	0e 94 c1 07 	call	0xf82	; 0xf82 <rand>
     b56:	6c 01       	movw	r12, r24

	// Write phase: Immediately check that the correct value was stored
	srand(seed);
     b58:	0e 94 c6 07 	call	0xf8c	; 0xf8c <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     b5c:	c0 e0       	ldi	r28, 0x00	; 0
     b5e:	d0 e0       	ldi	r29, 0x00	; 0
}

void SRAM_test(void) {
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size       = 0x800;
	uint16_t write_errors       = 0;
     b60:	00 e0       	ldi	r16, 0x00	; 0
     b62:	10 e0       	ldi	r17, 0x00	; 0
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		ext_ram[i] = some_value;
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
     b64:	0f 2e       	mov	r0, r31
     b66:	f2 e8       	ldi	r31, 0x82	; 130
     b68:	ef 2e       	mov	r14, r31
     b6a:	f1 e0       	ldi	r31, 0x01	; 1
     b6c:	ff 2e       	mov	r15, r31
     b6e:	f0 2d       	mov	r31, r0
	uint16_t seed = rand();

	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     b70:	0e 94 c1 07 	call	0xf82	; 0xf82 <rand>
     b74:	fe 01       	movw	r30, r28
     b76:	f8 5e       	subi	r31, 0xE8	; 232
		ext_ram[i] = some_value;
     b78:	80 83       	st	Z, r24
		uint8_t retreived_value = ext_ram[i];
     b7a:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     b7c:	28 17       	cp	r18, r24
     b7e:	a9 f0       	breq	.+42     	; 0xbaa <SRAM_test+0x70>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
     b80:	99 27       	eor	r25, r25
     b82:	9f 93       	push	r25
     b84:	8f 93       	push	r24
     b86:	1f 92       	push	r1
     b88:	2f 93       	push	r18
     b8a:	df 93       	push	r29
     b8c:	cf 93       	push	r28
     b8e:	ff 92       	push	r15
     b90:	ef 92       	push	r14
     b92:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <printf>
			write_errors++;
     b96:	0f 5f       	subi	r16, 0xFF	; 255
     b98:	1f 4f       	sbci	r17, 0xFF	; 255
     b9a:	8d b7       	in	r24, 0x3d	; 61
     b9c:	9e b7       	in	r25, 0x3e	; 62
     b9e:	08 96       	adiw	r24, 0x08	; 8
     ba0:	0f b6       	in	r0, 0x3f	; 63
     ba2:	f8 94       	cli
     ba4:	9e bf       	out	0x3e, r25	; 62
     ba6:	0f be       	out	0x3f, r0	; 63
     ba8:	8d bf       	out	0x3d, r24	; 61
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();

	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     baa:	21 96       	adiw	r28, 0x01	; 1
     bac:	c1 15       	cp	r28, r1
     bae:	98 e0       	ldi	r25, 0x08	; 8
     bb0:	d9 07       	cpc	r29, r25
     bb2:	f1 f6       	brne	.-68     	; 0xb70 <SRAM_test+0x36>
			write_errors++;
		}
	}

	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);    // reset the PRNG to the state it had before the write phase
     bb4:	c6 01       	movw	r24, r12
     bb6:	0e 94 c6 07 	call	0xf8c	; 0xf8c <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     bba:	c0 e0       	ldi	r28, 0x00	; 0
     bbc:	d0 e0       	ldi	r29, 0x00	; 0

void SRAM_test(void) {
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size       = 0x800;
	uint16_t write_errors       = 0;
	uint16_t retrieval_errors   = 0;
     bbe:	e1 2c       	mov	r14, r1
     bc0:	f1 2c       	mov	r15, r1
	srand(seed);    // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
     bc2:	0f 2e       	mov	r0, r31
     bc4:	fb eb       	ldi	r31, 0xBB	; 187
     bc6:	cf 2e       	mov	r12, r31
     bc8:	f1 e0       	ldi	r31, 0x01	; 1
     bca:	df 2e       	mov	r13, r31
     bcc:	f0 2d       	mov	r31, r0
	}

	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);    // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     bce:	0e 94 c1 07 	call	0xf82	; 0xf82 <rand>
     bd2:	fe 01       	movw	r30, r28
     bd4:	f8 5e       	subi	r31, 0xE8	; 232
		uint8_t retreived_value = ext_ram[i];
     bd6:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     bd8:	28 17       	cp	r18, r24
     bda:	b1 f0       	breq	.+44     	; 0xc08 <SRAM_test+0xce>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
     bdc:	99 27       	eor	r25, r25
     bde:	9f 93       	push	r25
     be0:	8f 93       	push	r24
     be2:	1f 92       	push	r1
     be4:	2f 93       	push	r18
     be6:	df 93       	push	r29
     be8:	cf 93       	push	r28
     bea:	df 92       	push	r13
     bec:	cf 92       	push	r12
     bee:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <printf>
			retrieval_errors++;
     bf2:	8f ef       	ldi	r24, 0xFF	; 255
     bf4:	e8 1a       	sub	r14, r24
     bf6:	f8 0a       	sbc	r15, r24
     bf8:	8d b7       	in	r24, 0x3d	; 61
     bfa:	9e b7       	in	r25, 0x3e	; 62
     bfc:	08 96       	adiw	r24, 0x08	; 8
     bfe:	0f b6       	in	r0, 0x3f	; 63
     c00:	f8 94       	cli
     c02:	9e bf       	out	0x3e, r25	; 62
     c04:	0f be       	out	0x3f, r0	; 63
     c06:	8d bf       	out	0x3d, r24	; 61
		}
	}

	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);    // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     c08:	21 96       	adiw	r28, 0x01	; 1
     c0a:	c1 15       	cp	r28, r1
     c0c:	98 e0       	ldi	r25, 0x08	; 8
     c0e:	d9 07       	cpc	r29, r25
     c10:	f1 f6       	brne	.-68     	; 0xbce <SRAM_test+0x94>
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	printf("SRAM test completed with \n%4d errors in write phase and \n%4d errors in retrieval phase\n\n", write_errors, retrieval_errors);
     c12:	ff 92       	push	r15
     c14:	ef 92       	push	r14
     c16:	1f 93       	push	r17
     c18:	0f 93       	push	r16
     c1a:	88 ef       	ldi	r24, 0xF8	; 248
     c1c:	91 e0       	ldi	r25, 0x01	; 1
     c1e:	9f 93       	push	r25
     c20:	8f 93       	push	r24
     c22:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <printf>
     c26:	0f 90       	pop	r0
     c28:	0f 90       	pop	r0
     c2a:	0f 90       	pop	r0
     c2c:	0f 90       	pop	r0
     c2e:	0f 90       	pop	r0
     c30:	0f 90       	pop	r0
     c32:	df 91       	pop	r29
     c34:	cf 91       	pop	r28
     c36:	1f 91       	pop	r17
     c38:	0f 91       	pop	r16
     c3a:	ff 90       	pop	r15
     c3c:	ef 90       	pop	r14
     c3e:	df 90       	pop	r13
     c40:	cf 90       	pop	r12
     c42:	08 95       	ret

00000c44 <SRAM_init>:
#include <stdio.h>
#include "SRAM_driver.h"

//Simple setup for SRAM, also tests for correctness
void SRAM_init(){
	MCUCR = 0x80;
     c44:	80 e8       	ldi	r24, 0x80	; 128
     c46:	85 bf       	out	0x35, r24	; 53
	DDRA = 0xFF;
     c48:	8f ef       	ldi	r24, 0xFF	; 255
     c4a:	8a bb       	out	0x1a, r24	; 26
	SRAM_test();
     c4c:	0e 94 9d 05 	call	0xb3a	; 0xb3a <SRAM_test>
     c50:	08 95       	ret

00000c52 <flash_diode>:
#include "oled_driver.h"
#include "menu.h"

//Simple test, Ex 1, task 6
void flash_diode(){
	PORTB = 0xFF;
     c52:	8f ef       	ldi	r24, 0xFF	; 255
     c54:	88 bb       	out	0x18, r24	; 24
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	90 ef       	ldi	r25, 0xF0	; 240
     c5a:	01 97       	sbiw	r24, 0x01	; 1
     c5c:	f1 f7       	brne	.-4      	; 0xc5a <flash_diode+0x8>
	_delay_ms(50);
	PORTB = 0x00;
     c5e:	18 ba       	out	0x18, r1	; 24
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	90 ef       	ldi	r25, 0xF0	; 240
     c64:	01 97       	sbiw	r24, 0x01	; 1
     c66:	f1 f7       	brne	.-4      	; 0xc64 <flash_diode+0x12>
     c68:	08 95       	ret

00000c6a <uart_sendChar>:
     c6a:	5d 9b       	sbis	0x0b, 5	; 11
     c6c:	fe cf       	rjmp	.-4      	; 0xc6a <uart_sendChar>
     c6e:	8c b9       	out	0x0c, r24	; 12
     c70:	08 95       	ret

00000c72 <uart_getChar>:
     c72:	5f 9b       	sbis	0x0b, 7	; 11
     c74:	fe cf       	rjmp	.-4      	; 0xc72 <uart_getChar>
     c76:	8c b1       	in	r24, 0x0c	; 12
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	08 95       	ret

00000c7c <uart_init>:
     c7c:	89 b9       	out	0x09, r24	; 9
     c7e:	88 e1       	ldi	r24, 0x18	; 24
     c80:	8a b9       	out	0x0a, r24	; 10
     c82:	8c e1       	ldi	r24, 0x1C	; 28
     c84:	91 e0       	ldi	r25, 0x01	; 1
     c86:	90 93 60 02 	sts	0x0260, r25
     c8a:	80 93 5f 02 	sts	0x025F, r24
     c8e:	90 93 5e 02 	sts	0x025E, r25
     c92:	80 93 5d 02 	sts	0x025D, r24
     c96:	08 95       	ret

00000c98 <malloc>:
     c98:	cf 93       	push	r28
     c9a:	df 93       	push	r29
     c9c:	82 30       	cpi	r24, 0x02	; 2
     c9e:	91 05       	cpc	r25, r1
     ca0:	10 f4       	brcc	.+4      	; 0xca6 <malloc+0xe>
     ca2:	82 e0       	ldi	r24, 0x02	; 2
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	e0 91 5b 02 	lds	r30, 0x025B
     caa:	f0 91 5c 02 	lds	r31, 0x025C
     cae:	20 e0       	ldi	r18, 0x00	; 0
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	a0 e0       	ldi	r26, 0x00	; 0
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	30 97       	sbiw	r30, 0x00	; 0
     cb8:	39 f1       	breq	.+78     	; 0xd08 <malloc+0x70>
     cba:	40 81       	ld	r20, Z
     cbc:	51 81       	ldd	r21, Z+1	; 0x01
     cbe:	48 17       	cp	r20, r24
     cc0:	59 07       	cpc	r21, r25
     cc2:	b8 f0       	brcs	.+46     	; 0xcf2 <malloc+0x5a>
     cc4:	48 17       	cp	r20, r24
     cc6:	59 07       	cpc	r21, r25
     cc8:	71 f4       	brne	.+28     	; 0xce6 <malloc+0x4e>
     cca:	82 81       	ldd	r24, Z+2	; 0x02
     ccc:	93 81       	ldd	r25, Z+3	; 0x03
     cce:	10 97       	sbiw	r26, 0x00	; 0
     cd0:	29 f0       	breq	.+10     	; 0xcdc <malloc+0x44>
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	2c c0       	rjmp	.+88     	; 0xd34 <malloc+0x9c>
     cdc:	90 93 5c 02 	sts	0x025C, r25
     ce0:	80 93 5b 02 	sts	0x025B, r24
     ce4:	27 c0       	rjmp	.+78     	; 0xd34 <malloc+0x9c>
     ce6:	21 15       	cp	r18, r1
     ce8:	31 05       	cpc	r19, r1
     cea:	31 f0       	breq	.+12     	; 0xcf8 <malloc+0x60>
     cec:	42 17       	cp	r20, r18
     cee:	53 07       	cpc	r21, r19
     cf0:	18 f0       	brcs	.+6      	; 0xcf8 <malloc+0x60>
     cf2:	a9 01       	movw	r20, r18
     cf4:	db 01       	movw	r26, r22
     cf6:	01 c0       	rjmp	.+2      	; 0xcfa <malloc+0x62>
     cf8:	ef 01       	movw	r28, r30
     cfa:	9a 01       	movw	r18, r20
     cfc:	bd 01       	movw	r22, r26
     cfe:	df 01       	movw	r26, r30
     d00:	02 80       	ldd	r0, Z+2	; 0x02
     d02:	f3 81       	ldd	r31, Z+3	; 0x03
     d04:	e0 2d       	mov	r30, r0
     d06:	d7 cf       	rjmp	.-82     	; 0xcb6 <malloc+0x1e>
     d08:	21 15       	cp	r18, r1
     d0a:	31 05       	cpc	r19, r1
     d0c:	f9 f0       	breq	.+62     	; 0xd4c <malloc+0xb4>
     d0e:	28 1b       	sub	r18, r24
     d10:	39 0b       	sbc	r19, r25
     d12:	24 30       	cpi	r18, 0x04	; 4
     d14:	31 05       	cpc	r19, r1
     d16:	80 f4       	brcc	.+32     	; 0xd38 <malloc+0xa0>
     d18:	8a 81       	ldd	r24, Y+2	; 0x02
     d1a:	9b 81       	ldd	r25, Y+3	; 0x03
     d1c:	61 15       	cp	r22, r1
     d1e:	71 05       	cpc	r23, r1
     d20:	21 f0       	breq	.+8      	; 0xd2a <malloc+0x92>
     d22:	fb 01       	movw	r30, r22
     d24:	93 83       	std	Z+3, r25	; 0x03
     d26:	82 83       	std	Z+2, r24	; 0x02
     d28:	04 c0       	rjmp	.+8      	; 0xd32 <malloc+0x9a>
     d2a:	90 93 5c 02 	sts	0x025C, r25
     d2e:	80 93 5b 02 	sts	0x025B, r24
     d32:	fe 01       	movw	r30, r28
     d34:	32 96       	adiw	r30, 0x02	; 2
     d36:	44 c0       	rjmp	.+136    	; 0xdc0 <malloc+0x128>
     d38:	fe 01       	movw	r30, r28
     d3a:	e2 0f       	add	r30, r18
     d3c:	f3 1f       	adc	r31, r19
     d3e:	81 93       	st	Z+, r24
     d40:	91 93       	st	Z+, r25
     d42:	22 50       	subi	r18, 0x02	; 2
     d44:	31 09       	sbc	r19, r1
     d46:	39 83       	std	Y+1, r19	; 0x01
     d48:	28 83       	st	Y, r18
     d4a:	3a c0       	rjmp	.+116    	; 0xdc0 <malloc+0x128>
     d4c:	20 91 59 02 	lds	r18, 0x0259
     d50:	30 91 5a 02 	lds	r19, 0x025A
     d54:	23 2b       	or	r18, r19
     d56:	41 f4       	brne	.+16     	; 0xd68 <malloc+0xd0>
     d58:	20 91 02 01 	lds	r18, 0x0102
     d5c:	30 91 03 01 	lds	r19, 0x0103
     d60:	30 93 5a 02 	sts	0x025A, r19
     d64:	20 93 59 02 	sts	0x0259, r18
     d68:	20 91 00 01 	lds	r18, 0x0100
     d6c:	30 91 01 01 	lds	r19, 0x0101
     d70:	21 15       	cp	r18, r1
     d72:	31 05       	cpc	r19, r1
     d74:	41 f4       	brne	.+16     	; 0xd86 <malloc+0xee>
     d76:	2d b7       	in	r18, 0x3d	; 61
     d78:	3e b7       	in	r19, 0x3e	; 62
     d7a:	40 91 04 01 	lds	r20, 0x0104
     d7e:	50 91 05 01 	lds	r21, 0x0105
     d82:	24 1b       	sub	r18, r20
     d84:	35 0b       	sbc	r19, r21
     d86:	e0 91 59 02 	lds	r30, 0x0259
     d8a:	f0 91 5a 02 	lds	r31, 0x025A
     d8e:	e2 17       	cp	r30, r18
     d90:	f3 07       	cpc	r31, r19
     d92:	a0 f4       	brcc	.+40     	; 0xdbc <malloc+0x124>
     d94:	2e 1b       	sub	r18, r30
     d96:	3f 0b       	sbc	r19, r31
     d98:	28 17       	cp	r18, r24
     d9a:	39 07       	cpc	r19, r25
     d9c:	78 f0       	brcs	.+30     	; 0xdbc <malloc+0x124>
     d9e:	ac 01       	movw	r20, r24
     da0:	4e 5f       	subi	r20, 0xFE	; 254
     da2:	5f 4f       	sbci	r21, 0xFF	; 255
     da4:	24 17       	cp	r18, r20
     da6:	35 07       	cpc	r19, r21
     da8:	48 f0       	brcs	.+18     	; 0xdbc <malloc+0x124>
     daa:	4e 0f       	add	r20, r30
     dac:	5f 1f       	adc	r21, r31
     dae:	50 93 5a 02 	sts	0x025A, r21
     db2:	40 93 59 02 	sts	0x0259, r20
     db6:	81 93       	st	Z+, r24
     db8:	91 93       	st	Z+, r25
     dba:	02 c0       	rjmp	.+4      	; 0xdc0 <malloc+0x128>
     dbc:	e0 e0       	ldi	r30, 0x00	; 0
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	cf 01       	movw	r24, r30
     dc2:	df 91       	pop	r29
     dc4:	cf 91       	pop	r28
     dc6:	08 95       	ret

00000dc8 <free>:
     dc8:	cf 93       	push	r28
     dca:	df 93       	push	r29
     dcc:	00 97       	sbiw	r24, 0x00	; 0
     dce:	09 f4       	brne	.+2      	; 0xdd2 <free+0xa>
     dd0:	87 c0       	rjmp	.+270    	; 0xee0 <free+0x118>
     dd2:	fc 01       	movw	r30, r24
     dd4:	32 97       	sbiw	r30, 0x02	; 2
     dd6:	13 82       	std	Z+3, r1	; 0x03
     dd8:	12 82       	std	Z+2, r1	; 0x02
     dda:	c0 91 5b 02 	lds	r28, 0x025B
     dde:	d0 91 5c 02 	lds	r29, 0x025C
     de2:	20 97       	sbiw	r28, 0x00	; 0
     de4:	81 f4       	brne	.+32     	; 0xe06 <free+0x3e>
     de6:	20 81       	ld	r18, Z
     de8:	31 81       	ldd	r19, Z+1	; 0x01
     dea:	28 0f       	add	r18, r24
     dec:	39 1f       	adc	r19, r25
     dee:	80 91 59 02 	lds	r24, 0x0259
     df2:	90 91 5a 02 	lds	r25, 0x025A
     df6:	82 17       	cp	r24, r18
     df8:	93 07       	cpc	r25, r19
     dfa:	79 f5       	brne	.+94     	; 0xe5a <free+0x92>
     dfc:	f0 93 5a 02 	sts	0x025A, r31
     e00:	e0 93 59 02 	sts	0x0259, r30
     e04:	6d c0       	rjmp	.+218    	; 0xee0 <free+0x118>
     e06:	de 01       	movw	r26, r28
     e08:	20 e0       	ldi	r18, 0x00	; 0
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	ae 17       	cp	r26, r30
     e0e:	bf 07       	cpc	r27, r31
     e10:	50 f4       	brcc	.+20     	; 0xe26 <free+0x5e>
     e12:	12 96       	adiw	r26, 0x02	; 2
     e14:	4d 91       	ld	r20, X+
     e16:	5c 91       	ld	r21, X
     e18:	13 97       	sbiw	r26, 0x03	; 3
     e1a:	9d 01       	movw	r18, r26
     e1c:	41 15       	cp	r20, r1
     e1e:	51 05       	cpc	r21, r1
     e20:	09 f1       	breq	.+66     	; 0xe64 <free+0x9c>
     e22:	da 01       	movw	r26, r20
     e24:	f3 cf       	rjmp	.-26     	; 0xe0c <free+0x44>
     e26:	b3 83       	std	Z+3, r27	; 0x03
     e28:	a2 83       	std	Z+2, r26	; 0x02
     e2a:	40 81       	ld	r20, Z
     e2c:	51 81       	ldd	r21, Z+1	; 0x01
     e2e:	84 0f       	add	r24, r20
     e30:	95 1f       	adc	r25, r21
     e32:	8a 17       	cp	r24, r26
     e34:	9b 07       	cpc	r25, r27
     e36:	71 f4       	brne	.+28     	; 0xe54 <free+0x8c>
     e38:	8d 91       	ld	r24, X+
     e3a:	9c 91       	ld	r25, X
     e3c:	11 97       	sbiw	r26, 0x01	; 1
     e3e:	84 0f       	add	r24, r20
     e40:	95 1f       	adc	r25, r21
     e42:	02 96       	adiw	r24, 0x02	; 2
     e44:	91 83       	std	Z+1, r25	; 0x01
     e46:	80 83       	st	Z, r24
     e48:	12 96       	adiw	r26, 0x02	; 2
     e4a:	8d 91       	ld	r24, X+
     e4c:	9c 91       	ld	r25, X
     e4e:	13 97       	sbiw	r26, 0x03	; 3
     e50:	93 83       	std	Z+3, r25	; 0x03
     e52:	82 83       	std	Z+2, r24	; 0x02
     e54:	21 15       	cp	r18, r1
     e56:	31 05       	cpc	r19, r1
     e58:	29 f4       	brne	.+10     	; 0xe64 <free+0x9c>
     e5a:	f0 93 5c 02 	sts	0x025C, r31
     e5e:	e0 93 5b 02 	sts	0x025B, r30
     e62:	3e c0       	rjmp	.+124    	; 0xee0 <free+0x118>
     e64:	d9 01       	movw	r26, r18
     e66:	13 96       	adiw	r26, 0x03	; 3
     e68:	fc 93       	st	X, r31
     e6a:	ee 93       	st	-X, r30
     e6c:	12 97       	sbiw	r26, 0x02	; 2
     e6e:	4d 91       	ld	r20, X+
     e70:	5d 91       	ld	r21, X+
     e72:	a4 0f       	add	r26, r20
     e74:	b5 1f       	adc	r27, r21
     e76:	ea 17       	cp	r30, r26
     e78:	fb 07       	cpc	r31, r27
     e7a:	79 f4       	brne	.+30     	; 0xe9a <free+0xd2>
     e7c:	80 81       	ld	r24, Z
     e7e:	91 81       	ldd	r25, Z+1	; 0x01
     e80:	84 0f       	add	r24, r20
     e82:	95 1f       	adc	r25, r21
     e84:	02 96       	adiw	r24, 0x02	; 2
     e86:	d9 01       	movw	r26, r18
     e88:	11 96       	adiw	r26, 0x01	; 1
     e8a:	9c 93       	st	X, r25
     e8c:	8e 93       	st	-X, r24
     e8e:	82 81       	ldd	r24, Z+2	; 0x02
     e90:	93 81       	ldd	r25, Z+3	; 0x03
     e92:	13 96       	adiw	r26, 0x03	; 3
     e94:	9c 93       	st	X, r25
     e96:	8e 93       	st	-X, r24
     e98:	12 97       	sbiw	r26, 0x02	; 2
     e9a:	e0 e0       	ldi	r30, 0x00	; 0
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	9b 81       	ldd	r25, Y+3	; 0x03
     ea2:	00 97       	sbiw	r24, 0x00	; 0
     ea4:	19 f0       	breq	.+6      	; 0xeac <free+0xe4>
     ea6:	fe 01       	movw	r30, r28
     ea8:	ec 01       	movw	r28, r24
     eaa:	f9 cf       	rjmp	.-14     	; 0xe9e <free+0xd6>
     eac:	ce 01       	movw	r24, r28
     eae:	02 96       	adiw	r24, 0x02	; 2
     eb0:	28 81       	ld	r18, Y
     eb2:	39 81       	ldd	r19, Y+1	; 0x01
     eb4:	82 0f       	add	r24, r18
     eb6:	93 1f       	adc	r25, r19
     eb8:	20 91 59 02 	lds	r18, 0x0259
     ebc:	30 91 5a 02 	lds	r19, 0x025A
     ec0:	28 17       	cp	r18, r24
     ec2:	39 07       	cpc	r19, r25
     ec4:	69 f4       	brne	.+26     	; 0xee0 <free+0x118>
     ec6:	30 97       	sbiw	r30, 0x00	; 0
     ec8:	29 f4       	brne	.+10     	; 0xed4 <free+0x10c>
     eca:	10 92 5c 02 	sts	0x025C, r1
     ece:	10 92 5b 02 	sts	0x025B, r1
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <free+0x110>
     ed4:	13 82       	std	Z+3, r1	; 0x03
     ed6:	12 82       	std	Z+2, r1	; 0x02
     ed8:	d0 93 5a 02 	sts	0x025A, r29
     edc:	c0 93 59 02 	sts	0x0259, r28
     ee0:	df 91       	pop	r29
     ee2:	cf 91       	pop	r28
     ee4:	08 95       	ret

00000ee6 <do_rand>:
     ee6:	8f 92       	push	r8
     ee8:	9f 92       	push	r9
     eea:	af 92       	push	r10
     eec:	bf 92       	push	r11
     eee:	cf 92       	push	r12
     ef0:	df 92       	push	r13
     ef2:	ef 92       	push	r14
     ef4:	ff 92       	push	r15
     ef6:	cf 93       	push	r28
     ef8:	df 93       	push	r29
     efa:	ec 01       	movw	r28, r24
     efc:	68 81       	ld	r22, Y
     efe:	79 81       	ldd	r23, Y+1	; 0x01
     f00:	8a 81       	ldd	r24, Y+2	; 0x02
     f02:	9b 81       	ldd	r25, Y+3	; 0x03
     f04:	61 15       	cp	r22, r1
     f06:	71 05       	cpc	r23, r1
     f08:	81 05       	cpc	r24, r1
     f0a:	91 05       	cpc	r25, r1
     f0c:	21 f4       	brne	.+8      	; 0xf16 <do_rand+0x30>
     f0e:	64 e2       	ldi	r22, 0x24	; 36
     f10:	79 ed       	ldi	r23, 0xD9	; 217
     f12:	8b e5       	ldi	r24, 0x5B	; 91
     f14:	97 e0       	ldi	r25, 0x07	; 7
     f16:	2d e1       	ldi	r18, 0x1D	; 29
     f18:	33 ef       	ldi	r19, 0xF3	; 243
     f1a:	41 e0       	ldi	r20, 0x01	; 1
     f1c:	50 e0       	ldi	r21, 0x00	; 0
     f1e:	0e 94 8a 0a 	call	0x1514	; 0x1514 <__divmodsi4>
     f22:	49 01       	movw	r8, r18
     f24:	5a 01       	movw	r10, r20
     f26:	9b 01       	movw	r18, r22
     f28:	ac 01       	movw	r20, r24
     f2a:	a7 ea       	ldi	r26, 0xA7	; 167
     f2c:	b1 e4       	ldi	r27, 0x41	; 65
     f2e:	0e 94 a9 0a 	call	0x1552	; 0x1552 <__muluhisi3>
     f32:	6b 01       	movw	r12, r22
     f34:	7c 01       	movw	r14, r24
     f36:	ac ee       	ldi	r26, 0xEC	; 236
     f38:	b4 ef       	ldi	r27, 0xF4	; 244
     f3a:	a5 01       	movw	r20, r10
     f3c:	94 01       	movw	r18, r8
     f3e:	0e 94 b7 0a 	call	0x156e	; 0x156e <__mulohisi3>
     f42:	c6 0e       	add	r12, r22
     f44:	d7 1e       	adc	r13, r23
     f46:	e8 1e       	adc	r14, r24
     f48:	f9 1e       	adc	r15, r25
     f4a:	f7 fe       	sbrs	r15, 7
     f4c:	06 c0       	rjmp	.+12     	; 0xf5a <do_rand+0x74>
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	c8 1a       	sub	r12, r24
     f52:	d1 08       	sbc	r13, r1
     f54:	e1 08       	sbc	r14, r1
     f56:	80 e8       	ldi	r24, 0x80	; 128
     f58:	f8 0a       	sbc	r15, r24
     f5a:	c8 82       	st	Y, r12
     f5c:	d9 82       	std	Y+1, r13	; 0x01
     f5e:	ea 82       	std	Y+2, r14	; 0x02
     f60:	fb 82       	std	Y+3, r15	; 0x03
     f62:	c6 01       	movw	r24, r12
     f64:	9f 77       	andi	r25, 0x7F	; 127
     f66:	df 91       	pop	r29
     f68:	cf 91       	pop	r28
     f6a:	ff 90       	pop	r15
     f6c:	ef 90       	pop	r14
     f6e:	df 90       	pop	r13
     f70:	cf 90       	pop	r12
     f72:	bf 90       	pop	r11
     f74:	af 90       	pop	r10
     f76:	9f 90       	pop	r9
     f78:	8f 90       	pop	r8
     f7a:	08 95       	ret

00000f7c <rand_r>:
     f7c:	0e 94 73 07 	call	0xee6	; 0xee6 <do_rand>
     f80:	08 95       	ret

00000f82 <rand>:
     f82:	86 e0       	ldi	r24, 0x06	; 6
     f84:	91 e0       	ldi	r25, 0x01	; 1
     f86:	0e 94 73 07 	call	0xee6	; 0xee6 <do_rand>
     f8a:	08 95       	ret

00000f8c <srand>:
     f8c:	a0 e0       	ldi	r26, 0x00	; 0
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	80 93 06 01 	sts	0x0106, r24
     f94:	90 93 07 01 	sts	0x0107, r25
     f98:	a0 93 08 01 	sts	0x0108, r26
     f9c:	b0 93 09 01 	sts	0x0109, r27
     fa0:	08 95       	ret

00000fa2 <printf>:
     fa2:	a0 e0       	ldi	r26, 0x00	; 0
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	e7 ed       	ldi	r30, 0xD7	; 215
     fa8:	f7 e0       	ldi	r31, 0x07	; 7
     faa:	0c 94 cc 0a 	jmp	0x1598	; 0x1598 <__prologue_saves__+0x20>
     fae:	fe 01       	movw	r30, r28
     fb0:	35 96       	adiw	r30, 0x05	; 5
     fb2:	61 91       	ld	r22, Z+
     fb4:	71 91       	ld	r23, Z+
     fb6:	af 01       	movw	r20, r30
     fb8:	80 91 5f 02 	lds	r24, 0x025F
     fbc:	90 91 60 02 	lds	r25, 0x0260
     fc0:	0e 94 12 08 	call	0x1024	; 0x1024 <vfprintf>
     fc4:	e2 e0       	ldi	r30, 0x02	; 2
     fc6:	0c 94 e8 0a 	jmp	0x15d0	; 0x15d0 <__epilogue_restores__+0x20>

00000fca <puts>:
     fca:	0f 93       	push	r16
     fcc:	1f 93       	push	r17
     fce:	cf 93       	push	r28
     fd0:	df 93       	push	r29
     fd2:	e0 91 5f 02 	lds	r30, 0x025F
     fd6:	f0 91 60 02 	lds	r31, 0x0260
     fda:	23 81       	ldd	r18, Z+3	; 0x03
     fdc:	21 ff       	sbrs	r18, 1
     fde:	1b c0       	rjmp	.+54     	; 0x1016 <puts+0x4c>
     fe0:	ec 01       	movw	r28, r24
     fe2:	00 e0       	ldi	r16, 0x00	; 0
     fe4:	10 e0       	ldi	r17, 0x00	; 0
     fe6:	89 91       	ld	r24, Y+
     fe8:	60 91 5f 02 	lds	r22, 0x025F
     fec:	70 91 60 02 	lds	r23, 0x0260
     ff0:	db 01       	movw	r26, r22
     ff2:	18 96       	adiw	r26, 0x08	; 8
     ff4:	ed 91       	ld	r30, X+
     ff6:	fc 91       	ld	r31, X
     ff8:	19 97       	sbiw	r26, 0x09	; 9
     ffa:	88 23       	and	r24, r24
     ffc:	31 f0       	breq	.+12     	; 0x100a <puts+0x40>
     ffe:	09 95       	icall
    1000:	89 2b       	or	r24, r25
    1002:	89 f3       	breq	.-30     	; 0xfe6 <puts+0x1c>
    1004:	0f ef       	ldi	r16, 0xFF	; 255
    1006:	1f ef       	ldi	r17, 0xFF	; 255
    1008:	ee cf       	rjmp	.-36     	; 0xfe6 <puts+0x1c>
    100a:	8a e0       	ldi	r24, 0x0A	; 10
    100c:	09 95       	icall
    100e:	89 2b       	or	r24, r25
    1010:	11 f4       	brne	.+4      	; 0x1016 <puts+0x4c>
    1012:	c8 01       	movw	r24, r16
    1014:	02 c0       	rjmp	.+4      	; 0x101a <puts+0x50>
    1016:	8f ef       	ldi	r24, 0xFF	; 255
    1018:	9f ef       	ldi	r25, 0xFF	; 255
    101a:	df 91       	pop	r29
    101c:	cf 91       	pop	r28
    101e:	1f 91       	pop	r17
    1020:	0f 91       	pop	r16
    1022:	08 95       	ret

00001024 <vfprintf>:
    1024:	ac e0       	ldi	r26, 0x0C	; 12
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	e8 e1       	ldi	r30, 0x18	; 24
    102a:	f8 e0       	ldi	r31, 0x08	; 8
    102c:	0c 94 bc 0a 	jmp	0x1578	; 0x1578 <__prologue_saves__>
    1030:	7c 01       	movw	r14, r24
    1032:	6b 01       	movw	r12, r22
    1034:	8a 01       	movw	r16, r20
    1036:	fc 01       	movw	r30, r24
    1038:	17 82       	std	Z+7, r1	; 0x07
    103a:	16 82       	std	Z+6, r1	; 0x06
    103c:	83 81       	ldd	r24, Z+3	; 0x03
    103e:	81 ff       	sbrs	r24, 1
    1040:	bd c1       	rjmp	.+890    	; 0x13bc <vfprintf+0x398>
    1042:	ce 01       	movw	r24, r28
    1044:	01 96       	adiw	r24, 0x01	; 1
    1046:	4c 01       	movw	r8, r24
    1048:	f7 01       	movw	r30, r14
    104a:	93 81       	ldd	r25, Z+3	; 0x03
    104c:	f6 01       	movw	r30, r12
    104e:	93 fd       	sbrc	r25, 3
    1050:	85 91       	lpm	r24, Z+
    1052:	93 ff       	sbrs	r25, 3
    1054:	81 91       	ld	r24, Z+
    1056:	6f 01       	movw	r12, r30
    1058:	88 23       	and	r24, r24
    105a:	09 f4       	brne	.+2      	; 0x105e <vfprintf+0x3a>
    105c:	ab c1       	rjmp	.+854    	; 0x13b4 <vfprintf+0x390>
    105e:	85 32       	cpi	r24, 0x25	; 37
    1060:	39 f4       	brne	.+14     	; 0x1070 <vfprintf+0x4c>
    1062:	93 fd       	sbrc	r25, 3
    1064:	85 91       	lpm	r24, Z+
    1066:	93 ff       	sbrs	r25, 3
    1068:	81 91       	ld	r24, Z+
    106a:	6f 01       	movw	r12, r30
    106c:	85 32       	cpi	r24, 0x25	; 37
    106e:	29 f4       	brne	.+10     	; 0x107a <vfprintf+0x56>
    1070:	b7 01       	movw	r22, r14
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <fputc>
    1078:	e7 cf       	rjmp	.-50     	; 0x1048 <vfprintf+0x24>
    107a:	51 2c       	mov	r5, r1
    107c:	31 2c       	mov	r3, r1
    107e:	20 e0       	ldi	r18, 0x00	; 0
    1080:	20 32       	cpi	r18, 0x20	; 32
    1082:	a0 f4       	brcc	.+40     	; 0x10ac <vfprintf+0x88>
    1084:	8b 32       	cpi	r24, 0x2B	; 43
    1086:	69 f0       	breq	.+26     	; 0x10a2 <vfprintf+0x7e>
    1088:	30 f4       	brcc	.+12     	; 0x1096 <vfprintf+0x72>
    108a:	80 32       	cpi	r24, 0x20	; 32
    108c:	59 f0       	breq	.+22     	; 0x10a4 <vfprintf+0x80>
    108e:	83 32       	cpi	r24, 0x23	; 35
    1090:	69 f4       	brne	.+26     	; 0x10ac <vfprintf+0x88>
    1092:	20 61       	ori	r18, 0x10	; 16
    1094:	2c c0       	rjmp	.+88     	; 0x10ee <vfprintf+0xca>
    1096:	8d 32       	cpi	r24, 0x2D	; 45
    1098:	39 f0       	breq	.+14     	; 0x10a8 <vfprintf+0x84>
    109a:	80 33       	cpi	r24, 0x30	; 48
    109c:	39 f4       	brne	.+14     	; 0x10ac <vfprintf+0x88>
    109e:	21 60       	ori	r18, 0x01	; 1
    10a0:	26 c0       	rjmp	.+76     	; 0x10ee <vfprintf+0xca>
    10a2:	22 60       	ori	r18, 0x02	; 2
    10a4:	24 60       	ori	r18, 0x04	; 4
    10a6:	23 c0       	rjmp	.+70     	; 0x10ee <vfprintf+0xca>
    10a8:	28 60       	ori	r18, 0x08	; 8
    10aa:	21 c0       	rjmp	.+66     	; 0x10ee <vfprintf+0xca>
    10ac:	27 fd       	sbrc	r18, 7
    10ae:	27 c0       	rjmp	.+78     	; 0x10fe <vfprintf+0xda>
    10b0:	30 ed       	ldi	r19, 0xD0	; 208
    10b2:	38 0f       	add	r19, r24
    10b4:	3a 30       	cpi	r19, 0x0A	; 10
    10b6:	78 f4       	brcc	.+30     	; 0x10d6 <vfprintf+0xb2>
    10b8:	26 ff       	sbrs	r18, 6
    10ba:	06 c0       	rjmp	.+12     	; 0x10c8 <vfprintf+0xa4>
    10bc:	fa e0       	ldi	r31, 0x0A	; 10
    10be:	5f 9e       	mul	r5, r31
    10c0:	30 0d       	add	r19, r0
    10c2:	11 24       	eor	r1, r1
    10c4:	53 2e       	mov	r5, r19
    10c6:	13 c0       	rjmp	.+38     	; 0x10ee <vfprintf+0xca>
    10c8:	8a e0       	ldi	r24, 0x0A	; 10
    10ca:	38 9e       	mul	r3, r24
    10cc:	30 0d       	add	r19, r0
    10ce:	11 24       	eor	r1, r1
    10d0:	33 2e       	mov	r3, r19
    10d2:	20 62       	ori	r18, 0x20	; 32
    10d4:	0c c0       	rjmp	.+24     	; 0x10ee <vfprintf+0xca>
    10d6:	8e 32       	cpi	r24, 0x2E	; 46
    10d8:	21 f4       	brne	.+8      	; 0x10e2 <vfprintf+0xbe>
    10da:	26 fd       	sbrc	r18, 6
    10dc:	6b c1       	rjmp	.+726    	; 0x13b4 <vfprintf+0x390>
    10de:	20 64       	ori	r18, 0x40	; 64
    10e0:	06 c0       	rjmp	.+12     	; 0x10ee <vfprintf+0xca>
    10e2:	8c 36       	cpi	r24, 0x6C	; 108
    10e4:	11 f4       	brne	.+4      	; 0x10ea <vfprintf+0xc6>
    10e6:	20 68       	ori	r18, 0x80	; 128
    10e8:	02 c0       	rjmp	.+4      	; 0x10ee <vfprintf+0xca>
    10ea:	88 36       	cpi	r24, 0x68	; 104
    10ec:	41 f4       	brne	.+16     	; 0x10fe <vfprintf+0xda>
    10ee:	f6 01       	movw	r30, r12
    10f0:	93 fd       	sbrc	r25, 3
    10f2:	85 91       	lpm	r24, Z+
    10f4:	93 ff       	sbrs	r25, 3
    10f6:	81 91       	ld	r24, Z+
    10f8:	6f 01       	movw	r12, r30
    10fa:	81 11       	cpse	r24, r1
    10fc:	c1 cf       	rjmp	.-126    	; 0x1080 <vfprintf+0x5c>
    10fe:	98 2f       	mov	r25, r24
    1100:	9f 7d       	andi	r25, 0xDF	; 223
    1102:	95 54       	subi	r25, 0x45	; 69
    1104:	93 30       	cpi	r25, 0x03	; 3
    1106:	28 f4       	brcc	.+10     	; 0x1112 <vfprintf+0xee>
    1108:	0c 5f       	subi	r16, 0xFC	; 252
    110a:	1f 4f       	sbci	r17, 0xFF	; 255
    110c:	ff e3       	ldi	r31, 0x3F	; 63
    110e:	f9 83       	std	Y+1, r31	; 0x01
    1110:	0d c0       	rjmp	.+26     	; 0x112c <vfprintf+0x108>
    1112:	83 36       	cpi	r24, 0x63	; 99
    1114:	31 f0       	breq	.+12     	; 0x1122 <vfprintf+0xfe>
    1116:	83 37       	cpi	r24, 0x73	; 115
    1118:	71 f0       	breq	.+28     	; 0x1136 <vfprintf+0x112>
    111a:	83 35       	cpi	r24, 0x53	; 83
    111c:	09 f0       	breq	.+2      	; 0x1120 <vfprintf+0xfc>
    111e:	5b c0       	rjmp	.+182    	; 0x11d6 <vfprintf+0x1b2>
    1120:	22 c0       	rjmp	.+68     	; 0x1166 <vfprintf+0x142>
    1122:	f8 01       	movw	r30, r16
    1124:	80 81       	ld	r24, Z
    1126:	89 83       	std	Y+1, r24	; 0x01
    1128:	0e 5f       	subi	r16, 0xFE	; 254
    112a:	1f 4f       	sbci	r17, 0xFF	; 255
    112c:	44 24       	eor	r4, r4
    112e:	43 94       	inc	r4
    1130:	51 2c       	mov	r5, r1
    1132:	54 01       	movw	r10, r8
    1134:	15 c0       	rjmp	.+42     	; 0x1160 <vfprintf+0x13c>
    1136:	38 01       	movw	r6, r16
    1138:	f2 e0       	ldi	r31, 0x02	; 2
    113a:	6f 0e       	add	r6, r31
    113c:	71 1c       	adc	r7, r1
    113e:	f8 01       	movw	r30, r16
    1140:	a0 80       	ld	r10, Z
    1142:	b1 80       	ldd	r11, Z+1	; 0x01
    1144:	26 ff       	sbrs	r18, 6
    1146:	03 c0       	rjmp	.+6      	; 0x114e <vfprintf+0x12a>
    1148:	65 2d       	mov	r22, r5
    114a:	70 e0       	ldi	r23, 0x00	; 0
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <vfprintf+0x12e>
    114e:	6f ef       	ldi	r22, 0xFF	; 255
    1150:	7f ef       	ldi	r23, 0xFF	; 255
    1152:	c5 01       	movw	r24, r10
    1154:	2c 87       	std	Y+12, r18	; 0x0c
    1156:	0e 94 ef 09 	call	0x13de	; 0x13de <strnlen>
    115a:	2c 01       	movw	r4, r24
    115c:	83 01       	movw	r16, r6
    115e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1160:	2f 77       	andi	r18, 0x7F	; 127
    1162:	22 2e       	mov	r2, r18
    1164:	17 c0       	rjmp	.+46     	; 0x1194 <vfprintf+0x170>
    1166:	38 01       	movw	r6, r16
    1168:	f2 e0       	ldi	r31, 0x02	; 2
    116a:	6f 0e       	add	r6, r31
    116c:	71 1c       	adc	r7, r1
    116e:	f8 01       	movw	r30, r16
    1170:	a0 80       	ld	r10, Z
    1172:	b1 80       	ldd	r11, Z+1	; 0x01
    1174:	26 ff       	sbrs	r18, 6
    1176:	03 c0       	rjmp	.+6      	; 0x117e <vfprintf+0x15a>
    1178:	65 2d       	mov	r22, r5
    117a:	70 e0       	ldi	r23, 0x00	; 0
    117c:	02 c0       	rjmp	.+4      	; 0x1182 <vfprintf+0x15e>
    117e:	6f ef       	ldi	r22, 0xFF	; 255
    1180:	7f ef       	ldi	r23, 0xFF	; 255
    1182:	c5 01       	movw	r24, r10
    1184:	2c 87       	std	Y+12, r18	; 0x0c
    1186:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <strnlen_P>
    118a:	2c 01       	movw	r4, r24
    118c:	2c 85       	ldd	r18, Y+12	; 0x0c
    118e:	20 68       	ori	r18, 0x80	; 128
    1190:	22 2e       	mov	r2, r18
    1192:	83 01       	movw	r16, r6
    1194:	23 fc       	sbrc	r2, 3
    1196:	1b c0       	rjmp	.+54     	; 0x11ce <vfprintf+0x1aa>
    1198:	83 2d       	mov	r24, r3
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	48 16       	cp	r4, r24
    119e:	59 06       	cpc	r5, r25
    11a0:	b0 f4       	brcc	.+44     	; 0x11ce <vfprintf+0x1aa>
    11a2:	b7 01       	movw	r22, r14
    11a4:	80 e2       	ldi	r24, 0x20	; 32
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <fputc>
    11ac:	3a 94       	dec	r3
    11ae:	f4 cf       	rjmp	.-24     	; 0x1198 <vfprintf+0x174>
    11b0:	f5 01       	movw	r30, r10
    11b2:	27 fc       	sbrc	r2, 7
    11b4:	85 91       	lpm	r24, Z+
    11b6:	27 fe       	sbrs	r2, 7
    11b8:	81 91       	ld	r24, Z+
    11ba:	5f 01       	movw	r10, r30
    11bc:	b7 01       	movw	r22, r14
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <fputc>
    11c4:	31 10       	cpse	r3, r1
    11c6:	3a 94       	dec	r3
    11c8:	f1 e0       	ldi	r31, 0x01	; 1
    11ca:	4f 1a       	sub	r4, r31
    11cc:	51 08       	sbc	r5, r1
    11ce:	41 14       	cp	r4, r1
    11d0:	51 04       	cpc	r5, r1
    11d2:	71 f7       	brne	.-36     	; 0x11b0 <vfprintf+0x18c>
    11d4:	e5 c0       	rjmp	.+458    	; 0x13a0 <vfprintf+0x37c>
    11d6:	84 36       	cpi	r24, 0x64	; 100
    11d8:	11 f0       	breq	.+4      	; 0x11de <vfprintf+0x1ba>
    11da:	89 36       	cpi	r24, 0x69	; 105
    11dc:	39 f5       	brne	.+78     	; 0x122c <vfprintf+0x208>
    11de:	f8 01       	movw	r30, r16
    11e0:	27 ff       	sbrs	r18, 7
    11e2:	07 c0       	rjmp	.+14     	; 0x11f2 <vfprintf+0x1ce>
    11e4:	60 81       	ld	r22, Z
    11e6:	71 81       	ldd	r23, Z+1	; 0x01
    11e8:	82 81       	ldd	r24, Z+2	; 0x02
    11ea:	93 81       	ldd	r25, Z+3	; 0x03
    11ec:	0c 5f       	subi	r16, 0xFC	; 252
    11ee:	1f 4f       	sbci	r17, 0xFF	; 255
    11f0:	08 c0       	rjmp	.+16     	; 0x1202 <vfprintf+0x1de>
    11f2:	60 81       	ld	r22, Z
    11f4:	71 81       	ldd	r23, Z+1	; 0x01
    11f6:	88 27       	eor	r24, r24
    11f8:	77 fd       	sbrc	r23, 7
    11fa:	80 95       	com	r24
    11fc:	98 2f       	mov	r25, r24
    11fe:	0e 5f       	subi	r16, 0xFE	; 254
    1200:	1f 4f       	sbci	r17, 0xFF	; 255
    1202:	2f 76       	andi	r18, 0x6F	; 111
    1204:	b2 2e       	mov	r11, r18
    1206:	97 ff       	sbrs	r25, 7
    1208:	09 c0       	rjmp	.+18     	; 0x121c <vfprintf+0x1f8>
    120a:	90 95       	com	r25
    120c:	80 95       	com	r24
    120e:	70 95       	com	r23
    1210:	61 95       	neg	r22
    1212:	7f 4f       	sbci	r23, 0xFF	; 255
    1214:	8f 4f       	sbci	r24, 0xFF	; 255
    1216:	9f 4f       	sbci	r25, 0xFF	; 255
    1218:	20 68       	ori	r18, 0x80	; 128
    121a:	b2 2e       	mov	r11, r18
    121c:	2a e0       	ldi	r18, 0x0A	; 10
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	a4 01       	movw	r20, r8
    1222:	0e 94 2c 0a 	call	0x1458	; 0x1458 <__ultoa_invert>
    1226:	a8 2e       	mov	r10, r24
    1228:	a8 18       	sub	r10, r8
    122a:	44 c0       	rjmp	.+136    	; 0x12b4 <vfprintf+0x290>
    122c:	85 37       	cpi	r24, 0x75	; 117
    122e:	29 f4       	brne	.+10     	; 0x123a <vfprintf+0x216>
    1230:	2f 7e       	andi	r18, 0xEF	; 239
    1232:	b2 2e       	mov	r11, r18
    1234:	2a e0       	ldi	r18, 0x0A	; 10
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	25 c0       	rjmp	.+74     	; 0x1284 <vfprintf+0x260>
    123a:	f2 2f       	mov	r31, r18
    123c:	f9 7f       	andi	r31, 0xF9	; 249
    123e:	bf 2e       	mov	r11, r31
    1240:	8f 36       	cpi	r24, 0x6F	; 111
    1242:	c1 f0       	breq	.+48     	; 0x1274 <vfprintf+0x250>
    1244:	18 f4       	brcc	.+6      	; 0x124c <vfprintf+0x228>
    1246:	88 35       	cpi	r24, 0x58	; 88
    1248:	79 f0       	breq	.+30     	; 0x1268 <vfprintf+0x244>
    124a:	b4 c0       	rjmp	.+360    	; 0x13b4 <vfprintf+0x390>
    124c:	80 37       	cpi	r24, 0x70	; 112
    124e:	19 f0       	breq	.+6      	; 0x1256 <vfprintf+0x232>
    1250:	88 37       	cpi	r24, 0x78	; 120
    1252:	21 f0       	breq	.+8      	; 0x125c <vfprintf+0x238>
    1254:	af c0       	rjmp	.+350    	; 0x13b4 <vfprintf+0x390>
    1256:	2f 2f       	mov	r18, r31
    1258:	20 61       	ori	r18, 0x10	; 16
    125a:	b2 2e       	mov	r11, r18
    125c:	b4 fe       	sbrs	r11, 4
    125e:	0d c0       	rjmp	.+26     	; 0x127a <vfprintf+0x256>
    1260:	8b 2d       	mov	r24, r11
    1262:	84 60       	ori	r24, 0x04	; 4
    1264:	b8 2e       	mov	r11, r24
    1266:	09 c0       	rjmp	.+18     	; 0x127a <vfprintf+0x256>
    1268:	24 ff       	sbrs	r18, 4
    126a:	0a c0       	rjmp	.+20     	; 0x1280 <vfprintf+0x25c>
    126c:	9f 2f       	mov	r25, r31
    126e:	96 60       	ori	r25, 0x06	; 6
    1270:	b9 2e       	mov	r11, r25
    1272:	06 c0       	rjmp	.+12     	; 0x1280 <vfprintf+0x25c>
    1274:	28 e0       	ldi	r18, 0x08	; 8
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	05 c0       	rjmp	.+10     	; 0x1284 <vfprintf+0x260>
    127a:	20 e1       	ldi	r18, 0x10	; 16
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	02 c0       	rjmp	.+4      	; 0x1284 <vfprintf+0x260>
    1280:	20 e1       	ldi	r18, 0x10	; 16
    1282:	32 e0       	ldi	r19, 0x02	; 2
    1284:	f8 01       	movw	r30, r16
    1286:	b7 fe       	sbrs	r11, 7
    1288:	07 c0       	rjmp	.+14     	; 0x1298 <vfprintf+0x274>
    128a:	60 81       	ld	r22, Z
    128c:	71 81       	ldd	r23, Z+1	; 0x01
    128e:	82 81       	ldd	r24, Z+2	; 0x02
    1290:	93 81       	ldd	r25, Z+3	; 0x03
    1292:	0c 5f       	subi	r16, 0xFC	; 252
    1294:	1f 4f       	sbci	r17, 0xFF	; 255
    1296:	06 c0       	rjmp	.+12     	; 0x12a4 <vfprintf+0x280>
    1298:	60 81       	ld	r22, Z
    129a:	71 81       	ldd	r23, Z+1	; 0x01
    129c:	80 e0       	ldi	r24, 0x00	; 0
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	0e 5f       	subi	r16, 0xFE	; 254
    12a2:	1f 4f       	sbci	r17, 0xFF	; 255
    12a4:	a4 01       	movw	r20, r8
    12a6:	0e 94 2c 0a 	call	0x1458	; 0x1458 <__ultoa_invert>
    12aa:	a8 2e       	mov	r10, r24
    12ac:	a8 18       	sub	r10, r8
    12ae:	fb 2d       	mov	r31, r11
    12b0:	ff 77       	andi	r31, 0x7F	; 127
    12b2:	bf 2e       	mov	r11, r31
    12b4:	b6 fe       	sbrs	r11, 6
    12b6:	0b c0       	rjmp	.+22     	; 0x12ce <vfprintf+0x2aa>
    12b8:	2b 2d       	mov	r18, r11
    12ba:	2e 7f       	andi	r18, 0xFE	; 254
    12bc:	a5 14       	cp	r10, r5
    12be:	50 f4       	brcc	.+20     	; 0x12d4 <vfprintf+0x2b0>
    12c0:	b4 fe       	sbrs	r11, 4
    12c2:	0a c0       	rjmp	.+20     	; 0x12d8 <vfprintf+0x2b4>
    12c4:	b2 fc       	sbrc	r11, 2
    12c6:	08 c0       	rjmp	.+16     	; 0x12d8 <vfprintf+0x2b4>
    12c8:	2b 2d       	mov	r18, r11
    12ca:	2e 7e       	andi	r18, 0xEE	; 238
    12cc:	05 c0       	rjmp	.+10     	; 0x12d8 <vfprintf+0x2b4>
    12ce:	7a 2c       	mov	r7, r10
    12d0:	2b 2d       	mov	r18, r11
    12d2:	03 c0       	rjmp	.+6      	; 0x12da <vfprintf+0x2b6>
    12d4:	7a 2c       	mov	r7, r10
    12d6:	01 c0       	rjmp	.+2      	; 0x12da <vfprintf+0x2b6>
    12d8:	75 2c       	mov	r7, r5
    12da:	24 ff       	sbrs	r18, 4
    12dc:	0d c0       	rjmp	.+26     	; 0x12f8 <vfprintf+0x2d4>
    12de:	fe 01       	movw	r30, r28
    12e0:	ea 0d       	add	r30, r10
    12e2:	f1 1d       	adc	r31, r1
    12e4:	80 81       	ld	r24, Z
    12e6:	80 33       	cpi	r24, 0x30	; 48
    12e8:	11 f4       	brne	.+4      	; 0x12ee <vfprintf+0x2ca>
    12ea:	29 7e       	andi	r18, 0xE9	; 233
    12ec:	09 c0       	rjmp	.+18     	; 0x1300 <vfprintf+0x2dc>
    12ee:	22 ff       	sbrs	r18, 2
    12f0:	06 c0       	rjmp	.+12     	; 0x12fe <vfprintf+0x2da>
    12f2:	73 94       	inc	r7
    12f4:	73 94       	inc	r7
    12f6:	04 c0       	rjmp	.+8      	; 0x1300 <vfprintf+0x2dc>
    12f8:	82 2f       	mov	r24, r18
    12fa:	86 78       	andi	r24, 0x86	; 134
    12fc:	09 f0       	breq	.+2      	; 0x1300 <vfprintf+0x2dc>
    12fe:	73 94       	inc	r7
    1300:	23 fd       	sbrc	r18, 3
    1302:	13 c0       	rjmp	.+38     	; 0x132a <vfprintf+0x306>
    1304:	20 ff       	sbrs	r18, 0
    1306:	06 c0       	rjmp	.+12     	; 0x1314 <vfprintf+0x2f0>
    1308:	5a 2c       	mov	r5, r10
    130a:	73 14       	cp	r7, r3
    130c:	18 f4       	brcc	.+6      	; 0x1314 <vfprintf+0x2f0>
    130e:	53 0c       	add	r5, r3
    1310:	57 18       	sub	r5, r7
    1312:	73 2c       	mov	r7, r3
    1314:	73 14       	cp	r7, r3
    1316:	68 f4       	brcc	.+26     	; 0x1332 <vfprintf+0x30e>
    1318:	b7 01       	movw	r22, r14
    131a:	80 e2       	ldi	r24, 0x20	; 32
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	2c 87       	std	Y+12, r18	; 0x0c
    1320:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <fputc>
    1324:	73 94       	inc	r7
    1326:	2c 85       	ldd	r18, Y+12	; 0x0c
    1328:	f5 cf       	rjmp	.-22     	; 0x1314 <vfprintf+0x2f0>
    132a:	73 14       	cp	r7, r3
    132c:	10 f4       	brcc	.+4      	; 0x1332 <vfprintf+0x30e>
    132e:	37 18       	sub	r3, r7
    1330:	01 c0       	rjmp	.+2      	; 0x1334 <vfprintf+0x310>
    1332:	31 2c       	mov	r3, r1
    1334:	24 ff       	sbrs	r18, 4
    1336:	12 c0       	rjmp	.+36     	; 0x135c <vfprintf+0x338>
    1338:	b7 01       	movw	r22, r14
    133a:	80 e3       	ldi	r24, 0x30	; 48
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	2c 87       	std	Y+12, r18	; 0x0c
    1340:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <fputc>
    1344:	2c 85       	ldd	r18, Y+12	; 0x0c
    1346:	22 ff       	sbrs	r18, 2
    1348:	17 c0       	rjmp	.+46     	; 0x1378 <vfprintf+0x354>
    134a:	21 ff       	sbrs	r18, 1
    134c:	03 c0       	rjmp	.+6      	; 0x1354 <vfprintf+0x330>
    134e:	88 e5       	ldi	r24, 0x58	; 88
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <vfprintf+0x334>
    1354:	88 e7       	ldi	r24, 0x78	; 120
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	b7 01       	movw	r22, r14
    135a:	0c c0       	rjmp	.+24     	; 0x1374 <vfprintf+0x350>
    135c:	82 2f       	mov	r24, r18
    135e:	86 78       	andi	r24, 0x86	; 134
    1360:	59 f0       	breq	.+22     	; 0x1378 <vfprintf+0x354>
    1362:	21 fd       	sbrc	r18, 1
    1364:	02 c0       	rjmp	.+4      	; 0x136a <vfprintf+0x346>
    1366:	80 e2       	ldi	r24, 0x20	; 32
    1368:	01 c0       	rjmp	.+2      	; 0x136c <vfprintf+0x348>
    136a:	8b e2       	ldi	r24, 0x2B	; 43
    136c:	27 fd       	sbrc	r18, 7
    136e:	8d e2       	ldi	r24, 0x2D	; 45
    1370:	b7 01       	movw	r22, r14
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <fputc>
    1378:	a5 14       	cp	r10, r5
    137a:	38 f4       	brcc	.+14     	; 0x138a <vfprintf+0x366>
    137c:	b7 01       	movw	r22, r14
    137e:	80 e3       	ldi	r24, 0x30	; 48
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <fputc>
    1386:	5a 94       	dec	r5
    1388:	f7 cf       	rjmp	.-18     	; 0x1378 <vfprintf+0x354>
    138a:	aa 94       	dec	r10
    138c:	f4 01       	movw	r30, r8
    138e:	ea 0d       	add	r30, r10
    1390:	f1 1d       	adc	r31, r1
    1392:	80 81       	ld	r24, Z
    1394:	b7 01       	movw	r22, r14
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <fputc>
    139c:	a1 10       	cpse	r10, r1
    139e:	f5 cf       	rjmp	.-22     	; 0x138a <vfprintf+0x366>
    13a0:	33 20       	and	r3, r3
    13a2:	09 f4       	brne	.+2      	; 0x13a6 <vfprintf+0x382>
    13a4:	51 ce       	rjmp	.-862    	; 0x1048 <vfprintf+0x24>
    13a6:	b7 01       	movw	r22, r14
    13a8:	80 e2       	ldi	r24, 0x20	; 32
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <fputc>
    13b0:	3a 94       	dec	r3
    13b2:	f6 cf       	rjmp	.-20     	; 0x13a0 <vfprintf+0x37c>
    13b4:	f7 01       	movw	r30, r14
    13b6:	86 81       	ldd	r24, Z+6	; 0x06
    13b8:	97 81       	ldd	r25, Z+7	; 0x07
    13ba:	02 c0       	rjmp	.+4      	; 0x13c0 <vfprintf+0x39c>
    13bc:	8f ef       	ldi	r24, 0xFF	; 255
    13be:	9f ef       	ldi	r25, 0xFF	; 255
    13c0:	2c 96       	adiw	r28, 0x0c	; 12
    13c2:	e2 e1       	ldi	r30, 0x12	; 18
    13c4:	0c 94 d8 0a 	jmp	0x15b0	; 0x15b0 <__epilogue_restores__>

000013c8 <strnlen_P>:
    13c8:	fc 01       	movw	r30, r24
    13ca:	05 90       	lpm	r0, Z+
    13cc:	61 50       	subi	r22, 0x01	; 1
    13ce:	70 40       	sbci	r23, 0x00	; 0
    13d0:	01 10       	cpse	r0, r1
    13d2:	d8 f7       	brcc	.-10     	; 0x13ca <strnlen_P+0x2>
    13d4:	80 95       	com	r24
    13d6:	90 95       	com	r25
    13d8:	8e 0f       	add	r24, r30
    13da:	9f 1f       	adc	r25, r31
    13dc:	08 95       	ret

000013de <strnlen>:
    13de:	fc 01       	movw	r30, r24
    13e0:	61 50       	subi	r22, 0x01	; 1
    13e2:	70 40       	sbci	r23, 0x00	; 0
    13e4:	01 90       	ld	r0, Z+
    13e6:	01 10       	cpse	r0, r1
    13e8:	d8 f7       	brcc	.-10     	; 0x13e0 <strnlen+0x2>
    13ea:	80 95       	com	r24
    13ec:	90 95       	com	r25
    13ee:	8e 0f       	add	r24, r30
    13f0:	9f 1f       	adc	r25, r31
    13f2:	08 95       	ret

000013f4 <fputc>:
    13f4:	0f 93       	push	r16
    13f6:	1f 93       	push	r17
    13f8:	cf 93       	push	r28
    13fa:	df 93       	push	r29
    13fc:	18 2f       	mov	r17, r24
    13fe:	09 2f       	mov	r16, r25
    1400:	eb 01       	movw	r28, r22
    1402:	8b 81       	ldd	r24, Y+3	; 0x03
    1404:	81 fd       	sbrc	r24, 1
    1406:	03 c0       	rjmp	.+6      	; 0x140e <fputc+0x1a>
    1408:	8f ef       	ldi	r24, 0xFF	; 255
    140a:	9f ef       	ldi	r25, 0xFF	; 255
    140c:	20 c0       	rjmp	.+64     	; 0x144e <fputc+0x5a>
    140e:	82 ff       	sbrs	r24, 2
    1410:	10 c0       	rjmp	.+32     	; 0x1432 <fputc+0x3e>
    1412:	4e 81       	ldd	r20, Y+6	; 0x06
    1414:	5f 81       	ldd	r21, Y+7	; 0x07
    1416:	2c 81       	ldd	r18, Y+4	; 0x04
    1418:	3d 81       	ldd	r19, Y+5	; 0x05
    141a:	42 17       	cp	r20, r18
    141c:	53 07       	cpc	r21, r19
    141e:	7c f4       	brge	.+30     	; 0x143e <fputc+0x4a>
    1420:	e8 81       	ld	r30, Y
    1422:	f9 81       	ldd	r31, Y+1	; 0x01
    1424:	9f 01       	movw	r18, r30
    1426:	2f 5f       	subi	r18, 0xFF	; 255
    1428:	3f 4f       	sbci	r19, 0xFF	; 255
    142a:	39 83       	std	Y+1, r19	; 0x01
    142c:	28 83       	st	Y, r18
    142e:	10 83       	st	Z, r17
    1430:	06 c0       	rjmp	.+12     	; 0x143e <fputc+0x4a>
    1432:	e8 85       	ldd	r30, Y+8	; 0x08
    1434:	f9 85       	ldd	r31, Y+9	; 0x09
    1436:	81 2f       	mov	r24, r17
    1438:	09 95       	icall
    143a:	89 2b       	or	r24, r25
    143c:	29 f7       	brne	.-54     	; 0x1408 <fputc+0x14>
    143e:	2e 81       	ldd	r18, Y+6	; 0x06
    1440:	3f 81       	ldd	r19, Y+7	; 0x07
    1442:	2f 5f       	subi	r18, 0xFF	; 255
    1444:	3f 4f       	sbci	r19, 0xFF	; 255
    1446:	3f 83       	std	Y+7, r19	; 0x07
    1448:	2e 83       	std	Y+6, r18	; 0x06
    144a:	81 2f       	mov	r24, r17
    144c:	90 2f       	mov	r25, r16
    144e:	df 91       	pop	r29
    1450:	cf 91       	pop	r28
    1452:	1f 91       	pop	r17
    1454:	0f 91       	pop	r16
    1456:	08 95       	ret

00001458 <__ultoa_invert>:
    1458:	fa 01       	movw	r30, r20
    145a:	aa 27       	eor	r26, r26
    145c:	28 30       	cpi	r18, 0x08	; 8
    145e:	51 f1       	breq	.+84     	; 0x14b4 <__ultoa_invert+0x5c>
    1460:	20 31       	cpi	r18, 0x10	; 16
    1462:	81 f1       	breq	.+96     	; 0x14c4 <__ultoa_invert+0x6c>
    1464:	e8 94       	clt
    1466:	6f 93       	push	r22
    1468:	6e 7f       	andi	r22, 0xFE	; 254
    146a:	6e 5f       	subi	r22, 0xFE	; 254
    146c:	7f 4f       	sbci	r23, 0xFF	; 255
    146e:	8f 4f       	sbci	r24, 0xFF	; 255
    1470:	9f 4f       	sbci	r25, 0xFF	; 255
    1472:	af 4f       	sbci	r26, 0xFF	; 255
    1474:	b1 e0       	ldi	r27, 0x01	; 1
    1476:	3e d0       	rcall	.+124    	; 0x14f4 <__ultoa_invert+0x9c>
    1478:	b4 e0       	ldi	r27, 0x04	; 4
    147a:	3c d0       	rcall	.+120    	; 0x14f4 <__ultoa_invert+0x9c>
    147c:	67 0f       	add	r22, r23
    147e:	78 1f       	adc	r23, r24
    1480:	89 1f       	adc	r24, r25
    1482:	9a 1f       	adc	r25, r26
    1484:	a1 1d       	adc	r26, r1
    1486:	68 0f       	add	r22, r24
    1488:	79 1f       	adc	r23, r25
    148a:	8a 1f       	adc	r24, r26
    148c:	91 1d       	adc	r25, r1
    148e:	a1 1d       	adc	r26, r1
    1490:	6a 0f       	add	r22, r26
    1492:	71 1d       	adc	r23, r1
    1494:	81 1d       	adc	r24, r1
    1496:	91 1d       	adc	r25, r1
    1498:	a1 1d       	adc	r26, r1
    149a:	20 d0       	rcall	.+64     	; 0x14dc <__ultoa_invert+0x84>
    149c:	09 f4       	brne	.+2      	; 0x14a0 <__ultoa_invert+0x48>
    149e:	68 94       	set
    14a0:	3f 91       	pop	r19
    14a2:	2a e0       	ldi	r18, 0x0A	; 10
    14a4:	26 9f       	mul	r18, r22
    14a6:	11 24       	eor	r1, r1
    14a8:	30 19       	sub	r19, r0
    14aa:	30 5d       	subi	r19, 0xD0	; 208
    14ac:	31 93       	st	Z+, r19
    14ae:	de f6       	brtc	.-74     	; 0x1466 <__ultoa_invert+0xe>
    14b0:	cf 01       	movw	r24, r30
    14b2:	08 95       	ret
    14b4:	46 2f       	mov	r20, r22
    14b6:	47 70       	andi	r20, 0x07	; 7
    14b8:	40 5d       	subi	r20, 0xD0	; 208
    14ba:	41 93       	st	Z+, r20
    14bc:	b3 e0       	ldi	r27, 0x03	; 3
    14be:	0f d0       	rcall	.+30     	; 0x14de <__ultoa_invert+0x86>
    14c0:	c9 f7       	brne	.-14     	; 0x14b4 <__ultoa_invert+0x5c>
    14c2:	f6 cf       	rjmp	.-20     	; 0x14b0 <__ultoa_invert+0x58>
    14c4:	46 2f       	mov	r20, r22
    14c6:	4f 70       	andi	r20, 0x0F	; 15
    14c8:	40 5d       	subi	r20, 0xD0	; 208
    14ca:	4a 33       	cpi	r20, 0x3A	; 58
    14cc:	18 f0       	brcs	.+6      	; 0x14d4 <__ultoa_invert+0x7c>
    14ce:	49 5d       	subi	r20, 0xD9	; 217
    14d0:	31 fd       	sbrc	r19, 1
    14d2:	40 52       	subi	r20, 0x20	; 32
    14d4:	41 93       	st	Z+, r20
    14d6:	02 d0       	rcall	.+4      	; 0x14dc <__ultoa_invert+0x84>
    14d8:	a9 f7       	brne	.-22     	; 0x14c4 <__ultoa_invert+0x6c>
    14da:	ea cf       	rjmp	.-44     	; 0x14b0 <__ultoa_invert+0x58>
    14dc:	b4 e0       	ldi	r27, 0x04	; 4
    14de:	a6 95       	lsr	r26
    14e0:	97 95       	ror	r25
    14e2:	87 95       	ror	r24
    14e4:	77 95       	ror	r23
    14e6:	67 95       	ror	r22
    14e8:	ba 95       	dec	r27
    14ea:	c9 f7       	brne	.-14     	; 0x14de <__ultoa_invert+0x86>
    14ec:	00 97       	sbiw	r24, 0x00	; 0
    14ee:	61 05       	cpc	r22, r1
    14f0:	71 05       	cpc	r23, r1
    14f2:	08 95       	ret
    14f4:	9b 01       	movw	r18, r22
    14f6:	ac 01       	movw	r20, r24
    14f8:	0a 2e       	mov	r0, r26
    14fa:	06 94       	lsr	r0
    14fc:	57 95       	ror	r21
    14fe:	47 95       	ror	r20
    1500:	37 95       	ror	r19
    1502:	27 95       	ror	r18
    1504:	ba 95       	dec	r27
    1506:	c9 f7       	brne	.-14     	; 0x14fa <__ultoa_invert+0xa2>
    1508:	62 0f       	add	r22, r18
    150a:	73 1f       	adc	r23, r19
    150c:	84 1f       	adc	r24, r20
    150e:	95 1f       	adc	r25, r21
    1510:	a0 1d       	adc	r26, r0
    1512:	08 95       	ret

00001514 <__divmodsi4>:
    1514:	05 2e       	mov	r0, r21
    1516:	97 fb       	bst	r25, 7
    1518:	1e f4       	brtc	.+6      	; 0x1520 <__divmodsi4+0xc>
    151a:	00 94       	com	r0
    151c:	0e 94 a1 0a 	call	0x1542	; 0x1542 <__negsi2>
    1520:	57 fd       	sbrc	r21, 7
    1522:	07 d0       	rcall	.+14     	; 0x1532 <__divmodsi4_neg2>
    1524:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <__udivmodsi4>
    1528:	07 fc       	sbrc	r0, 7
    152a:	03 d0       	rcall	.+6      	; 0x1532 <__divmodsi4_neg2>
    152c:	4e f4       	brtc	.+18     	; 0x1540 <__divmodsi4_exit>
    152e:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__negsi2>

00001532 <__divmodsi4_neg2>:
    1532:	50 95       	com	r21
    1534:	40 95       	com	r20
    1536:	30 95       	com	r19
    1538:	21 95       	neg	r18
    153a:	3f 4f       	sbci	r19, 0xFF	; 255
    153c:	4f 4f       	sbci	r20, 0xFF	; 255
    153e:	5f 4f       	sbci	r21, 0xFF	; 255

00001540 <__divmodsi4_exit>:
    1540:	08 95       	ret

00001542 <__negsi2>:
    1542:	90 95       	com	r25
    1544:	80 95       	com	r24
    1546:	70 95       	com	r23
    1548:	61 95       	neg	r22
    154a:	7f 4f       	sbci	r23, 0xFF	; 255
    154c:	8f 4f       	sbci	r24, 0xFF	; 255
    154e:	9f 4f       	sbci	r25, 0xFF	; 255
    1550:	08 95       	ret

00001552 <__muluhisi3>:
    1552:	0e 94 15 0b 	call	0x162a	; 0x162a <__umulhisi3>
    1556:	a5 9f       	mul	r26, r21
    1558:	90 0d       	add	r25, r0
    155a:	b4 9f       	mul	r27, r20
    155c:	90 0d       	add	r25, r0
    155e:	a4 9f       	mul	r26, r20
    1560:	80 0d       	add	r24, r0
    1562:	91 1d       	adc	r25, r1
    1564:	11 24       	eor	r1, r1
    1566:	08 95       	ret

00001568 <__mulshisi3>:
    1568:	b7 ff       	sbrs	r27, 7
    156a:	0c 94 a9 0a 	jmp	0x1552	; 0x1552 <__muluhisi3>

0000156e <__mulohisi3>:
    156e:	0e 94 a9 0a 	call	0x1552	; 0x1552 <__muluhisi3>
    1572:	82 1b       	sub	r24, r18
    1574:	93 0b       	sbc	r25, r19
    1576:	08 95       	ret

00001578 <__prologue_saves__>:
    1578:	2f 92       	push	r2
    157a:	3f 92       	push	r3
    157c:	4f 92       	push	r4
    157e:	5f 92       	push	r5
    1580:	6f 92       	push	r6
    1582:	7f 92       	push	r7
    1584:	8f 92       	push	r8
    1586:	9f 92       	push	r9
    1588:	af 92       	push	r10
    158a:	bf 92       	push	r11
    158c:	cf 92       	push	r12
    158e:	df 92       	push	r13
    1590:	ef 92       	push	r14
    1592:	ff 92       	push	r15
    1594:	0f 93       	push	r16
    1596:	1f 93       	push	r17
    1598:	cf 93       	push	r28
    159a:	df 93       	push	r29
    159c:	cd b7       	in	r28, 0x3d	; 61
    159e:	de b7       	in	r29, 0x3e	; 62
    15a0:	ca 1b       	sub	r28, r26
    15a2:	db 0b       	sbc	r29, r27
    15a4:	0f b6       	in	r0, 0x3f	; 63
    15a6:	f8 94       	cli
    15a8:	de bf       	out	0x3e, r29	; 62
    15aa:	0f be       	out	0x3f, r0	; 63
    15ac:	cd bf       	out	0x3d, r28	; 61
    15ae:	09 94       	ijmp

000015b0 <__epilogue_restores__>:
    15b0:	2a 88       	ldd	r2, Y+18	; 0x12
    15b2:	39 88       	ldd	r3, Y+17	; 0x11
    15b4:	48 88       	ldd	r4, Y+16	; 0x10
    15b6:	5f 84       	ldd	r5, Y+15	; 0x0f
    15b8:	6e 84       	ldd	r6, Y+14	; 0x0e
    15ba:	7d 84       	ldd	r7, Y+13	; 0x0d
    15bc:	8c 84       	ldd	r8, Y+12	; 0x0c
    15be:	9b 84       	ldd	r9, Y+11	; 0x0b
    15c0:	aa 84       	ldd	r10, Y+10	; 0x0a
    15c2:	b9 84       	ldd	r11, Y+9	; 0x09
    15c4:	c8 84       	ldd	r12, Y+8	; 0x08
    15c6:	df 80       	ldd	r13, Y+7	; 0x07
    15c8:	ee 80       	ldd	r14, Y+6	; 0x06
    15ca:	fd 80       	ldd	r15, Y+5	; 0x05
    15cc:	0c 81       	ldd	r16, Y+4	; 0x04
    15ce:	1b 81       	ldd	r17, Y+3	; 0x03
    15d0:	aa 81       	ldd	r26, Y+2	; 0x02
    15d2:	b9 81       	ldd	r27, Y+1	; 0x01
    15d4:	ce 0f       	add	r28, r30
    15d6:	d1 1d       	adc	r29, r1
    15d8:	0f b6       	in	r0, 0x3f	; 63
    15da:	f8 94       	cli
    15dc:	de bf       	out	0x3e, r29	; 62
    15de:	0f be       	out	0x3f, r0	; 63
    15e0:	cd bf       	out	0x3d, r28	; 61
    15e2:	ed 01       	movw	r28, r26
    15e4:	08 95       	ret

000015e6 <__udivmodsi4>:
    15e6:	a1 e2       	ldi	r26, 0x21	; 33
    15e8:	1a 2e       	mov	r1, r26
    15ea:	aa 1b       	sub	r26, r26
    15ec:	bb 1b       	sub	r27, r27
    15ee:	fd 01       	movw	r30, r26
    15f0:	0d c0       	rjmp	.+26     	; 0x160c <__udivmodsi4_ep>

000015f2 <__udivmodsi4_loop>:
    15f2:	aa 1f       	adc	r26, r26
    15f4:	bb 1f       	adc	r27, r27
    15f6:	ee 1f       	adc	r30, r30
    15f8:	ff 1f       	adc	r31, r31
    15fa:	a2 17       	cp	r26, r18
    15fc:	b3 07       	cpc	r27, r19
    15fe:	e4 07       	cpc	r30, r20
    1600:	f5 07       	cpc	r31, r21
    1602:	20 f0       	brcs	.+8      	; 0x160c <__udivmodsi4_ep>
    1604:	a2 1b       	sub	r26, r18
    1606:	b3 0b       	sbc	r27, r19
    1608:	e4 0b       	sbc	r30, r20
    160a:	f5 0b       	sbc	r31, r21

0000160c <__udivmodsi4_ep>:
    160c:	66 1f       	adc	r22, r22
    160e:	77 1f       	adc	r23, r23
    1610:	88 1f       	adc	r24, r24
    1612:	99 1f       	adc	r25, r25
    1614:	1a 94       	dec	r1
    1616:	69 f7       	brne	.-38     	; 0x15f2 <__udivmodsi4_loop>
    1618:	60 95       	com	r22
    161a:	70 95       	com	r23
    161c:	80 95       	com	r24
    161e:	90 95       	com	r25
    1620:	9b 01       	movw	r18, r22
    1622:	ac 01       	movw	r20, r24
    1624:	bd 01       	movw	r22, r26
    1626:	cf 01       	movw	r24, r30
    1628:	08 95       	ret

0000162a <__umulhisi3>:
    162a:	a2 9f       	mul	r26, r18
    162c:	b0 01       	movw	r22, r0
    162e:	b3 9f       	mul	r27, r19
    1630:	c0 01       	movw	r24, r0
    1632:	a3 9f       	mul	r26, r19
    1634:	70 0d       	add	r23, r0
    1636:	81 1d       	adc	r24, r1
    1638:	11 24       	eor	r1, r1
    163a:	91 1d       	adc	r25, r1
    163c:	b2 9f       	mul	r27, r18
    163e:	70 0d       	add	r23, r0
    1640:	81 1d       	adc	r24, r1
    1642:	11 24       	eor	r1, r1
    1644:	91 1d       	adc	r25, r1
    1646:	08 95       	ret

00001648 <_exit>:
    1648:	f8 94       	cli

0000164a <__stop_program>:
    164a:	ff cf       	rjmp	.-2      	; 0x164a <__stop_program>
