
Ping_Pong_Shit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000354  00800100  00001bcc  00001c60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001bcc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800454  00800454  00001fb4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001fb4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002e0  00000000  00000000  00002010  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003221  00000000  00000000  000022f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000013bf  00000000  00000000  00005511  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001434  00000000  00000000  000068d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000078c  00000000  00000000  00007d04  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000083f  00000000  00000000  00008490  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000172c  00000000  00000000  00008ccf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000278  00000000  00000000  0000a3fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <oled_print_arrow+0x22>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	14 e0       	ldi	r17, 0x04	; 4
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	ec ec       	ldi	r30, 0xCC	; 204
     37c:	fb e1       	ldi	r31, 0x1B	; 27
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a4 35       	cpi	r26, 0x54	; 84
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	24 e0       	ldi	r18, 0x04	; 4
     38c:	a4 e5       	ldi	r26, 0x54	; 84
     38e:	b4 e0       	ldi	r27, 0x04	; 4
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a5 36       	cpi	r26, 0x65	; 101
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 18 07 	call	0xe30	; 0xe30 <main>
     39e:	0c 94 e4 0d 	jmp	0x1bc8	; 0x1bc8 <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <can_init>:
#include "mcp2515_driver.h"

#include <stdio.h>

void can_init(){
	mcp2515_init();
     3a6:	0e 94 2b 04 	call	0x856	; 0x856 <mcp2515_init>
	
	//Turn off filters for RXB0, disable rollover
	mcp2515_bit_modify(MCP_RXB0CTRL, MCP_FILTER_MASK, 0xff);
     3aa:	4f ef       	ldi	r20, 0xFF	; 255
     3ac:	60 e6       	ldi	r22, 0x60	; 96
     3ae:	80 e6       	ldi	r24, 0x60	; 96
     3b0:	0e 94 f7 03 	call	0x7ee	; 0x7ee <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_RXB0CTRL, MCP_ROLLOVER_MASK, 0x00);
     3b4:	40 e0       	ldi	r20, 0x00	; 0
     3b6:	64 e0       	ldi	r22, 0x04	; 4
     3b8:	80 e6       	ldi	r24, 0x60	; 96
     3ba:	0e 94 f7 03 	call	0x7ee	; 0x7ee <mcp2515_bit_modify>

	mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
     3be:	40 e0       	ldi	r20, 0x00	; 0
     3c0:	60 ee       	ldi	r22, 0xE0	; 224
     3c2:	8f e0       	ldi	r24, 0x0F	; 15
     3c4:	0e 94 f7 03 	call	0x7ee	; 0x7ee <mcp2515_bit_modify>
	//mcp2515_bit_modify()
	
	//Turn on interrupt for RX0
	mcp2515_bit_modify(MCP_CANINTE, MCP_RX0IE_MASK, 0xff);
     3c8:	4f ef       	ldi	r20, 0xFF	; 255
     3ca:	61 e0       	ldi	r22, 0x01	; 1
     3cc:	8b e2       	ldi	r24, 0x2B	; 43
     3ce:	0e 94 f7 03 	call	0x7ee	; 0x7ee <mcp2515_bit_modify>
     3d2:	08 95       	ret

000003d4 <can_send>:

	
}

void can_send(can_message_t message){
     3d4:	cf 92       	push	r12
     3d6:	df 92       	push	r13
     3d8:	ef 92       	push	r14
     3da:	ff 92       	push	r15
     3dc:	0f 93       	push	r16
     3de:	1f 93       	push	r17
     3e0:	cf 93       	push	r28
     3e2:	df 93       	push	r29
     3e4:	cd b7       	in	r28, 0x3d	; 61
     3e6:	de b7       	in	r29, 0x3e	; 62
     3e8:	2a 97       	sbiw	r28, 0x0a	; 10
     3ea:	0f b6       	in	r0, 0x3f	; 63
     3ec:	f8 94       	cli
     3ee:	de bf       	out	0x3e, r29	; 62
     3f0:	0f be       	out	0x3f, r0	; 63
     3f2:	cd bf       	out	0x3d, r28	; 61
     3f4:	09 83       	std	Y+1, r16	; 0x01
     3f6:	c1 2e       	mov	r12, r17
     3f8:	1a 83       	std	Y+2, r17	; 0x02
     3fa:	2b 83       	std	Y+3, r18	; 0x03
     3fc:	3c 83       	std	Y+4, r19	; 0x04
     3fe:	4d 83       	std	Y+5, r20	; 0x05
     400:	5e 83       	std	Y+6, r21	; 0x06
     402:	6f 83       	std	Y+7, r22	; 0x07
     404:	78 87       	std	Y+8, r23	; 0x08
     406:	89 87       	std	Y+9, r24	; 0x09
     408:	9a 87       	std	Y+10, r25	; 0x0a
	while(mcp2515_read(MCP_TXB0CTRL) & 0b00001000) {;}
     40a:	80 e3       	ldi	r24, 0x30	; 48
     40c:	0e 94 19 04 	call	0x832	; 0x832 <mcp2515_read>
     410:	83 fd       	sbrc	r24, 3
     412:	fb cf       	rjmp	.-10     	; 0x40a <can_send+0x36>

	mcp2515_write(message.id >> 3,  MCP_TXB0SIDH);
     414:	61 e3       	ldi	r22, 0x31	; 49
     416:	80 2f       	mov	r24, r16
     418:	86 95       	lsr	r24
     41a:	86 95       	lsr	r24
     41c:	86 95       	lsr	r24
     41e:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <mcp2515_write>
	mcp2515_write(message.id << 5,  MCP_TXB0SIDL);
     422:	62 e3       	ldi	r22, 0x32	; 50
     424:	80 2f       	mov	r24, r16
     426:	82 95       	swap	r24
     428:	88 0f       	add	r24, r24
     42a:	80 7e       	andi	r24, 0xE0	; 224
     42c:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <mcp2515_write>
	mcp2515_write(message.length,   MCP_TXB0DLC);
     430:	65 e3       	ldi	r22, 0x35	; 53
     432:	8c 2d       	mov	r24, r12
     434:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <mcp2515_write>

	for(int i = 0; i < message.length; i++){
     438:	d1 2c       	mov	r13, r1
     43a:	1c 14       	cp	r1, r12
     43c:	1d 04       	cpc	r1, r13
     43e:	94 f4       	brge	.+36     	; 0x464 <can_send+0x90>
     440:	7e 01       	movw	r14, r28
     442:	83 e0       	ldi	r24, 0x03	; 3
     444:	e8 0e       	add	r14, r24
     446:	f1 1c       	adc	r15, r1
     448:	00 e0       	ldi	r16, 0x00	; 0
     44a:	10 e0       	ldi	r17, 0x00	; 0
     44c:	66 e3       	ldi	r22, 0x36	; 54
     44e:	60 0f       	add	r22, r16
		mcp2515_write(message.data[i], MCP_TXB0D0 + i);
     450:	f7 01       	movw	r30, r14
     452:	81 91       	ld	r24, Z+
     454:	7f 01       	movw	r14, r30
     456:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <mcp2515_write>

	mcp2515_write(message.id >> 3,  MCP_TXB0SIDH);
	mcp2515_write(message.id << 5,  MCP_TXB0SIDL);
	mcp2515_write(message.length,   MCP_TXB0DLC);

	for(int i = 0; i < message.length; i++){
     45a:	0f 5f       	subi	r16, 0xFF	; 255
     45c:	1f 4f       	sbci	r17, 0xFF	; 255
     45e:	0c 15       	cp	r16, r12
     460:	1d 05       	cpc	r17, r13
     462:	a4 f3       	brlt	.-24     	; 0x44c <can_send+0x78>
		mcp2515_write(message.data[i], MCP_TXB0D0 + i);
	}

	mcp2515_request_to_send(MCP_TXB0D0);
     464:	86 e3       	ldi	r24, 0x36	; 54
     466:	0e 94 e7 03 	call	0x7ce	; 0x7ce <mcp2515_request_to_send>
}
     46a:	2a 96       	adiw	r28, 0x0a	; 10
     46c:	0f b6       	in	r0, 0x3f	; 63
     46e:	f8 94       	cli
     470:	de bf       	out	0x3e, r29	; 62
     472:	0f be       	out	0x3f, r0	; 63
     474:	cd bf       	out	0x3d, r28	; 61
     476:	df 91       	pop	r29
     478:	cf 91       	pop	r28
     47a:	1f 91       	pop	r17
     47c:	0f 91       	pop	r16
     47e:	ff 90       	pop	r15
     480:	ef 90       	pop	r14
     482:	df 90       	pop	r13
     484:	cf 90       	pop	r12
     486:	08 95       	ret

00000488 <can_receive>:

can_message_t can_receive(){
     488:	cf 92       	push	r12
     48a:	df 92       	push	r13
     48c:	ef 92       	push	r14
     48e:	ff 92       	push	r15
     490:	0f 93       	push	r16
     492:	1f 93       	push	r17
     494:	cf 93       	push	r28
     496:	df 93       	push	r29
     498:	cd b7       	in	r28, 0x3d	; 61
     49a:	de b7       	in	r29, 0x3e	; 62
     49c:	2a 97       	sbiw	r28, 0x0a	; 10
     49e:	0f b6       	in	r0, 0x3f	; 63
     4a0:	f8 94       	cli
     4a2:	de bf       	out	0x3e, r29	; 62
     4a4:	0f be       	out	0x3f, r0	; 63
     4a6:	cd bf       	out	0x3d, r28	; 61
     4a8:	6c 01       	movw	r12, r24
	can_message_t message;

	memset(&message, 0, sizeof(can_message_t));
     4aa:	fe 01       	movw	r30, r28
     4ac:	31 96       	adiw	r30, 0x01	; 1
     4ae:	8a e0       	ldi	r24, 0x0A	; 10
     4b0:	df 01       	movw	r26, r30
     4b2:	1d 92       	st	X+, r1
     4b4:	8a 95       	dec	r24
     4b6:	e9 f7       	brne	.-6      	; 0x4b2 <can_receive+0x2a>

	if (mcp2515_read(MCP_CANINTF) & 0x01) {
     4b8:	8c e2       	ldi	r24, 0x2C	; 44
     4ba:	0e 94 19 04 	call	0x832	; 0x832 <mcp2515_read>
     4be:	80 ff       	sbrs	r24, 0
     4c0:	2b c0       	rjmp	.+86     	; 0x518 <__stack+0x19>
		message.id      = (mcp2515_read(MCP_RXB0SIDH) << 3) | (mcp2515_read(MCP_RXB0SIDL) >> 5);
     4c2:	81 e6       	ldi	r24, 0x61	; 97
     4c4:	0e 94 19 04 	call	0x832	; 0x832 <mcp2515_read>
     4c8:	18 2f       	mov	r17, r24
     4ca:	82 e6       	ldi	r24, 0x62	; 98
     4cc:	0e 94 19 04 	call	0x832	; 0x832 <mcp2515_read>
     4d0:	11 0f       	add	r17, r17
     4d2:	11 0f       	add	r17, r17
     4d4:	11 0f       	add	r17, r17
     4d6:	82 95       	swap	r24
     4d8:	86 95       	lsr	r24
     4da:	87 70       	andi	r24, 0x07	; 7
     4dc:	18 2b       	or	r17, r24
     4de:	19 83       	std	Y+1, r17	; 0x01
		message.length  = (mcp2515_read(MCP_RXB0DLC)) & (0x0f);
     4e0:	85 e6       	ldi	r24, 0x65	; 101
     4e2:	0e 94 19 04 	call	0x832	; 0x832 <mcp2515_read>
     4e6:	8f 70       	andi	r24, 0x0F	; 15
     4e8:	8a 83       	std	Y+2, r24	; 0x02
		for(int i = 0; i < message.length; i++){
     4ea:	88 23       	and	r24, r24
     4ec:	b9 f0       	breq	.+46     	; 0x51c <__stack+0x1d>
     4ee:	7e 01       	movw	r14, r28
     4f0:	b3 e0       	ldi	r27, 0x03	; 3
     4f2:	eb 0e       	add	r14, r27
     4f4:	f1 1c       	adc	r15, r1
     4f6:	00 e0       	ldi	r16, 0x00	; 0
     4f8:	10 e0       	ldi	r17, 0x00	; 0
			message.data[i] = mcp2515_read(MCP_RXB0D0 + i);
     4fa:	86 e6       	ldi	r24, 0x66	; 102
     4fc:	80 0f       	add	r24, r16
     4fe:	0e 94 19 04 	call	0x832	; 0x832 <mcp2515_read>
     502:	f7 01       	movw	r30, r14
     504:	81 93       	st	Z+, r24
     506:	7f 01       	movw	r14, r30
	memset(&message, 0, sizeof(can_message_t));

	if (mcp2515_read(MCP_CANINTF) & 0x01) {
		message.id      = (mcp2515_read(MCP_RXB0SIDH) << 3) | (mcp2515_read(MCP_RXB0SIDL) >> 5);
		message.length  = (mcp2515_read(MCP_RXB0DLC)) & (0x0f);
		for(int i = 0; i < message.length; i++){
     508:	0f 5f       	subi	r16, 0xFF	; 255
     50a:	1f 4f       	sbci	r17, 0xFF	; 255
     50c:	2a 81       	ldd	r18, Y+2	; 0x02
     50e:	30 e0       	ldi	r19, 0x00	; 0
     510:	02 17       	cp	r16, r18
     512:	13 07       	cpc	r17, r19
     514:	94 f3       	brlt	.-28     	; 0x4fa <can_receive+0x72>
     516:	02 c0       	rjmp	.+4      	; 0x51c <__stack+0x1d>
			message.data[i] = mcp2515_read(MCP_RXB0D0 + i);
		}
	} else {
		message.id = - 1;
     518:	8f ef       	ldi	r24, 0xFF	; 255
     51a:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return message;
     51c:	8a e0       	ldi	r24, 0x0A	; 10
     51e:	fe 01       	movw	r30, r28
     520:	31 96       	adiw	r30, 0x01	; 1
     522:	d6 01       	movw	r26, r12
     524:	01 90       	ld	r0, Z+
     526:	0d 92       	st	X+, r0
     528:	8a 95       	dec	r24
     52a:	e1 f7       	brne	.-8      	; 0x524 <__stack+0x25>
}
     52c:	c6 01       	movw	r24, r12
     52e:	2a 96       	adiw	r28, 0x0a	; 10
     530:	0f b6       	in	r0, 0x3f	; 63
     532:	f8 94       	cli
     534:	de bf       	out	0x3e, r29	; 62
     536:	0f be       	out	0x3f, r0	; 63
     538:	cd bf       	out	0x3d, r28	; 61
     53a:	df 91       	pop	r29
     53c:	cf 91       	pop	r28
     53e:	1f 91       	pop	r17
     540:	0f 91       	pop	r16
     542:	ff 90       	pop	r15
     544:	ef 90       	pop	r14
     546:	df 90       	pop	r13
     548:	cf 90       	pop	r12
     54a:	08 95       	ret

0000054c <can_print_message>:

void can_print_message(can_message_t message){
     54c:	cf 92       	push	r12
     54e:	df 92       	push	r13
     550:	ef 92       	push	r14
     552:	ff 92       	push	r15
     554:	0f 93       	push	r16
     556:	1f 93       	push	r17
     558:	cf 93       	push	r28
     55a:	df 93       	push	r29
     55c:	cd b7       	in	r28, 0x3d	; 61
     55e:	de b7       	in	r29, 0x3e	; 62
     560:	2a 97       	sbiw	r28, 0x0a	; 10
     562:	0f b6       	in	r0, 0x3f	; 63
     564:	f8 94       	cli
     566:	de bf       	out	0x3e, r29	; 62
     568:	0f be       	out	0x3f, r0	; 63
     56a:	cd bf       	out	0x3d, r28	; 61
     56c:	09 83       	std	Y+1, r16	; 0x01
     56e:	1a 83       	std	Y+2, r17	; 0x02
     570:	2b 83       	std	Y+3, r18	; 0x03
     572:	3c 83       	std	Y+4, r19	; 0x04
     574:	4d 83       	std	Y+5, r20	; 0x05
     576:	5e 83       	std	Y+6, r21	; 0x06
     578:	6f 83       	std	Y+7, r22	; 0x07
     57a:	78 87       	std	Y+8, r23	; 0x08
     57c:	89 87       	std	Y+9, r24	; 0x09
     57e:	9a 87       	std	Y+10, r25	; 0x0a
	printf("Message (id: %d, lenght: %d, data = [", message.id, message.length);
     580:	1f 92       	push	r1
     582:	1f 93       	push	r17
     584:	89 81       	ldd	r24, Y+1	; 0x01
     586:	1f 92       	push	r1
     588:	8f 93       	push	r24
     58a:	8c e2       	ldi	r24, 0x2C	; 44
     58c:	91 e0       	ldi	r25, 0x01	; 1
     58e:	9f 93       	push	r25
     590:	8f 93       	push	r24
     592:	0e 94 91 0a 	call	0x1522	; 0x1522 <printf>
     596:	8e 01       	movw	r16, r28
     598:	0d 5f       	subi	r16, 0xFD	; 253
     59a:	1f 4f       	sbci	r17, 0xFF	; 255
     59c:	6e 01       	movw	r12, r28
     59e:	8b e0       	ldi	r24, 0x0B	; 11
     5a0:	c8 0e       	add	r12, r24
     5a2:	d1 1c       	adc	r13, r1
     5a4:	0f 90       	pop	r0
     5a6:	0f 90       	pop	r0
     5a8:	0f 90       	pop	r0
     5aa:	0f 90       	pop	r0
     5ac:	0f 90       	pop	r0
     5ae:	0f 90       	pop	r0
	for(uint8_t i = 0; i < 8; i++){
		printf("%d ", message.data[i]);
     5b0:	0f 2e       	mov	r0, r31
     5b2:	f2 e5       	ldi	r31, 0x52	; 82
     5b4:	ef 2e       	mov	r14, r31
     5b6:	f1 e0       	ldi	r31, 0x01	; 1
     5b8:	ff 2e       	mov	r15, r31
     5ba:	f0 2d       	mov	r31, r0
     5bc:	f8 01       	movw	r30, r16
     5be:	81 91       	ld	r24, Z+
     5c0:	8f 01       	movw	r16, r30
     5c2:	1f 92       	push	r1
     5c4:	8f 93       	push	r24
     5c6:	ff 92       	push	r15
     5c8:	ef 92       	push	r14
     5ca:	0e 94 91 0a 	call	0x1522	; 0x1522 <printf>
	return message;
}

void can_print_message(can_message_t message){
	printf("Message (id: %d, lenght: %d, data = [", message.id, message.length);
	for(uint8_t i = 0; i < 8; i++){
     5ce:	0f 90       	pop	r0
     5d0:	0f 90       	pop	r0
     5d2:	0f 90       	pop	r0
     5d4:	0f 90       	pop	r0
     5d6:	0c 15       	cp	r16, r12
     5d8:	1d 05       	cpc	r17, r13
     5da:	81 f7       	brne	.-32     	; 0x5bc <can_print_message+0x70>
		printf("%d ", message.data[i]);
	}
	printf("]\n");
     5dc:	86 e5       	ldi	r24, 0x56	; 86
     5de:	91 e0       	ldi	r25, 0x01	; 1
     5e0:	0e 94 a5 0a 	call	0x154a	; 0x154a <puts>
}
     5e4:	2a 96       	adiw	r28, 0x0a	; 10
     5e6:	0f b6       	in	r0, 0x3f	; 63
     5e8:	f8 94       	cli
     5ea:	de bf       	out	0x3e, r29	; 62
     5ec:	0f be       	out	0x3f, r0	; 63
     5ee:	cd bf       	out	0x3d, r28	; 61
     5f0:	df 91       	pop	r29
     5f2:	cf 91       	pop	r28
     5f4:	1f 91       	pop	r17
     5f6:	0f 91       	pop	r16
     5f8:	ff 90       	pop	r15
     5fa:	ef 90       	pop	r14
     5fc:	df 90       	pop	r13
     5fe:	cf 90       	pop	r12
     600:	08 95       	ret

00000602 <can_test_loopback>:


#include "can_driver.h"
#include "mcp2515_driver.h"

void can_test_loopback(){
     602:	cf 93       	push	r28
     604:	df 93       	push	r29
     606:	cd b7       	in	r28, 0x3d	; 61
     608:	de b7       	in	r29, 0x3e	; 62
     60a:	64 97       	sbiw	r28, 0x14	; 20
     60c:	0f b6       	in	r0, 0x3f	; 63
     60e:	f8 94       	cli
     610:	de bf       	out	0x3e, r29	; 62
     612:	0f be       	out	0x3f, r0	; 63
     614:	cd bf       	out	0x3d, r28	; 61
	mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_LOOPBACK);
     616:	40 e4       	ldi	r20, 0x40	; 64
     618:	60 ee       	ldi	r22, 0xE0	; 224
     61a:	8f e0       	ldi	r24, 0x0F	; 15
     61c:	0e 94 f7 03 	call	0x7ee	; 0x7ee <mcp2515_bit_modify>

	printf("MCP_CANCTRL: 0x%02x (should be 0x47)\n", mcp2515_read(MCP_CANCTRL));
     620:	8f e0       	ldi	r24, 0x0F	; 15
     622:	0e 94 19 04 	call	0x832	; 0x832 <mcp2515_read>
     626:	1f 92       	push	r1
     628:	8f 93       	push	r24
     62a:	88 e5       	ldi	r24, 0x58	; 88
     62c:	91 e0       	ldi	r25, 0x01	; 1
     62e:	9f 93       	push	r25
     630:	8f 93       	push	r24
     632:	0e 94 91 0a 	call	0x1522	; 0x1522 <printf>
	printf("MCP_CANSTAT: 0x%02x (should be 0x40)\n", mcp2515_read(MCP_CANSTAT));
     636:	8e e0       	ldi	r24, 0x0E	; 14
     638:	0e 94 19 04 	call	0x832	; 0x832 <mcp2515_read>
     63c:	1f 92       	push	r1
     63e:	8f 93       	push	r24
     640:	8e e7       	ldi	r24, 0x7E	; 126
     642:	91 e0       	ldi	r25, 0x01	; 1
     644:	9f 93       	push	r25
     646:	8f 93       	push	r24
     648:	0e 94 91 0a 	call	0x1522	; 0x1522 <printf>

	can_message_t message_1;
	can_message_t message_2;
	message_1.id = 1;
     64c:	81 e0       	ldi	r24, 0x01	; 1
     64e:	89 83       	std	Y+1, r24	; 0x01
     650:	fe 01       	movw	r30, r28
     652:	33 96       	adiw	r30, 0x03	; 3
     654:	0f b6       	in	r0, 0x3f	; 63
     656:	f8 94       	cli
     658:	de bf       	out	0x3e, r29	; 62
     65a:	0f be       	out	0x3f, r0	; 63
     65c:	cd bf       	out	0x3d, r28	; 61
	message_1.length = 8;
	for(uint8_t i = 0; i < message_1.length; i++){
     65e:	80 e0       	ldi	r24, 0x00	; 0
		message_1.data[i] = i;
     660:	81 93       	st	Z+, r24

	can_message_t message_1;
	can_message_t message_2;
	message_1.id = 1;
	message_1.length = 8;
	for(uint8_t i = 0; i < message_1.length; i++){
     662:	8f 5f       	subi	r24, 0xFF	; 255
     664:	88 30       	cpi	r24, 0x08	; 8
     666:	e1 f7       	brne	.-8      	; 0x660 <can_test_loopback+0x5e>
		message_1.data[i] = i;
	}

	while(1){
		can_send(message_1);
     668:	68 94       	set
     66a:	ff 24       	eor	r15, r15
     66c:	f3 f8       	bld	r15, 3
     66e:	fa 82       	std	Y+2, r15	; 0x02
     670:	09 81       	ldd	r16, Y+1	; 0x01
     672:	1f 2d       	mov	r17, r15
     674:	2b 81       	ldd	r18, Y+3	; 0x03
     676:	3c 81       	ldd	r19, Y+4	; 0x04
     678:	4d 81       	ldd	r20, Y+5	; 0x05
     67a:	5e 81       	ldd	r21, Y+6	; 0x06
     67c:	6f 81       	ldd	r22, Y+7	; 0x07
     67e:	78 85       	ldd	r23, Y+8	; 0x08
     680:	89 85       	ldd	r24, Y+9	; 0x09
     682:	9a 85       	ldd	r25, Y+10	; 0x0a
     684:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <can_send>
		can_print_message(message_1);
     688:	09 81       	ldd	r16, Y+1	; 0x01
     68a:	1a 81       	ldd	r17, Y+2	; 0x02
     68c:	2b 81       	ldd	r18, Y+3	; 0x03
     68e:	3c 81       	ldd	r19, Y+4	; 0x04
     690:	4d 81       	ldd	r20, Y+5	; 0x05
     692:	5e 81       	ldd	r21, Y+6	; 0x06
     694:	6f 81       	ldd	r22, Y+7	; 0x07
     696:	78 85       	ldd	r23, Y+8	; 0x08
     698:	89 85       	ldd	r24, Y+9	; 0x09
     69a:	9a 85       	ldd	r25, Y+10	; 0x0a
     69c:	0e 94 a6 02 	call	0x54c	; 0x54c <can_print_message>

		message_2 = can_receive();
     6a0:	ce 01       	movw	r24, r28
     6a2:	0b 96       	adiw	r24, 0x0b	; 11
     6a4:	0e 94 44 02 	call	0x488	; 0x488 <can_receive>

		can_print_message(message_2);
     6a8:	0b 85       	ldd	r16, Y+11	; 0x0b
     6aa:	1c 85       	ldd	r17, Y+12	; 0x0c
     6ac:	2d 85       	ldd	r18, Y+13	; 0x0d
     6ae:	3e 85       	ldd	r19, Y+14	; 0x0e
     6b0:	4f 85       	ldd	r20, Y+15	; 0x0f
     6b2:	58 89       	ldd	r21, Y+16	; 0x10
     6b4:	69 89       	ldd	r22, Y+17	; 0x11
     6b6:	7a 89       	ldd	r23, Y+18	; 0x12
     6b8:	8b 89       	ldd	r24, Y+19	; 0x13
     6ba:	9c 89       	ldd	r25, Y+20	; 0x14
     6bc:	0e 94 a6 02 	call	0x54c	; 0x54c <can_print_message>
		message_1.data[0]++;
     6c0:	8b 81       	ldd	r24, Y+3	; 0x03
     6c2:	8f 5f       	subi	r24, 0xFF	; 255
     6c4:	8b 83       	std	Y+3, r24	; 0x03
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6c6:	9f ef       	ldi	r25, 0xFF	; 255
     6c8:	2f e7       	ldi	r18, 0x7F	; 127
     6ca:	8d e0       	ldi	r24, 0x0D	; 13
     6cc:	91 50       	subi	r25, 0x01	; 1
     6ce:	20 40       	sbci	r18, 0x00	; 0
     6d0:	80 40       	sbci	r24, 0x00	; 0
     6d2:	e1 f7       	brne	.-8      	; 0x6cc <can_test_loopback+0xca>
     6d4:	00 c0       	rjmp	.+0      	; 0x6d6 <can_test_loopback+0xd4>
     6d6:	00 00       	nop
     6d8:	ca cf       	rjmp	.-108    	; 0x66e <can_test_loopback+0x6c>

000006da <joystick_read>:
			 v;
}

unsigned int joystick_read(joy_channel channel){
	volatile char* ext_ram = (char*) 0x1400;
	ext_ram[0] = 0x4 + channel;
     6da:	8c 5f       	subi	r24, 0xFC	; 252
     6dc:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6e0:	81 e4       	ldi	r24, 0x41	; 65
     6e2:	8a 95       	dec	r24
     6e4:	f1 f7       	brne	.-4      	; 0x6e2 <joystick_read+0x8>
     6e6:	00 c0       	rjmp	.+0      	; 0x6e8 <joystick_read+0xe>
	_delay_us(40);
	//sleep_enable();
	return (uint8_t) ext_ram[0];
     6e8:	80 91 00 14 	lds	r24, 0x1400
}
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	08 95       	ret

000006f0 <joystick_init>:
	/*EMCUCR |= (0 << SM0);
	MCUCSR |= (1 << SM1);
	MCUCSR |= (0 << SM2);
	GICR |= (1 << INT0);
	sei();*/
	center_val_X = joystick_read(JOYSTICK_X);
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	0e 94 6d 03 	call	0x6da	; 0x6da <joystick_read>
     6f6:	90 93 56 04 	sts	0x0456, r25
     6fa:	80 93 55 04 	sts	0x0455, r24
	center_val_Y = joystick_read(JOYSTICK_Y);
     6fe:	81 e0       	ldi	r24, 0x01	; 1
     700:	0e 94 6d 03 	call	0x6da	; 0x6da <joystick_read>
     704:	90 93 58 04 	sts	0x0458, r25
     708:	80 93 57 04 	sts	0x0457, r24
     70c:	08 95       	ret

0000070e <read_converted>:
}

signed int read_converted(joy_channel channel){
     70e:	cf 93       	push	r28
     710:	c8 2f       	mov	r28, r24

	int v = (joystick_read(channel));
     712:	0e 94 6d 03 	call	0x6da	; 0x6da <joystick_read>

	if      (channel == JOYSTICK_X)  {v -= center_val_X;}
     716:	c1 11       	cpse	r28, r1
     718:	07 c0       	rjmp	.+14     	; 0x728 <read_converted+0x1a>
     71a:	20 91 55 04 	lds	r18, 0x0455
     71e:	30 91 56 04 	lds	r19, 0x0456
     722:	82 1b       	sub	r24, r18
     724:	93 0b       	sbc	r25, r19
     726:	08 c0       	rjmp	.+16     	; 0x738 <read_converted+0x2a>
	else if (channel == JOYSTICK_Y)  {v -= center_val_Y;}
     728:	c1 30       	cpi	r28, 0x01	; 1
     72a:	31 f4       	brne	.+12     	; 0x738 <read_converted+0x2a>
     72c:	20 91 57 04 	lds	r18, 0x0457
     730:	30 91 58 04 	lds	r19, 0x0458
     734:	82 1b       	sub	r24, r18
     736:	93 0b       	sbc	r25, r19

	return  (v > 127)	? 127 :
     738:	80 38       	cpi	r24, 0x80	; 128
     73a:	2f ef       	ldi	r18, 0xFF	; 255
     73c:	92 07       	cpc	r25, r18
     73e:	14 f4       	brge	.+4      	; 0x744 <read_converted+0x36>
     740:	80 e8       	ldi	r24, 0x80	; 128
     742:	9f ef       	ldi	r25, 0xFF	; 255
     744:	80 38       	cpi	r24, 0x80	; 128
     746:	91 05       	cpc	r25, r1
     748:	14 f0       	brlt	.+4      	; 0x74e <read_converted+0x40>
     74a:	8f e7       	ldi	r24, 0x7F	; 127
     74c:	90 e0       	ldi	r25, 0x00	; 0
			(v < -128)	? -128 :
			 v;
}
     74e:	cf 91       	pop	r28
     750:	08 95       	ret

00000752 <joystick_direction_Y>:
	//sleep_enable();
	return (uint8_t) ext_ram[0];
}

signed int joystick_direction_Y(){
	signed int joy_Y = read_converted(JOYSTICK_Y);
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	0e 94 87 03 	call	0x70e	; 0x70e <read_converted>
	if(joy_Y >= 100){
     758:	84 36       	cpi	r24, 0x64	; 100
     75a:	91 05       	cpc	r25, r1
     75c:	64 f4       	brge	.+24     	; 0x776 <joystick_direction_Y+0x24>
		return 1;
	} else if (joy_Y <= -100) {
     75e:	21 e0       	ldi	r18, 0x01	; 1
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	8d 39       	cpi	r24, 0x9D	; 157
     764:	9f 4f       	sbci	r25, 0xFF	; 255
     766:	14 f0       	brlt	.+4      	; 0x76c <joystick_direction_Y+0x1a>
     768:	20 e0       	ldi	r18, 0x00	; 0
     76a:	30 e0       	ldi	r19, 0x00	; 0
     76c:	88 27       	eor	r24, r24
     76e:	99 27       	eor	r25, r25
     770:	82 1b       	sub	r24, r18
     772:	93 0b       	sbc	r25, r19
     774:	08 95       	ret
}

signed int joystick_direction_Y(){
	signed int joy_Y = read_converted(JOYSTICK_Y);
	if(joy_Y >= 100){
		return 1;
     776:	81 e0       	ldi	r24, 0x01	; 1
     778:	90 e0       	ldi	r25, 0x00	; 0
	} else if (joy_Y <= -100) {
		return -1;
	} 
	return 0;
}
     77a:	08 95       	ret

0000077c <joystick_direction_X>:

signed int joystick_direction_X(){
	signed int joy_X = read_converted(JOYSTICK_X);
     77c:	80 e0       	ldi	r24, 0x00	; 0
     77e:	0e 94 87 03 	call	0x70e	; 0x70e <read_converted>
	if(joy_X >= 100){
     782:	84 36       	cpi	r24, 0x64	; 100
     784:	91 05       	cpc	r25, r1
     786:	64 f4       	brge	.+24     	; 0x7a0 <joystick_direction_X+0x24>
		return 1;
	} else if (joy_X <= -100) {
     788:	21 e0       	ldi	r18, 0x01	; 1
     78a:	30 e0       	ldi	r19, 0x00	; 0
     78c:	8d 39       	cpi	r24, 0x9D	; 157
     78e:	9f 4f       	sbci	r25, 0xFF	; 255
     790:	14 f0       	brlt	.+4      	; 0x796 <joystick_direction_X+0x1a>
     792:	20 e0       	ldi	r18, 0x00	; 0
     794:	30 e0       	ldi	r19, 0x00	; 0
     796:	88 27       	eor	r24, r24
     798:	99 27       	eor	r25, r25
     79a:	82 1b       	sub	r24, r18
     79c:	93 0b       	sbc	r25, r19
     79e:	08 95       	ret
}

signed int joystick_direction_X(){
	signed int joy_X = read_converted(JOYSTICK_X);
	if(joy_X >= 100){
		return 1;
     7a0:	81 e0       	ldi	r24, 0x01	; 1
     7a2:	90 e0       	ldi	r25, 0x00	; 0
	} else if (joy_X <= -100) {
		return -1;
	}
	return 0;
}
     7a4:	08 95       	ret

000007a6 <mcp2515_write>:
		mcp2515_reset();
		_delay_ms(1000);
	}
}

void mcp2515_write(uint8_t address, uint8_t data){
     7a6:	cf 93       	push	r28
     7a8:	df 93       	push	r29
     7aa:	d8 2f       	mov	r29, r24
     7ac:	c6 2f       	mov	r28, r22
	spi_select();
     7ae:	0e 94 1f 06 	call	0xc3e	; 0xc3e <spi_select>

	spi_send(MCP_WRITE);
     7b2:	82 e0       	ldi	r24, 0x02	; 2
     7b4:	0e 94 14 06 	call	0xc28	; 0xc28 <spi_send>
	spi_send(address);
     7b8:	8d 2f       	mov	r24, r29
     7ba:	0e 94 14 06 	call	0xc28	; 0xc28 <spi_send>
	spi_send(data);
     7be:	8c 2f       	mov	r24, r28
     7c0:	0e 94 14 06 	call	0xc28	; 0xc28 <spi_send>

	spi_deselect();
     7c4:	0e 94 21 06 	call	0xc42	; 0xc42 <spi_deselect>
}
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	08 95       	ret

000007ce <mcp2515_request_to_send>:

void mcp2515_request_to_send(uint8_t command){
     7ce:	cf 93       	push	r28
	//Check last 3 bits of given command
	if (command <= 7) {
     7d0:	88 30       	cpi	r24, 0x08	; 8
     7d2:	18 f4       	brcc	.+6      	; 0x7da <mcp2515_request_to_send+0xc>
		command = MCP_RTS | command;
     7d4:	c8 2f       	mov	r28, r24
     7d6:	c0 68       	ori	r28, 0x80	; 128
     7d8:	01 c0       	rjmp	.+2      	; 0x7dc <mcp2515_request_to_send+0xe>
	} else {
		command = MCP_RTS;
     7da:	c0 e8       	ldi	r28, 0x80	; 128
	}

	//Select, send RTS command, then deselect
	spi_select();
     7dc:	0e 94 1f 06 	call	0xc3e	; 0xc3e <spi_select>
	spi_send(command);
     7e0:	8c 2f       	mov	r24, r28
     7e2:	0e 94 14 06 	call	0xc28	; 0xc28 <spi_send>
	spi_deselect();
     7e6:	0e 94 21 06 	call	0xc42	; 0xc42 <spi_deselect>
}
     7ea:	cf 91       	pop	r28
     7ec:	08 95       	ret

000007ee <mcp2515_bit_modify>:

void mcp2515_bit_modify(uint8_t address, uint8_t mask, uint8_t data){
     7ee:	1f 93       	push	r17
     7f0:	cf 93       	push	r28
     7f2:	df 93       	push	r29
     7f4:	18 2f       	mov	r17, r24
     7f6:	d6 2f       	mov	r29, r22
     7f8:	c4 2f       	mov	r28, r20
	spi_select();
     7fa:	0e 94 1f 06 	call	0xc3e	; 0xc3e <spi_select>

	spi_send(MCP_BITMOD);
     7fe:	85 e0       	ldi	r24, 0x05	; 5
     800:	0e 94 14 06 	call	0xc28	; 0xc28 <spi_send>
	spi_send(address);
     804:	81 2f       	mov	r24, r17
     806:	0e 94 14 06 	call	0xc28	; 0xc28 <spi_send>
	spi_send(mask);
     80a:	8d 2f       	mov	r24, r29
     80c:	0e 94 14 06 	call	0xc28	; 0xc28 <spi_send>
	spi_send(data);
     810:	8c 2f       	mov	r24, r28
     812:	0e 94 14 06 	call	0xc28	; 0xc28 <spi_send>

	spi_deselect();
     816:	0e 94 21 06 	call	0xc42	; 0xc42 <spi_deselect>
}
     81a:	df 91       	pop	r29
     81c:	cf 91       	pop	r28
     81e:	1f 91       	pop	r17
     820:	08 95       	ret

00000822 <mcp2515_reset>:

void mcp2515_reset(){
	spi_select();
     822:	0e 94 1f 06 	call	0xc3e	; 0xc3e <spi_select>
	//printf("spi_select done\n");
	spi_send(MCP_RESET);	
     826:	80 ec       	ldi	r24, 0xC0	; 192
     828:	0e 94 14 06 	call	0xc28	; 0xc28 <spi_send>
	//printf("spi_send done\n");
	spi_deselect();
     82c:	0e 94 21 06 	call	0xc42	; 0xc42 <spi_deselect>
     830:	08 95       	ret

00000832 <mcp2515_read>:
	//printf("spi_deselect done\n");
}


uint8_t mcp2515_read(uint8_t address){
     832:	cf 93       	push	r28
     834:	c8 2f       	mov	r28, r24
	spi_select();
     836:	0e 94 1f 06 	call	0xc3e	; 0xc3e <spi_select>
	
	//Send command and address, then read result
	
	//printf("Send MCP_READ\n");
	spi_send(MCP_READ);
     83a:	83 e0       	ldi	r24, 0x03	; 3
     83c:	0e 94 14 06 	call	0xc28	; 0xc28 <spi_send>
	//printf("Send addr\n");
	spi_send(address);
     840:	8c 2f       	mov	r24, r28
     842:	0e 94 14 06 	call	0xc28	; 0xc28 <spi_send>

	uint8_t result = spi_read();
     846:	0e 94 18 06 	call	0xc30	; 0xc30 <spi_read>
     84a:	c8 2f       	mov	r28, r24
	//printf("SPI_read\n");
	spi_deselect();
     84c:	0e 94 21 06 	call	0xc42	; 0xc42 <spi_deselect>

	return result;	
}
     850:	8c 2f       	mov	r24, r28
     852:	cf 91       	pop	r28
     854:	08 95       	ret

00000856 <mcp2515_init>:
#include <avr/io.h>
#include "uart_driver.h"
#include "spi_driver.h"
#include "mcp2515_driver.h"

void mcp2515_init() {
     856:	cf 93       	push	r28
     858:	df 93       	push	r29
     85a:	1f 92       	push	r1
     85c:	cd b7       	in	r28, 0x3d	; 61
     85e:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t value_check;

	//Start SPI driver
	spi_init();
     860:	0e 94 0c 06 	call	0xc18	; 0xc18 <spi_init>

	mcp2515_reset();
     864:	0e 94 11 04 	call	0x822	; 0x822 <mcp2515_reset>
	
	//Testing for correct initialization
	value_check = mcp2515_read(MCP_CANSTAT);
     868:	8e e0       	ldi	r24, 0x0E	; 14
     86a:	0e 94 19 04 	call	0x832	; 0x832 <mcp2515_read>
     86e:	89 83       	std	Y+1, r24	; 0x01
	//printf("mcp read done\n");
	while ((value_check & MODE_MASK) != MODE_CONFIG) {
     870:	89 81       	ldd	r24, Y+1	; 0x01
     872:	80 7e       	andi	r24, 0xE0	; 224
     874:	80 38       	cpi	r24, 0x80	; 128
     876:	c1 f0       	breq	.+48     	; 0x8a8 <mcp2515_init+0x52>
		printf("MCP2515 is not in config mode after reset\n");
     878:	84 ea       	ldi	r24, 0xA4	; 164
     87a:	91 e0       	ldi	r25, 0x01	; 1
     87c:	0e 94 a5 0a 	call	0x154a	; 0x154a <puts>
		mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_CONFIG);
     880:	40 e8       	ldi	r20, 0x80	; 128
     882:	60 ee       	ldi	r22, 0xE0	; 224
     884:	8f e0       	ldi	r24, 0x0F	; 15
     886:	0e 94 f7 03 	call	0x7ee	; 0x7ee <mcp2515_bit_modify>
		mcp2515_reset();
     88a:	0e 94 11 04 	call	0x822	; 0x822 <mcp2515_reset>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     88e:	2f ef       	ldi	r18, 0xFF	; 255
     890:	8f ef       	ldi	r24, 0xFF	; 255
     892:	9e e0       	ldi	r25, 0x0E	; 14
     894:	21 50       	subi	r18, 0x01	; 1
     896:	80 40       	sbci	r24, 0x00	; 0
     898:	90 40       	sbci	r25, 0x00	; 0
     89a:	e1 f7       	brne	.-8      	; 0x894 <mcp2515_init+0x3e>
     89c:	00 c0       	rjmp	.+0      	; 0x89e <mcp2515_init+0x48>
     89e:	00 00       	nop
	mcp2515_reset();
	
	//Testing for correct initialization
	value_check = mcp2515_read(MCP_CANSTAT);
	//printf("mcp read done\n");
	while ((value_check & MODE_MASK) != MODE_CONFIG) {
     8a0:	89 81       	ldd	r24, Y+1	; 0x01
     8a2:	80 7e       	andi	r24, 0xE0	; 224
     8a4:	80 38       	cpi	r24, 0x80	; 128
     8a6:	41 f7       	brne	.-48     	; 0x878 <mcp2515_init+0x22>
		printf("MCP2515 is not in config mode after reset\n");
		mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_CONFIG);
		mcp2515_reset();
		_delay_ms(1000);
	}
}
     8a8:	0f 90       	pop	r0
     8aa:	df 91       	pop	r29
     8ac:	cf 91       	pop	r28
     8ae:	08 95       	ret

000008b0 <oled_print_char>:
		//Set higher column address                                                                                                                                                                                                                                                                                                                                                                     
		*oled_command_addr = 0x10 + (column * (FONTWIDTH)>>4);
	}
}

void oled_print_char(char ch){
     8b0:	28 e0       	ldi	r18, 0x08	; 8
     8b2:	82 9f       	mul	r24, r18
     8b4:	c0 01       	movw	r24, r0
     8b6:	11 24       	eor	r1, r1
     8b8:	fc 01       	movw	r30, r24
     8ba:	e0 59       	subi	r30, 0x90	; 144
     8bc:	f0 40       	sbci	r31, 0x00	; 0
	for (uint8_t i = 0; i<FONTWIDTH; i++) {
     8be:	80 e0       	ldi	r24, 0x00	; 0
		oled_write_data(pgm_read_byte(&font[ch - FONTOFFSET][i]));
     8c0:	94 91       	lpm	r25, Z
void oled_write_command(uint8_t command){
	*oled_command_addr = command;
}

void oled_write_data(uint8_t data){
	*oled_data_addr = data;
     8c2:	a0 91 0a 01 	lds	r26, 0x010A
     8c6:	b0 91 0b 01 	lds	r27, 0x010B
     8ca:	9c 93       	st	X, r25
		*oled_command_addr = 0x10 + (column * (FONTWIDTH)>>4);
	}
}

void oled_print_char(char ch){
	for (uint8_t i = 0; i<FONTWIDTH; i++) {
     8cc:	8f 5f       	subi	r24, 0xFF	; 255
     8ce:	31 96       	adiw	r30, 0x01	; 1
     8d0:	88 30       	cpi	r24, 0x08	; 8
     8d2:	b1 f7       	brne	.-20     	; 0x8c0 <oled_print_char+0x10>
		oled_write_data(pgm_read_byte(&font[ch - FONTOFFSET][i]));
	}
}
     8d4:	08 95       	ret

000008d6 <oled_goto_page>:
void oled_back(){
	
}

void oled_goto_page(unsigned int page) {
	oled_write_command(0xB0 + page);
     8d6:	90 eb       	ldi	r25, 0xB0	; 176
     8d8:	98 0f       	add	r25, r24
	_delay_ms(800);
	oled_clear_screen();
}

void oled_write_command(uint8_t command){
	*oled_command_addr = command;
     8da:	e0 91 0c 01 	lds	r30, 0x010C
     8de:	f0 91 0d 01 	lds	r31, 0x010D
     8e2:	90 83       	st	Z, r25
	
}

void oled_goto_page(unsigned int page) {
	oled_write_command(0xB0 + page);
	global_page = page;
     8e4:	80 93 59 04 	sts	0x0459, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8e8:	80 e1       	ldi	r24, 0x10	; 16
     8ea:	8a 95       	dec	r24
     8ec:	f1 f7       	brne	.-4      	; 0x8ea <oled_goto_page+0x14>
     8ee:	00 c0       	rjmp	.+0      	; 0x8f0 <oled_goto_page+0x1a>
     8f0:	08 95       	ret

000008f2 <oled_clear_line>:
	_delay_us(50);
}

void oled_clear_line(){
     8f2:	80 e8       	ldi	r24, 0x80	; 128
     8f4:	90 e0       	ldi	r25, 0x00	; 0
void oled_write_command(uint8_t command){
	*oled_command_addr = command;
}

void oled_write_data(uint8_t data){
	*oled_data_addr = data;
     8f6:	e0 91 0a 01 	lds	r30, 0x010A
     8fa:	f0 91 0b 01 	lds	r31, 0x010B
     8fe:	10 82       	st	Z, r1
     900:	01 97       	sbiw	r24, 0x01	; 1
	global_page = page;
	_delay_us(50);
}

void oled_clear_line(){
	for (int i = 0; i<128; i++) {
     902:	00 97       	sbiw	r24, 0x00	; 0
     904:	c1 f7       	brne	.-16     	; 0x8f6 <oled_clear_line+0x4>
		oled_write_data(0b00000000);
	}
}
     906:	08 95       	ret

00000908 <oled_clear_screen>:

void oled_clear_screen() {
     908:	cf 93       	push	r28
     90a:	df 93       	push	r29
     90c:	c0 e0       	ldi	r28, 0x00	; 0
     90e:	d0 e0       	ldi	r29, 0x00	; 0
	for (uint8_t i = 0; i<8; i++) {
		oled_goto_page(i);
     910:	ce 01       	movw	r24, r28
     912:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <oled_goto_page>
		oled_clear_line();
     916:	0e 94 79 04 	call	0x8f2	; 0x8f2 <oled_clear_line>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     91a:	83 ed       	ldi	r24, 0xD3	; 211
     91c:	90 e3       	ldi	r25, 0x30	; 48
     91e:	01 97       	sbiw	r24, 0x01	; 1
     920:	f1 f7       	brne	.-4      	; 0x91e <oled_clear_screen+0x16>
     922:	00 c0       	rjmp	.+0      	; 0x924 <oled_clear_screen+0x1c>
     924:	00 00       	nop
     926:	21 96       	adiw	r28, 0x01	; 1
		oled_write_data(0b00000000);
	}
}

void oled_clear_screen() {
	for (uint8_t i = 0; i<8; i++) {
     928:	c8 30       	cpi	r28, 0x08	; 8
     92a:	d1 05       	cpc	r29, r1
     92c:	89 f7       	brne	.-30     	; 0x910 <oled_clear_screen+0x8>
		oled_goto_page(i);
		oled_clear_line();
		_delay_ms(50);
	}
}
     92e:	df 91       	pop	r29
     930:	cf 91       	pop	r28
     932:	08 95       	ret

00000934 <oled_pos>:

void oled_pos(unsigned int row, unsigned int column){
     934:	cf 93       	push	r28
     936:	df 93       	push	r29
     938:	eb 01       	movw	r28, r22
	oled_goto_page(row);
     93a:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <oled_goto_page>
	if(column < (128/FONTWIDTH)){
     93e:	c0 31       	cpi	r28, 0x10	; 16
     940:	d1 05       	cpc	r29, r1
     942:	e8 f4       	brcc	.+58     	; 0x97e <oled_pos+0x4a>
		//Save column program goes to
		global_col = column * FONTWIDTH;
     944:	8c 2f       	mov	r24, r28
     946:	88 0f       	add	r24, r24
     948:	88 0f       	add	r24, r24
     94a:	88 0f       	add	r24, r24
     94c:	80 93 5a 04 	sts	0x045A, r24
		//Set lower column address
		*oled_command_addr = 0x00 + (column * (FONTWIDTH)>>4);
     950:	e0 91 0c 01 	lds	r30, 0x010C
     954:	f0 91 0d 01 	lds	r31, 0x010D
     958:	cc 0f       	add	r28, r28
     95a:	dd 1f       	adc	r29, r29
     95c:	cc 0f       	add	r28, r28
     95e:	dd 1f       	adc	r29, r29
     960:	cc 0f       	add	r28, r28
     962:	dd 1f       	adc	r29, r29
     964:	d2 95       	swap	r29
     966:	c2 95       	swap	r28
     968:	cf 70       	andi	r28, 0x0F	; 15
     96a:	cd 27       	eor	r28, r29
     96c:	df 70       	andi	r29, 0x0F	; 15
     96e:	cd 27       	eor	r28, r29
     970:	c0 83       	st	Z, r28
		//Set higher column address                                                                                                                                                                                                                                                                                                                                                                     
		*oled_command_addr = 0x10 + (column * (FONTWIDTH)>>4);
     972:	e0 91 0c 01 	lds	r30, 0x010C
     976:	f0 91 0d 01 	lds	r31, 0x010D
     97a:	c0 5f       	subi	r28, 0xF0	; 240
     97c:	c0 83       	st	Z, r28
	}
}
     97e:	df 91       	pop	r29
     980:	cf 91       	pop	r28
     982:	08 95       	ret

00000984 <oled_printf>:
	for (uint8_t i = 0; i<FONTWIDTH; i++) {
		oled_write_data(pgm_read_byte(&font[ch - FONTOFFSET][i]));
	}
}

void oled_printf(char* fmt, ...){
     984:	cf 93       	push	r28
     986:	df 93       	push	r29
     988:	cd b7       	in	r28, 0x3d	; 61
     98a:	de b7       	in	r29, 0x3e	; 62
     98c:	fe 01       	movw	r30, r28
     98e:	35 96       	adiw	r30, 0x05	; 5
     990:	61 91       	ld	r22, Z+
     992:	71 91       	ld	r23, Z+
	va_list v;
	va_start(v, fmt);
	vfprintf(&oled_stdout, fmt, v);
     994:	af 01       	movw	r20, r30
     996:	8e e0       	ldi	r24, 0x0E	; 14
     998:	91 e0       	ldi	r25, 0x01	; 1
     99a:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <vfprintf>
	va_end(v);
}
     99e:	df 91       	pop	r29
     9a0:	cf 91       	pop	r28
     9a2:	08 95       	ret

000009a4 <oled_init>:
	_delay_ms(800);
	oled_clear_screen();
}

void oled_write_command(uint8_t command){
	*oled_command_addr = command;
     9a4:	e0 91 0c 01 	lds	r30, 0x010C
     9a8:	f0 91 0d 01 	lds	r31, 0x010D
     9ac:	8e ea       	ldi	r24, 0xAE	; 174
     9ae:	80 83       	st	Z, r24
     9b0:	e0 91 0c 01 	lds	r30, 0x010C
     9b4:	f0 91 0d 01 	lds	r31, 0x010D
     9b8:	81 ea       	ldi	r24, 0xA1	; 161
     9ba:	80 83       	st	Z, r24
     9bc:	e0 91 0c 01 	lds	r30, 0x010C
     9c0:	f0 91 0d 01 	lds	r31, 0x010D
     9c4:	8a ed       	ldi	r24, 0xDA	; 218
     9c6:	80 83       	st	Z, r24
     9c8:	e0 91 0c 01 	lds	r30, 0x010C
     9cc:	f0 91 0d 01 	lds	r31, 0x010D
     9d0:	82 e1       	ldi	r24, 0x12	; 18
     9d2:	80 83       	st	Z, r24
     9d4:	e0 91 0c 01 	lds	r30, 0x010C
     9d8:	f0 91 0d 01 	lds	r31, 0x010D
     9dc:	88 ec       	ldi	r24, 0xC8	; 200
     9de:	80 83       	st	Z, r24
     9e0:	e0 91 0c 01 	lds	r30, 0x010C
     9e4:	f0 91 0d 01 	lds	r31, 0x010D
     9e8:	88 ea       	ldi	r24, 0xA8	; 168
     9ea:	80 83       	st	Z, r24
     9ec:	e0 91 0c 01 	lds	r30, 0x010C
     9f0:	f0 91 0d 01 	lds	r31, 0x010D
     9f4:	8f e3       	ldi	r24, 0x3F	; 63
     9f6:	80 83       	st	Z, r24
     9f8:	e0 91 0c 01 	lds	r30, 0x010C
     9fc:	f0 91 0d 01 	lds	r31, 0x010D
     a00:	85 ed       	ldi	r24, 0xD5	; 213
     a02:	80 83       	st	Z, r24
     a04:	e0 91 0c 01 	lds	r30, 0x010C
     a08:	f0 91 0d 01 	lds	r31, 0x010D
     a0c:	80 e8       	ldi	r24, 0x80	; 128
     a0e:	80 83       	st	Z, r24
     a10:	e0 91 0c 01 	lds	r30, 0x010C
     a14:	f0 91 0d 01 	lds	r31, 0x010D
     a18:	81 e8       	ldi	r24, 0x81	; 129
     a1a:	80 83       	st	Z, r24
     a1c:	e0 91 0c 01 	lds	r30, 0x010C
     a20:	f0 91 0d 01 	lds	r31, 0x010D
     a24:	80 e5       	ldi	r24, 0x50	; 80
     a26:	80 83       	st	Z, r24
     a28:	e0 91 0c 01 	lds	r30, 0x010C
     a2c:	f0 91 0d 01 	lds	r31, 0x010D
     a30:	89 ed       	ldi	r24, 0xD9	; 217
     a32:	80 83       	st	Z, r24
     a34:	e0 91 0c 01 	lds	r30, 0x010C
     a38:	f0 91 0d 01 	lds	r31, 0x010D
     a3c:	81 e2       	ldi	r24, 0x21	; 33
     a3e:	80 83       	st	Z, r24
     a40:	e0 91 0c 01 	lds	r30, 0x010C
     a44:	f0 91 0d 01 	lds	r31, 0x010D
     a48:	80 e2       	ldi	r24, 0x20	; 32
     a4a:	80 83       	st	Z, r24
     a4c:	e0 91 0c 01 	lds	r30, 0x010C
     a50:	f0 91 0d 01 	lds	r31, 0x010D
     a54:	82 e0       	ldi	r24, 0x02	; 2
     a56:	80 83       	st	Z, r24
     a58:	e0 91 0c 01 	lds	r30, 0x010C
     a5c:	f0 91 0d 01 	lds	r31, 0x010D
     a60:	8b ed       	ldi	r24, 0xDB	; 219
     a62:	80 83       	st	Z, r24
     a64:	e0 91 0c 01 	lds	r30, 0x010C
     a68:	f0 91 0d 01 	lds	r31, 0x010D
     a6c:	80 e3       	ldi	r24, 0x30	; 48
     a6e:	80 83       	st	Z, r24
     a70:	e0 91 0c 01 	lds	r30, 0x010C
     a74:	f0 91 0d 01 	lds	r31, 0x010D
     a78:	8d ea       	ldi	r24, 0xAD	; 173
     a7a:	80 83       	st	Z, r24
     a7c:	e0 91 0c 01 	lds	r30, 0x010C
     a80:	f0 91 0d 01 	lds	r31, 0x010D
     a84:	10 82       	st	Z, r1
     a86:	e0 91 0c 01 	lds	r30, 0x010C
     a8a:	f0 91 0d 01 	lds	r31, 0x010D
     a8e:	84 ea       	ldi	r24, 0xA4	; 164
     a90:	80 83       	st	Z, r24
     a92:	e0 91 0c 01 	lds	r30, 0x010C
     a96:	f0 91 0d 01 	lds	r31, 0x010D
     a9a:	86 ea       	ldi	r24, 0xA6	; 166
     a9c:	80 83       	st	Z, r24
     a9e:	e0 91 0c 01 	lds	r30, 0x010C
     aa2:	f0 91 0d 01 	lds	r31, 0x010D
     aa6:	8f ea       	ldi	r24, 0xAF	; 175
     aa8:	80 83       	st	Z, r24
	oled_write_command(0x00);
	oled_write_command(0xa4);    //out follows RAM content
	oled_write_command(0xa6);    //set normal display
	oled_write_command(0xaf);    // display on
	
	oled_clear_screen();
     aaa:	0e 94 84 04 	call	0x908	; 0x908 <oled_clear_screen>
	oled_pos(2,3);
     aae:	63 e0       	ldi	r22, 0x03	; 3
     ab0:	70 e0       	ldi	r23, 0x00	; 0
     ab2:	82 e0       	ldi	r24, 0x02	; 2
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	0e 94 9a 04 	call	0x934	; 0x934 <oled_pos>
	oled_printf(" #SWAG");
     aba:	8e ec       	ldi	r24, 0xCE	; 206
     abc:	91 e0       	ldi	r25, 0x01	; 1
     abe:	9f 93       	push	r25
     ac0:	8f 93       	push	r24
     ac2:	0e 94 c2 04 	call	0x984	; 0x984 <oled_printf>
	oled_pos(3,7);
     ac6:	67 e0       	ldi	r22, 0x07	; 7
     ac8:	70 e0       	ldi	r23, 0x00	; 0
     aca:	83 e0       	ldi	r24, 0x03	; 3
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	0e 94 9a 04 	call	0x934	; 0x934 <oled_pos>
	oled_printf("  4");
     ad2:	85 ed       	ldi	r24, 0xD5	; 213
     ad4:	91 e0       	ldi	r25, 0x01	; 1
     ad6:	9f 93       	push	r25
     ad8:	8f 93       	push	r24
     ada:	0e 94 c2 04 	call	0x984	; 0x984 <oled_printf>
	oled_pos(4,9);
     ade:	69 e0       	ldi	r22, 0x09	; 9
     ae0:	70 e0       	ldi	r23, 0x00	; 0
     ae2:	84 e0       	ldi	r24, 0x04	; 4
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	0e 94 9a 04 	call	0x934	; 0x934 <oled_pos>
	oled_printf(" LYFE");
     aea:	89 ed       	ldi	r24, 0xD9	; 217
     aec:	91 e0       	ldi	r25, 0x01	; 1
     aee:	9f 93       	push	r25
     af0:	8f 93       	push	r24
     af2:	0e 94 c2 04 	call	0x984	; 0x984 <oled_printf>
     af6:	2f ef       	ldi	r18, 0xFF	; 255
     af8:	80 e7       	ldi	r24, 0x70	; 112
     afa:	92 e0       	ldi	r25, 0x02	; 2
     afc:	21 50       	subi	r18, 0x01	; 1
     afe:	80 40       	sbci	r24, 0x00	; 0
     b00:	90 40       	sbci	r25, 0x00	; 0
     b02:	e1 f7       	brne	.-8      	; 0xafc <oled_init+0x158>
     b04:	00 c0       	rjmp	.+0      	; 0xb06 <oled_init+0x162>
     b06:	00 00       	nop
	_delay_ms(800);
	oled_clear_screen();
     b08:	0e 94 84 04 	call	0x908	; 0x908 <oled_clear_screen>
     b0c:	0f 90       	pop	r0
     b0e:	0f 90       	pop	r0
     b10:	0f 90       	pop	r0
     b12:	0f 90       	pop	r0
     b14:	0f 90       	pop	r0
     b16:	0f 90       	pop	r0
     b18:	08 95       	ret

00000b1a <oled_get_arrow_page>:

//Arrow functions

uint8_t oled_get_arrow_page(){
	return arrow_global;
}
     b1a:	80 91 54 04 	lds	r24, 0x0454
     b1e:	08 95       	ret

00000b20 <oled_print_arrow>:

void oled_print_arrow(uint8_t row, uint8_t col){
	arrow_global = row;
     b20:	80 93 54 04 	sts	0x0454, r24
	oled_pos(row, col);
     b24:	70 e0       	ldi	r23, 0x00	; 0
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	0e 94 9a 04 	call	0x934	; 0x934 <oled_pos>
void oled_write_command(uint8_t command){
	*oled_command_addr = command;
}

void oled_write_data(uint8_t data){
	*oled_data_addr = data;
     b2c:	e0 91 0a 01 	lds	r30, 0x010A
     b30:	f0 91 0b 01 	lds	r31, 0x010B
     b34:	88 e1       	ldi	r24, 0x18	; 24
     b36:	80 83       	st	Z, r24
     b38:	e0 91 0a 01 	lds	r30, 0x010A
     b3c:	f0 91 0b 01 	lds	r31, 0x010B
     b40:	80 83       	st	Z, r24
     b42:	e0 91 0a 01 	lds	r30, 0x010A
     b46:	f0 91 0b 01 	lds	r31, 0x010B
     b4a:	9e e7       	ldi	r25, 0x7E	; 126
     b4c:	90 83       	st	Z, r25
     b4e:	e0 91 0a 01 	lds	r30, 0x010A
     b52:	f0 91 0b 01 	lds	r31, 0x010B
     b56:	9c e3       	ldi	r25, 0x3C	; 60
     b58:	90 83       	st	Z, r25
     b5a:	e0 91 0a 01 	lds	r30, 0x010A
     b5e:	f0 91 0b 01 	lds	r31, 0x010B
     b62:	80 83       	st	Z, r24
     b64:	08 95       	ret

00000b66 <oled_clear_arrow>:
	oled_write_data(0b00111100);
	oled_write_data(0b00011000);
}

void oled_clear_arrow(uint8_t row, uint8_t col){
	oled_pos(row, col);
     b66:	70 e0       	ldi	r23, 0x00	; 0
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	0e 94 9a 04 	call	0x934	; 0x934 <oled_pos>
void oled_write_command(uint8_t command){
	*oled_command_addr = command;
}

void oled_write_data(uint8_t data){
	*oled_data_addr = data;
     b6e:	e0 91 0a 01 	lds	r30, 0x010A
     b72:	f0 91 0b 01 	lds	r31, 0x010B
     b76:	10 82       	st	Z, r1
     b78:	e0 91 0a 01 	lds	r30, 0x010A
     b7c:	f0 91 0b 01 	lds	r31, 0x010B
     b80:	10 82       	st	Z, r1
     b82:	e0 91 0a 01 	lds	r30, 0x010A
     b86:	f0 91 0b 01 	lds	r31, 0x010B
     b8a:	10 82       	st	Z, r1
     b8c:	e0 91 0a 01 	lds	r30, 0x010A
     b90:	f0 91 0b 01 	lds	r31, 0x010B
     b94:	10 82       	st	Z, r1
     b96:	e0 91 0a 01 	lds	r30, 0x010A
     b9a:	f0 91 0b 01 	lds	r31, 0x010B
     b9e:	10 82       	st	Z, r1
     ba0:	08 95       	ret

00000ba2 <oled_move_arrow>:
	oled_write_data(0b00000000);
	oled_write_data(0b00000000);
}

void oled_move_arrow(signed int joystick_Y, unsigned int menu_min, unsigned int menu_max){
	if(joystick_Y < 0 && arrow_global < menu_max) {
     ba2:	99 23       	and	r25, r25
     ba4:	a4 f4       	brge	.+40     	; 0xbce <oled_move_arrow+0x2c>
     ba6:	e0 91 54 04 	lds	r30, 0x0454
     baa:	2e 2f       	mov	r18, r30
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	24 17       	cp	r18, r20
     bb0:	35 07       	cpc	r19, r21
     bb2:	68 f4       	brcc	.+26     	; 0xbce <oled_move_arrow+0x2c>
		oled_clear_arrow(arrow_global, 0);
     bb4:	60 e0       	ldi	r22, 0x00	; 0
     bb6:	8e 2f       	mov	r24, r30
     bb8:	0e 94 b3 05 	call	0xb66	; 0xb66 <oled_clear_arrow>
		arrow_global++;
     bbc:	80 91 54 04 	lds	r24, 0x0454
     bc0:	8f 5f       	subi	r24, 0xFF	; 255
     bc2:	80 93 54 04 	sts	0x0454, r24
		oled_print_arrow(arrow_global, 0);
     bc6:	60 e0       	ldi	r22, 0x00	; 0
     bc8:	0e 94 90 05 	call	0xb20	; 0xb20 <oled_print_arrow>
     bcc:	08 95       	ret
	} else if (joystick_Y > 0 && arrow_global > menu_min) {
     bce:	18 16       	cp	r1, r24
     bd0:	19 06       	cpc	r1, r25
     bd2:	94 f4       	brge	.+36     	; 0xbf8 <oled_move_arrow+0x56>
     bd4:	80 91 54 04 	lds	r24, 0x0454
     bd8:	28 2f       	mov	r18, r24
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	62 17       	cp	r22, r18
     bde:	73 07       	cpc	r23, r19
     be0:	58 f4       	brcc	.+22     	; 0xbf8 <oled_move_arrow+0x56>
		oled_clear_arrow(arrow_global, 0);
     be2:	60 e0       	ldi	r22, 0x00	; 0
     be4:	0e 94 b3 05 	call	0xb66	; 0xb66 <oled_clear_arrow>
		arrow_global--;
     be8:	80 91 54 04 	lds	r24, 0x0454
     bec:	81 50       	subi	r24, 0x01	; 1
     bee:	80 93 54 04 	sts	0x0454, r24
		oled_print_arrow(arrow_global, 0);
     bf2:	60 e0       	ldi	r22, 0x00	; 0
     bf4:	0e 94 90 05 	call	0xb20	; 0xb20 <oled_print_arrow>
     bf8:	08 95       	ret

00000bfa <oled_arrow_handler>:
	}
}

unsigned int oled_arrow_handler(signed int joystick_Y, unsigned int menu_min, unsigned int menu_max){
	oled_move_arrow(joystick_Y, menu_min, menu_max);
     bfa:	0e 94 d1 05 	call	0xba2	; 0xba2 <oled_move_arrow>
     bfe:	2f e9       	ldi	r18, 0x9F	; 159
     c00:	86 e8       	ldi	r24, 0x86	; 134
     c02:	91 e0       	ldi	r25, 0x01	; 1
     c04:	21 50       	subi	r18, 0x01	; 1
     c06:	80 40       	sbci	r24, 0x00	; 0
     c08:	90 40       	sbci	r25, 0x00	; 0
     c0a:	e1 f7       	brne	.-8      	; 0xc04 <oled_arrow_handler+0xa>
     c0c:	00 c0       	rjmp	.+0      	; 0xc0e <oled_arrow_handler+0x14>
     c0e:	00 00       	nop
	_delay_ms(500);
	return arrow_global;
     c10:	80 91 54 04 	lds	r24, 0x0454
}
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	08 95       	ret

00000c18 <spi_init>:
#define SPI_SCK		PB7


void spi_init(){
	//Set MOSI, SCK and SS as output pins 	
	DDRB |= (1 << SPI_MOSI) | (1 << SPI_SCK) | (1 << SPI_SS);
     c18:	87 b3       	in	r24, 0x17	; 23
     c1a:	80 6b       	ori	r24, 0xB0	; 176
     c1c:	87 bb       	out	0x17, r24	; 23
	
	//Set MISO as input pin
	DDRB &= ~(1 << SPI_MISO);
     c1e:	be 98       	cbi	0x17, 6	; 23
	
	//Enable SPI in master mode and set clock rate fosc/16
	SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0);
     c20:	8d b1       	in	r24, 0x0d	; 13
     c22:	81 65       	ori	r24, 0x51	; 81
     c24:	8d b9       	out	0x0d, r24	; 13
     c26:	08 95       	ret

00000c28 <spi_send>:
	return SPDR;
}

void spi_send(char data){
	//Start transmission
	SPDR = data;
     c28:	8f b9       	out	0x0f, r24	; 15
	
	//Wait for transmission, checks if register is empty 
	while(!(SPSR & (1<<SPIF))){}
     c2a:	77 9b       	sbis	0x0e, 7	; 14
     c2c:	fe cf       	rjmp	.-4      	; 0xc2a <spi_send+0x2>
}
     c2e:	08 95       	ret

00000c30 <spi_read>:
}


uint8_t spi_read(){
	//Dummy send in order to read from slave
	spi_send(0xff);
     c30:	8f ef       	ldi	r24, 0xFF	; 255
     c32:	0e 94 14 06 	call	0xc28	; 0xc28 <spi_send>
	
	//Wait to receive data
	while(!(SPSR & (1 << SPIF))){;}
     c36:	77 9b       	sbis	0x0e, 7	; 14
     c38:	fe cf       	rjmp	.-4      	; 0xc36 <spi_read+0x6>
	
	return SPDR;
     c3a:	8f b1       	in	r24, 0x0f	; 15
}
     c3c:	08 95       	ret

00000c3e <spi_select>:
	while(!(SPSR & (1<<SPIF))){}
}

void spi_select(){
	//Set !SS to 0 for selection of slave
	PORTB &= ~(1 << SPI_SS);
     c3e:	c4 98       	cbi	0x18, 4	; 24
     c40:	08 95       	ret

00000c42 <spi_deselect>:
}

void spi_deselect(){
	//Set !SS to 1 for deselection of slave
	PORTB |= (1 << SPI_SS);
     c42:	c4 9a       	sbi	0x18, 4	; 24
     c44:	08 95       	ret

00000c46 <SRAM_test>:
	if (address_offset > 0x100) { return 0; }
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	return ext_ram[address_offset];
}

void SRAM_test(void) {
     c46:	cf 92       	push	r12
     c48:	df 92       	push	r13
     c4a:	ef 92       	push	r14
     c4c:	ff 92       	push	r15
     c4e:	0f 93       	push	r16
     c50:	1f 93       	push	r17
     c52:	cf 93       	push	r28
     c54:	df 93       	push	r29
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size       = 0x800;
	uint16_t write_errors       = 0;
	uint16_t retrieval_errors   = 0;

	oled_clear_screen();
     c56:	0e 94 84 04 	call	0x908	; 0x908 <oled_clear_screen>
	oled_pos(3,2);
     c5a:	62 e0       	ldi	r22, 0x02	; 2
     c5c:	70 e0       	ldi	r23, 0x00	; 0
     c5e:	83 e0       	ldi	r24, 0x03	; 3
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	0e 94 9a 04 	call	0x934	; 0x934 <oled_pos>
	oled_printf("TESTING SRAM");
     c66:	8f ed       	ldi	r24, 0xDF	; 223
     c68:	91 e0       	ldi	r25, 0x01	; 1
     c6a:	9f 93       	push	r25
     c6c:	8f 93       	push	r24
     c6e:	0e 94 c2 04 	call	0x984	; 0x984 <oled_printf>
	printf("\nStarting SRAM test...\n");
     c72:	8c ee       	ldi	r24, 0xEC	; 236
     c74:	91 e0       	ldi	r25, 0x01	; 1
     c76:	0e 94 a5 0a 	call	0x154a	; 0x154a <puts>

	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
     c7a:	0e 94 81 0a 	call	0x1502	; 0x1502 <rand>
     c7e:	6c 01       	movw	r12, r24

	// Write phase: Immediately check that the correct value was stored
	srand(seed);
     c80:	0e 94 86 0a 	call	0x150c	; 0x150c <srand>
     c84:	0f 90       	pop	r0
     c86:	0f 90       	pop	r0
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     c88:	c0 e0       	ldi	r28, 0x00	; 0
     c8a:	d0 e0       	ldi	r29, 0x00	; 0
}

void SRAM_test(void) {
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size       = 0x800;
	uint16_t write_errors       = 0;
     c8c:	00 e0       	ldi	r16, 0x00	; 0
     c8e:	10 e0       	ldi	r17, 0x00	; 0
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		ext_ram[i] = some_value;
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
     c90:	0f 2e       	mov	r0, r31
     c92:	f3 e0       	ldi	r31, 0x03	; 3
     c94:	ef 2e       	mov	r14, r31
     c96:	f2 e0       	ldi	r31, 0x02	; 2
     c98:	ff 2e       	mov	r15, r31
     c9a:	f0 2d       	mov	r31, r0
	uint16_t seed = rand();

	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     c9c:	0e 94 81 0a 	call	0x1502	; 0x1502 <rand>
     ca0:	fe 01       	movw	r30, r28
     ca2:	f8 5e       	subi	r31, 0xE8	; 232
		ext_ram[i] = some_value;
     ca4:	80 83       	st	Z, r24
		uint8_t retreived_value = ext_ram[i];
     ca6:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     ca8:	28 17       	cp	r18, r24
     caa:	a9 f0       	breq	.+42     	; 0xcd6 <SRAM_test+0x90>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
     cac:	99 27       	eor	r25, r25
     cae:	9f 93       	push	r25
     cb0:	8f 93       	push	r24
     cb2:	1f 92       	push	r1
     cb4:	2f 93       	push	r18
     cb6:	df 93       	push	r29
     cb8:	cf 93       	push	r28
     cba:	ff 92       	push	r15
     cbc:	ef 92       	push	r14
     cbe:	0e 94 91 0a 	call	0x1522	; 0x1522 <printf>
			write_errors++;
     cc2:	0f 5f       	subi	r16, 0xFF	; 255
     cc4:	1f 4f       	sbci	r17, 0xFF	; 255
     cc6:	8d b7       	in	r24, 0x3d	; 61
     cc8:	9e b7       	in	r25, 0x3e	; 62
     cca:	08 96       	adiw	r24, 0x08	; 8
     ccc:	0f b6       	in	r0, 0x3f	; 63
     cce:	f8 94       	cli
     cd0:	9e bf       	out	0x3e, r25	; 62
     cd2:	0f be       	out	0x3f, r0	; 63
     cd4:	8d bf       	out	0x3d, r24	; 61
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();

	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     cd6:	21 96       	adiw	r28, 0x01	; 1
     cd8:	c1 15       	cp	r28, r1
     cda:	98 e0       	ldi	r25, 0x08	; 8
     cdc:	d9 07       	cpc	r29, r25
     cde:	f1 f6       	brne	.-68     	; 0xc9c <SRAM_test+0x56>
			write_errors++;
		}
	}

	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);    // reset the PRNG to the state it had before the write phase
     ce0:	c6 01       	movw	r24, r12
     ce2:	0e 94 86 0a 	call	0x150c	; 0x150c <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     ce6:	c0 e0       	ldi	r28, 0x00	; 0
     ce8:	d0 e0       	ldi	r29, 0x00	; 0

void SRAM_test(void) {
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size       = 0x800;
	uint16_t write_errors       = 0;
	uint16_t retrieval_errors   = 0;
     cea:	e1 2c       	mov	r14, r1
     cec:	f1 2c       	mov	r15, r1
	srand(seed);    // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
     cee:	0f 2e       	mov	r0, r31
     cf0:	fc e3       	ldi	r31, 0x3C	; 60
     cf2:	cf 2e       	mov	r12, r31
     cf4:	f2 e0       	ldi	r31, 0x02	; 2
     cf6:	df 2e       	mov	r13, r31
     cf8:	f0 2d       	mov	r31, r0
	}

	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);    // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     cfa:	0e 94 81 0a 	call	0x1502	; 0x1502 <rand>
     cfe:	fe 01       	movw	r30, r28
     d00:	f8 5e       	subi	r31, 0xE8	; 232
		uint8_t retreived_value = ext_ram[i];
     d02:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     d04:	28 17       	cp	r18, r24
     d06:	b1 f0       	breq	.+44     	; 0xd34 <SRAM_test+0xee>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
     d08:	99 27       	eor	r25, r25
     d0a:	9f 93       	push	r25
     d0c:	8f 93       	push	r24
     d0e:	1f 92       	push	r1
     d10:	2f 93       	push	r18
     d12:	df 93       	push	r29
     d14:	cf 93       	push	r28
     d16:	df 92       	push	r13
     d18:	cf 92       	push	r12
     d1a:	0e 94 91 0a 	call	0x1522	; 0x1522 <printf>
			retrieval_errors++;
     d1e:	9f ef       	ldi	r25, 0xFF	; 255
     d20:	e9 1a       	sub	r14, r25
     d22:	f9 0a       	sbc	r15, r25
     d24:	8d b7       	in	r24, 0x3d	; 61
     d26:	9e b7       	in	r25, 0x3e	; 62
     d28:	08 96       	adiw	r24, 0x08	; 8
     d2a:	0f b6       	in	r0, 0x3f	; 63
     d2c:	f8 94       	cli
     d2e:	9e bf       	out	0x3e, r25	; 62
     d30:	0f be       	out	0x3f, r0	; 63
     d32:	8d bf       	out	0x3d, r24	; 61
		}
	}

	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);    // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     d34:	21 96       	adiw	r28, 0x01	; 1
     d36:	c1 15       	cp	r28, r1
     d38:	98 e0       	ldi	r25, 0x08	; 8
     d3a:	d9 07       	cpc	r29, r25
     d3c:	f1 f6       	brne	.-68     	; 0xcfa <SRAM_test+0xb4>
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	if (retrieval_errors != 0 || write_errors != 0) { 
     d3e:	e1 14       	cp	r14, r1
     d40:	f1 04       	cpc	r15, r1
     d42:	19 f4       	brne	.+6      	; 0xd4a <SRAM_test+0x104>
     d44:	01 15       	cp	r16, r1
     d46:	11 05       	cpc	r17, r1
     d48:	71 f1       	breq	.+92     	; 0xda6 <SRAM_test+0x160>
		oled_pos(5,0);
     d4a:	60 e0       	ldi	r22, 0x00	; 0
     d4c:	70 e0       	ldi	r23, 0x00	; 0
     d4e:	85 e0       	ldi	r24, 0x05	; 5
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	0e 94 9a 04 	call	0x934	; 0x934 <oled_pos>
		oled_printf("R ERRORS:  %4d",retrieval_errors);
     d56:	ff 92       	push	r15
     d58:	ef 92       	push	r14
     d5a:	89 e7       	ldi	r24, 0x79	; 121
     d5c:	92 e0       	ldi	r25, 0x02	; 2
     d5e:	9f 93       	push	r25
     d60:	8f 93       	push	r24
     d62:	0e 94 c2 04 	call	0x984	; 0x984 <oled_printf>
		oled_pos(6,0);
     d66:	60 e0       	ldi	r22, 0x00	; 0
     d68:	70 e0       	ldi	r23, 0x00	; 0
     d6a:	86 e0       	ldi	r24, 0x06	; 6
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	0e 94 9a 04 	call	0x934	; 0x934 <oled_pos>
		oled_printf("W ERRORS:  %4d",write_errors);
     d72:	1f 93       	push	r17
     d74:	0f 93       	push	r16
     d76:	88 e8       	ldi	r24, 0x88	; 136
     d78:	92 e0       	ldi	r25, 0x02	; 2
     d7a:	9f 93       	push	r25
     d7c:	8f 93       	push	r24
     d7e:	0e 94 c2 04 	call	0x984	; 0x984 <oled_printf>
     d82:	2f ef       	ldi	r18, 0xFF	; 255
     d84:	8f ef       	ldi	r24, 0xFF	; 255
     d86:	9b e3       	ldi	r25, 0x3B	; 59
     d88:	21 50       	subi	r18, 0x01	; 1
     d8a:	80 40       	sbci	r24, 0x00	; 0
     d8c:	90 40       	sbci	r25, 0x00	; 0
     d8e:	e1 f7       	brne	.-8      	; 0xd88 <SRAM_test+0x142>
     d90:	00 c0       	rjmp	.+0      	; 0xd92 <SRAM_test+0x14c>
     d92:	00 00       	nop
     d94:	8d b7       	in	r24, 0x3d	; 61
     d96:	9e b7       	in	r25, 0x3e	; 62
     d98:	08 96       	adiw	r24, 0x08	; 8
     d9a:	0f b6       	in	r0, 0x3f	; 63
     d9c:	f8 94       	cli
     d9e:	9e bf       	out	0x3e, r25	; 62
     da0:	0f be       	out	0x3f, r0	; 63
     da2:	8d bf       	out	0x3d, r24	; 61
     da4:	0e c0       	rjmp	.+28     	; 0xdc2 <SRAM_test+0x17c>
		_delay_ms(4000);
	} else {
		oled_pos(6,4);
     da6:	64 e0       	ldi	r22, 0x04	; 4
     da8:	70 e0       	ldi	r23, 0x00	; 0
     daa:	86 e0       	ldi	r24, 0x06	; 6
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	0e 94 9a 04 	call	0x934	; 0x934 <oled_pos>
		oled_printf("NO ERRORS");
     db2:	87 e9       	ldi	r24, 0x97	; 151
     db4:	92 e0       	ldi	r25, 0x02	; 2
     db6:	9f 93       	push	r25
     db8:	8f 93       	push	r24
     dba:	0e 94 c2 04 	call	0x984	; 0x984 <oled_printf>
     dbe:	0f 90       	pop	r0
     dc0:	0f 90       	pop	r0
	}
	printf("SRAM test completed with \n%4d errors in write phase and \n%4d errors in retrieval phase\n\n", write_errors, retrieval_errors);
     dc2:	ff 92       	push	r15
     dc4:	ef 92       	push	r14
     dc6:	1f 93       	push	r17
     dc8:	0f 93       	push	r16
     dca:	81 ea       	ldi	r24, 0xA1	; 161
     dcc:	92 e0       	ldi	r25, 0x02	; 2
     dce:	9f 93       	push	r25
     dd0:	8f 93       	push	r24
     dd2:	0e 94 91 0a 	call	0x1522	; 0x1522 <printf>
     dd6:	0f 90       	pop	r0
     dd8:	0f 90       	pop	r0
     dda:	0f 90       	pop	r0
     ddc:	0f 90       	pop	r0
     dde:	0f 90       	pop	r0
     de0:	0f 90       	pop	r0
     de2:	df 91       	pop	r29
     de4:	cf 91       	pop	r28
     de6:	1f 91       	pop	r17
     de8:	0f 91       	pop	r16
     dea:	ff 90       	pop	r15
     dec:	ef 90       	pop	r14
     dee:	df 90       	pop	r13
     df0:	cf 90       	pop	r12
     df2:	08 95       	ret

00000df4 <SRAM_init>:
#include "SRAM_driver.h"
#include "oled_driver.h"

//Simple setup for SRAM, also tests for correctness
void SRAM_init(){
	MCUCR = 0x80;
     df4:	80 e8       	ldi	r24, 0x80	; 128
     df6:	85 bf       	out	0x35, r24	; 53
	DDRA = 0xFF;
     df8:	8f ef       	ldi	r24, 0xFF	; 255
     dfa:	8a bb       	out	0x1a, r24	; 26
	SRAM_test();
     dfc:	0e 94 23 06 	call	0xc46	; 0xc46 <SRAM_test>
     e00:	08 95       	ret

00000e02 <uart_sendChar>:

}

void uart_sendChar(unsigned char data){
	//Wait for empty transmitter buffer
	while(!(UCSR0A & (1<<UDRE0)));
     e02:	5d 9b       	sbis	0x0b, 5	; 11
     e04:	fe cf       	rjmp	.-4      	; 0xe02 <uart_sendChar>
		
	//Put data into buffer, then send the data
	UDR0 = data;
     e06:	8c b9       	out	0x0c, r24	; 12
     e08:	08 95       	ret

00000e0a <uart_getChar>:
}


unsigned int uart_getChar(){
	//Wait for the data to be received 
	while(!(UCSR0A & (1<<RXC0))){}
     e0a:	5f 9b       	sbis	0x0b, 7	; 11
     e0c:	fe cf       	rjmp	.-4      	; 0xe0a <uart_getChar>
	
	//Get status and the 9th bit, then data from buffer
	return UDR0;
     e0e:	8c b1       	in	r24, 0x0c	; 12
}
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	08 95       	ret

00000e14 <uart_init>:

static FILE uart_io = FDEV_SETUP_STREAM(uart_sendChar, uart_getChar, _FDEV_SETUP_RW);

void uart_init(unsigned int ubrr){
	//Set baud rate
	UBRR0L = (unsigned int) ubrr;
     e14:	89 b9       	out	0x09, r24	; 9
	
	//Enable receiver and transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
     e16:	88 e1       	ldi	r24, 0x18	; 24
     e18:	8a b9       	out	0x0a, r24	; 10
	
	stdout = &uart_io;
     e1a:	8c e1       	ldi	r24, 0x1C	; 28
     e1c:	91 e0       	ldi	r25, 0x01	; 1
     e1e:	90 93 62 04 	sts	0x0462, r25
     e22:	80 93 61 04 	sts	0x0461, r24
	stdin = &uart_io;
     e26:	90 93 60 04 	sts	0x0460, r25
     e2a:	80 93 5f 04 	sts	0x045F, r24
     e2e:	08 95       	ret

00000e30 <main>:
#include "Drivers/mcp2515_driver.h"
#include "Drivers/can_driver.h"
#include "Drivers/can_driver_test.h"

int main(void) {
    uart_init(MYUBRR);
     e30:	8f e1       	ldi	r24, 0x1F	; 31
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	0e 94 0a 07 	call	0xe14	; 0xe14 <uart_init>
	printf("\nREBOOTED\n");
     e38:	8a ef       	ldi	r24, 0xFA	; 250
     e3a:	92 e0       	ldi	r25, 0x02	; 2
     e3c:	0e 94 a5 0a 	call	0x154a	; 0x154a <puts>
	SRAM_init();
     e40:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <SRAM_init>
	joystick_init();
     e44:	0e 94 78 03 	call	0x6f0	; 0x6f0 <joystick_init>
	oled_init();
     e48:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <oled_init>
	can_init();	
     e4c:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <can_init>

	printf("All init done\n");	
     e50:	84 e0       	ldi	r24, 0x04	; 4
     e52:	93 e0       	ldi	r25, 0x03	; 3
     e54:	0e 94 a5 0a 	call	0x154a	; 0x154a <puts>

	can_test_loopback();
     e58:	0e 94 01 03 	call	0x602	; 0x602 <can_test_loopback>

	while(1) { 
		//shell();
		//spi_test();

		menuitem* test_menu = MENU_create_menu();
     e5c:	0e 94 8c 07 	call	0xf18	; 0xf18 <MENU_create_menu>
		MENU_navigate(test_menu);
     e60:	0e 94 38 08 	call	0x1070	; 0x1070 <MENU_navigate>
		
		flash_diode();
     e64:	0e 94 de 08 	call	0x11bc	; 0x11bc <flash_diode>
     e68:	f9 cf       	rjmp	.-14     	; 0xe5c <main+0x2c>

00000e6a <MENU_new_item>:
	new_menu[0].items[0].child = NULL;
	
	return new_menu;	
}*/

menuitem* MENU_new_item(char *name, void (*handlerFunc)(void), uint8_t number_of_submenus) {
     e6a:	df 92       	push	r13
     e6c:	ef 92       	push	r14
     e6e:	ff 92       	push	r15
     e70:	0f 93       	push	r16
     e72:	1f 93       	push	r17
     e74:	cf 93       	push	r28
     e76:	df 93       	push	r29
     e78:	7c 01       	movw	r14, r24
     e7a:	8b 01       	movw	r16, r22
     e7c:	d4 2e       	mov	r13, r20
	menuitem* new_item = malloc(sizeof(menuitem));
     e7e:	89 e0       	ldi	r24, 0x09	; 9
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	0e 94 0c 09 	call	0x1218	; 0x1218 <malloc>
     e86:	ec 01       	movw	r28, r24
	
	new_item->name = name;
     e88:	fe 82       	std	Y+6, r15	; 0x06
     e8a:	ed 82       	std	Y+5, r14	; 0x05
	new_item->handlerFunc = handlerFunc;
     e8c:	18 87       	std	Y+8, r17	; 0x08
     e8e:	0f 83       	std	Y+7, r16	; 0x07
	new_item->number_of_submenus = number_of_submenus;
     e90:	d8 82       	st	Y, r13
	new_item->submenus = malloc(number_of_submenus * sizeof(menuitem));
     e92:	4d 2d       	mov	r20, r13
     e94:	50 e0       	ldi	r21, 0x00	; 0
     e96:	ca 01       	movw	r24, r20
     e98:	88 0f       	add	r24, r24
     e9a:	99 1f       	adc	r25, r25
     e9c:	88 0f       	add	r24, r24
     e9e:	99 1f       	adc	r25, r25
     ea0:	88 0f       	add	r24, r24
     ea2:	99 1f       	adc	r25, r25
     ea4:	84 0f       	add	r24, r20
     ea6:	95 1f       	adc	r25, r21
     ea8:	0e 94 0c 09 	call	0x1218	; 0x1218 <malloc>
     eac:	9a 83       	std	Y+2, r25	; 0x02
     eae:	89 83       	std	Y+1, r24	; 0x01
	
	return new_item;
}
     eb0:	ce 01       	movw	r24, r28
     eb2:	df 91       	pop	r29
     eb4:	cf 91       	pop	r28
     eb6:	1f 91       	pop	r17
     eb8:	0f 91       	pop	r16
     eba:	ff 90       	pop	r15
     ebc:	ef 90       	pop	r14
     ebe:	df 90       	pop	r13
     ec0:	08 95       	ret

00000ec2 <MENU_assign_parents>:

void MENU_assign_parents(menuitem *current_menu){
     ec2:	1f 93       	push	r17
     ec4:	cf 93       	push	r28
     ec6:	df 93       	push	r29
     ec8:	ec 01       	movw	r28, r24
	for (uint8_t n = 0; n < current_menu->number_of_submenus; n++) {
     eca:	88 81       	ld	r24, Y
     ecc:	88 23       	and	r24, r24
     ece:	01 f1       	breq	.+64     	; 0xf10 <MENU_assign_parents+0x4e>
     ed0:	10 e0       	ldi	r17, 0x00	; 0
		current_menu->submenus[n]->parent = current_menu;
     ed2:	81 2f       	mov	r24, r17
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	88 0f       	add	r24, r24
     ed8:	99 1f       	adc	r25, r25
     eda:	e9 81       	ldd	r30, Y+1	; 0x01
     edc:	fa 81       	ldd	r31, Y+2	; 0x02
     ede:	e8 0f       	add	r30, r24
     ee0:	f9 1f       	adc	r31, r25
     ee2:	01 90       	ld	r0, Z+
     ee4:	f0 81       	ld	r31, Z
     ee6:	e0 2d       	mov	r30, r0
     ee8:	d4 83       	std	Z+4, r29	; 0x04
     eea:	c3 83       	std	Z+3, r28	; 0x03
		if (current_menu->submenus[n]->number_of_submenus > 0) {
     eec:	29 81       	ldd	r18, Y+1	; 0x01
     eee:	3a 81       	ldd	r19, Y+2	; 0x02
     ef0:	f9 01       	movw	r30, r18
     ef2:	e8 0f       	add	r30, r24
     ef4:	f9 1f       	adc	r31, r25
     ef6:	01 90       	ld	r0, Z+
     ef8:	f0 81       	ld	r31, Z
     efa:	e0 2d       	mov	r30, r0
     efc:	80 81       	ld	r24, Z
     efe:	88 23       	and	r24, r24
     f00:	19 f0       	breq	.+6      	; 0xf08 <MENU_assign_parents+0x46>
			MENU_assign_parents(current_menu->submenus[n]);
     f02:	cf 01       	movw	r24, r30
     f04:	0e 94 61 07 	call	0xec2	; 0xec2 <MENU_assign_parents>
	
	return new_item;
}

void MENU_assign_parents(menuitem *current_menu){
	for (uint8_t n = 0; n < current_menu->number_of_submenus; n++) {
     f08:	1f 5f       	subi	r17, 0xFF	; 255
     f0a:	88 81       	ld	r24, Y
     f0c:	18 17       	cp	r17, r24
     f0e:	08 f3       	brcs	.-62     	; 0xed2 <MENU_assign_parents+0x10>
		current_menu->submenus[n]->parent = current_menu;
		if (current_menu->submenus[n]->number_of_submenus > 0) {
			MENU_assign_parents(current_menu->submenus[n]);
		}
	}
}
     f10:	df 91       	pop	r29
     f12:	cf 91       	pop	r28
     f14:	1f 91       	pop	r17
     f16:	08 95       	ret

00000f18 <MENU_create_menu>:


menuitem* MENU_create_menu(){
     f18:	0f 93       	push	r16
     f1a:	1f 93       	push	r17
     f1c:	cf 93       	push	r28
     f1e:	df 93       	push	r29
	menuitem* root_menu = MENU_new_item("Main", NULL, 3);
     f20:	43 e0       	ldi	r20, 0x03	; 3
     f22:	60 e0       	ldi	r22, 0x00	; 0
     f24:	70 e0       	ldi	r23, 0x00	; 0
     f26:	82 e1       	ldi	r24, 0x12	; 18
     f28:	93 e0       	ldi	r25, 0x03	; 3
     f2a:	0e 94 35 07 	call	0xe6a	; 0xe6a <MENU_new_item>
     f2e:	ec 01       	movw	r28, r24
	root_menu->parent = NULL;
     f30:	1c 82       	std	Y+4, r1	; 0x04
     f32:	1b 82       	std	Y+3, r1	; 0x03
	root_menu->submenus[0] = MENU_new_item("Play game", SRAM_test, 0);
     f34:	09 81       	ldd	r16, Y+1	; 0x01
     f36:	1a 81       	ldd	r17, Y+2	; 0x02
     f38:	40 e0       	ldi	r20, 0x00	; 0
     f3a:	63 e2       	ldi	r22, 0x23	; 35
     f3c:	76 e0       	ldi	r23, 0x06	; 6
     f3e:	87 e1       	ldi	r24, 0x17	; 23
     f40:	93 e0       	ldi	r25, 0x03	; 3
     f42:	0e 94 35 07 	call	0xe6a	; 0xe6a <MENU_new_item>
     f46:	f8 01       	movw	r30, r16
     f48:	91 83       	std	Z+1, r25	; 0x01
     f4a:	80 83       	st	Z, r24
	root_menu->submenus[1] = MENU_new_item("Snake", SRAM_test, 0);
     f4c:	09 81       	ldd	r16, Y+1	; 0x01
     f4e:	1a 81       	ldd	r17, Y+2	; 0x02
     f50:	40 e0       	ldi	r20, 0x00	; 0
     f52:	63 e2       	ldi	r22, 0x23	; 35
     f54:	76 e0       	ldi	r23, 0x06	; 6
     f56:	81 e2       	ldi	r24, 0x21	; 33
     f58:	93 e0       	ldi	r25, 0x03	; 3
     f5a:	0e 94 35 07 	call	0xe6a	; 0xe6a <MENU_new_item>
     f5e:	f8 01       	movw	r30, r16
     f60:	93 83       	std	Z+3, r25	; 0x03
     f62:	82 83       	std	Z+2, r24	; 0x02
	root_menu->submenus[2] = MENU_new_item("Test functions", NULL, 2);
     f64:	09 81       	ldd	r16, Y+1	; 0x01
     f66:	1a 81       	ldd	r17, Y+2	; 0x02
     f68:	42 e0       	ldi	r20, 0x02	; 2
     f6a:	60 e0       	ldi	r22, 0x00	; 0
     f6c:	70 e0       	ldi	r23, 0x00	; 0
     f6e:	87 e2       	ldi	r24, 0x27	; 39
     f70:	93 e0       	ldi	r25, 0x03	; 3
     f72:	0e 94 35 07 	call	0xe6a	; 0xe6a <MENU_new_item>
     f76:	f8 01       	movw	r30, r16
     f78:	95 83       	std	Z+5, r25	; 0x05
     f7a:	84 83       	std	Z+4, r24	; 0x04
	root_menu->submenus[2]->submenus[0] = MENU_new_item("Flash diode", flash_diode, 0);
     f7c:	e9 81       	ldd	r30, Y+1	; 0x01
     f7e:	fa 81       	ldd	r31, Y+2	; 0x02
     f80:	04 80       	ldd	r0, Z+4	; 0x04
     f82:	f5 81       	ldd	r31, Z+5	; 0x05
     f84:	e0 2d       	mov	r30, r0
     f86:	01 81       	ldd	r16, Z+1	; 0x01
     f88:	12 81       	ldd	r17, Z+2	; 0x02
     f8a:	40 e0       	ldi	r20, 0x00	; 0
     f8c:	6e ed       	ldi	r22, 0xDE	; 222
     f8e:	78 e0       	ldi	r23, 0x08	; 8
     f90:	86 e3       	ldi	r24, 0x36	; 54
     f92:	93 e0       	ldi	r25, 0x03	; 3
     f94:	0e 94 35 07 	call	0xe6a	; 0xe6a <MENU_new_item>
     f98:	f8 01       	movw	r30, r16
     f9a:	91 83       	std	Z+1, r25	; 0x01
     f9c:	80 83       	st	Z, r24
	root_menu->submenus[2]->submenus[1] = MENU_new_item("CAN loopback", can_test_loopback, 0);
     f9e:	e9 81       	ldd	r30, Y+1	; 0x01
     fa0:	fa 81       	ldd	r31, Y+2	; 0x02
     fa2:	04 80       	ldd	r0, Z+4	; 0x04
     fa4:	f5 81       	ldd	r31, Z+5	; 0x05
     fa6:	e0 2d       	mov	r30, r0
     fa8:	01 81       	ldd	r16, Z+1	; 0x01
     faa:	12 81       	ldd	r17, Z+2	; 0x02
     fac:	40 e0       	ldi	r20, 0x00	; 0
     fae:	61 e0       	ldi	r22, 0x01	; 1
     fb0:	73 e0       	ldi	r23, 0x03	; 3
     fb2:	82 e4       	ldi	r24, 0x42	; 66
     fb4:	93 e0       	ldi	r25, 0x03	; 3
     fb6:	0e 94 35 07 	call	0xe6a	; 0xe6a <MENU_new_item>
     fba:	f8 01       	movw	r30, r16
     fbc:	93 83       	std	Z+3, r25	; 0x03
     fbe:	82 83       	std	Z+2, r24	; 0x02
	//root_menu->submenus[2]->submenus[2] = MENU_new_item("CAN loopback", flash_diode, 0);

	
	MENU_assign_parents(root_menu);
     fc0:	ce 01       	movw	r24, r28
     fc2:	0e 94 61 07 	call	0xec2	; 0xec2 <MENU_assign_parents>
		
	return root_menu;
}
     fc6:	ce 01       	movw	r24, r28
     fc8:	df 91       	pop	r29
     fca:	cf 91       	pop	r28
     fcc:	1f 91       	pop	r17
     fce:	0f 91       	pop	r16
     fd0:	08 95       	ret

00000fd2 <MENU_print>:

//fixed
void MENU_print(menuitem *current_menu_item){
     fd2:	ef 92       	push	r14
     fd4:	ff 92       	push	r15
     fd6:	0f 93       	push	r16
     fd8:	1f 93       	push	r17
     fda:	cf 93       	push	r28
     fdc:	df 93       	push	r29
     fde:	7c 01       	movw	r14, r24
	oled_clear_screen();
     fe0:	0e 94 84 04 	call	0x908	; 0x908 <oled_clear_screen>
	oled_print_arrow(last_arrow_pos, 0);
     fe4:	60 e0       	ldi	r22, 0x00	; 0
     fe6:	80 91 2a 01 	lds	r24, 0x012A
     fea:	0e 94 90 05 	call	0xb20	; 0xb20 <oled_print_arrow>
	oled_pos(0,0);
     fee:	60 e0       	ldi	r22, 0x00	; 0
     ff0:	70 e0       	ldi	r23, 0x00	; 0
     ff2:	80 e0       	ldi	r24, 0x00	; 0
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	0e 94 9a 04 	call	0x934	; 0x934 <oled_pos>
	oled_printf(current_menu_item->name);
     ffa:	d7 01       	movw	r26, r14
     ffc:	16 96       	adiw	r26, 0x06	; 6
     ffe:	8c 91       	ld	r24, X
    1000:	16 97       	sbiw	r26, 0x06	; 6
    1002:	8f 93       	push	r24
    1004:	15 96       	adiw	r26, 0x05	; 5
    1006:	8c 91       	ld	r24, X
    1008:	8f 93       	push	r24
    100a:	0e 94 c2 04 	call	0x984	; 0x984 <oled_printf>
	//printf("%s\n", current_menu_item->name);
	
	for (unsigned int i = 0; i < current_menu_item->number_of_submenus; i++) {
    100e:	0f 90       	pop	r0
    1010:	0f 90       	pop	r0
    1012:	f7 01       	movw	r30, r14
    1014:	80 81       	ld	r24, Z
    1016:	88 23       	and	r24, r24
    1018:	21 f1       	breq	.+72     	; 0x1062 <MENU_print+0x90>
    101a:	00 e0       	ldi	r16, 0x00	; 0
    101c:	10 e0       	ldi	r17, 0x00	; 0
    101e:	c0 e0       	ldi	r28, 0x00	; 0
    1020:	d0 e0       	ldi	r29, 0x00	; 0
		oled_pos(i + 1, MENU_INDENT);
    1022:	21 96       	adiw	r28, 0x01	; 1
    1024:	62 e0       	ldi	r22, 0x02	; 2
    1026:	70 e0       	ldi	r23, 0x00	; 0
    1028:	ce 01       	movw	r24, r28
    102a:	0e 94 9a 04 	call	0x934	; 0x934 <oled_pos>
		oled_printf(current_menu_item->submenus[i]->name);
    102e:	d7 01       	movw	r26, r14
    1030:	11 96       	adiw	r26, 0x01	; 1
    1032:	ed 91       	ld	r30, X+
    1034:	fc 91       	ld	r31, X
    1036:	12 97       	sbiw	r26, 0x02	; 2
    1038:	e0 0f       	add	r30, r16
    103a:	f1 1f       	adc	r31, r17
    103c:	01 90       	ld	r0, Z+
    103e:	f0 81       	ld	r31, Z
    1040:	e0 2d       	mov	r30, r0
    1042:	86 81       	ldd	r24, Z+6	; 0x06
    1044:	8f 93       	push	r24
    1046:	85 81       	ldd	r24, Z+5	; 0x05
    1048:	8f 93       	push	r24
    104a:	0e 94 c2 04 	call	0x984	; 0x984 <oled_printf>
    104e:	0e 5f       	subi	r16, 0xFE	; 254
    1050:	1f 4f       	sbci	r17, 0xFF	; 255
	oled_print_arrow(last_arrow_pos, 0);
	oled_pos(0,0);
	oled_printf(current_menu_item->name);
	//printf("%s\n", current_menu_item->name);
	
	for (unsigned int i = 0; i < current_menu_item->number_of_submenus; i++) {
    1052:	f7 01       	movw	r30, r14
    1054:	80 81       	ld	r24, Z
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	0f 90       	pop	r0
    105a:	0f 90       	pop	r0
    105c:	c8 17       	cp	r28, r24
    105e:	d9 07       	cpc	r29, r25
    1060:	00 f3       	brcs	.-64     	; 0x1022 <MENU_print+0x50>
		oled_pos(i + 1, MENU_INDENT);
		oled_printf(current_menu_item->submenus[i]->name);
		//printf("%s\n",current_menu_item->submenus[i]->name);
	}
}
    1062:	df 91       	pop	r29
    1064:	cf 91       	pop	r28
    1066:	1f 91       	pop	r17
    1068:	0f 91       	pop	r16
    106a:	ff 90       	pop	r15
    106c:	ef 90       	pop	r14
    106e:	08 95       	ret

00001070 <MENU_navigate>:

void MENU_navigate(menuitem *current_menu){
    1070:	8c 01       	movw	r16, r24
	MENU_print(current_menu);
    1072:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <MENU_print>
	while(1){
		if(joystick_direction_Y() != 0){
    1076:	0e 94 a9 03 	call	0x752	; 0x752 <joystick_direction_Y>
    107a:	89 2b       	or	r24, r25
    107c:	71 f0       	breq	.+28     	; 0x109a <MENU_navigate+0x2a>
			last_arrow_pos = oled_arrow_handler(joystick_direction_Y(), 1, current_menu->number_of_submenus);
    107e:	d8 01       	movw	r26, r16
    1080:	cc 91       	ld	r28, X
    1082:	d0 e0       	ldi	r29, 0x00	; 0
    1084:	0e 94 a9 03 	call	0x752	; 0x752 <joystick_direction_Y>
    1088:	ae 01       	movw	r20, r28
    108a:	61 e0       	ldi	r22, 0x01	; 1
    108c:	70 e0       	ldi	r23, 0x00	; 0
    108e:	0e 94 fd 05 	call	0xbfa	; 0xbfa <oled_arrow_handler>
    1092:	90 93 2b 01 	sts	0x012B, r25
    1096:	80 93 2a 01 	sts	0x012A, r24
		}
		
		if(joystick_direction_X() != 0){
    109a:	0e 94 be 03 	call	0x77c	; 0x77c <joystick_direction_X>
    109e:	89 2b       	or	r24, r25
    10a0:	51 f3       	breq	.-44     	; 0x1076 <MENU_navigate+0x6>
			if (joystick_direction_X() == 1) {
    10a2:	0e 94 be 03 	call	0x77c	; 0x77c <joystick_direction_X>
    10a6:	01 97       	sbiw	r24, 0x01	; 1
    10a8:	09 f0       	breq	.+2      	; 0x10ac <MENU_navigate+0x3c>
    10aa:	6b c0       	rjmp	.+214    	; 0x1182 <MENU_navigate+0x112>
				if (current_menu->submenus[oled_get_arrow_page() - 1]->number_of_submenus > 0) {
    10ac:	f8 01       	movw	r30, r16
    10ae:	c1 81       	ldd	r28, Z+1	; 0x01
    10b0:	d2 81       	ldd	r29, Z+2	; 0x02
    10b2:	0e 94 8d 05 	call	0xb1a	; 0xb1a <oled_get_arrow_page>
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	81 50       	subi	r24, 0x01	; 1
    10ba:	90 48       	sbci	r25, 0x80	; 128
    10bc:	88 0f       	add	r24, r24
    10be:	99 1f       	adc	r25, r25
    10c0:	c8 0f       	add	r28, r24
    10c2:	d9 1f       	adc	r29, r25
    10c4:	e8 81       	ld	r30, Y
    10c6:	f9 81       	ldd	r31, Y+1	; 0x01
    10c8:	80 81       	ld	r24, Z
    10ca:	88 23       	and	r24, r24
    10cc:	51 f1       	breq	.+84     	; 0x1122 <MENU_navigate+0xb2>
					current_menu = current_menu->submenus[oled_get_arrow_page() - 1];
    10ce:	d8 01       	movw	r26, r16
    10d0:	11 96       	adiw	r26, 0x01	; 1
    10d2:	cd 91       	ld	r28, X+
    10d4:	dc 91       	ld	r29, X
    10d6:	12 97       	sbiw	r26, 0x02	; 2
    10d8:	0e 94 8d 05 	call	0xb1a	; 0xb1a <oled_get_arrow_page>
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	81 50       	subi	r24, 0x01	; 1
    10e0:	90 48       	sbci	r25, 0x80	; 128
    10e2:	88 0f       	add	r24, r24
    10e4:	99 1f       	adc	r25, r25
    10e6:	c8 0f       	add	r28, r24
    10e8:	d9 1f       	adc	r29, r25
    10ea:	08 81       	ld	r16, Y
    10ec:	19 81       	ldd	r17, Y+1	; 0x01
					printf(current_menu->submenus[0]->name);
    10ee:	d8 01       	movw	r26, r16
    10f0:	11 96       	adiw	r26, 0x01	; 1
    10f2:	ed 91       	ld	r30, X+
    10f4:	fc 91       	ld	r31, X
    10f6:	12 97       	sbiw	r26, 0x02	; 2
    10f8:	01 90       	ld	r0, Z+
    10fa:	f0 81       	ld	r31, Z
    10fc:	e0 2d       	mov	r30, r0
    10fe:	86 81       	ldd	r24, Z+6	; 0x06
    1100:	8f 93       	push	r24
    1102:	85 81       	ldd	r24, Z+5	; 0x05
    1104:	8f 93       	push	r24
    1106:	0e 94 91 0a 	call	0x1522	; 0x1522 <printf>
					last_arrow_pos = 1;
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	90 93 2b 01 	sts	0x012B, r25
    1112:	80 93 2a 01 	sts	0x012A, r24
					MENU_print(current_menu);
    1116:	c8 01       	movw	r24, r16
    1118:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <MENU_print>
    111c:	0f 90       	pop	r0
    111e:	0f 90       	pop	r0
    1120:	43 c0       	rjmp	.+134    	; 0x11a8 <MENU_navigate+0x138>
				} else  if (current_menu->submenus[oled_get_arrow_page() - 1]->handlerFunc != NULL) {
    1122:	f8 01       	movw	r30, r16
    1124:	c1 81       	ldd	r28, Z+1	; 0x01
    1126:	d2 81       	ldd	r29, Z+2	; 0x02
    1128:	0e 94 8d 05 	call	0xb1a	; 0xb1a <oled_get_arrow_page>
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	81 50       	subi	r24, 0x01	; 1
    1130:	90 48       	sbci	r25, 0x80	; 128
    1132:	88 0f       	add	r24, r24
    1134:	99 1f       	adc	r25, r25
    1136:	c8 0f       	add	r28, r24
    1138:	d9 1f       	adc	r29, r25
    113a:	e8 81       	ld	r30, Y
    113c:	f9 81       	ldd	r31, Y+1	; 0x01
    113e:	87 81       	ldd	r24, Z+7	; 0x07
    1140:	90 85       	ldd	r25, Z+8	; 0x08
    1142:	89 2b       	or	r24, r25
    1144:	89 f1       	breq	.+98     	; 0x11a8 <MENU_navigate+0x138>
					current_menu->submenus[oled_get_arrow_page() - 1]->handlerFunc();
    1146:	d8 01       	movw	r26, r16
    1148:	11 96       	adiw	r26, 0x01	; 1
    114a:	cd 91       	ld	r28, X+
    114c:	dc 91       	ld	r29, X
    114e:	12 97       	sbiw	r26, 0x02	; 2
    1150:	0e 94 8d 05 	call	0xb1a	; 0xb1a <oled_get_arrow_page>
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	81 50       	subi	r24, 0x01	; 1
    1158:	90 48       	sbci	r25, 0x80	; 128
    115a:	88 0f       	add	r24, r24
    115c:	99 1f       	adc	r25, r25
    115e:	c8 0f       	add	r28, r24
    1160:	d9 1f       	adc	r29, r25
    1162:	e8 81       	ld	r30, Y
    1164:	f9 81       	ldd	r31, Y+1	; 0x01
    1166:	07 80       	ldd	r0, Z+7	; 0x07
    1168:	f0 85       	ldd	r31, Z+8	; 0x08
    116a:	e0 2d       	mov	r30, r0
    116c:	09 95       	icall
					last_arrow_pos = 1;
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	90 93 2b 01 	sts	0x012B, r25
    1176:	80 93 2a 01 	sts	0x012A, r24
					MENU_print(current_menu);
    117a:	c8 01       	movw	r24, r16
    117c:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <MENU_print>
    1180:	13 c0       	rjmp	.+38     	; 0x11a8 <MENU_navigate+0x138>
				}
			} else if (joystick_direction_X() == -1 && current_menu->parent != NULL) {
    1182:	0e 94 be 03 	call	0x77c	; 0x77c <joystick_direction_X>
    1186:	01 96       	adiw	r24, 0x01	; 1
    1188:	79 f4       	brne	.+30     	; 0x11a8 <MENU_navigate+0x138>
    118a:	f8 01       	movw	r30, r16
    118c:	c3 81       	ldd	r28, Z+3	; 0x03
    118e:	d4 81       	ldd	r29, Z+4	; 0x04
    1190:	20 97       	sbiw	r28, 0x00	; 0
    1192:	51 f0       	breq	.+20     	; 0x11a8 <MENU_navigate+0x138>
				current_menu = current_menu->parent;
				last_arrow_pos = 1;
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	90 93 2b 01 	sts	0x012B, r25
    119c:	80 93 2a 01 	sts	0x012A, r24
				MENU_print(current_menu);
    11a0:	ce 01       	movw	r24, r28
    11a2:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <MENU_print>
					current_menu->submenus[oled_get_arrow_page() - 1]->handlerFunc();
					last_arrow_pos = 1;
					MENU_print(current_menu);
				}
			} else if (joystick_direction_X() == -1 && current_menu->parent != NULL) {
				current_menu = current_menu->parent;
    11a6:	8e 01       	movw	r16, r28
    11a8:	ff e9       	ldi	r31, 0x9F	; 159
    11aa:	26 e8       	ldi	r18, 0x86	; 134
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	f1 50       	subi	r31, 0x01	; 1
    11b0:	20 40       	sbci	r18, 0x00	; 0
    11b2:	80 40       	sbci	r24, 0x00	; 0
    11b4:	e1 f7       	brne	.-8      	; 0x11ae <MENU_navigate+0x13e>
    11b6:	00 c0       	rjmp	.+0      	; 0x11b8 <MENU_navigate+0x148>
    11b8:	00 00       	nop
    11ba:	5d cf       	rjmp	.-326    	; 0x1076 <MENU_navigate+0x6>

000011bc <flash_diode>:
#include "Drivers/oled_driver.h"


//Simple test, Ex 1, task 6
void flash_diode(){
	oled_clear_screen();
    11bc:	0e 94 84 04 	call	0x908	; 0x908 <oled_clear_screen>
	oled_pos(2,3);
    11c0:	63 e0       	ldi	r22, 0x03	; 3
    11c2:	70 e0       	ldi	r23, 0x00	; 0
    11c4:	82 e0       	ldi	r24, 0x02	; 2
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	0e 94 9a 04 	call	0x934	; 0x934 <oled_pos>
	oled_printf("FLASHING");
    11cc:	8f e4       	ldi	r24, 0x4F	; 79
    11ce:	93 e0       	ldi	r25, 0x03	; 3
    11d0:	9f 93       	push	r25
    11d2:	8f 93       	push	r24
    11d4:	0e 94 c2 04 	call	0x984	; 0x984 <oled_printf>
	oled_pos(4,4);
    11d8:	64 e0       	ldi	r22, 0x04	; 4
    11da:	70 e0       	ldi	r23, 0x00	; 0
    11dc:	84 e0       	ldi	r24, 0x04	; 4
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	0e 94 9a 04 	call	0x934	; 0x934 <oled_pos>
	oled_printf("DIODE");
    11e4:	88 e5       	ldi	r24, 0x58	; 88
    11e6:	93 e0       	ldi	r25, 0x03	; 3
    11e8:	9f 93       	push	r25
    11ea:	8f 93       	push	r24
    11ec:	0e 94 c2 04 	call	0x984	; 0x984 <oled_printf>
    11f0:	0f 90       	pop	r0
    11f2:	0f 90       	pop	r0
    11f4:	0f 90       	pop	r0
    11f6:	0f 90       	pop	r0
    11f8:	84 e1       	ldi	r24, 0x14	; 20
    11fa:	90 e0       	ldi	r25, 0x00	; 0
	for (int i = 0; i<20; i++) {
		PORTB |= (1<<PINB0);
    11fc:	c0 9a       	sbi	0x18, 0	; 24
    11fe:	e0 e0       	ldi	r30, 0x00	; 0
    1200:	f0 ef       	ldi	r31, 0xF0	; 240
    1202:	31 97       	sbiw	r30, 0x01	; 1
    1204:	f1 f7       	brne	.-4      	; 0x1202 <flash_diode+0x46>
		_delay_ms(50);
		PORTB &= ~(1<<PINB0);
    1206:	c0 98       	cbi	0x18, 0	; 24
    1208:	e0 e0       	ldi	r30, 0x00	; 0
    120a:	f0 ef       	ldi	r31, 0xF0	; 240
    120c:	31 97       	sbiw	r30, 0x01	; 1
    120e:	f1 f7       	brne	.-4      	; 0x120c <flash_diode+0x50>
    1210:	01 97       	sbiw	r24, 0x01	; 1
	oled_clear_screen();
	oled_pos(2,3);
	oled_printf("FLASHING");
	oled_pos(4,4);
	oled_printf("DIODE");
	for (int i = 0; i<20; i++) {
    1212:	00 97       	sbiw	r24, 0x00	; 0
    1214:	99 f7       	brne	.-26     	; 0x11fc <flash_diode+0x40>
		PORTB |= (1<<PINB0);
		_delay_ms(50);
		PORTB &= ~(1<<PINB0);
		_delay_ms(50);
	}
}
    1216:	08 95       	ret

00001218 <malloc>:
    1218:	cf 93       	push	r28
    121a:	df 93       	push	r29
    121c:	82 30       	cpi	r24, 0x02	; 2
    121e:	91 05       	cpc	r25, r1
    1220:	10 f4       	brcc	.+4      	; 0x1226 <malloc+0xe>
    1222:	82 e0       	ldi	r24, 0x02	; 2
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	e0 91 5d 04 	lds	r30, 0x045D
    122a:	f0 91 5e 04 	lds	r31, 0x045E
    122e:	20 e0       	ldi	r18, 0x00	; 0
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	a0 e0       	ldi	r26, 0x00	; 0
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	30 97       	sbiw	r30, 0x00	; 0
    1238:	39 f1       	breq	.+78     	; 0x1288 <malloc+0x70>
    123a:	40 81       	ld	r20, Z
    123c:	51 81       	ldd	r21, Z+1	; 0x01
    123e:	48 17       	cp	r20, r24
    1240:	59 07       	cpc	r21, r25
    1242:	b8 f0       	brcs	.+46     	; 0x1272 <malloc+0x5a>
    1244:	48 17       	cp	r20, r24
    1246:	59 07       	cpc	r21, r25
    1248:	71 f4       	brne	.+28     	; 0x1266 <malloc+0x4e>
    124a:	82 81       	ldd	r24, Z+2	; 0x02
    124c:	93 81       	ldd	r25, Z+3	; 0x03
    124e:	10 97       	sbiw	r26, 0x00	; 0
    1250:	29 f0       	breq	.+10     	; 0x125c <malloc+0x44>
    1252:	13 96       	adiw	r26, 0x03	; 3
    1254:	9c 93       	st	X, r25
    1256:	8e 93       	st	-X, r24
    1258:	12 97       	sbiw	r26, 0x02	; 2
    125a:	2c c0       	rjmp	.+88     	; 0x12b4 <malloc+0x9c>
    125c:	90 93 5e 04 	sts	0x045E, r25
    1260:	80 93 5d 04 	sts	0x045D, r24
    1264:	27 c0       	rjmp	.+78     	; 0x12b4 <malloc+0x9c>
    1266:	21 15       	cp	r18, r1
    1268:	31 05       	cpc	r19, r1
    126a:	31 f0       	breq	.+12     	; 0x1278 <malloc+0x60>
    126c:	42 17       	cp	r20, r18
    126e:	53 07       	cpc	r21, r19
    1270:	18 f0       	brcs	.+6      	; 0x1278 <malloc+0x60>
    1272:	a9 01       	movw	r20, r18
    1274:	db 01       	movw	r26, r22
    1276:	01 c0       	rjmp	.+2      	; 0x127a <malloc+0x62>
    1278:	ef 01       	movw	r28, r30
    127a:	9a 01       	movw	r18, r20
    127c:	bd 01       	movw	r22, r26
    127e:	df 01       	movw	r26, r30
    1280:	02 80       	ldd	r0, Z+2	; 0x02
    1282:	f3 81       	ldd	r31, Z+3	; 0x03
    1284:	e0 2d       	mov	r30, r0
    1286:	d7 cf       	rjmp	.-82     	; 0x1236 <malloc+0x1e>
    1288:	21 15       	cp	r18, r1
    128a:	31 05       	cpc	r19, r1
    128c:	f9 f0       	breq	.+62     	; 0x12cc <malloc+0xb4>
    128e:	28 1b       	sub	r18, r24
    1290:	39 0b       	sbc	r19, r25
    1292:	24 30       	cpi	r18, 0x04	; 4
    1294:	31 05       	cpc	r19, r1
    1296:	80 f4       	brcc	.+32     	; 0x12b8 <malloc+0xa0>
    1298:	8a 81       	ldd	r24, Y+2	; 0x02
    129a:	9b 81       	ldd	r25, Y+3	; 0x03
    129c:	61 15       	cp	r22, r1
    129e:	71 05       	cpc	r23, r1
    12a0:	21 f0       	breq	.+8      	; 0x12aa <malloc+0x92>
    12a2:	fb 01       	movw	r30, r22
    12a4:	93 83       	std	Z+3, r25	; 0x03
    12a6:	82 83       	std	Z+2, r24	; 0x02
    12a8:	04 c0       	rjmp	.+8      	; 0x12b2 <malloc+0x9a>
    12aa:	90 93 5e 04 	sts	0x045E, r25
    12ae:	80 93 5d 04 	sts	0x045D, r24
    12b2:	fe 01       	movw	r30, r28
    12b4:	32 96       	adiw	r30, 0x02	; 2
    12b6:	44 c0       	rjmp	.+136    	; 0x1340 <malloc+0x128>
    12b8:	fe 01       	movw	r30, r28
    12ba:	e2 0f       	add	r30, r18
    12bc:	f3 1f       	adc	r31, r19
    12be:	81 93       	st	Z+, r24
    12c0:	91 93       	st	Z+, r25
    12c2:	22 50       	subi	r18, 0x02	; 2
    12c4:	31 09       	sbc	r19, r1
    12c6:	39 83       	std	Y+1, r19	; 0x01
    12c8:	28 83       	st	Y, r18
    12ca:	3a c0       	rjmp	.+116    	; 0x1340 <malloc+0x128>
    12cc:	20 91 5b 04 	lds	r18, 0x045B
    12d0:	30 91 5c 04 	lds	r19, 0x045C
    12d4:	23 2b       	or	r18, r19
    12d6:	41 f4       	brne	.+16     	; 0x12e8 <malloc+0xd0>
    12d8:	20 91 02 01 	lds	r18, 0x0102
    12dc:	30 91 03 01 	lds	r19, 0x0103
    12e0:	30 93 5c 04 	sts	0x045C, r19
    12e4:	20 93 5b 04 	sts	0x045B, r18
    12e8:	20 91 00 01 	lds	r18, 0x0100
    12ec:	30 91 01 01 	lds	r19, 0x0101
    12f0:	21 15       	cp	r18, r1
    12f2:	31 05       	cpc	r19, r1
    12f4:	41 f4       	brne	.+16     	; 0x1306 <malloc+0xee>
    12f6:	2d b7       	in	r18, 0x3d	; 61
    12f8:	3e b7       	in	r19, 0x3e	; 62
    12fa:	40 91 04 01 	lds	r20, 0x0104
    12fe:	50 91 05 01 	lds	r21, 0x0105
    1302:	24 1b       	sub	r18, r20
    1304:	35 0b       	sbc	r19, r21
    1306:	e0 91 5b 04 	lds	r30, 0x045B
    130a:	f0 91 5c 04 	lds	r31, 0x045C
    130e:	e2 17       	cp	r30, r18
    1310:	f3 07       	cpc	r31, r19
    1312:	a0 f4       	brcc	.+40     	; 0x133c <malloc+0x124>
    1314:	2e 1b       	sub	r18, r30
    1316:	3f 0b       	sbc	r19, r31
    1318:	28 17       	cp	r18, r24
    131a:	39 07       	cpc	r19, r25
    131c:	78 f0       	brcs	.+30     	; 0x133c <malloc+0x124>
    131e:	ac 01       	movw	r20, r24
    1320:	4e 5f       	subi	r20, 0xFE	; 254
    1322:	5f 4f       	sbci	r21, 0xFF	; 255
    1324:	24 17       	cp	r18, r20
    1326:	35 07       	cpc	r19, r21
    1328:	48 f0       	brcs	.+18     	; 0x133c <malloc+0x124>
    132a:	4e 0f       	add	r20, r30
    132c:	5f 1f       	adc	r21, r31
    132e:	50 93 5c 04 	sts	0x045C, r21
    1332:	40 93 5b 04 	sts	0x045B, r20
    1336:	81 93       	st	Z+, r24
    1338:	91 93       	st	Z+, r25
    133a:	02 c0       	rjmp	.+4      	; 0x1340 <malloc+0x128>
    133c:	e0 e0       	ldi	r30, 0x00	; 0
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	cf 01       	movw	r24, r30
    1342:	df 91       	pop	r29
    1344:	cf 91       	pop	r28
    1346:	08 95       	ret

00001348 <free>:
    1348:	cf 93       	push	r28
    134a:	df 93       	push	r29
    134c:	00 97       	sbiw	r24, 0x00	; 0
    134e:	09 f4       	brne	.+2      	; 0x1352 <free+0xa>
    1350:	87 c0       	rjmp	.+270    	; 0x1460 <free+0x118>
    1352:	fc 01       	movw	r30, r24
    1354:	32 97       	sbiw	r30, 0x02	; 2
    1356:	13 82       	std	Z+3, r1	; 0x03
    1358:	12 82       	std	Z+2, r1	; 0x02
    135a:	c0 91 5d 04 	lds	r28, 0x045D
    135e:	d0 91 5e 04 	lds	r29, 0x045E
    1362:	20 97       	sbiw	r28, 0x00	; 0
    1364:	81 f4       	brne	.+32     	; 0x1386 <free+0x3e>
    1366:	20 81       	ld	r18, Z
    1368:	31 81       	ldd	r19, Z+1	; 0x01
    136a:	28 0f       	add	r18, r24
    136c:	39 1f       	adc	r19, r25
    136e:	80 91 5b 04 	lds	r24, 0x045B
    1372:	90 91 5c 04 	lds	r25, 0x045C
    1376:	82 17       	cp	r24, r18
    1378:	93 07       	cpc	r25, r19
    137a:	79 f5       	brne	.+94     	; 0x13da <free+0x92>
    137c:	f0 93 5c 04 	sts	0x045C, r31
    1380:	e0 93 5b 04 	sts	0x045B, r30
    1384:	6d c0       	rjmp	.+218    	; 0x1460 <free+0x118>
    1386:	de 01       	movw	r26, r28
    1388:	20 e0       	ldi	r18, 0x00	; 0
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	ae 17       	cp	r26, r30
    138e:	bf 07       	cpc	r27, r31
    1390:	50 f4       	brcc	.+20     	; 0x13a6 <free+0x5e>
    1392:	12 96       	adiw	r26, 0x02	; 2
    1394:	4d 91       	ld	r20, X+
    1396:	5c 91       	ld	r21, X
    1398:	13 97       	sbiw	r26, 0x03	; 3
    139a:	9d 01       	movw	r18, r26
    139c:	41 15       	cp	r20, r1
    139e:	51 05       	cpc	r21, r1
    13a0:	09 f1       	breq	.+66     	; 0x13e4 <free+0x9c>
    13a2:	da 01       	movw	r26, r20
    13a4:	f3 cf       	rjmp	.-26     	; 0x138c <free+0x44>
    13a6:	b3 83       	std	Z+3, r27	; 0x03
    13a8:	a2 83       	std	Z+2, r26	; 0x02
    13aa:	40 81       	ld	r20, Z
    13ac:	51 81       	ldd	r21, Z+1	; 0x01
    13ae:	84 0f       	add	r24, r20
    13b0:	95 1f       	adc	r25, r21
    13b2:	8a 17       	cp	r24, r26
    13b4:	9b 07       	cpc	r25, r27
    13b6:	71 f4       	brne	.+28     	; 0x13d4 <free+0x8c>
    13b8:	8d 91       	ld	r24, X+
    13ba:	9c 91       	ld	r25, X
    13bc:	11 97       	sbiw	r26, 0x01	; 1
    13be:	84 0f       	add	r24, r20
    13c0:	95 1f       	adc	r25, r21
    13c2:	02 96       	adiw	r24, 0x02	; 2
    13c4:	91 83       	std	Z+1, r25	; 0x01
    13c6:	80 83       	st	Z, r24
    13c8:	12 96       	adiw	r26, 0x02	; 2
    13ca:	8d 91       	ld	r24, X+
    13cc:	9c 91       	ld	r25, X
    13ce:	13 97       	sbiw	r26, 0x03	; 3
    13d0:	93 83       	std	Z+3, r25	; 0x03
    13d2:	82 83       	std	Z+2, r24	; 0x02
    13d4:	21 15       	cp	r18, r1
    13d6:	31 05       	cpc	r19, r1
    13d8:	29 f4       	brne	.+10     	; 0x13e4 <free+0x9c>
    13da:	f0 93 5e 04 	sts	0x045E, r31
    13de:	e0 93 5d 04 	sts	0x045D, r30
    13e2:	3e c0       	rjmp	.+124    	; 0x1460 <free+0x118>
    13e4:	d9 01       	movw	r26, r18
    13e6:	13 96       	adiw	r26, 0x03	; 3
    13e8:	fc 93       	st	X, r31
    13ea:	ee 93       	st	-X, r30
    13ec:	12 97       	sbiw	r26, 0x02	; 2
    13ee:	4d 91       	ld	r20, X+
    13f0:	5d 91       	ld	r21, X+
    13f2:	a4 0f       	add	r26, r20
    13f4:	b5 1f       	adc	r27, r21
    13f6:	ea 17       	cp	r30, r26
    13f8:	fb 07       	cpc	r31, r27
    13fa:	79 f4       	brne	.+30     	; 0x141a <free+0xd2>
    13fc:	80 81       	ld	r24, Z
    13fe:	91 81       	ldd	r25, Z+1	; 0x01
    1400:	84 0f       	add	r24, r20
    1402:	95 1f       	adc	r25, r21
    1404:	02 96       	adiw	r24, 0x02	; 2
    1406:	d9 01       	movw	r26, r18
    1408:	11 96       	adiw	r26, 0x01	; 1
    140a:	9c 93       	st	X, r25
    140c:	8e 93       	st	-X, r24
    140e:	82 81       	ldd	r24, Z+2	; 0x02
    1410:	93 81       	ldd	r25, Z+3	; 0x03
    1412:	13 96       	adiw	r26, 0x03	; 3
    1414:	9c 93       	st	X, r25
    1416:	8e 93       	st	-X, r24
    1418:	12 97       	sbiw	r26, 0x02	; 2
    141a:	e0 e0       	ldi	r30, 0x00	; 0
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	8a 81       	ldd	r24, Y+2	; 0x02
    1420:	9b 81       	ldd	r25, Y+3	; 0x03
    1422:	00 97       	sbiw	r24, 0x00	; 0
    1424:	19 f0       	breq	.+6      	; 0x142c <free+0xe4>
    1426:	fe 01       	movw	r30, r28
    1428:	ec 01       	movw	r28, r24
    142a:	f9 cf       	rjmp	.-14     	; 0x141e <free+0xd6>
    142c:	ce 01       	movw	r24, r28
    142e:	02 96       	adiw	r24, 0x02	; 2
    1430:	28 81       	ld	r18, Y
    1432:	39 81       	ldd	r19, Y+1	; 0x01
    1434:	82 0f       	add	r24, r18
    1436:	93 1f       	adc	r25, r19
    1438:	20 91 5b 04 	lds	r18, 0x045B
    143c:	30 91 5c 04 	lds	r19, 0x045C
    1440:	28 17       	cp	r18, r24
    1442:	39 07       	cpc	r19, r25
    1444:	69 f4       	brne	.+26     	; 0x1460 <free+0x118>
    1446:	30 97       	sbiw	r30, 0x00	; 0
    1448:	29 f4       	brne	.+10     	; 0x1454 <free+0x10c>
    144a:	10 92 5e 04 	sts	0x045E, r1
    144e:	10 92 5d 04 	sts	0x045D, r1
    1452:	02 c0       	rjmp	.+4      	; 0x1458 <free+0x110>
    1454:	13 82       	std	Z+3, r1	; 0x03
    1456:	12 82       	std	Z+2, r1	; 0x02
    1458:	d0 93 5c 04 	sts	0x045C, r29
    145c:	c0 93 5b 04 	sts	0x045B, r28
    1460:	df 91       	pop	r29
    1462:	cf 91       	pop	r28
    1464:	08 95       	ret

00001466 <do_rand>:
    1466:	8f 92       	push	r8
    1468:	9f 92       	push	r9
    146a:	af 92       	push	r10
    146c:	bf 92       	push	r11
    146e:	cf 92       	push	r12
    1470:	df 92       	push	r13
    1472:	ef 92       	push	r14
    1474:	ff 92       	push	r15
    1476:	cf 93       	push	r28
    1478:	df 93       	push	r29
    147a:	ec 01       	movw	r28, r24
    147c:	68 81       	ld	r22, Y
    147e:	79 81       	ldd	r23, Y+1	; 0x01
    1480:	8a 81       	ldd	r24, Y+2	; 0x02
    1482:	9b 81       	ldd	r25, Y+3	; 0x03
    1484:	61 15       	cp	r22, r1
    1486:	71 05       	cpc	r23, r1
    1488:	81 05       	cpc	r24, r1
    148a:	91 05       	cpc	r25, r1
    148c:	21 f4       	brne	.+8      	; 0x1496 <do_rand+0x30>
    148e:	64 e2       	ldi	r22, 0x24	; 36
    1490:	79 ed       	ldi	r23, 0xD9	; 217
    1492:	8b e5       	ldi	r24, 0x5B	; 91
    1494:	97 e0       	ldi	r25, 0x07	; 7
    1496:	2d e1       	ldi	r18, 0x1D	; 29
    1498:	33 ef       	ldi	r19, 0xF3	; 243
    149a:	41 e0       	ldi	r20, 0x01	; 1
    149c:	50 e0       	ldi	r21, 0x00	; 0
    149e:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <__divmodsi4>
    14a2:	49 01       	movw	r8, r18
    14a4:	5a 01       	movw	r10, r20
    14a6:	9b 01       	movw	r18, r22
    14a8:	ac 01       	movw	r20, r24
    14aa:	a7 ea       	ldi	r26, 0xA7	; 167
    14ac:	b1 e4       	ldi	r27, 0x41	; 65
    14ae:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__muluhisi3>
    14b2:	6b 01       	movw	r12, r22
    14b4:	7c 01       	movw	r14, r24
    14b6:	ac ee       	ldi	r26, 0xEC	; 236
    14b8:	b4 ef       	ldi	r27, 0xF4	; 244
    14ba:	a5 01       	movw	r20, r10
    14bc:	94 01       	movw	r18, r8
    14be:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__mulohisi3>
    14c2:	c6 0e       	add	r12, r22
    14c4:	d7 1e       	adc	r13, r23
    14c6:	e8 1e       	adc	r14, r24
    14c8:	f9 1e       	adc	r15, r25
    14ca:	f7 fe       	sbrs	r15, 7
    14cc:	06 c0       	rjmp	.+12     	; 0x14da <do_rand+0x74>
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	c8 1a       	sub	r12, r24
    14d2:	d1 08       	sbc	r13, r1
    14d4:	e1 08       	sbc	r14, r1
    14d6:	80 e8       	ldi	r24, 0x80	; 128
    14d8:	f8 0a       	sbc	r15, r24
    14da:	c8 82       	st	Y, r12
    14dc:	d9 82       	std	Y+1, r13	; 0x01
    14de:	ea 82       	std	Y+2, r14	; 0x02
    14e0:	fb 82       	std	Y+3, r15	; 0x03
    14e2:	c6 01       	movw	r24, r12
    14e4:	9f 77       	andi	r25, 0x7F	; 127
    14e6:	df 91       	pop	r29
    14e8:	cf 91       	pop	r28
    14ea:	ff 90       	pop	r15
    14ec:	ef 90       	pop	r14
    14ee:	df 90       	pop	r13
    14f0:	cf 90       	pop	r12
    14f2:	bf 90       	pop	r11
    14f4:	af 90       	pop	r10
    14f6:	9f 90       	pop	r9
    14f8:	8f 90       	pop	r8
    14fa:	08 95       	ret

000014fc <rand_r>:
    14fc:	0e 94 33 0a 	call	0x1466	; 0x1466 <do_rand>
    1500:	08 95       	ret

00001502 <rand>:
    1502:	86 e0       	ldi	r24, 0x06	; 6
    1504:	91 e0       	ldi	r25, 0x01	; 1
    1506:	0e 94 33 0a 	call	0x1466	; 0x1466 <do_rand>
    150a:	08 95       	ret

0000150c <srand>:
    150c:	a0 e0       	ldi	r26, 0x00	; 0
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	80 93 06 01 	sts	0x0106, r24
    1514:	90 93 07 01 	sts	0x0107, r25
    1518:	a0 93 08 01 	sts	0x0108, r26
    151c:	b0 93 09 01 	sts	0x0109, r27
    1520:	08 95       	ret

00001522 <printf>:
    1522:	a0 e0       	ldi	r26, 0x00	; 0
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	e7 e9       	ldi	r30, 0x97	; 151
    1528:	fa e0       	ldi	r31, 0x0A	; 10
    152a:	0c 94 8c 0d 	jmp	0x1b18	; 0x1b18 <__prologue_saves__+0x20>
    152e:	fe 01       	movw	r30, r28
    1530:	35 96       	adiw	r30, 0x05	; 5
    1532:	61 91       	ld	r22, Z+
    1534:	71 91       	ld	r23, Z+
    1536:	af 01       	movw	r20, r30
    1538:	80 91 61 04 	lds	r24, 0x0461
    153c:	90 91 62 04 	lds	r25, 0x0462
    1540:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <vfprintf>
    1544:	e2 e0       	ldi	r30, 0x02	; 2
    1546:	0c 94 a8 0d 	jmp	0x1b50	; 0x1b50 <__epilogue_restores__+0x20>

0000154a <puts>:
    154a:	0f 93       	push	r16
    154c:	1f 93       	push	r17
    154e:	cf 93       	push	r28
    1550:	df 93       	push	r29
    1552:	e0 91 61 04 	lds	r30, 0x0461
    1556:	f0 91 62 04 	lds	r31, 0x0462
    155a:	23 81       	ldd	r18, Z+3	; 0x03
    155c:	21 ff       	sbrs	r18, 1
    155e:	1b c0       	rjmp	.+54     	; 0x1596 <puts+0x4c>
    1560:	ec 01       	movw	r28, r24
    1562:	00 e0       	ldi	r16, 0x00	; 0
    1564:	10 e0       	ldi	r17, 0x00	; 0
    1566:	89 91       	ld	r24, Y+
    1568:	60 91 61 04 	lds	r22, 0x0461
    156c:	70 91 62 04 	lds	r23, 0x0462
    1570:	db 01       	movw	r26, r22
    1572:	18 96       	adiw	r26, 0x08	; 8
    1574:	ed 91       	ld	r30, X+
    1576:	fc 91       	ld	r31, X
    1578:	19 97       	sbiw	r26, 0x09	; 9
    157a:	88 23       	and	r24, r24
    157c:	31 f0       	breq	.+12     	; 0x158a <puts+0x40>
    157e:	09 95       	icall
    1580:	89 2b       	or	r24, r25
    1582:	89 f3       	breq	.-30     	; 0x1566 <puts+0x1c>
    1584:	0f ef       	ldi	r16, 0xFF	; 255
    1586:	1f ef       	ldi	r17, 0xFF	; 255
    1588:	ee cf       	rjmp	.-36     	; 0x1566 <puts+0x1c>
    158a:	8a e0       	ldi	r24, 0x0A	; 10
    158c:	09 95       	icall
    158e:	89 2b       	or	r24, r25
    1590:	11 f4       	brne	.+4      	; 0x1596 <puts+0x4c>
    1592:	c8 01       	movw	r24, r16
    1594:	02 c0       	rjmp	.+4      	; 0x159a <puts+0x50>
    1596:	8f ef       	ldi	r24, 0xFF	; 255
    1598:	9f ef       	ldi	r25, 0xFF	; 255
    159a:	df 91       	pop	r29
    159c:	cf 91       	pop	r28
    159e:	1f 91       	pop	r17
    15a0:	0f 91       	pop	r16
    15a2:	08 95       	ret

000015a4 <vfprintf>:
    15a4:	ac e0       	ldi	r26, 0x0C	; 12
    15a6:	b0 e0       	ldi	r27, 0x00	; 0
    15a8:	e8 ed       	ldi	r30, 0xD8	; 216
    15aa:	fa e0       	ldi	r31, 0x0A	; 10
    15ac:	0c 94 7c 0d 	jmp	0x1af8	; 0x1af8 <__prologue_saves__>
    15b0:	7c 01       	movw	r14, r24
    15b2:	6b 01       	movw	r12, r22
    15b4:	8a 01       	movw	r16, r20
    15b6:	fc 01       	movw	r30, r24
    15b8:	17 82       	std	Z+7, r1	; 0x07
    15ba:	16 82       	std	Z+6, r1	; 0x06
    15bc:	83 81       	ldd	r24, Z+3	; 0x03
    15be:	81 ff       	sbrs	r24, 1
    15c0:	bd c1       	rjmp	.+890    	; 0x193c <vfprintf+0x398>
    15c2:	ce 01       	movw	r24, r28
    15c4:	01 96       	adiw	r24, 0x01	; 1
    15c6:	4c 01       	movw	r8, r24
    15c8:	f7 01       	movw	r30, r14
    15ca:	93 81       	ldd	r25, Z+3	; 0x03
    15cc:	f6 01       	movw	r30, r12
    15ce:	93 fd       	sbrc	r25, 3
    15d0:	85 91       	lpm	r24, Z+
    15d2:	93 ff       	sbrs	r25, 3
    15d4:	81 91       	ld	r24, Z+
    15d6:	6f 01       	movw	r12, r30
    15d8:	88 23       	and	r24, r24
    15da:	09 f4       	brne	.+2      	; 0x15de <vfprintf+0x3a>
    15dc:	ab c1       	rjmp	.+854    	; 0x1934 <vfprintf+0x390>
    15de:	85 32       	cpi	r24, 0x25	; 37
    15e0:	39 f4       	brne	.+14     	; 0x15f0 <vfprintf+0x4c>
    15e2:	93 fd       	sbrc	r25, 3
    15e4:	85 91       	lpm	r24, Z+
    15e6:	93 ff       	sbrs	r25, 3
    15e8:	81 91       	ld	r24, Z+
    15ea:	6f 01       	movw	r12, r30
    15ec:	85 32       	cpi	r24, 0x25	; 37
    15ee:	29 f4       	brne	.+10     	; 0x15fa <vfprintf+0x56>
    15f0:	b7 01       	movw	r22, r14
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	0e 94 ba 0c 	call	0x1974	; 0x1974 <fputc>
    15f8:	e7 cf       	rjmp	.-50     	; 0x15c8 <vfprintf+0x24>
    15fa:	51 2c       	mov	r5, r1
    15fc:	31 2c       	mov	r3, r1
    15fe:	20 e0       	ldi	r18, 0x00	; 0
    1600:	20 32       	cpi	r18, 0x20	; 32
    1602:	a0 f4       	brcc	.+40     	; 0x162c <vfprintf+0x88>
    1604:	8b 32       	cpi	r24, 0x2B	; 43
    1606:	69 f0       	breq	.+26     	; 0x1622 <vfprintf+0x7e>
    1608:	30 f4       	brcc	.+12     	; 0x1616 <vfprintf+0x72>
    160a:	80 32       	cpi	r24, 0x20	; 32
    160c:	59 f0       	breq	.+22     	; 0x1624 <vfprintf+0x80>
    160e:	83 32       	cpi	r24, 0x23	; 35
    1610:	69 f4       	brne	.+26     	; 0x162c <vfprintf+0x88>
    1612:	20 61       	ori	r18, 0x10	; 16
    1614:	2c c0       	rjmp	.+88     	; 0x166e <vfprintf+0xca>
    1616:	8d 32       	cpi	r24, 0x2D	; 45
    1618:	39 f0       	breq	.+14     	; 0x1628 <vfprintf+0x84>
    161a:	80 33       	cpi	r24, 0x30	; 48
    161c:	39 f4       	brne	.+14     	; 0x162c <vfprintf+0x88>
    161e:	21 60       	ori	r18, 0x01	; 1
    1620:	26 c0       	rjmp	.+76     	; 0x166e <vfprintf+0xca>
    1622:	22 60       	ori	r18, 0x02	; 2
    1624:	24 60       	ori	r18, 0x04	; 4
    1626:	23 c0       	rjmp	.+70     	; 0x166e <vfprintf+0xca>
    1628:	28 60       	ori	r18, 0x08	; 8
    162a:	21 c0       	rjmp	.+66     	; 0x166e <vfprintf+0xca>
    162c:	27 fd       	sbrc	r18, 7
    162e:	27 c0       	rjmp	.+78     	; 0x167e <vfprintf+0xda>
    1630:	30 ed       	ldi	r19, 0xD0	; 208
    1632:	38 0f       	add	r19, r24
    1634:	3a 30       	cpi	r19, 0x0A	; 10
    1636:	78 f4       	brcc	.+30     	; 0x1656 <vfprintf+0xb2>
    1638:	26 ff       	sbrs	r18, 6
    163a:	06 c0       	rjmp	.+12     	; 0x1648 <vfprintf+0xa4>
    163c:	fa e0       	ldi	r31, 0x0A	; 10
    163e:	5f 9e       	mul	r5, r31
    1640:	30 0d       	add	r19, r0
    1642:	11 24       	eor	r1, r1
    1644:	53 2e       	mov	r5, r19
    1646:	13 c0       	rjmp	.+38     	; 0x166e <vfprintf+0xca>
    1648:	8a e0       	ldi	r24, 0x0A	; 10
    164a:	38 9e       	mul	r3, r24
    164c:	30 0d       	add	r19, r0
    164e:	11 24       	eor	r1, r1
    1650:	33 2e       	mov	r3, r19
    1652:	20 62       	ori	r18, 0x20	; 32
    1654:	0c c0       	rjmp	.+24     	; 0x166e <vfprintf+0xca>
    1656:	8e 32       	cpi	r24, 0x2E	; 46
    1658:	21 f4       	brne	.+8      	; 0x1662 <vfprintf+0xbe>
    165a:	26 fd       	sbrc	r18, 6
    165c:	6b c1       	rjmp	.+726    	; 0x1934 <vfprintf+0x390>
    165e:	20 64       	ori	r18, 0x40	; 64
    1660:	06 c0       	rjmp	.+12     	; 0x166e <vfprintf+0xca>
    1662:	8c 36       	cpi	r24, 0x6C	; 108
    1664:	11 f4       	brne	.+4      	; 0x166a <vfprintf+0xc6>
    1666:	20 68       	ori	r18, 0x80	; 128
    1668:	02 c0       	rjmp	.+4      	; 0x166e <vfprintf+0xca>
    166a:	88 36       	cpi	r24, 0x68	; 104
    166c:	41 f4       	brne	.+16     	; 0x167e <vfprintf+0xda>
    166e:	f6 01       	movw	r30, r12
    1670:	93 fd       	sbrc	r25, 3
    1672:	85 91       	lpm	r24, Z+
    1674:	93 ff       	sbrs	r25, 3
    1676:	81 91       	ld	r24, Z+
    1678:	6f 01       	movw	r12, r30
    167a:	81 11       	cpse	r24, r1
    167c:	c1 cf       	rjmp	.-126    	; 0x1600 <vfprintf+0x5c>
    167e:	98 2f       	mov	r25, r24
    1680:	9f 7d       	andi	r25, 0xDF	; 223
    1682:	95 54       	subi	r25, 0x45	; 69
    1684:	93 30       	cpi	r25, 0x03	; 3
    1686:	28 f4       	brcc	.+10     	; 0x1692 <vfprintf+0xee>
    1688:	0c 5f       	subi	r16, 0xFC	; 252
    168a:	1f 4f       	sbci	r17, 0xFF	; 255
    168c:	ff e3       	ldi	r31, 0x3F	; 63
    168e:	f9 83       	std	Y+1, r31	; 0x01
    1690:	0d c0       	rjmp	.+26     	; 0x16ac <vfprintf+0x108>
    1692:	83 36       	cpi	r24, 0x63	; 99
    1694:	31 f0       	breq	.+12     	; 0x16a2 <vfprintf+0xfe>
    1696:	83 37       	cpi	r24, 0x73	; 115
    1698:	71 f0       	breq	.+28     	; 0x16b6 <vfprintf+0x112>
    169a:	83 35       	cpi	r24, 0x53	; 83
    169c:	09 f0       	breq	.+2      	; 0x16a0 <vfprintf+0xfc>
    169e:	5b c0       	rjmp	.+182    	; 0x1756 <vfprintf+0x1b2>
    16a0:	22 c0       	rjmp	.+68     	; 0x16e6 <vfprintf+0x142>
    16a2:	f8 01       	movw	r30, r16
    16a4:	80 81       	ld	r24, Z
    16a6:	89 83       	std	Y+1, r24	; 0x01
    16a8:	0e 5f       	subi	r16, 0xFE	; 254
    16aa:	1f 4f       	sbci	r17, 0xFF	; 255
    16ac:	44 24       	eor	r4, r4
    16ae:	43 94       	inc	r4
    16b0:	51 2c       	mov	r5, r1
    16b2:	54 01       	movw	r10, r8
    16b4:	15 c0       	rjmp	.+42     	; 0x16e0 <vfprintf+0x13c>
    16b6:	38 01       	movw	r6, r16
    16b8:	f2 e0       	ldi	r31, 0x02	; 2
    16ba:	6f 0e       	add	r6, r31
    16bc:	71 1c       	adc	r7, r1
    16be:	f8 01       	movw	r30, r16
    16c0:	a0 80       	ld	r10, Z
    16c2:	b1 80       	ldd	r11, Z+1	; 0x01
    16c4:	26 ff       	sbrs	r18, 6
    16c6:	03 c0       	rjmp	.+6      	; 0x16ce <vfprintf+0x12a>
    16c8:	65 2d       	mov	r22, r5
    16ca:	70 e0       	ldi	r23, 0x00	; 0
    16cc:	02 c0       	rjmp	.+4      	; 0x16d2 <vfprintf+0x12e>
    16ce:	6f ef       	ldi	r22, 0xFF	; 255
    16d0:	7f ef       	ldi	r23, 0xFF	; 255
    16d2:	c5 01       	movw	r24, r10
    16d4:	2c 87       	std	Y+12, r18	; 0x0c
    16d6:	0e 94 af 0c 	call	0x195e	; 0x195e <strnlen>
    16da:	2c 01       	movw	r4, r24
    16dc:	83 01       	movw	r16, r6
    16de:	2c 85       	ldd	r18, Y+12	; 0x0c
    16e0:	2f 77       	andi	r18, 0x7F	; 127
    16e2:	22 2e       	mov	r2, r18
    16e4:	17 c0       	rjmp	.+46     	; 0x1714 <vfprintf+0x170>
    16e6:	38 01       	movw	r6, r16
    16e8:	f2 e0       	ldi	r31, 0x02	; 2
    16ea:	6f 0e       	add	r6, r31
    16ec:	71 1c       	adc	r7, r1
    16ee:	f8 01       	movw	r30, r16
    16f0:	a0 80       	ld	r10, Z
    16f2:	b1 80       	ldd	r11, Z+1	; 0x01
    16f4:	26 ff       	sbrs	r18, 6
    16f6:	03 c0       	rjmp	.+6      	; 0x16fe <vfprintf+0x15a>
    16f8:	65 2d       	mov	r22, r5
    16fa:	70 e0       	ldi	r23, 0x00	; 0
    16fc:	02 c0       	rjmp	.+4      	; 0x1702 <vfprintf+0x15e>
    16fe:	6f ef       	ldi	r22, 0xFF	; 255
    1700:	7f ef       	ldi	r23, 0xFF	; 255
    1702:	c5 01       	movw	r24, r10
    1704:	2c 87       	std	Y+12, r18	; 0x0c
    1706:	0e 94 a4 0c 	call	0x1948	; 0x1948 <strnlen_P>
    170a:	2c 01       	movw	r4, r24
    170c:	2c 85       	ldd	r18, Y+12	; 0x0c
    170e:	20 68       	ori	r18, 0x80	; 128
    1710:	22 2e       	mov	r2, r18
    1712:	83 01       	movw	r16, r6
    1714:	23 fc       	sbrc	r2, 3
    1716:	1b c0       	rjmp	.+54     	; 0x174e <vfprintf+0x1aa>
    1718:	83 2d       	mov	r24, r3
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	48 16       	cp	r4, r24
    171e:	59 06       	cpc	r5, r25
    1720:	b0 f4       	brcc	.+44     	; 0x174e <vfprintf+0x1aa>
    1722:	b7 01       	movw	r22, r14
    1724:	80 e2       	ldi	r24, 0x20	; 32
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	0e 94 ba 0c 	call	0x1974	; 0x1974 <fputc>
    172c:	3a 94       	dec	r3
    172e:	f4 cf       	rjmp	.-24     	; 0x1718 <vfprintf+0x174>
    1730:	f5 01       	movw	r30, r10
    1732:	27 fc       	sbrc	r2, 7
    1734:	85 91       	lpm	r24, Z+
    1736:	27 fe       	sbrs	r2, 7
    1738:	81 91       	ld	r24, Z+
    173a:	5f 01       	movw	r10, r30
    173c:	b7 01       	movw	r22, r14
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	0e 94 ba 0c 	call	0x1974	; 0x1974 <fputc>
    1744:	31 10       	cpse	r3, r1
    1746:	3a 94       	dec	r3
    1748:	f1 e0       	ldi	r31, 0x01	; 1
    174a:	4f 1a       	sub	r4, r31
    174c:	51 08       	sbc	r5, r1
    174e:	41 14       	cp	r4, r1
    1750:	51 04       	cpc	r5, r1
    1752:	71 f7       	brne	.-36     	; 0x1730 <vfprintf+0x18c>
    1754:	e5 c0       	rjmp	.+458    	; 0x1920 <vfprintf+0x37c>
    1756:	84 36       	cpi	r24, 0x64	; 100
    1758:	11 f0       	breq	.+4      	; 0x175e <vfprintf+0x1ba>
    175a:	89 36       	cpi	r24, 0x69	; 105
    175c:	39 f5       	brne	.+78     	; 0x17ac <vfprintf+0x208>
    175e:	f8 01       	movw	r30, r16
    1760:	27 ff       	sbrs	r18, 7
    1762:	07 c0       	rjmp	.+14     	; 0x1772 <vfprintf+0x1ce>
    1764:	60 81       	ld	r22, Z
    1766:	71 81       	ldd	r23, Z+1	; 0x01
    1768:	82 81       	ldd	r24, Z+2	; 0x02
    176a:	93 81       	ldd	r25, Z+3	; 0x03
    176c:	0c 5f       	subi	r16, 0xFC	; 252
    176e:	1f 4f       	sbci	r17, 0xFF	; 255
    1770:	08 c0       	rjmp	.+16     	; 0x1782 <vfprintf+0x1de>
    1772:	60 81       	ld	r22, Z
    1774:	71 81       	ldd	r23, Z+1	; 0x01
    1776:	88 27       	eor	r24, r24
    1778:	77 fd       	sbrc	r23, 7
    177a:	80 95       	com	r24
    177c:	98 2f       	mov	r25, r24
    177e:	0e 5f       	subi	r16, 0xFE	; 254
    1780:	1f 4f       	sbci	r17, 0xFF	; 255
    1782:	2f 76       	andi	r18, 0x6F	; 111
    1784:	b2 2e       	mov	r11, r18
    1786:	97 ff       	sbrs	r25, 7
    1788:	09 c0       	rjmp	.+18     	; 0x179c <vfprintf+0x1f8>
    178a:	90 95       	com	r25
    178c:	80 95       	com	r24
    178e:	70 95       	com	r23
    1790:	61 95       	neg	r22
    1792:	7f 4f       	sbci	r23, 0xFF	; 255
    1794:	8f 4f       	sbci	r24, 0xFF	; 255
    1796:	9f 4f       	sbci	r25, 0xFF	; 255
    1798:	20 68       	ori	r18, 0x80	; 128
    179a:	b2 2e       	mov	r11, r18
    179c:	2a e0       	ldi	r18, 0x0A	; 10
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	a4 01       	movw	r20, r8
    17a2:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__ultoa_invert>
    17a6:	a8 2e       	mov	r10, r24
    17a8:	a8 18       	sub	r10, r8
    17aa:	44 c0       	rjmp	.+136    	; 0x1834 <vfprintf+0x290>
    17ac:	85 37       	cpi	r24, 0x75	; 117
    17ae:	29 f4       	brne	.+10     	; 0x17ba <vfprintf+0x216>
    17b0:	2f 7e       	andi	r18, 0xEF	; 239
    17b2:	b2 2e       	mov	r11, r18
    17b4:	2a e0       	ldi	r18, 0x0A	; 10
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	25 c0       	rjmp	.+74     	; 0x1804 <vfprintf+0x260>
    17ba:	f2 2f       	mov	r31, r18
    17bc:	f9 7f       	andi	r31, 0xF9	; 249
    17be:	bf 2e       	mov	r11, r31
    17c0:	8f 36       	cpi	r24, 0x6F	; 111
    17c2:	c1 f0       	breq	.+48     	; 0x17f4 <vfprintf+0x250>
    17c4:	18 f4       	brcc	.+6      	; 0x17cc <vfprintf+0x228>
    17c6:	88 35       	cpi	r24, 0x58	; 88
    17c8:	79 f0       	breq	.+30     	; 0x17e8 <vfprintf+0x244>
    17ca:	b4 c0       	rjmp	.+360    	; 0x1934 <vfprintf+0x390>
    17cc:	80 37       	cpi	r24, 0x70	; 112
    17ce:	19 f0       	breq	.+6      	; 0x17d6 <vfprintf+0x232>
    17d0:	88 37       	cpi	r24, 0x78	; 120
    17d2:	21 f0       	breq	.+8      	; 0x17dc <vfprintf+0x238>
    17d4:	af c0       	rjmp	.+350    	; 0x1934 <vfprintf+0x390>
    17d6:	2f 2f       	mov	r18, r31
    17d8:	20 61       	ori	r18, 0x10	; 16
    17da:	b2 2e       	mov	r11, r18
    17dc:	b4 fe       	sbrs	r11, 4
    17de:	0d c0       	rjmp	.+26     	; 0x17fa <vfprintf+0x256>
    17e0:	8b 2d       	mov	r24, r11
    17e2:	84 60       	ori	r24, 0x04	; 4
    17e4:	b8 2e       	mov	r11, r24
    17e6:	09 c0       	rjmp	.+18     	; 0x17fa <vfprintf+0x256>
    17e8:	24 ff       	sbrs	r18, 4
    17ea:	0a c0       	rjmp	.+20     	; 0x1800 <vfprintf+0x25c>
    17ec:	9f 2f       	mov	r25, r31
    17ee:	96 60       	ori	r25, 0x06	; 6
    17f0:	b9 2e       	mov	r11, r25
    17f2:	06 c0       	rjmp	.+12     	; 0x1800 <vfprintf+0x25c>
    17f4:	28 e0       	ldi	r18, 0x08	; 8
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	05 c0       	rjmp	.+10     	; 0x1804 <vfprintf+0x260>
    17fa:	20 e1       	ldi	r18, 0x10	; 16
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	02 c0       	rjmp	.+4      	; 0x1804 <vfprintf+0x260>
    1800:	20 e1       	ldi	r18, 0x10	; 16
    1802:	32 e0       	ldi	r19, 0x02	; 2
    1804:	f8 01       	movw	r30, r16
    1806:	b7 fe       	sbrs	r11, 7
    1808:	07 c0       	rjmp	.+14     	; 0x1818 <vfprintf+0x274>
    180a:	60 81       	ld	r22, Z
    180c:	71 81       	ldd	r23, Z+1	; 0x01
    180e:	82 81       	ldd	r24, Z+2	; 0x02
    1810:	93 81       	ldd	r25, Z+3	; 0x03
    1812:	0c 5f       	subi	r16, 0xFC	; 252
    1814:	1f 4f       	sbci	r17, 0xFF	; 255
    1816:	06 c0       	rjmp	.+12     	; 0x1824 <vfprintf+0x280>
    1818:	60 81       	ld	r22, Z
    181a:	71 81       	ldd	r23, Z+1	; 0x01
    181c:	80 e0       	ldi	r24, 0x00	; 0
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	0e 5f       	subi	r16, 0xFE	; 254
    1822:	1f 4f       	sbci	r17, 0xFF	; 255
    1824:	a4 01       	movw	r20, r8
    1826:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__ultoa_invert>
    182a:	a8 2e       	mov	r10, r24
    182c:	a8 18       	sub	r10, r8
    182e:	fb 2d       	mov	r31, r11
    1830:	ff 77       	andi	r31, 0x7F	; 127
    1832:	bf 2e       	mov	r11, r31
    1834:	b6 fe       	sbrs	r11, 6
    1836:	0b c0       	rjmp	.+22     	; 0x184e <vfprintf+0x2aa>
    1838:	2b 2d       	mov	r18, r11
    183a:	2e 7f       	andi	r18, 0xFE	; 254
    183c:	a5 14       	cp	r10, r5
    183e:	50 f4       	brcc	.+20     	; 0x1854 <vfprintf+0x2b0>
    1840:	b4 fe       	sbrs	r11, 4
    1842:	0a c0       	rjmp	.+20     	; 0x1858 <vfprintf+0x2b4>
    1844:	b2 fc       	sbrc	r11, 2
    1846:	08 c0       	rjmp	.+16     	; 0x1858 <vfprintf+0x2b4>
    1848:	2b 2d       	mov	r18, r11
    184a:	2e 7e       	andi	r18, 0xEE	; 238
    184c:	05 c0       	rjmp	.+10     	; 0x1858 <vfprintf+0x2b4>
    184e:	7a 2c       	mov	r7, r10
    1850:	2b 2d       	mov	r18, r11
    1852:	03 c0       	rjmp	.+6      	; 0x185a <vfprintf+0x2b6>
    1854:	7a 2c       	mov	r7, r10
    1856:	01 c0       	rjmp	.+2      	; 0x185a <vfprintf+0x2b6>
    1858:	75 2c       	mov	r7, r5
    185a:	24 ff       	sbrs	r18, 4
    185c:	0d c0       	rjmp	.+26     	; 0x1878 <vfprintf+0x2d4>
    185e:	fe 01       	movw	r30, r28
    1860:	ea 0d       	add	r30, r10
    1862:	f1 1d       	adc	r31, r1
    1864:	80 81       	ld	r24, Z
    1866:	80 33       	cpi	r24, 0x30	; 48
    1868:	11 f4       	brne	.+4      	; 0x186e <vfprintf+0x2ca>
    186a:	29 7e       	andi	r18, 0xE9	; 233
    186c:	09 c0       	rjmp	.+18     	; 0x1880 <vfprintf+0x2dc>
    186e:	22 ff       	sbrs	r18, 2
    1870:	06 c0       	rjmp	.+12     	; 0x187e <vfprintf+0x2da>
    1872:	73 94       	inc	r7
    1874:	73 94       	inc	r7
    1876:	04 c0       	rjmp	.+8      	; 0x1880 <vfprintf+0x2dc>
    1878:	82 2f       	mov	r24, r18
    187a:	86 78       	andi	r24, 0x86	; 134
    187c:	09 f0       	breq	.+2      	; 0x1880 <vfprintf+0x2dc>
    187e:	73 94       	inc	r7
    1880:	23 fd       	sbrc	r18, 3
    1882:	13 c0       	rjmp	.+38     	; 0x18aa <vfprintf+0x306>
    1884:	20 ff       	sbrs	r18, 0
    1886:	06 c0       	rjmp	.+12     	; 0x1894 <vfprintf+0x2f0>
    1888:	5a 2c       	mov	r5, r10
    188a:	73 14       	cp	r7, r3
    188c:	18 f4       	brcc	.+6      	; 0x1894 <vfprintf+0x2f0>
    188e:	53 0c       	add	r5, r3
    1890:	57 18       	sub	r5, r7
    1892:	73 2c       	mov	r7, r3
    1894:	73 14       	cp	r7, r3
    1896:	68 f4       	brcc	.+26     	; 0x18b2 <vfprintf+0x30e>
    1898:	b7 01       	movw	r22, r14
    189a:	80 e2       	ldi	r24, 0x20	; 32
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	2c 87       	std	Y+12, r18	; 0x0c
    18a0:	0e 94 ba 0c 	call	0x1974	; 0x1974 <fputc>
    18a4:	73 94       	inc	r7
    18a6:	2c 85       	ldd	r18, Y+12	; 0x0c
    18a8:	f5 cf       	rjmp	.-22     	; 0x1894 <vfprintf+0x2f0>
    18aa:	73 14       	cp	r7, r3
    18ac:	10 f4       	brcc	.+4      	; 0x18b2 <vfprintf+0x30e>
    18ae:	37 18       	sub	r3, r7
    18b0:	01 c0       	rjmp	.+2      	; 0x18b4 <vfprintf+0x310>
    18b2:	31 2c       	mov	r3, r1
    18b4:	24 ff       	sbrs	r18, 4
    18b6:	12 c0       	rjmp	.+36     	; 0x18dc <vfprintf+0x338>
    18b8:	b7 01       	movw	r22, r14
    18ba:	80 e3       	ldi	r24, 0x30	; 48
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	2c 87       	std	Y+12, r18	; 0x0c
    18c0:	0e 94 ba 0c 	call	0x1974	; 0x1974 <fputc>
    18c4:	2c 85       	ldd	r18, Y+12	; 0x0c
    18c6:	22 ff       	sbrs	r18, 2
    18c8:	17 c0       	rjmp	.+46     	; 0x18f8 <vfprintf+0x354>
    18ca:	21 ff       	sbrs	r18, 1
    18cc:	03 c0       	rjmp	.+6      	; 0x18d4 <vfprintf+0x330>
    18ce:	88 e5       	ldi	r24, 0x58	; 88
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	02 c0       	rjmp	.+4      	; 0x18d8 <vfprintf+0x334>
    18d4:	88 e7       	ldi	r24, 0x78	; 120
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	b7 01       	movw	r22, r14
    18da:	0c c0       	rjmp	.+24     	; 0x18f4 <vfprintf+0x350>
    18dc:	82 2f       	mov	r24, r18
    18de:	86 78       	andi	r24, 0x86	; 134
    18e0:	59 f0       	breq	.+22     	; 0x18f8 <vfprintf+0x354>
    18e2:	21 fd       	sbrc	r18, 1
    18e4:	02 c0       	rjmp	.+4      	; 0x18ea <vfprintf+0x346>
    18e6:	80 e2       	ldi	r24, 0x20	; 32
    18e8:	01 c0       	rjmp	.+2      	; 0x18ec <vfprintf+0x348>
    18ea:	8b e2       	ldi	r24, 0x2B	; 43
    18ec:	27 fd       	sbrc	r18, 7
    18ee:	8d e2       	ldi	r24, 0x2D	; 45
    18f0:	b7 01       	movw	r22, r14
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	0e 94 ba 0c 	call	0x1974	; 0x1974 <fputc>
    18f8:	a5 14       	cp	r10, r5
    18fa:	38 f4       	brcc	.+14     	; 0x190a <vfprintf+0x366>
    18fc:	b7 01       	movw	r22, r14
    18fe:	80 e3       	ldi	r24, 0x30	; 48
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	0e 94 ba 0c 	call	0x1974	; 0x1974 <fputc>
    1906:	5a 94       	dec	r5
    1908:	f7 cf       	rjmp	.-18     	; 0x18f8 <vfprintf+0x354>
    190a:	aa 94       	dec	r10
    190c:	f4 01       	movw	r30, r8
    190e:	ea 0d       	add	r30, r10
    1910:	f1 1d       	adc	r31, r1
    1912:	80 81       	ld	r24, Z
    1914:	b7 01       	movw	r22, r14
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	0e 94 ba 0c 	call	0x1974	; 0x1974 <fputc>
    191c:	a1 10       	cpse	r10, r1
    191e:	f5 cf       	rjmp	.-22     	; 0x190a <vfprintf+0x366>
    1920:	33 20       	and	r3, r3
    1922:	09 f4       	brne	.+2      	; 0x1926 <vfprintf+0x382>
    1924:	51 ce       	rjmp	.-862    	; 0x15c8 <vfprintf+0x24>
    1926:	b7 01       	movw	r22, r14
    1928:	80 e2       	ldi	r24, 0x20	; 32
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	0e 94 ba 0c 	call	0x1974	; 0x1974 <fputc>
    1930:	3a 94       	dec	r3
    1932:	f6 cf       	rjmp	.-20     	; 0x1920 <vfprintf+0x37c>
    1934:	f7 01       	movw	r30, r14
    1936:	86 81       	ldd	r24, Z+6	; 0x06
    1938:	97 81       	ldd	r25, Z+7	; 0x07
    193a:	02 c0       	rjmp	.+4      	; 0x1940 <vfprintf+0x39c>
    193c:	8f ef       	ldi	r24, 0xFF	; 255
    193e:	9f ef       	ldi	r25, 0xFF	; 255
    1940:	2c 96       	adiw	r28, 0x0c	; 12
    1942:	e2 e1       	ldi	r30, 0x12	; 18
    1944:	0c 94 98 0d 	jmp	0x1b30	; 0x1b30 <__epilogue_restores__>

00001948 <strnlen_P>:
    1948:	fc 01       	movw	r30, r24
    194a:	05 90       	lpm	r0, Z+
    194c:	61 50       	subi	r22, 0x01	; 1
    194e:	70 40       	sbci	r23, 0x00	; 0
    1950:	01 10       	cpse	r0, r1
    1952:	d8 f7       	brcc	.-10     	; 0x194a <strnlen_P+0x2>
    1954:	80 95       	com	r24
    1956:	90 95       	com	r25
    1958:	8e 0f       	add	r24, r30
    195a:	9f 1f       	adc	r25, r31
    195c:	08 95       	ret

0000195e <strnlen>:
    195e:	fc 01       	movw	r30, r24
    1960:	61 50       	subi	r22, 0x01	; 1
    1962:	70 40       	sbci	r23, 0x00	; 0
    1964:	01 90       	ld	r0, Z+
    1966:	01 10       	cpse	r0, r1
    1968:	d8 f7       	brcc	.-10     	; 0x1960 <strnlen+0x2>
    196a:	80 95       	com	r24
    196c:	90 95       	com	r25
    196e:	8e 0f       	add	r24, r30
    1970:	9f 1f       	adc	r25, r31
    1972:	08 95       	ret

00001974 <fputc>:
    1974:	0f 93       	push	r16
    1976:	1f 93       	push	r17
    1978:	cf 93       	push	r28
    197a:	df 93       	push	r29
    197c:	18 2f       	mov	r17, r24
    197e:	09 2f       	mov	r16, r25
    1980:	eb 01       	movw	r28, r22
    1982:	8b 81       	ldd	r24, Y+3	; 0x03
    1984:	81 fd       	sbrc	r24, 1
    1986:	03 c0       	rjmp	.+6      	; 0x198e <fputc+0x1a>
    1988:	8f ef       	ldi	r24, 0xFF	; 255
    198a:	9f ef       	ldi	r25, 0xFF	; 255
    198c:	20 c0       	rjmp	.+64     	; 0x19ce <fputc+0x5a>
    198e:	82 ff       	sbrs	r24, 2
    1990:	10 c0       	rjmp	.+32     	; 0x19b2 <fputc+0x3e>
    1992:	4e 81       	ldd	r20, Y+6	; 0x06
    1994:	5f 81       	ldd	r21, Y+7	; 0x07
    1996:	2c 81       	ldd	r18, Y+4	; 0x04
    1998:	3d 81       	ldd	r19, Y+5	; 0x05
    199a:	42 17       	cp	r20, r18
    199c:	53 07       	cpc	r21, r19
    199e:	7c f4       	brge	.+30     	; 0x19be <fputc+0x4a>
    19a0:	e8 81       	ld	r30, Y
    19a2:	f9 81       	ldd	r31, Y+1	; 0x01
    19a4:	9f 01       	movw	r18, r30
    19a6:	2f 5f       	subi	r18, 0xFF	; 255
    19a8:	3f 4f       	sbci	r19, 0xFF	; 255
    19aa:	39 83       	std	Y+1, r19	; 0x01
    19ac:	28 83       	st	Y, r18
    19ae:	10 83       	st	Z, r17
    19b0:	06 c0       	rjmp	.+12     	; 0x19be <fputc+0x4a>
    19b2:	e8 85       	ldd	r30, Y+8	; 0x08
    19b4:	f9 85       	ldd	r31, Y+9	; 0x09
    19b6:	81 2f       	mov	r24, r17
    19b8:	09 95       	icall
    19ba:	89 2b       	or	r24, r25
    19bc:	29 f7       	brne	.-54     	; 0x1988 <fputc+0x14>
    19be:	2e 81       	ldd	r18, Y+6	; 0x06
    19c0:	3f 81       	ldd	r19, Y+7	; 0x07
    19c2:	2f 5f       	subi	r18, 0xFF	; 255
    19c4:	3f 4f       	sbci	r19, 0xFF	; 255
    19c6:	3f 83       	std	Y+7, r19	; 0x07
    19c8:	2e 83       	std	Y+6, r18	; 0x06
    19ca:	81 2f       	mov	r24, r17
    19cc:	90 2f       	mov	r25, r16
    19ce:	df 91       	pop	r29
    19d0:	cf 91       	pop	r28
    19d2:	1f 91       	pop	r17
    19d4:	0f 91       	pop	r16
    19d6:	08 95       	ret

000019d8 <__ultoa_invert>:
    19d8:	fa 01       	movw	r30, r20
    19da:	aa 27       	eor	r26, r26
    19dc:	28 30       	cpi	r18, 0x08	; 8
    19de:	51 f1       	breq	.+84     	; 0x1a34 <__ultoa_invert+0x5c>
    19e0:	20 31       	cpi	r18, 0x10	; 16
    19e2:	81 f1       	breq	.+96     	; 0x1a44 <__ultoa_invert+0x6c>
    19e4:	e8 94       	clt
    19e6:	6f 93       	push	r22
    19e8:	6e 7f       	andi	r22, 0xFE	; 254
    19ea:	6e 5f       	subi	r22, 0xFE	; 254
    19ec:	7f 4f       	sbci	r23, 0xFF	; 255
    19ee:	8f 4f       	sbci	r24, 0xFF	; 255
    19f0:	9f 4f       	sbci	r25, 0xFF	; 255
    19f2:	af 4f       	sbci	r26, 0xFF	; 255
    19f4:	b1 e0       	ldi	r27, 0x01	; 1
    19f6:	3e d0       	rcall	.+124    	; 0x1a74 <__ultoa_invert+0x9c>
    19f8:	b4 e0       	ldi	r27, 0x04	; 4
    19fa:	3c d0       	rcall	.+120    	; 0x1a74 <__ultoa_invert+0x9c>
    19fc:	67 0f       	add	r22, r23
    19fe:	78 1f       	adc	r23, r24
    1a00:	89 1f       	adc	r24, r25
    1a02:	9a 1f       	adc	r25, r26
    1a04:	a1 1d       	adc	r26, r1
    1a06:	68 0f       	add	r22, r24
    1a08:	79 1f       	adc	r23, r25
    1a0a:	8a 1f       	adc	r24, r26
    1a0c:	91 1d       	adc	r25, r1
    1a0e:	a1 1d       	adc	r26, r1
    1a10:	6a 0f       	add	r22, r26
    1a12:	71 1d       	adc	r23, r1
    1a14:	81 1d       	adc	r24, r1
    1a16:	91 1d       	adc	r25, r1
    1a18:	a1 1d       	adc	r26, r1
    1a1a:	20 d0       	rcall	.+64     	; 0x1a5c <__ultoa_invert+0x84>
    1a1c:	09 f4       	brne	.+2      	; 0x1a20 <__ultoa_invert+0x48>
    1a1e:	68 94       	set
    1a20:	3f 91       	pop	r19
    1a22:	2a e0       	ldi	r18, 0x0A	; 10
    1a24:	26 9f       	mul	r18, r22
    1a26:	11 24       	eor	r1, r1
    1a28:	30 19       	sub	r19, r0
    1a2a:	30 5d       	subi	r19, 0xD0	; 208
    1a2c:	31 93       	st	Z+, r19
    1a2e:	de f6       	brtc	.-74     	; 0x19e6 <__ultoa_invert+0xe>
    1a30:	cf 01       	movw	r24, r30
    1a32:	08 95       	ret
    1a34:	46 2f       	mov	r20, r22
    1a36:	47 70       	andi	r20, 0x07	; 7
    1a38:	40 5d       	subi	r20, 0xD0	; 208
    1a3a:	41 93       	st	Z+, r20
    1a3c:	b3 e0       	ldi	r27, 0x03	; 3
    1a3e:	0f d0       	rcall	.+30     	; 0x1a5e <__ultoa_invert+0x86>
    1a40:	c9 f7       	brne	.-14     	; 0x1a34 <__ultoa_invert+0x5c>
    1a42:	f6 cf       	rjmp	.-20     	; 0x1a30 <__ultoa_invert+0x58>
    1a44:	46 2f       	mov	r20, r22
    1a46:	4f 70       	andi	r20, 0x0F	; 15
    1a48:	40 5d       	subi	r20, 0xD0	; 208
    1a4a:	4a 33       	cpi	r20, 0x3A	; 58
    1a4c:	18 f0       	brcs	.+6      	; 0x1a54 <__ultoa_invert+0x7c>
    1a4e:	49 5d       	subi	r20, 0xD9	; 217
    1a50:	31 fd       	sbrc	r19, 1
    1a52:	40 52       	subi	r20, 0x20	; 32
    1a54:	41 93       	st	Z+, r20
    1a56:	02 d0       	rcall	.+4      	; 0x1a5c <__ultoa_invert+0x84>
    1a58:	a9 f7       	brne	.-22     	; 0x1a44 <__ultoa_invert+0x6c>
    1a5a:	ea cf       	rjmp	.-44     	; 0x1a30 <__ultoa_invert+0x58>
    1a5c:	b4 e0       	ldi	r27, 0x04	; 4
    1a5e:	a6 95       	lsr	r26
    1a60:	97 95       	ror	r25
    1a62:	87 95       	ror	r24
    1a64:	77 95       	ror	r23
    1a66:	67 95       	ror	r22
    1a68:	ba 95       	dec	r27
    1a6a:	c9 f7       	brne	.-14     	; 0x1a5e <__ultoa_invert+0x86>
    1a6c:	00 97       	sbiw	r24, 0x00	; 0
    1a6e:	61 05       	cpc	r22, r1
    1a70:	71 05       	cpc	r23, r1
    1a72:	08 95       	ret
    1a74:	9b 01       	movw	r18, r22
    1a76:	ac 01       	movw	r20, r24
    1a78:	0a 2e       	mov	r0, r26
    1a7a:	06 94       	lsr	r0
    1a7c:	57 95       	ror	r21
    1a7e:	47 95       	ror	r20
    1a80:	37 95       	ror	r19
    1a82:	27 95       	ror	r18
    1a84:	ba 95       	dec	r27
    1a86:	c9 f7       	brne	.-14     	; 0x1a7a <__ultoa_invert+0xa2>
    1a88:	62 0f       	add	r22, r18
    1a8a:	73 1f       	adc	r23, r19
    1a8c:	84 1f       	adc	r24, r20
    1a8e:	95 1f       	adc	r25, r21
    1a90:	a0 1d       	adc	r26, r0
    1a92:	08 95       	ret

00001a94 <__divmodsi4>:
    1a94:	05 2e       	mov	r0, r21
    1a96:	97 fb       	bst	r25, 7
    1a98:	1e f4       	brtc	.+6      	; 0x1aa0 <__divmodsi4+0xc>
    1a9a:	00 94       	com	r0
    1a9c:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <__negsi2>
    1aa0:	57 fd       	sbrc	r21, 7
    1aa2:	07 d0       	rcall	.+14     	; 0x1ab2 <__divmodsi4_neg2>
    1aa4:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <__udivmodsi4>
    1aa8:	07 fc       	sbrc	r0, 7
    1aaa:	03 d0       	rcall	.+6      	; 0x1ab2 <__divmodsi4_neg2>
    1aac:	4e f4       	brtc	.+18     	; 0x1ac0 <__divmodsi4_exit>
    1aae:	0c 94 61 0d 	jmp	0x1ac2	; 0x1ac2 <__negsi2>

00001ab2 <__divmodsi4_neg2>:
    1ab2:	50 95       	com	r21
    1ab4:	40 95       	com	r20
    1ab6:	30 95       	com	r19
    1ab8:	21 95       	neg	r18
    1aba:	3f 4f       	sbci	r19, 0xFF	; 255
    1abc:	4f 4f       	sbci	r20, 0xFF	; 255
    1abe:	5f 4f       	sbci	r21, 0xFF	; 255

00001ac0 <__divmodsi4_exit>:
    1ac0:	08 95       	ret

00001ac2 <__negsi2>:
    1ac2:	90 95       	com	r25
    1ac4:	80 95       	com	r24
    1ac6:	70 95       	com	r23
    1ac8:	61 95       	neg	r22
    1aca:	7f 4f       	sbci	r23, 0xFF	; 255
    1acc:	8f 4f       	sbci	r24, 0xFF	; 255
    1ace:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad0:	08 95       	ret

00001ad2 <__muluhisi3>:
    1ad2:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__umulhisi3>
    1ad6:	a5 9f       	mul	r26, r21
    1ad8:	90 0d       	add	r25, r0
    1ada:	b4 9f       	mul	r27, r20
    1adc:	90 0d       	add	r25, r0
    1ade:	a4 9f       	mul	r26, r20
    1ae0:	80 0d       	add	r24, r0
    1ae2:	91 1d       	adc	r25, r1
    1ae4:	11 24       	eor	r1, r1
    1ae6:	08 95       	ret

00001ae8 <__mulshisi3>:
    1ae8:	b7 ff       	sbrs	r27, 7
    1aea:	0c 94 69 0d 	jmp	0x1ad2	; 0x1ad2 <__muluhisi3>

00001aee <__mulohisi3>:
    1aee:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__muluhisi3>
    1af2:	82 1b       	sub	r24, r18
    1af4:	93 0b       	sbc	r25, r19
    1af6:	08 95       	ret

00001af8 <__prologue_saves__>:
    1af8:	2f 92       	push	r2
    1afa:	3f 92       	push	r3
    1afc:	4f 92       	push	r4
    1afe:	5f 92       	push	r5
    1b00:	6f 92       	push	r6
    1b02:	7f 92       	push	r7
    1b04:	8f 92       	push	r8
    1b06:	9f 92       	push	r9
    1b08:	af 92       	push	r10
    1b0a:	bf 92       	push	r11
    1b0c:	cf 92       	push	r12
    1b0e:	df 92       	push	r13
    1b10:	ef 92       	push	r14
    1b12:	ff 92       	push	r15
    1b14:	0f 93       	push	r16
    1b16:	1f 93       	push	r17
    1b18:	cf 93       	push	r28
    1b1a:	df 93       	push	r29
    1b1c:	cd b7       	in	r28, 0x3d	; 61
    1b1e:	de b7       	in	r29, 0x3e	; 62
    1b20:	ca 1b       	sub	r28, r26
    1b22:	db 0b       	sbc	r29, r27
    1b24:	0f b6       	in	r0, 0x3f	; 63
    1b26:	f8 94       	cli
    1b28:	de bf       	out	0x3e, r29	; 62
    1b2a:	0f be       	out	0x3f, r0	; 63
    1b2c:	cd bf       	out	0x3d, r28	; 61
    1b2e:	09 94       	ijmp

00001b30 <__epilogue_restores__>:
    1b30:	2a 88       	ldd	r2, Y+18	; 0x12
    1b32:	39 88       	ldd	r3, Y+17	; 0x11
    1b34:	48 88       	ldd	r4, Y+16	; 0x10
    1b36:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b38:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b3a:	7d 84       	ldd	r7, Y+13	; 0x0d
    1b3c:	8c 84       	ldd	r8, Y+12	; 0x0c
    1b3e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b40:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b42:	b9 84       	ldd	r11, Y+9	; 0x09
    1b44:	c8 84       	ldd	r12, Y+8	; 0x08
    1b46:	df 80       	ldd	r13, Y+7	; 0x07
    1b48:	ee 80       	ldd	r14, Y+6	; 0x06
    1b4a:	fd 80       	ldd	r15, Y+5	; 0x05
    1b4c:	0c 81       	ldd	r16, Y+4	; 0x04
    1b4e:	1b 81       	ldd	r17, Y+3	; 0x03
    1b50:	aa 81       	ldd	r26, Y+2	; 0x02
    1b52:	b9 81       	ldd	r27, Y+1	; 0x01
    1b54:	ce 0f       	add	r28, r30
    1b56:	d1 1d       	adc	r29, r1
    1b58:	0f b6       	in	r0, 0x3f	; 63
    1b5a:	f8 94       	cli
    1b5c:	de bf       	out	0x3e, r29	; 62
    1b5e:	0f be       	out	0x3f, r0	; 63
    1b60:	cd bf       	out	0x3d, r28	; 61
    1b62:	ed 01       	movw	r28, r26
    1b64:	08 95       	ret

00001b66 <__udivmodsi4>:
    1b66:	a1 e2       	ldi	r26, 0x21	; 33
    1b68:	1a 2e       	mov	r1, r26
    1b6a:	aa 1b       	sub	r26, r26
    1b6c:	bb 1b       	sub	r27, r27
    1b6e:	fd 01       	movw	r30, r26
    1b70:	0d c0       	rjmp	.+26     	; 0x1b8c <__udivmodsi4_ep>

00001b72 <__udivmodsi4_loop>:
    1b72:	aa 1f       	adc	r26, r26
    1b74:	bb 1f       	adc	r27, r27
    1b76:	ee 1f       	adc	r30, r30
    1b78:	ff 1f       	adc	r31, r31
    1b7a:	a2 17       	cp	r26, r18
    1b7c:	b3 07       	cpc	r27, r19
    1b7e:	e4 07       	cpc	r30, r20
    1b80:	f5 07       	cpc	r31, r21
    1b82:	20 f0       	brcs	.+8      	; 0x1b8c <__udivmodsi4_ep>
    1b84:	a2 1b       	sub	r26, r18
    1b86:	b3 0b       	sbc	r27, r19
    1b88:	e4 0b       	sbc	r30, r20
    1b8a:	f5 0b       	sbc	r31, r21

00001b8c <__udivmodsi4_ep>:
    1b8c:	66 1f       	adc	r22, r22
    1b8e:	77 1f       	adc	r23, r23
    1b90:	88 1f       	adc	r24, r24
    1b92:	99 1f       	adc	r25, r25
    1b94:	1a 94       	dec	r1
    1b96:	69 f7       	brne	.-38     	; 0x1b72 <__udivmodsi4_loop>
    1b98:	60 95       	com	r22
    1b9a:	70 95       	com	r23
    1b9c:	80 95       	com	r24
    1b9e:	90 95       	com	r25
    1ba0:	9b 01       	movw	r18, r22
    1ba2:	ac 01       	movw	r20, r24
    1ba4:	bd 01       	movw	r22, r26
    1ba6:	cf 01       	movw	r24, r30
    1ba8:	08 95       	ret

00001baa <__umulhisi3>:
    1baa:	a2 9f       	mul	r26, r18
    1bac:	b0 01       	movw	r22, r0
    1bae:	b3 9f       	mul	r27, r19
    1bb0:	c0 01       	movw	r24, r0
    1bb2:	a3 9f       	mul	r26, r19
    1bb4:	70 0d       	add	r23, r0
    1bb6:	81 1d       	adc	r24, r1
    1bb8:	11 24       	eor	r1, r1
    1bba:	91 1d       	adc	r25, r1
    1bbc:	b2 9f       	mul	r27, r18
    1bbe:	70 0d       	add	r23, r0
    1bc0:	81 1d       	adc	r24, r1
    1bc2:	11 24       	eor	r1, r1
    1bc4:	91 1d       	adc	r25, r1
    1bc6:	08 95       	ret

00001bc8 <_exit>:
    1bc8:	f8 94       	cli

00001bca <__stop_program>:
    1bca:	ff cf       	rjmp	.-2      	; 0x1bca <__stop_program>
