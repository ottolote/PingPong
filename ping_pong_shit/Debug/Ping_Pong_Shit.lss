
Ping_Pong_Shit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000282  00800100  0000107e  00001112  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000107e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800382  00800382  00001394  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001394  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000200  00000000  00000000  000013f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002085  00000000  00000000  000015f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c8f  00000000  00000000  00003675  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000cf9  00000000  00000000  00004304  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004e0  00000000  00000000  00005000  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000678  00000000  00000000  000054e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000db6  00000000  00000000  00005b58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001d8  00000000  00000000  0000690e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <vfprintf+0xec>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	13 e0       	ldi	r17, 0x03	; 3
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	ee e7       	ldi	r30, 0x7E	; 126
     37c:	f0 e1       	ldi	r31, 0x10	; 16
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a2 38       	cpi	r26, 0x82	; 130
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	23 e0       	ldi	r18, 0x03	; 3
     38c:	a2 e8       	ldi	r26, 0x82	; 130
     38e:	b3 e0       	ldi	r27, 0x03	; 3
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	ae 38       	cpi	r26, 0x8E	; 142
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 4b 04 	call	0x896	; 0x896 <main>
     39e:	0c 94 3d 08 	jmp	0x107a	; 0x107a <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <joystick_read>:
			 v;
}

unsigned int joystick_read(joy_channel channel){
	volatile char* ext_ram = (char*) 0x1400;
	ext_ram[0] = 0x4 + channel;
     3a6:	8c 5f       	subi	r24, 0xFC	; 252
     3a8:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3ac:	81 e4       	ldi	r24, 0x41	; 65
     3ae:	8a 95       	dec	r24
     3b0:	f1 f7       	brne	.-4      	; 0x3ae <joystick_read+0x8>
     3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <joystick_read+0xe>
	_delay_us(40);
	//sleep_enable();
	return (uint8_t) ext_ram[0];
     3b4:	80 91 00 14 	lds	r24, 0x1400
}
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	08 95       	ret

000003bc <joystick_init>:
	/*EMCUCR |= (0 << SM0);
	MCUCSR |= (1 << SM1);
	MCUCSR |= (0 << SM2);
	GICR |= (1 << INT0);
	sei();*/
	center_val_X = joystick_read(JOYSTICK_X);
     3bc:	80 e0       	ldi	r24, 0x00	; 0
     3be:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <joystick_read>
     3c2:	90 93 83 03 	sts	0x0383, r25
     3c6:	80 93 82 03 	sts	0x0382, r24
	center_val_Y = joystick_read(JOYSTICK_Y);
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <joystick_read>
     3d0:	90 93 85 03 	sts	0x0385, r25
     3d4:	80 93 84 03 	sts	0x0384, r24
     3d8:	08 95       	ret

000003da <oled_print_char>:
		//Set higher column address                                                                                                                                                                                                                                                                                                                                                                     
		*oled_command_addr = 0x10 + (column * (FONTWIDTH)>>4);
	}
}

void oled_print_char(char ch){
     3da:	28 e0       	ldi	r18, 0x08	; 8
     3dc:	82 9f       	mul	r24, r18
     3de:	c0 01       	movw	r24, r0
     3e0:	11 24       	eor	r1, r1
     3e2:	fc 01       	movw	r30, r24
     3e4:	e0 59       	subi	r30, 0x90	; 144
     3e6:	f0 40       	sbci	r31, 0x00	; 0
	for (uint8_t i = 0; i<FONTWIDTH; i++) {
     3e8:	80 e0       	ldi	r24, 0x00	; 0
		oled_write_data(pgm_read_byte(&font[ch - FONTOFFSET][i]));
     3ea:	94 91       	lpm	r25, Z
void oled_write_command(uint8_t command){
	*oled_command_addr = command;
}

void oled_write_data(uint8_t data){
	*oled_data_addr = data;
     3ec:	a0 91 04 01 	lds	r26, 0x0104
     3f0:	b0 91 05 01 	lds	r27, 0x0105
     3f4:	9c 93       	st	X, r25
		*oled_command_addr = 0x10 + (column * (FONTWIDTH)>>4);
	}
}

void oled_print_char(char ch){
	for (uint8_t i = 0; i<FONTWIDTH; i++) {
     3f6:	8f 5f       	subi	r24, 0xFF	; 255
     3f8:	31 96       	adiw	r30, 0x01	; 1
     3fa:	88 30       	cpi	r24, 0x08	; 8
     3fc:	b1 f7       	brne	.-20     	; 0x3ea <oled_print_char+0x10>
		oled_write_data(pgm_read_byte(&font[ch - FONTOFFSET][i]));
	}
}
     3fe:	08 95       	ret

00000400 <oled_goto_page>:
void oled_back(){
	
}

void oled_goto_page(unsigned int page) {
	oled_write_command(0xB0 + page);
     400:	90 eb       	ldi	r25, 0xB0	; 176
     402:	98 0f       	add	r25, r24
	_delay_ms(800);
	oled_clear_screen();
}

void oled_write_command(uint8_t command){
	*oled_command_addr = command;
     404:	e0 91 06 01 	lds	r30, 0x0106
     408:	f0 91 07 01 	lds	r31, 0x0107
     40c:	90 83       	st	Z, r25
	
}

void oled_goto_page(unsigned int page) {
	oled_write_command(0xB0 + page);
	global_page = page;
     40e:	80 93 86 03 	sts	0x0386, r24
     412:	80 e1       	ldi	r24, 0x10	; 16
     414:	8a 95       	dec	r24
     416:	f1 f7       	brne	.-4      	; 0x414 <oled_goto_page+0x14>
     418:	00 c0       	rjmp	.+0      	; 0x41a <oled_goto_page+0x1a>
     41a:	08 95       	ret

0000041c <oled_clear_line>:
	_delay_us(50);
}

void oled_clear_line(){
     41c:	80 e8       	ldi	r24, 0x80	; 128
     41e:	90 e0       	ldi	r25, 0x00	; 0
void oled_write_command(uint8_t command){
	*oled_command_addr = command;
}

void oled_write_data(uint8_t data){
	*oled_data_addr = data;
     420:	e0 91 04 01 	lds	r30, 0x0104
     424:	f0 91 05 01 	lds	r31, 0x0105
     428:	10 82       	st	Z, r1
     42a:	01 97       	sbiw	r24, 0x01	; 1
	global_page = page;
	_delay_us(50);
}

void oled_clear_line(){
	for (int i = 0; i<128; i++) {
     42c:	00 97       	sbiw	r24, 0x00	; 0
     42e:	c1 f7       	brne	.-16     	; 0x420 <oled_clear_line+0x4>
		oled_write_data(0b00000000);
	}
}
     430:	08 95       	ret

00000432 <oled_clear_screen>:

void oled_clear_screen() {
     432:	cf 93       	push	r28
     434:	df 93       	push	r29
     436:	c0 e0       	ldi	r28, 0x00	; 0
     438:	d0 e0       	ldi	r29, 0x00	; 0
	for (uint8_t i = 0; i<8; i++) {
		oled_goto_page(i);
     43a:	ce 01       	movw	r24, r28
     43c:	0e 94 00 02 	call	0x400	; 0x400 <oled_goto_page>
		oled_clear_line();
     440:	0e 94 0e 02 	call	0x41c	; 0x41c <oled_clear_line>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     444:	83 ed       	ldi	r24, 0xD3	; 211
     446:	90 e3       	ldi	r25, 0x30	; 48
     448:	01 97       	sbiw	r24, 0x01	; 1
     44a:	f1 f7       	brne	.-4      	; 0x448 <oled_clear_screen+0x16>
     44c:	00 c0       	rjmp	.+0      	; 0x44e <oled_clear_screen+0x1c>
     44e:	00 00       	nop
     450:	21 96       	adiw	r28, 0x01	; 1
		oled_write_data(0b00000000);
	}
}

void oled_clear_screen() {
	for (uint8_t i = 0; i<8; i++) {
     452:	c8 30       	cpi	r28, 0x08	; 8
     454:	d1 05       	cpc	r29, r1
     456:	89 f7       	brne	.-30     	; 0x43a <oled_clear_screen+0x8>
		oled_goto_page(i);
		oled_clear_line();
		_delay_ms(50);
	}
}
     458:	df 91       	pop	r29
     45a:	cf 91       	pop	r28
     45c:	08 95       	ret

0000045e <oled_pos>:

void oled_pos(unsigned int row, unsigned int column){
     45e:	cf 93       	push	r28
     460:	df 93       	push	r29
     462:	eb 01       	movw	r28, r22
	oled_goto_page(row);
     464:	0e 94 00 02 	call	0x400	; 0x400 <oled_goto_page>
	if(column < (128/FONTWIDTH)){
     468:	c0 31       	cpi	r28, 0x10	; 16
     46a:	d1 05       	cpc	r29, r1
     46c:	e8 f4       	brcc	.+58     	; 0x4a8 <oled_pos+0x4a>
		//Save column program goes to
		global_col = column * FONTWIDTH;
     46e:	8c 2f       	mov	r24, r28
     470:	88 0f       	add	r24, r24
     472:	88 0f       	add	r24, r24
     474:	88 0f       	add	r24, r24
     476:	80 93 87 03 	sts	0x0387, r24
		//Set lower column address
		*oled_command_addr = 0x00 + (column * (FONTWIDTH)>>4);
     47a:	e0 91 06 01 	lds	r30, 0x0106
     47e:	f0 91 07 01 	lds	r31, 0x0107
     482:	cc 0f       	add	r28, r28
     484:	dd 1f       	adc	r29, r29
     486:	cc 0f       	add	r28, r28
     488:	dd 1f       	adc	r29, r29
     48a:	cc 0f       	add	r28, r28
     48c:	dd 1f       	adc	r29, r29
     48e:	d2 95       	swap	r29
     490:	c2 95       	swap	r28
     492:	cf 70       	andi	r28, 0x0F	; 15
     494:	cd 27       	eor	r28, r29
     496:	df 70       	andi	r29, 0x0F	; 15
     498:	cd 27       	eor	r28, r29
     49a:	c0 83       	st	Z, r28
		//Set higher column address                                                                                                                                                                                                                                                                                                                                                                     
		*oled_command_addr = 0x10 + (column * (FONTWIDTH)>>4);
     49c:	e0 91 06 01 	lds	r30, 0x0106
     4a0:	f0 91 07 01 	lds	r31, 0x0107
     4a4:	c0 5f       	subi	r28, 0xF0	; 240
     4a6:	c0 83       	st	Z, r28
	}
}
     4a8:	df 91       	pop	r29
     4aa:	cf 91       	pop	r28
     4ac:	08 95       	ret

000004ae <oled_printf>:
	for (uint8_t i = 0; i<FONTWIDTH; i++) {
		oled_write_data(pgm_read_byte(&font[ch - FONTOFFSET][i]));
	}
}

void oled_printf(char* fmt, ...){
     4ae:	cf 93       	push	r28
     4b0:	df 93       	push	r29
     4b2:	cd b7       	in	r28, 0x3d	; 61
     4b4:	de b7       	in	r29, 0x3e	; 62
     4b6:	fe 01       	movw	r30, r28
     4b8:	35 96       	adiw	r30, 0x05	; 5
     4ba:	61 91       	ld	r22, Z+
     4bc:	71 91       	ld	r23, Z+
	va_list v;
	va_start(v, fmt);
	vfprintf(&oled_stdout, fmt, v);
     4be:	af 01       	movw	r20, r30
     4c0:	88 e0       	ldi	r24, 0x08	; 8
     4c2:	91 e0       	ldi	r25, 0x01	; 1
     4c4:	0e 94 2b 05 	call	0xa56	; 0xa56 <vfprintf>
	va_end(v);
}
     4c8:	df 91       	pop	r29
     4ca:	cf 91       	pop	r28
     4cc:	08 95       	ret

000004ce <oled_init>:
	_delay_ms(800);
	oled_clear_screen();
}

void oled_write_command(uint8_t command){
	*oled_command_addr = command;
     4ce:	e0 91 06 01 	lds	r30, 0x0106
     4d2:	f0 91 07 01 	lds	r31, 0x0107
     4d6:	8e ea       	ldi	r24, 0xAE	; 174
     4d8:	80 83       	st	Z, r24
     4da:	e0 91 06 01 	lds	r30, 0x0106
     4de:	f0 91 07 01 	lds	r31, 0x0107
     4e2:	81 ea       	ldi	r24, 0xA1	; 161
     4e4:	80 83       	st	Z, r24
     4e6:	e0 91 06 01 	lds	r30, 0x0106
     4ea:	f0 91 07 01 	lds	r31, 0x0107
     4ee:	8a ed       	ldi	r24, 0xDA	; 218
     4f0:	80 83       	st	Z, r24
     4f2:	e0 91 06 01 	lds	r30, 0x0106
     4f6:	f0 91 07 01 	lds	r31, 0x0107
     4fa:	82 e1       	ldi	r24, 0x12	; 18
     4fc:	80 83       	st	Z, r24
     4fe:	e0 91 06 01 	lds	r30, 0x0106
     502:	f0 91 07 01 	lds	r31, 0x0107
     506:	88 ec       	ldi	r24, 0xC8	; 200
     508:	80 83       	st	Z, r24
     50a:	e0 91 06 01 	lds	r30, 0x0106
     50e:	f0 91 07 01 	lds	r31, 0x0107
     512:	88 ea       	ldi	r24, 0xA8	; 168
     514:	80 83       	st	Z, r24
     516:	e0 91 06 01 	lds	r30, 0x0106
     51a:	f0 91 07 01 	lds	r31, 0x0107
     51e:	8f e3       	ldi	r24, 0x3F	; 63
     520:	80 83       	st	Z, r24
     522:	e0 91 06 01 	lds	r30, 0x0106
     526:	f0 91 07 01 	lds	r31, 0x0107
     52a:	85 ed       	ldi	r24, 0xD5	; 213
     52c:	80 83       	st	Z, r24
     52e:	e0 91 06 01 	lds	r30, 0x0106
     532:	f0 91 07 01 	lds	r31, 0x0107
     536:	80 e8       	ldi	r24, 0x80	; 128
     538:	80 83       	st	Z, r24
     53a:	e0 91 06 01 	lds	r30, 0x0106
     53e:	f0 91 07 01 	lds	r31, 0x0107
     542:	81 e8       	ldi	r24, 0x81	; 129
     544:	80 83       	st	Z, r24
     546:	e0 91 06 01 	lds	r30, 0x0106
     54a:	f0 91 07 01 	lds	r31, 0x0107
     54e:	80 e5       	ldi	r24, 0x50	; 80
     550:	80 83       	st	Z, r24
     552:	e0 91 06 01 	lds	r30, 0x0106
     556:	f0 91 07 01 	lds	r31, 0x0107
     55a:	89 ed       	ldi	r24, 0xD9	; 217
     55c:	80 83       	st	Z, r24
     55e:	e0 91 06 01 	lds	r30, 0x0106
     562:	f0 91 07 01 	lds	r31, 0x0107
     566:	81 e2       	ldi	r24, 0x21	; 33
     568:	80 83       	st	Z, r24
     56a:	e0 91 06 01 	lds	r30, 0x0106
     56e:	f0 91 07 01 	lds	r31, 0x0107
     572:	80 e2       	ldi	r24, 0x20	; 32
     574:	80 83       	st	Z, r24
     576:	e0 91 06 01 	lds	r30, 0x0106
     57a:	f0 91 07 01 	lds	r31, 0x0107
     57e:	82 e0       	ldi	r24, 0x02	; 2
     580:	80 83       	st	Z, r24
     582:	e0 91 06 01 	lds	r30, 0x0106
     586:	f0 91 07 01 	lds	r31, 0x0107
     58a:	8b ed       	ldi	r24, 0xDB	; 219
     58c:	80 83       	st	Z, r24
     58e:	e0 91 06 01 	lds	r30, 0x0106
     592:	f0 91 07 01 	lds	r31, 0x0107
     596:	80 e3       	ldi	r24, 0x30	; 48
     598:	80 83       	st	Z, r24
     59a:	e0 91 06 01 	lds	r30, 0x0106
     59e:	f0 91 07 01 	lds	r31, 0x0107
     5a2:	8d ea       	ldi	r24, 0xAD	; 173
     5a4:	80 83       	st	Z, r24
     5a6:	e0 91 06 01 	lds	r30, 0x0106
     5aa:	f0 91 07 01 	lds	r31, 0x0107
     5ae:	10 82       	st	Z, r1
     5b0:	e0 91 06 01 	lds	r30, 0x0106
     5b4:	f0 91 07 01 	lds	r31, 0x0107
     5b8:	84 ea       	ldi	r24, 0xA4	; 164
     5ba:	80 83       	st	Z, r24
     5bc:	e0 91 06 01 	lds	r30, 0x0106
     5c0:	f0 91 07 01 	lds	r31, 0x0107
     5c4:	86 ea       	ldi	r24, 0xA6	; 166
     5c6:	80 83       	st	Z, r24
     5c8:	e0 91 06 01 	lds	r30, 0x0106
     5cc:	f0 91 07 01 	lds	r31, 0x0107
     5d0:	8f ea       	ldi	r24, 0xAF	; 175
     5d2:	80 83       	st	Z, r24
	oled_write_command(0x00);
	oled_write_command(0xa4);    //out follows RAM content
	oled_write_command(0xa6);    //set normal display
	oled_write_command(0xaf);    // display on
	
	oled_clear_screen();
     5d4:	0e 94 19 02 	call	0x432	; 0x432 <oled_clear_screen>
	oled_pos(2,3);
     5d8:	63 e0       	ldi	r22, 0x03	; 3
     5da:	70 e0       	ldi	r23, 0x00	; 0
     5dc:	82 e0       	ldi	r24, 0x02	; 2
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	0e 94 2f 02 	call	0x45e	; 0x45e <oled_pos>
	oled_printf(" #SWAG");
     5e4:	84 e2       	ldi	r24, 0x24	; 36
     5e6:	91 e0       	ldi	r25, 0x01	; 1
     5e8:	9f 93       	push	r25
     5ea:	8f 93       	push	r24
     5ec:	0e 94 57 02 	call	0x4ae	; 0x4ae <oled_printf>
	oled_pos(3,7);
     5f0:	67 e0       	ldi	r22, 0x07	; 7
     5f2:	70 e0       	ldi	r23, 0x00	; 0
     5f4:	83 e0       	ldi	r24, 0x03	; 3
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	0e 94 2f 02 	call	0x45e	; 0x45e <oled_pos>
	oled_printf("  4");
     5fc:	8b e2       	ldi	r24, 0x2B	; 43
     5fe:	91 e0       	ldi	r25, 0x01	; 1
     600:	9f 93       	push	r25
     602:	8f 93       	push	r24
     604:	0e 94 57 02 	call	0x4ae	; 0x4ae <oled_printf>
	oled_pos(4,9);
     608:	69 e0       	ldi	r22, 0x09	; 9
     60a:	70 e0       	ldi	r23, 0x00	; 0
     60c:	84 e0       	ldi	r24, 0x04	; 4
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	0e 94 2f 02 	call	0x45e	; 0x45e <oled_pos>
	oled_printf(" LYFE");
     614:	8f e2       	ldi	r24, 0x2F	; 47
     616:	91 e0       	ldi	r25, 0x01	; 1
     618:	9f 93       	push	r25
     61a:	8f 93       	push	r24
     61c:	0e 94 57 02 	call	0x4ae	; 0x4ae <oled_printf>
     620:	2f ef       	ldi	r18, 0xFF	; 255
     622:	80 e7       	ldi	r24, 0x70	; 112
     624:	92 e0       	ldi	r25, 0x02	; 2
     626:	21 50       	subi	r18, 0x01	; 1
     628:	80 40       	sbci	r24, 0x00	; 0
     62a:	90 40       	sbci	r25, 0x00	; 0
     62c:	e1 f7       	brne	.-8      	; 0x626 <__stack+0x127>
     62e:	00 c0       	rjmp	.+0      	; 0x630 <__stack+0x131>
     630:	00 00       	nop
	_delay_ms(800);
	oled_clear_screen();
     632:	0e 94 19 02 	call	0x432	; 0x432 <oled_clear_screen>
     636:	0f 90       	pop	r0
     638:	0f 90       	pop	r0
     63a:	0f 90       	pop	r0
     63c:	0f 90       	pop	r0
     63e:	0f 90       	pop	r0
     640:	0f 90       	pop	r0
     642:	08 95       	ret

00000644 <spi_init>:
#define SPI_MISO PB6
#define SPI_MOSI PB5

void spi_init(){
	//Set MOSI, SCK and SS as output pins 	
	DDRB |= (1 << SPI_MOSI) | (1 << SPI_SCK) | (1 << SPI_SS);
     644:	87 b3       	in	r24, 0x17	; 23
     646:	80 6b       	ori	r24, 0xB0	; 176
     648:	87 bb       	out	0x17, r24	; 23
	
	//Set MISO as input pin
	DDRB &= (1 << SPI_MISO);
     64a:	87 b3       	in	r24, 0x17	; 23
     64c:	80 74       	andi	r24, 0x40	; 64
     64e:	87 bb       	out	0x17, r24	; 23
	
	//Enable SPI in master mode and set clock rate fosc/16
	DDRB |= (1 << SPE) | (1 << MSTR) | (1 << SPR0);
     650:	87 b3       	in	r24, 0x17	; 23
     652:	81 65       	ori	r24, 0x51	; 81
     654:	87 bb       	out	0x17, r24	; 23
     656:	08 95       	ret

00000658 <spi_send>:
	return SPSR;
}

void spi_send(char data){
	//Start transmission
	SPDR = data;
     658:	8f b9       	out	0x0f, r24	; 15
	
	//Wait for transmission, checks if register is empty 
	while(!(SPSR & (1 << SPIF)));
     65a:	77 9b       	sbis	0x0e, 7	; 14
     65c:	fe cf       	rjmp	.-4      	; 0x65a <spi_send+0x2>
}
     65e:	08 95       	ret

00000660 <spi_read>:
}


uint8_t spi_read(){
	//Dummy send in order to read from slave
	spi_send(0);
     660:	80 e0       	ldi	r24, 0x00	; 0
     662:	0e 94 2c 03 	call	0x658	; 0x658 <spi_send>
	
	//Wait to receive data
	while(!(SPSR & (1 << SPIF)));
     666:	77 9b       	sbis	0x0e, 7	; 14
     668:	fe cf       	rjmp	.-4      	; 0x666 <spi_read+0x6>
	
	return SPSR;
     66a:	8e b1       	in	r24, 0x0e	; 14
}
     66c:	08 95       	ret

0000066e <spi_test>:
	//Set !SS to 1 for deselection of slave
	PORTB |= (1 << SPI_SS);
}

void spi_test(){
	printf("Start spi....\n");	
     66e:	85 e3       	ldi	r24, 0x35	; 53
     670:	91 e0       	ldi	r25, 0x01	; 1
     672:	0e 94 fe 04 	call	0x9fc	; 0x9fc <puts>
	spi_init();
     676:	0e 94 22 03 	call	0x644	; 0x644 <spi_init>
	
	char test = 'h';
	
	printf("Start while loop....\n");
     67a:	83 e4       	ldi	r24, 0x43	; 67
     67c:	91 e0       	ldi	r25, 0x01	; 1
     67e:	0e 94 fe 04 	call	0x9fc	; 0x9fc <puts>
	while(1) {
		spi_send(test);
     682:	88 e6       	ldi	r24, 0x68	; 104
     684:	0e 94 2c 03 	call	0x658	; 0x658 <spi_send>
		printf(spi_read());
     688:	0e 94 30 03 	call	0x660	; 0x660 <spi_read>
     68c:	1f 92       	push	r1
     68e:	8f 93       	push	r24
     690:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <printf>
     694:	2f e9       	ldi	r18, 0x9F	; 159
     696:	86 e8       	ldi	r24, 0x86	; 134
     698:	91 e0       	ldi	r25, 0x01	; 1
     69a:	21 50       	subi	r18, 0x01	; 1
     69c:	80 40       	sbci	r24, 0x00	; 0
     69e:	90 40       	sbci	r25, 0x00	; 0
     6a0:	e1 f7       	brne	.-8      	; 0x69a <spi_test+0x2c>
     6a2:	00 c0       	rjmp	.+0      	; 0x6a4 <spi_test+0x36>
     6a4:	00 00       	nop
     6a6:	0f 90       	pop	r0
     6a8:	0f 90       	pop	r0
     6aa:	eb cf       	rjmp	.-42     	; 0x682 <spi_test+0x14>

000006ac <SRAM_test>:
	if (address_offset > 0x100) { return 0; }
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	return ext_ram[address_offset];
}

void SRAM_test(void) {
     6ac:	cf 92       	push	r12
     6ae:	df 92       	push	r13
     6b0:	ef 92       	push	r14
     6b2:	ff 92       	push	r15
     6b4:	0f 93       	push	r16
     6b6:	1f 93       	push	r17
     6b8:	cf 93       	push	r28
     6ba:	df 93       	push	r29
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size       = 0x800;
	uint16_t write_errors       = 0;
	uint16_t retrieval_errors   = 0;

	oled_clear_screen();
     6bc:	0e 94 19 02 	call	0x432	; 0x432 <oled_clear_screen>
	oled_pos(3,2);
     6c0:	62 e0       	ldi	r22, 0x02	; 2
     6c2:	70 e0       	ldi	r23, 0x00	; 0
     6c4:	83 e0       	ldi	r24, 0x03	; 3
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	0e 94 2f 02 	call	0x45e	; 0x45e <oled_pos>
	oled_printf("TESTING SRAM");
     6cc:	88 e5       	ldi	r24, 0x58	; 88
     6ce:	91 e0       	ldi	r25, 0x01	; 1
     6d0:	9f 93       	push	r25
     6d2:	8f 93       	push	r24
     6d4:	0e 94 57 02 	call	0x4ae	; 0x4ae <oled_printf>
	printf("\nStarting SRAM test...\n");
     6d8:	85 e6       	ldi	r24, 0x65	; 101
     6da:	91 e0       	ldi	r25, 0x01	; 1
     6dc:	0e 94 fe 04 	call	0x9fc	; 0x9fc <puts>

	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
     6e0:	0e 94 da 04 	call	0x9b4	; 0x9b4 <rand>
     6e4:	6c 01       	movw	r12, r24

	// Write phase: Immediately check that the correct value was stored
	srand(seed);
     6e6:	0e 94 df 04 	call	0x9be	; 0x9be <srand>
     6ea:	0f 90       	pop	r0
     6ec:	0f 90       	pop	r0
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     6ee:	c0 e0       	ldi	r28, 0x00	; 0
     6f0:	d0 e0       	ldi	r29, 0x00	; 0
}

void SRAM_test(void) {
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size       = 0x800;
	uint16_t write_errors       = 0;
     6f2:	00 e0       	ldi	r16, 0x00	; 0
     6f4:	10 e0       	ldi	r17, 0x00	; 0
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		ext_ram[i] = some_value;
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
     6f6:	0f 2e       	mov	r0, r31
     6f8:	fc e7       	ldi	r31, 0x7C	; 124
     6fa:	ef 2e       	mov	r14, r31
     6fc:	f1 e0       	ldi	r31, 0x01	; 1
     6fe:	ff 2e       	mov	r15, r31
     700:	f0 2d       	mov	r31, r0
	uint16_t seed = rand();

	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     702:	0e 94 da 04 	call	0x9b4	; 0x9b4 <rand>
     706:	fe 01       	movw	r30, r28
     708:	f8 5e       	subi	r31, 0xE8	; 232
		ext_ram[i] = some_value;
     70a:	80 83       	st	Z, r24
		uint8_t retreived_value = ext_ram[i];
     70c:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     70e:	28 17       	cp	r18, r24
     710:	a9 f0       	breq	.+42     	; 0x73c <SRAM_test+0x90>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
     712:	99 27       	eor	r25, r25
     714:	9f 93       	push	r25
     716:	8f 93       	push	r24
     718:	1f 92       	push	r1
     71a:	2f 93       	push	r18
     71c:	df 93       	push	r29
     71e:	cf 93       	push	r28
     720:	ff 92       	push	r15
     722:	ef 92       	push	r14
     724:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <printf>
			write_errors++;
     728:	0f 5f       	subi	r16, 0xFF	; 255
     72a:	1f 4f       	sbci	r17, 0xFF	; 255
     72c:	8d b7       	in	r24, 0x3d	; 61
     72e:	9e b7       	in	r25, 0x3e	; 62
     730:	08 96       	adiw	r24, 0x08	; 8
     732:	0f b6       	in	r0, 0x3f	; 63
     734:	f8 94       	cli
     736:	9e bf       	out	0x3e, r25	; 62
     738:	0f be       	out	0x3f, r0	; 63
     73a:	8d bf       	out	0x3d, r24	; 61
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();

	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     73c:	21 96       	adiw	r28, 0x01	; 1
     73e:	c1 15       	cp	r28, r1
     740:	98 e0       	ldi	r25, 0x08	; 8
     742:	d9 07       	cpc	r29, r25
     744:	f1 f6       	brne	.-68     	; 0x702 <SRAM_test+0x56>
			write_errors++;
		}
	}

	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);    // reset the PRNG to the state it had before the write phase
     746:	c6 01       	movw	r24, r12
     748:	0e 94 df 04 	call	0x9be	; 0x9be <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     74c:	c0 e0       	ldi	r28, 0x00	; 0
     74e:	d0 e0       	ldi	r29, 0x00	; 0

void SRAM_test(void) {
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size       = 0x800;
	uint16_t write_errors       = 0;
	uint16_t retrieval_errors   = 0;
     750:	e1 2c       	mov	r14, r1
     752:	f1 2c       	mov	r15, r1
	srand(seed);    // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
     754:	0f 2e       	mov	r0, r31
     756:	f5 eb       	ldi	r31, 0xB5	; 181
     758:	cf 2e       	mov	r12, r31
     75a:	f1 e0       	ldi	r31, 0x01	; 1
     75c:	df 2e       	mov	r13, r31
     75e:	f0 2d       	mov	r31, r0
	}

	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);    // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     760:	0e 94 da 04 	call	0x9b4	; 0x9b4 <rand>
     764:	fe 01       	movw	r30, r28
     766:	f8 5e       	subi	r31, 0xE8	; 232
		uint8_t retreived_value = ext_ram[i];
     768:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     76a:	28 17       	cp	r18, r24
     76c:	b1 f0       	breq	.+44     	; 0x79a <SRAM_test+0xee>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
     76e:	99 27       	eor	r25, r25
     770:	9f 93       	push	r25
     772:	8f 93       	push	r24
     774:	1f 92       	push	r1
     776:	2f 93       	push	r18
     778:	df 93       	push	r29
     77a:	cf 93       	push	r28
     77c:	df 92       	push	r13
     77e:	cf 92       	push	r12
     780:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <printf>
			retrieval_errors++;
     784:	9f ef       	ldi	r25, 0xFF	; 255
     786:	e9 1a       	sub	r14, r25
     788:	f9 0a       	sbc	r15, r25
     78a:	8d b7       	in	r24, 0x3d	; 61
     78c:	9e b7       	in	r25, 0x3e	; 62
     78e:	08 96       	adiw	r24, 0x08	; 8
     790:	0f b6       	in	r0, 0x3f	; 63
     792:	f8 94       	cli
     794:	9e bf       	out	0x3e, r25	; 62
     796:	0f be       	out	0x3f, r0	; 63
     798:	8d bf       	out	0x3d, r24	; 61
		}
	}

	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);    // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     79a:	21 96       	adiw	r28, 0x01	; 1
     79c:	c1 15       	cp	r28, r1
     79e:	98 e0       	ldi	r25, 0x08	; 8
     7a0:	d9 07       	cpc	r29, r25
     7a2:	f1 f6       	brne	.-68     	; 0x760 <SRAM_test+0xb4>
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	if (retrieval_errors != 0 || write_errors != 0) { 
     7a4:	e1 14       	cp	r14, r1
     7a6:	f1 04       	cpc	r15, r1
     7a8:	19 f4       	brne	.+6      	; 0x7b0 <SRAM_test+0x104>
     7aa:	01 15       	cp	r16, r1
     7ac:	11 05       	cpc	r17, r1
     7ae:	71 f1       	breq	.+92     	; 0x80c <SRAM_test+0x160>
		oled_pos(5,0);
     7b0:	60 e0       	ldi	r22, 0x00	; 0
     7b2:	70 e0       	ldi	r23, 0x00	; 0
     7b4:	85 e0       	ldi	r24, 0x05	; 5
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	0e 94 2f 02 	call	0x45e	; 0x45e <oled_pos>
		oled_printf("R ERRORS:  %4d",retrieval_errors);
     7bc:	ff 92       	push	r15
     7be:	ef 92       	push	r14
     7c0:	82 ef       	ldi	r24, 0xF2	; 242
     7c2:	91 e0       	ldi	r25, 0x01	; 1
     7c4:	9f 93       	push	r25
     7c6:	8f 93       	push	r24
     7c8:	0e 94 57 02 	call	0x4ae	; 0x4ae <oled_printf>
		oled_pos(6,0);
     7cc:	60 e0       	ldi	r22, 0x00	; 0
     7ce:	70 e0       	ldi	r23, 0x00	; 0
     7d0:	86 e0       	ldi	r24, 0x06	; 6
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	0e 94 2f 02 	call	0x45e	; 0x45e <oled_pos>
		oled_printf("W ERRORS:  %4d",write_errors);
     7d8:	1f 93       	push	r17
     7da:	0f 93       	push	r16
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	92 e0       	ldi	r25, 0x02	; 2
     7e0:	9f 93       	push	r25
     7e2:	8f 93       	push	r24
     7e4:	0e 94 57 02 	call	0x4ae	; 0x4ae <oled_printf>
     7e8:	2f ef       	ldi	r18, 0xFF	; 255
     7ea:	8f ef       	ldi	r24, 0xFF	; 255
     7ec:	9b e3       	ldi	r25, 0x3B	; 59
     7ee:	21 50       	subi	r18, 0x01	; 1
     7f0:	80 40       	sbci	r24, 0x00	; 0
     7f2:	90 40       	sbci	r25, 0x00	; 0
     7f4:	e1 f7       	brne	.-8      	; 0x7ee <SRAM_test+0x142>
     7f6:	00 c0       	rjmp	.+0      	; 0x7f8 <SRAM_test+0x14c>
     7f8:	00 00       	nop
     7fa:	8d b7       	in	r24, 0x3d	; 61
     7fc:	9e b7       	in	r25, 0x3e	; 62
     7fe:	08 96       	adiw	r24, 0x08	; 8
     800:	0f b6       	in	r0, 0x3f	; 63
     802:	f8 94       	cli
     804:	9e bf       	out	0x3e, r25	; 62
     806:	0f be       	out	0x3f, r0	; 63
     808:	8d bf       	out	0x3d, r24	; 61
     80a:	0e c0       	rjmp	.+28     	; 0x828 <SRAM_test+0x17c>
		_delay_ms(4000);
	} else {
		oled_pos(6,4);
     80c:	64 e0       	ldi	r22, 0x04	; 4
     80e:	70 e0       	ldi	r23, 0x00	; 0
     810:	86 e0       	ldi	r24, 0x06	; 6
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	0e 94 2f 02 	call	0x45e	; 0x45e <oled_pos>
		oled_printf("NO ERRORS");
     818:	80 e1       	ldi	r24, 0x10	; 16
     81a:	92 e0       	ldi	r25, 0x02	; 2
     81c:	9f 93       	push	r25
     81e:	8f 93       	push	r24
     820:	0e 94 57 02 	call	0x4ae	; 0x4ae <oled_printf>
     824:	0f 90       	pop	r0
     826:	0f 90       	pop	r0
	}
	printf("SRAM test completed with \n%4d errors in write phase and \n%4d errors in retrieval phase\n\n", write_errors, retrieval_errors);
     828:	ff 92       	push	r15
     82a:	ef 92       	push	r14
     82c:	1f 93       	push	r17
     82e:	0f 93       	push	r16
     830:	8a e1       	ldi	r24, 0x1A	; 26
     832:	92 e0       	ldi	r25, 0x02	; 2
     834:	9f 93       	push	r25
     836:	8f 93       	push	r24
     838:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <printf>
     83c:	0f 90       	pop	r0
     83e:	0f 90       	pop	r0
     840:	0f 90       	pop	r0
     842:	0f 90       	pop	r0
     844:	0f 90       	pop	r0
     846:	0f 90       	pop	r0
     848:	df 91       	pop	r29
     84a:	cf 91       	pop	r28
     84c:	1f 91       	pop	r17
     84e:	0f 91       	pop	r16
     850:	ff 90       	pop	r15
     852:	ef 90       	pop	r14
     854:	df 90       	pop	r13
     856:	cf 90       	pop	r12
     858:	08 95       	ret

0000085a <SRAM_init>:
#include "SRAM_driver.h"
#include "oled_driver.h"

//Simple setup for SRAM, also tests for correctness
void SRAM_init(){
	MCUCR = 0x80;
     85a:	80 e8       	ldi	r24, 0x80	; 128
     85c:	85 bf       	out	0x35, r24	; 53
	DDRA = 0xFF;
     85e:	8f ef       	ldi	r24, 0xFF	; 255
     860:	8a bb       	out	0x1a, r24	; 26
	SRAM_test();
     862:	0e 94 56 03 	call	0x6ac	; 0x6ac <SRAM_test>
     866:	08 95       	ret

00000868 <uart_sendChar>:

}

void uart_sendChar(unsigned char data){
	//Wait for empty transmitter buffer
	while(!(UCSR0A & (1<<UDRE0)));
     868:	5d 9b       	sbis	0x0b, 5	; 11
     86a:	fe cf       	rjmp	.-4      	; 0x868 <uart_sendChar>
		
	//Put data into buffer, then send the data
	UDR0 = data;
     86c:	8c b9       	out	0x0c, r24	; 12
     86e:	08 95       	ret

00000870 <uart_getChar>:
}


unsigned int uart_getChar(){
	//Wait for the data to be received 
	while(!(UCSR0A & (1<<RXC0))){}
     870:	5f 9b       	sbis	0x0b, 7	; 11
     872:	fe cf       	rjmp	.-4      	; 0x870 <uart_getChar>
	
	//Get status and the 9th bit, then data from buffer
	return UDR0;
     874:	8c b1       	in	r24, 0x0c	; 12
}
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	08 95       	ret

0000087a <uart_init>:

static FILE uart_io = FDEV_SETUP_STREAM(uart_sendChar, uart_getChar, _FDEV_SETUP_RW);

void uart_init(unsigned int ubrr){
	//Set baud rate
	UBRR0L = (unsigned int) ubrr;
     87a:	89 b9       	out	0x09, r24	; 9
	
	//Enable receiver and transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
     87c:	88 e1       	ldi	r24, 0x18	; 24
     87e:	8a b9       	out	0x0a, r24	; 10
	
	stdout = &uart_io;
     880:	86 e1       	ldi	r24, 0x16	; 22
     882:	91 e0       	ldi	r25, 0x01	; 1
     884:	90 93 8b 03 	sts	0x038B, r25
     888:	80 93 8a 03 	sts	0x038A, r24
	stdin = &uart_io;
     88c:	90 93 89 03 	sts	0x0389, r25
     890:	80 93 88 03 	sts	0x0388, r24
     894:	08 95       	ret

00000896 <main>:
#include "Drivers/oled_driver.h"
#include "Drivers/uart_driver.h"
#include "Drivers/spi_driver.h"

int main(void) {
    uart_init(MYUBRR);
     896:	8f e1       	ldi	r24, 0x1F	; 31
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	0e 94 3d 04 	call	0x87a	; 0x87a <uart_init>
	printf("\nREBOOTED\n");
     89e:	83 e7       	ldi	r24, 0x73	; 115
     8a0:	92 e0       	ldi	r25, 0x02	; 2
     8a2:	0e 94 fe 04 	call	0x9fc	; 0x9fc <puts>
	SRAM_init();
     8a6:	0e 94 2d 04 	call	0x85a	; 0x85a <SRAM_init>
	joystick_init();
     8aa:	0e 94 de 01 	call	0x3bc	; 0x3bc <joystick_init>
	oled_init();
     8ae:	0e 94 67 02 	call	0x4ce	; 0x4ce <oled_init>
	
	while(1) { 
		//shell();
		spi_test();
     8b2:	0e 94 37 03 	call	0x66e	; 0x66e <spi_test>
		
		/*
		menuitem* test_menu = MENU_create_menu();
		MENU_navigate(test_menu);
		*/
		flash_diode();
     8b6:	0e 94 5e 04 	call	0x8bc	; 0x8bc <flash_diode>
     8ba:	fb cf       	rjmp	.-10     	; 0x8b2 <main+0x1c>

000008bc <flash_diode>:
#include "Drivers/oled_driver.h"


//Simple test, Ex 1, task 6
void flash_diode(){
	oled_clear_screen();
     8bc:	0e 94 19 02 	call	0x432	; 0x432 <oled_clear_screen>
	oled_pos(2,3);
     8c0:	63 e0       	ldi	r22, 0x03	; 3
     8c2:	70 e0       	ldi	r23, 0x00	; 0
     8c4:	82 e0       	ldi	r24, 0x02	; 2
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	0e 94 2f 02 	call	0x45e	; 0x45e <oled_pos>
	oled_printf("FLASHING");
     8cc:	8d e7       	ldi	r24, 0x7D	; 125
     8ce:	92 e0       	ldi	r25, 0x02	; 2
     8d0:	9f 93       	push	r25
     8d2:	8f 93       	push	r24
     8d4:	0e 94 57 02 	call	0x4ae	; 0x4ae <oled_printf>
	oled_pos(4,4);
     8d8:	64 e0       	ldi	r22, 0x04	; 4
     8da:	70 e0       	ldi	r23, 0x00	; 0
     8dc:	84 e0       	ldi	r24, 0x04	; 4
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	0e 94 2f 02 	call	0x45e	; 0x45e <oled_pos>
	oled_printf("DIODE");
     8e4:	86 e8       	ldi	r24, 0x86	; 134
     8e6:	92 e0       	ldi	r25, 0x02	; 2
     8e8:	9f 93       	push	r25
     8ea:	8f 93       	push	r24
     8ec:	0e 94 57 02 	call	0x4ae	; 0x4ae <oled_printf>
     8f0:	0f 90       	pop	r0
     8f2:	0f 90       	pop	r0
     8f4:	0f 90       	pop	r0
     8f6:	0f 90       	pop	r0
     8f8:	84 e1       	ldi	r24, 0x14	; 20
     8fa:	90 e0       	ldi	r25, 0x00	; 0
	for (int i = 0; i<20; i++) {
		PORTB |= (1<<PINB0);
     8fc:	c0 9a       	sbi	0x18, 0	; 24
     8fe:	e0 e0       	ldi	r30, 0x00	; 0
     900:	f0 ef       	ldi	r31, 0xF0	; 240
     902:	31 97       	sbiw	r30, 0x01	; 1
     904:	f1 f7       	brne	.-4      	; 0x902 <flash_diode+0x46>
		_delay_ms(50);
		PORTB &= ~(1<<PINB0);
     906:	c0 98       	cbi	0x18, 0	; 24
     908:	e0 e0       	ldi	r30, 0x00	; 0
     90a:	f0 ef       	ldi	r31, 0xF0	; 240
     90c:	31 97       	sbiw	r30, 0x01	; 1
     90e:	f1 f7       	brne	.-4      	; 0x90c <flash_diode+0x50>
     910:	01 97       	sbiw	r24, 0x01	; 1
	oled_clear_screen();
	oled_pos(2,3);
	oled_printf("FLASHING");
	oled_pos(4,4);
	oled_printf("DIODE");
	for (int i = 0; i<20; i++) {
     912:	00 97       	sbiw	r24, 0x00	; 0
     914:	99 f7       	brne	.-26     	; 0x8fc <flash_diode+0x40>
		PORTB |= (1<<PINB0);
		_delay_ms(50);
		PORTB &= ~(1<<PINB0);
		_delay_ms(50);
	}
}
     916:	08 95       	ret

00000918 <do_rand>:
     918:	8f 92       	push	r8
     91a:	9f 92       	push	r9
     91c:	af 92       	push	r10
     91e:	bf 92       	push	r11
     920:	cf 92       	push	r12
     922:	df 92       	push	r13
     924:	ef 92       	push	r14
     926:	ff 92       	push	r15
     928:	cf 93       	push	r28
     92a:	df 93       	push	r29
     92c:	ec 01       	movw	r28, r24
     92e:	68 81       	ld	r22, Y
     930:	79 81       	ldd	r23, Y+1	; 0x01
     932:	8a 81       	ldd	r24, Y+2	; 0x02
     934:	9b 81       	ldd	r25, Y+3	; 0x03
     936:	61 15       	cp	r22, r1
     938:	71 05       	cpc	r23, r1
     93a:	81 05       	cpc	r24, r1
     93c:	91 05       	cpc	r25, r1
     93e:	21 f4       	brne	.+8      	; 0x948 <do_rand+0x30>
     940:	64 e2       	ldi	r22, 0x24	; 36
     942:	79 ed       	ldi	r23, 0xD9	; 217
     944:	8b e5       	ldi	r24, 0x5B	; 91
     946:	97 e0       	ldi	r25, 0x07	; 7
     948:	2d e1       	ldi	r18, 0x1D	; 29
     94a:	33 ef       	ldi	r19, 0xF3	; 243
     94c:	41 e0       	ldi	r20, 0x01	; 1
     94e:	50 e0       	ldi	r21, 0x00	; 0
     950:	0e 94 a3 07 	call	0xf46	; 0xf46 <__divmodsi4>
     954:	49 01       	movw	r8, r18
     956:	5a 01       	movw	r10, r20
     958:	9b 01       	movw	r18, r22
     95a:	ac 01       	movw	r20, r24
     95c:	a7 ea       	ldi	r26, 0xA7	; 167
     95e:	b1 e4       	ldi	r27, 0x41	; 65
     960:	0e 94 c2 07 	call	0xf84	; 0xf84 <__muluhisi3>
     964:	6b 01       	movw	r12, r22
     966:	7c 01       	movw	r14, r24
     968:	ac ee       	ldi	r26, 0xEC	; 236
     96a:	b4 ef       	ldi	r27, 0xF4	; 244
     96c:	a5 01       	movw	r20, r10
     96e:	94 01       	movw	r18, r8
     970:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <__mulohisi3>
     974:	c6 0e       	add	r12, r22
     976:	d7 1e       	adc	r13, r23
     978:	e8 1e       	adc	r14, r24
     97a:	f9 1e       	adc	r15, r25
     97c:	f7 fe       	sbrs	r15, 7
     97e:	06 c0       	rjmp	.+12     	; 0x98c <do_rand+0x74>
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	c8 1a       	sub	r12, r24
     984:	d1 08       	sbc	r13, r1
     986:	e1 08       	sbc	r14, r1
     988:	80 e8       	ldi	r24, 0x80	; 128
     98a:	f8 0a       	sbc	r15, r24
     98c:	c8 82       	st	Y, r12
     98e:	d9 82       	std	Y+1, r13	; 0x01
     990:	ea 82       	std	Y+2, r14	; 0x02
     992:	fb 82       	std	Y+3, r15	; 0x03
     994:	c6 01       	movw	r24, r12
     996:	9f 77       	andi	r25, 0x7F	; 127
     998:	df 91       	pop	r29
     99a:	cf 91       	pop	r28
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	cf 90       	pop	r12
     9a4:	bf 90       	pop	r11
     9a6:	af 90       	pop	r10
     9a8:	9f 90       	pop	r9
     9aa:	8f 90       	pop	r8
     9ac:	08 95       	ret

000009ae <rand_r>:
     9ae:	0e 94 8c 04 	call	0x918	; 0x918 <do_rand>
     9b2:	08 95       	ret

000009b4 <rand>:
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	91 e0       	ldi	r25, 0x01	; 1
     9b8:	0e 94 8c 04 	call	0x918	; 0x918 <do_rand>
     9bc:	08 95       	ret

000009be <srand>:
     9be:	a0 e0       	ldi	r26, 0x00	; 0
     9c0:	b0 e0       	ldi	r27, 0x00	; 0
     9c2:	80 93 00 01 	sts	0x0100, r24
     9c6:	90 93 01 01 	sts	0x0101, r25
     9ca:	a0 93 02 01 	sts	0x0102, r26
     9ce:	b0 93 03 01 	sts	0x0103, r27
     9d2:	08 95       	ret

000009d4 <printf>:
     9d4:	a0 e0       	ldi	r26, 0x00	; 0
     9d6:	b0 e0       	ldi	r27, 0x00	; 0
     9d8:	e0 ef       	ldi	r30, 0xF0	; 240
     9da:	f4 e0       	ldi	r31, 0x04	; 4
     9dc:	0c 94 e5 07 	jmp	0xfca	; 0xfca <__prologue_saves__+0x20>
     9e0:	fe 01       	movw	r30, r28
     9e2:	35 96       	adiw	r30, 0x05	; 5
     9e4:	61 91       	ld	r22, Z+
     9e6:	71 91       	ld	r23, Z+
     9e8:	af 01       	movw	r20, r30
     9ea:	80 91 8a 03 	lds	r24, 0x038A
     9ee:	90 91 8b 03 	lds	r25, 0x038B
     9f2:	0e 94 2b 05 	call	0xa56	; 0xa56 <vfprintf>
     9f6:	e2 e0       	ldi	r30, 0x02	; 2
     9f8:	0c 94 01 08 	jmp	0x1002	; 0x1002 <__epilogue_restores__+0x20>

000009fc <puts>:
     9fc:	0f 93       	push	r16
     9fe:	1f 93       	push	r17
     a00:	cf 93       	push	r28
     a02:	df 93       	push	r29
     a04:	e0 91 8a 03 	lds	r30, 0x038A
     a08:	f0 91 8b 03 	lds	r31, 0x038B
     a0c:	23 81       	ldd	r18, Z+3	; 0x03
     a0e:	21 ff       	sbrs	r18, 1
     a10:	1b c0       	rjmp	.+54     	; 0xa48 <puts+0x4c>
     a12:	ec 01       	movw	r28, r24
     a14:	00 e0       	ldi	r16, 0x00	; 0
     a16:	10 e0       	ldi	r17, 0x00	; 0
     a18:	89 91       	ld	r24, Y+
     a1a:	60 91 8a 03 	lds	r22, 0x038A
     a1e:	70 91 8b 03 	lds	r23, 0x038B
     a22:	db 01       	movw	r26, r22
     a24:	18 96       	adiw	r26, 0x08	; 8
     a26:	ed 91       	ld	r30, X+
     a28:	fc 91       	ld	r31, X
     a2a:	19 97       	sbiw	r26, 0x09	; 9
     a2c:	88 23       	and	r24, r24
     a2e:	31 f0       	breq	.+12     	; 0xa3c <puts+0x40>
     a30:	09 95       	icall
     a32:	89 2b       	or	r24, r25
     a34:	89 f3       	breq	.-30     	; 0xa18 <puts+0x1c>
     a36:	0f ef       	ldi	r16, 0xFF	; 255
     a38:	1f ef       	ldi	r17, 0xFF	; 255
     a3a:	ee cf       	rjmp	.-36     	; 0xa18 <puts+0x1c>
     a3c:	8a e0       	ldi	r24, 0x0A	; 10
     a3e:	09 95       	icall
     a40:	89 2b       	or	r24, r25
     a42:	11 f4       	brne	.+4      	; 0xa48 <puts+0x4c>
     a44:	c8 01       	movw	r24, r16
     a46:	02 c0       	rjmp	.+4      	; 0xa4c <puts+0x50>
     a48:	8f ef       	ldi	r24, 0xFF	; 255
     a4a:	9f ef       	ldi	r25, 0xFF	; 255
     a4c:	df 91       	pop	r29
     a4e:	cf 91       	pop	r28
     a50:	1f 91       	pop	r17
     a52:	0f 91       	pop	r16
     a54:	08 95       	ret

00000a56 <vfprintf>:
     a56:	ac e0       	ldi	r26, 0x0C	; 12
     a58:	b0 e0       	ldi	r27, 0x00	; 0
     a5a:	e1 e3       	ldi	r30, 0x31	; 49
     a5c:	f5 e0       	ldi	r31, 0x05	; 5
     a5e:	0c 94 d5 07 	jmp	0xfaa	; 0xfaa <__prologue_saves__>
     a62:	7c 01       	movw	r14, r24
     a64:	6b 01       	movw	r12, r22
     a66:	8a 01       	movw	r16, r20
     a68:	fc 01       	movw	r30, r24
     a6a:	17 82       	std	Z+7, r1	; 0x07
     a6c:	16 82       	std	Z+6, r1	; 0x06
     a6e:	83 81       	ldd	r24, Z+3	; 0x03
     a70:	81 ff       	sbrs	r24, 1
     a72:	bd c1       	rjmp	.+890    	; 0xdee <vfprintf+0x398>
     a74:	ce 01       	movw	r24, r28
     a76:	01 96       	adiw	r24, 0x01	; 1
     a78:	4c 01       	movw	r8, r24
     a7a:	f7 01       	movw	r30, r14
     a7c:	93 81       	ldd	r25, Z+3	; 0x03
     a7e:	f6 01       	movw	r30, r12
     a80:	93 fd       	sbrc	r25, 3
     a82:	85 91       	lpm	r24, Z+
     a84:	93 ff       	sbrs	r25, 3
     a86:	81 91       	ld	r24, Z+
     a88:	6f 01       	movw	r12, r30
     a8a:	88 23       	and	r24, r24
     a8c:	09 f4       	brne	.+2      	; 0xa90 <vfprintf+0x3a>
     a8e:	ab c1       	rjmp	.+854    	; 0xde6 <vfprintf+0x390>
     a90:	85 32       	cpi	r24, 0x25	; 37
     a92:	39 f4       	brne	.+14     	; 0xaa2 <vfprintf+0x4c>
     a94:	93 fd       	sbrc	r25, 3
     a96:	85 91       	lpm	r24, Z+
     a98:	93 ff       	sbrs	r25, 3
     a9a:	81 91       	ld	r24, Z+
     a9c:	6f 01       	movw	r12, r30
     a9e:	85 32       	cpi	r24, 0x25	; 37
     aa0:	29 f4       	brne	.+10     	; 0xaac <vfprintf+0x56>
     aa2:	b7 01       	movw	r22, r14
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	0e 94 13 07 	call	0xe26	; 0xe26 <fputc>
     aaa:	e7 cf       	rjmp	.-50     	; 0xa7a <vfprintf+0x24>
     aac:	51 2c       	mov	r5, r1
     aae:	31 2c       	mov	r3, r1
     ab0:	20 e0       	ldi	r18, 0x00	; 0
     ab2:	20 32       	cpi	r18, 0x20	; 32
     ab4:	a0 f4       	brcc	.+40     	; 0xade <vfprintf+0x88>
     ab6:	8b 32       	cpi	r24, 0x2B	; 43
     ab8:	69 f0       	breq	.+26     	; 0xad4 <vfprintf+0x7e>
     aba:	30 f4       	brcc	.+12     	; 0xac8 <vfprintf+0x72>
     abc:	80 32       	cpi	r24, 0x20	; 32
     abe:	59 f0       	breq	.+22     	; 0xad6 <vfprintf+0x80>
     ac0:	83 32       	cpi	r24, 0x23	; 35
     ac2:	69 f4       	brne	.+26     	; 0xade <vfprintf+0x88>
     ac4:	20 61       	ori	r18, 0x10	; 16
     ac6:	2c c0       	rjmp	.+88     	; 0xb20 <vfprintf+0xca>
     ac8:	8d 32       	cpi	r24, 0x2D	; 45
     aca:	39 f0       	breq	.+14     	; 0xada <vfprintf+0x84>
     acc:	80 33       	cpi	r24, 0x30	; 48
     ace:	39 f4       	brne	.+14     	; 0xade <vfprintf+0x88>
     ad0:	21 60       	ori	r18, 0x01	; 1
     ad2:	26 c0       	rjmp	.+76     	; 0xb20 <vfprintf+0xca>
     ad4:	22 60       	ori	r18, 0x02	; 2
     ad6:	24 60       	ori	r18, 0x04	; 4
     ad8:	23 c0       	rjmp	.+70     	; 0xb20 <vfprintf+0xca>
     ada:	28 60       	ori	r18, 0x08	; 8
     adc:	21 c0       	rjmp	.+66     	; 0xb20 <vfprintf+0xca>
     ade:	27 fd       	sbrc	r18, 7
     ae0:	27 c0       	rjmp	.+78     	; 0xb30 <vfprintf+0xda>
     ae2:	30 ed       	ldi	r19, 0xD0	; 208
     ae4:	38 0f       	add	r19, r24
     ae6:	3a 30       	cpi	r19, 0x0A	; 10
     ae8:	78 f4       	brcc	.+30     	; 0xb08 <vfprintf+0xb2>
     aea:	26 ff       	sbrs	r18, 6
     aec:	06 c0       	rjmp	.+12     	; 0xafa <vfprintf+0xa4>
     aee:	fa e0       	ldi	r31, 0x0A	; 10
     af0:	5f 9e       	mul	r5, r31
     af2:	30 0d       	add	r19, r0
     af4:	11 24       	eor	r1, r1
     af6:	53 2e       	mov	r5, r19
     af8:	13 c0       	rjmp	.+38     	; 0xb20 <vfprintf+0xca>
     afa:	8a e0       	ldi	r24, 0x0A	; 10
     afc:	38 9e       	mul	r3, r24
     afe:	30 0d       	add	r19, r0
     b00:	11 24       	eor	r1, r1
     b02:	33 2e       	mov	r3, r19
     b04:	20 62       	ori	r18, 0x20	; 32
     b06:	0c c0       	rjmp	.+24     	; 0xb20 <vfprintf+0xca>
     b08:	8e 32       	cpi	r24, 0x2E	; 46
     b0a:	21 f4       	brne	.+8      	; 0xb14 <vfprintf+0xbe>
     b0c:	26 fd       	sbrc	r18, 6
     b0e:	6b c1       	rjmp	.+726    	; 0xde6 <vfprintf+0x390>
     b10:	20 64       	ori	r18, 0x40	; 64
     b12:	06 c0       	rjmp	.+12     	; 0xb20 <vfprintf+0xca>
     b14:	8c 36       	cpi	r24, 0x6C	; 108
     b16:	11 f4       	brne	.+4      	; 0xb1c <vfprintf+0xc6>
     b18:	20 68       	ori	r18, 0x80	; 128
     b1a:	02 c0       	rjmp	.+4      	; 0xb20 <vfprintf+0xca>
     b1c:	88 36       	cpi	r24, 0x68	; 104
     b1e:	41 f4       	brne	.+16     	; 0xb30 <vfprintf+0xda>
     b20:	f6 01       	movw	r30, r12
     b22:	93 fd       	sbrc	r25, 3
     b24:	85 91       	lpm	r24, Z+
     b26:	93 ff       	sbrs	r25, 3
     b28:	81 91       	ld	r24, Z+
     b2a:	6f 01       	movw	r12, r30
     b2c:	81 11       	cpse	r24, r1
     b2e:	c1 cf       	rjmp	.-126    	; 0xab2 <vfprintf+0x5c>
     b30:	98 2f       	mov	r25, r24
     b32:	9f 7d       	andi	r25, 0xDF	; 223
     b34:	95 54       	subi	r25, 0x45	; 69
     b36:	93 30       	cpi	r25, 0x03	; 3
     b38:	28 f4       	brcc	.+10     	; 0xb44 <vfprintf+0xee>
     b3a:	0c 5f       	subi	r16, 0xFC	; 252
     b3c:	1f 4f       	sbci	r17, 0xFF	; 255
     b3e:	ff e3       	ldi	r31, 0x3F	; 63
     b40:	f9 83       	std	Y+1, r31	; 0x01
     b42:	0d c0       	rjmp	.+26     	; 0xb5e <vfprintf+0x108>
     b44:	83 36       	cpi	r24, 0x63	; 99
     b46:	31 f0       	breq	.+12     	; 0xb54 <vfprintf+0xfe>
     b48:	83 37       	cpi	r24, 0x73	; 115
     b4a:	71 f0       	breq	.+28     	; 0xb68 <vfprintf+0x112>
     b4c:	83 35       	cpi	r24, 0x53	; 83
     b4e:	09 f0       	breq	.+2      	; 0xb52 <vfprintf+0xfc>
     b50:	5b c0       	rjmp	.+182    	; 0xc08 <vfprintf+0x1b2>
     b52:	22 c0       	rjmp	.+68     	; 0xb98 <vfprintf+0x142>
     b54:	f8 01       	movw	r30, r16
     b56:	80 81       	ld	r24, Z
     b58:	89 83       	std	Y+1, r24	; 0x01
     b5a:	0e 5f       	subi	r16, 0xFE	; 254
     b5c:	1f 4f       	sbci	r17, 0xFF	; 255
     b5e:	44 24       	eor	r4, r4
     b60:	43 94       	inc	r4
     b62:	51 2c       	mov	r5, r1
     b64:	54 01       	movw	r10, r8
     b66:	15 c0       	rjmp	.+42     	; 0xb92 <vfprintf+0x13c>
     b68:	38 01       	movw	r6, r16
     b6a:	f2 e0       	ldi	r31, 0x02	; 2
     b6c:	6f 0e       	add	r6, r31
     b6e:	71 1c       	adc	r7, r1
     b70:	f8 01       	movw	r30, r16
     b72:	a0 80       	ld	r10, Z
     b74:	b1 80       	ldd	r11, Z+1	; 0x01
     b76:	26 ff       	sbrs	r18, 6
     b78:	03 c0       	rjmp	.+6      	; 0xb80 <vfprintf+0x12a>
     b7a:	65 2d       	mov	r22, r5
     b7c:	70 e0       	ldi	r23, 0x00	; 0
     b7e:	02 c0       	rjmp	.+4      	; 0xb84 <vfprintf+0x12e>
     b80:	6f ef       	ldi	r22, 0xFF	; 255
     b82:	7f ef       	ldi	r23, 0xFF	; 255
     b84:	c5 01       	movw	r24, r10
     b86:	2c 87       	std	Y+12, r18	; 0x0c
     b88:	0e 94 08 07 	call	0xe10	; 0xe10 <strnlen>
     b8c:	2c 01       	movw	r4, r24
     b8e:	83 01       	movw	r16, r6
     b90:	2c 85       	ldd	r18, Y+12	; 0x0c
     b92:	2f 77       	andi	r18, 0x7F	; 127
     b94:	22 2e       	mov	r2, r18
     b96:	17 c0       	rjmp	.+46     	; 0xbc6 <vfprintf+0x170>
     b98:	38 01       	movw	r6, r16
     b9a:	f2 e0       	ldi	r31, 0x02	; 2
     b9c:	6f 0e       	add	r6, r31
     b9e:	71 1c       	adc	r7, r1
     ba0:	f8 01       	movw	r30, r16
     ba2:	a0 80       	ld	r10, Z
     ba4:	b1 80       	ldd	r11, Z+1	; 0x01
     ba6:	26 ff       	sbrs	r18, 6
     ba8:	03 c0       	rjmp	.+6      	; 0xbb0 <vfprintf+0x15a>
     baa:	65 2d       	mov	r22, r5
     bac:	70 e0       	ldi	r23, 0x00	; 0
     bae:	02 c0       	rjmp	.+4      	; 0xbb4 <vfprintf+0x15e>
     bb0:	6f ef       	ldi	r22, 0xFF	; 255
     bb2:	7f ef       	ldi	r23, 0xFF	; 255
     bb4:	c5 01       	movw	r24, r10
     bb6:	2c 87       	std	Y+12, r18	; 0x0c
     bb8:	0e 94 fd 06 	call	0xdfa	; 0xdfa <strnlen_P>
     bbc:	2c 01       	movw	r4, r24
     bbe:	2c 85       	ldd	r18, Y+12	; 0x0c
     bc0:	20 68       	ori	r18, 0x80	; 128
     bc2:	22 2e       	mov	r2, r18
     bc4:	83 01       	movw	r16, r6
     bc6:	23 fc       	sbrc	r2, 3
     bc8:	1b c0       	rjmp	.+54     	; 0xc00 <vfprintf+0x1aa>
     bca:	83 2d       	mov	r24, r3
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	48 16       	cp	r4, r24
     bd0:	59 06       	cpc	r5, r25
     bd2:	b0 f4       	brcc	.+44     	; 0xc00 <vfprintf+0x1aa>
     bd4:	b7 01       	movw	r22, r14
     bd6:	80 e2       	ldi	r24, 0x20	; 32
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	0e 94 13 07 	call	0xe26	; 0xe26 <fputc>
     bde:	3a 94       	dec	r3
     be0:	f4 cf       	rjmp	.-24     	; 0xbca <vfprintf+0x174>
     be2:	f5 01       	movw	r30, r10
     be4:	27 fc       	sbrc	r2, 7
     be6:	85 91       	lpm	r24, Z+
     be8:	27 fe       	sbrs	r2, 7
     bea:	81 91       	ld	r24, Z+
     bec:	5f 01       	movw	r10, r30
     bee:	b7 01       	movw	r22, r14
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	0e 94 13 07 	call	0xe26	; 0xe26 <fputc>
     bf6:	31 10       	cpse	r3, r1
     bf8:	3a 94       	dec	r3
     bfa:	f1 e0       	ldi	r31, 0x01	; 1
     bfc:	4f 1a       	sub	r4, r31
     bfe:	51 08       	sbc	r5, r1
     c00:	41 14       	cp	r4, r1
     c02:	51 04       	cpc	r5, r1
     c04:	71 f7       	brne	.-36     	; 0xbe2 <vfprintf+0x18c>
     c06:	e5 c0       	rjmp	.+458    	; 0xdd2 <vfprintf+0x37c>
     c08:	84 36       	cpi	r24, 0x64	; 100
     c0a:	11 f0       	breq	.+4      	; 0xc10 <vfprintf+0x1ba>
     c0c:	89 36       	cpi	r24, 0x69	; 105
     c0e:	39 f5       	brne	.+78     	; 0xc5e <vfprintf+0x208>
     c10:	f8 01       	movw	r30, r16
     c12:	27 ff       	sbrs	r18, 7
     c14:	07 c0       	rjmp	.+14     	; 0xc24 <vfprintf+0x1ce>
     c16:	60 81       	ld	r22, Z
     c18:	71 81       	ldd	r23, Z+1	; 0x01
     c1a:	82 81       	ldd	r24, Z+2	; 0x02
     c1c:	93 81       	ldd	r25, Z+3	; 0x03
     c1e:	0c 5f       	subi	r16, 0xFC	; 252
     c20:	1f 4f       	sbci	r17, 0xFF	; 255
     c22:	08 c0       	rjmp	.+16     	; 0xc34 <vfprintf+0x1de>
     c24:	60 81       	ld	r22, Z
     c26:	71 81       	ldd	r23, Z+1	; 0x01
     c28:	88 27       	eor	r24, r24
     c2a:	77 fd       	sbrc	r23, 7
     c2c:	80 95       	com	r24
     c2e:	98 2f       	mov	r25, r24
     c30:	0e 5f       	subi	r16, 0xFE	; 254
     c32:	1f 4f       	sbci	r17, 0xFF	; 255
     c34:	2f 76       	andi	r18, 0x6F	; 111
     c36:	b2 2e       	mov	r11, r18
     c38:	97 ff       	sbrs	r25, 7
     c3a:	09 c0       	rjmp	.+18     	; 0xc4e <vfprintf+0x1f8>
     c3c:	90 95       	com	r25
     c3e:	80 95       	com	r24
     c40:	70 95       	com	r23
     c42:	61 95       	neg	r22
     c44:	7f 4f       	sbci	r23, 0xFF	; 255
     c46:	8f 4f       	sbci	r24, 0xFF	; 255
     c48:	9f 4f       	sbci	r25, 0xFF	; 255
     c4a:	20 68       	ori	r18, 0x80	; 128
     c4c:	b2 2e       	mov	r11, r18
     c4e:	2a e0       	ldi	r18, 0x0A	; 10
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	a4 01       	movw	r20, r8
     c54:	0e 94 45 07 	call	0xe8a	; 0xe8a <__ultoa_invert>
     c58:	a8 2e       	mov	r10, r24
     c5a:	a8 18       	sub	r10, r8
     c5c:	44 c0       	rjmp	.+136    	; 0xce6 <vfprintf+0x290>
     c5e:	85 37       	cpi	r24, 0x75	; 117
     c60:	29 f4       	brne	.+10     	; 0xc6c <vfprintf+0x216>
     c62:	2f 7e       	andi	r18, 0xEF	; 239
     c64:	b2 2e       	mov	r11, r18
     c66:	2a e0       	ldi	r18, 0x0A	; 10
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	25 c0       	rjmp	.+74     	; 0xcb6 <vfprintf+0x260>
     c6c:	f2 2f       	mov	r31, r18
     c6e:	f9 7f       	andi	r31, 0xF9	; 249
     c70:	bf 2e       	mov	r11, r31
     c72:	8f 36       	cpi	r24, 0x6F	; 111
     c74:	c1 f0       	breq	.+48     	; 0xca6 <vfprintf+0x250>
     c76:	18 f4       	brcc	.+6      	; 0xc7e <vfprintf+0x228>
     c78:	88 35       	cpi	r24, 0x58	; 88
     c7a:	79 f0       	breq	.+30     	; 0xc9a <vfprintf+0x244>
     c7c:	b4 c0       	rjmp	.+360    	; 0xde6 <vfprintf+0x390>
     c7e:	80 37       	cpi	r24, 0x70	; 112
     c80:	19 f0       	breq	.+6      	; 0xc88 <vfprintf+0x232>
     c82:	88 37       	cpi	r24, 0x78	; 120
     c84:	21 f0       	breq	.+8      	; 0xc8e <vfprintf+0x238>
     c86:	af c0       	rjmp	.+350    	; 0xde6 <vfprintf+0x390>
     c88:	2f 2f       	mov	r18, r31
     c8a:	20 61       	ori	r18, 0x10	; 16
     c8c:	b2 2e       	mov	r11, r18
     c8e:	b4 fe       	sbrs	r11, 4
     c90:	0d c0       	rjmp	.+26     	; 0xcac <vfprintf+0x256>
     c92:	8b 2d       	mov	r24, r11
     c94:	84 60       	ori	r24, 0x04	; 4
     c96:	b8 2e       	mov	r11, r24
     c98:	09 c0       	rjmp	.+18     	; 0xcac <vfprintf+0x256>
     c9a:	24 ff       	sbrs	r18, 4
     c9c:	0a c0       	rjmp	.+20     	; 0xcb2 <vfprintf+0x25c>
     c9e:	9f 2f       	mov	r25, r31
     ca0:	96 60       	ori	r25, 0x06	; 6
     ca2:	b9 2e       	mov	r11, r25
     ca4:	06 c0       	rjmp	.+12     	; 0xcb2 <vfprintf+0x25c>
     ca6:	28 e0       	ldi	r18, 0x08	; 8
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	05 c0       	rjmp	.+10     	; 0xcb6 <vfprintf+0x260>
     cac:	20 e1       	ldi	r18, 0x10	; 16
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	02 c0       	rjmp	.+4      	; 0xcb6 <vfprintf+0x260>
     cb2:	20 e1       	ldi	r18, 0x10	; 16
     cb4:	32 e0       	ldi	r19, 0x02	; 2
     cb6:	f8 01       	movw	r30, r16
     cb8:	b7 fe       	sbrs	r11, 7
     cba:	07 c0       	rjmp	.+14     	; 0xcca <vfprintf+0x274>
     cbc:	60 81       	ld	r22, Z
     cbe:	71 81       	ldd	r23, Z+1	; 0x01
     cc0:	82 81       	ldd	r24, Z+2	; 0x02
     cc2:	93 81       	ldd	r25, Z+3	; 0x03
     cc4:	0c 5f       	subi	r16, 0xFC	; 252
     cc6:	1f 4f       	sbci	r17, 0xFF	; 255
     cc8:	06 c0       	rjmp	.+12     	; 0xcd6 <vfprintf+0x280>
     cca:	60 81       	ld	r22, Z
     ccc:	71 81       	ldd	r23, Z+1	; 0x01
     cce:	80 e0       	ldi	r24, 0x00	; 0
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	0e 5f       	subi	r16, 0xFE	; 254
     cd4:	1f 4f       	sbci	r17, 0xFF	; 255
     cd6:	a4 01       	movw	r20, r8
     cd8:	0e 94 45 07 	call	0xe8a	; 0xe8a <__ultoa_invert>
     cdc:	a8 2e       	mov	r10, r24
     cde:	a8 18       	sub	r10, r8
     ce0:	fb 2d       	mov	r31, r11
     ce2:	ff 77       	andi	r31, 0x7F	; 127
     ce4:	bf 2e       	mov	r11, r31
     ce6:	b6 fe       	sbrs	r11, 6
     ce8:	0b c0       	rjmp	.+22     	; 0xd00 <vfprintf+0x2aa>
     cea:	2b 2d       	mov	r18, r11
     cec:	2e 7f       	andi	r18, 0xFE	; 254
     cee:	a5 14       	cp	r10, r5
     cf0:	50 f4       	brcc	.+20     	; 0xd06 <vfprintf+0x2b0>
     cf2:	b4 fe       	sbrs	r11, 4
     cf4:	0a c0       	rjmp	.+20     	; 0xd0a <vfprintf+0x2b4>
     cf6:	b2 fc       	sbrc	r11, 2
     cf8:	08 c0       	rjmp	.+16     	; 0xd0a <vfprintf+0x2b4>
     cfa:	2b 2d       	mov	r18, r11
     cfc:	2e 7e       	andi	r18, 0xEE	; 238
     cfe:	05 c0       	rjmp	.+10     	; 0xd0a <vfprintf+0x2b4>
     d00:	7a 2c       	mov	r7, r10
     d02:	2b 2d       	mov	r18, r11
     d04:	03 c0       	rjmp	.+6      	; 0xd0c <vfprintf+0x2b6>
     d06:	7a 2c       	mov	r7, r10
     d08:	01 c0       	rjmp	.+2      	; 0xd0c <vfprintf+0x2b6>
     d0a:	75 2c       	mov	r7, r5
     d0c:	24 ff       	sbrs	r18, 4
     d0e:	0d c0       	rjmp	.+26     	; 0xd2a <vfprintf+0x2d4>
     d10:	fe 01       	movw	r30, r28
     d12:	ea 0d       	add	r30, r10
     d14:	f1 1d       	adc	r31, r1
     d16:	80 81       	ld	r24, Z
     d18:	80 33       	cpi	r24, 0x30	; 48
     d1a:	11 f4       	brne	.+4      	; 0xd20 <vfprintf+0x2ca>
     d1c:	29 7e       	andi	r18, 0xE9	; 233
     d1e:	09 c0       	rjmp	.+18     	; 0xd32 <vfprintf+0x2dc>
     d20:	22 ff       	sbrs	r18, 2
     d22:	06 c0       	rjmp	.+12     	; 0xd30 <vfprintf+0x2da>
     d24:	73 94       	inc	r7
     d26:	73 94       	inc	r7
     d28:	04 c0       	rjmp	.+8      	; 0xd32 <vfprintf+0x2dc>
     d2a:	82 2f       	mov	r24, r18
     d2c:	86 78       	andi	r24, 0x86	; 134
     d2e:	09 f0       	breq	.+2      	; 0xd32 <vfprintf+0x2dc>
     d30:	73 94       	inc	r7
     d32:	23 fd       	sbrc	r18, 3
     d34:	13 c0       	rjmp	.+38     	; 0xd5c <vfprintf+0x306>
     d36:	20 ff       	sbrs	r18, 0
     d38:	06 c0       	rjmp	.+12     	; 0xd46 <vfprintf+0x2f0>
     d3a:	5a 2c       	mov	r5, r10
     d3c:	73 14       	cp	r7, r3
     d3e:	18 f4       	brcc	.+6      	; 0xd46 <vfprintf+0x2f0>
     d40:	53 0c       	add	r5, r3
     d42:	57 18       	sub	r5, r7
     d44:	73 2c       	mov	r7, r3
     d46:	73 14       	cp	r7, r3
     d48:	68 f4       	brcc	.+26     	; 0xd64 <vfprintf+0x30e>
     d4a:	b7 01       	movw	r22, r14
     d4c:	80 e2       	ldi	r24, 0x20	; 32
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	2c 87       	std	Y+12, r18	; 0x0c
     d52:	0e 94 13 07 	call	0xe26	; 0xe26 <fputc>
     d56:	73 94       	inc	r7
     d58:	2c 85       	ldd	r18, Y+12	; 0x0c
     d5a:	f5 cf       	rjmp	.-22     	; 0xd46 <vfprintf+0x2f0>
     d5c:	73 14       	cp	r7, r3
     d5e:	10 f4       	brcc	.+4      	; 0xd64 <vfprintf+0x30e>
     d60:	37 18       	sub	r3, r7
     d62:	01 c0       	rjmp	.+2      	; 0xd66 <vfprintf+0x310>
     d64:	31 2c       	mov	r3, r1
     d66:	24 ff       	sbrs	r18, 4
     d68:	12 c0       	rjmp	.+36     	; 0xd8e <vfprintf+0x338>
     d6a:	b7 01       	movw	r22, r14
     d6c:	80 e3       	ldi	r24, 0x30	; 48
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	2c 87       	std	Y+12, r18	; 0x0c
     d72:	0e 94 13 07 	call	0xe26	; 0xe26 <fputc>
     d76:	2c 85       	ldd	r18, Y+12	; 0x0c
     d78:	22 ff       	sbrs	r18, 2
     d7a:	17 c0       	rjmp	.+46     	; 0xdaa <vfprintf+0x354>
     d7c:	21 ff       	sbrs	r18, 1
     d7e:	03 c0       	rjmp	.+6      	; 0xd86 <vfprintf+0x330>
     d80:	88 e5       	ldi	r24, 0x58	; 88
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	02 c0       	rjmp	.+4      	; 0xd8a <vfprintf+0x334>
     d86:	88 e7       	ldi	r24, 0x78	; 120
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	b7 01       	movw	r22, r14
     d8c:	0c c0       	rjmp	.+24     	; 0xda6 <vfprintf+0x350>
     d8e:	82 2f       	mov	r24, r18
     d90:	86 78       	andi	r24, 0x86	; 134
     d92:	59 f0       	breq	.+22     	; 0xdaa <vfprintf+0x354>
     d94:	21 fd       	sbrc	r18, 1
     d96:	02 c0       	rjmp	.+4      	; 0xd9c <vfprintf+0x346>
     d98:	80 e2       	ldi	r24, 0x20	; 32
     d9a:	01 c0       	rjmp	.+2      	; 0xd9e <vfprintf+0x348>
     d9c:	8b e2       	ldi	r24, 0x2B	; 43
     d9e:	27 fd       	sbrc	r18, 7
     da0:	8d e2       	ldi	r24, 0x2D	; 45
     da2:	b7 01       	movw	r22, r14
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	0e 94 13 07 	call	0xe26	; 0xe26 <fputc>
     daa:	a5 14       	cp	r10, r5
     dac:	38 f4       	brcc	.+14     	; 0xdbc <vfprintf+0x366>
     dae:	b7 01       	movw	r22, r14
     db0:	80 e3       	ldi	r24, 0x30	; 48
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	0e 94 13 07 	call	0xe26	; 0xe26 <fputc>
     db8:	5a 94       	dec	r5
     dba:	f7 cf       	rjmp	.-18     	; 0xdaa <vfprintf+0x354>
     dbc:	aa 94       	dec	r10
     dbe:	f4 01       	movw	r30, r8
     dc0:	ea 0d       	add	r30, r10
     dc2:	f1 1d       	adc	r31, r1
     dc4:	80 81       	ld	r24, Z
     dc6:	b7 01       	movw	r22, r14
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	0e 94 13 07 	call	0xe26	; 0xe26 <fputc>
     dce:	a1 10       	cpse	r10, r1
     dd0:	f5 cf       	rjmp	.-22     	; 0xdbc <vfprintf+0x366>
     dd2:	33 20       	and	r3, r3
     dd4:	09 f4       	brne	.+2      	; 0xdd8 <vfprintf+0x382>
     dd6:	51 ce       	rjmp	.-862    	; 0xa7a <vfprintf+0x24>
     dd8:	b7 01       	movw	r22, r14
     dda:	80 e2       	ldi	r24, 0x20	; 32
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	0e 94 13 07 	call	0xe26	; 0xe26 <fputc>
     de2:	3a 94       	dec	r3
     de4:	f6 cf       	rjmp	.-20     	; 0xdd2 <vfprintf+0x37c>
     de6:	f7 01       	movw	r30, r14
     de8:	86 81       	ldd	r24, Z+6	; 0x06
     dea:	97 81       	ldd	r25, Z+7	; 0x07
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <vfprintf+0x39c>
     dee:	8f ef       	ldi	r24, 0xFF	; 255
     df0:	9f ef       	ldi	r25, 0xFF	; 255
     df2:	2c 96       	adiw	r28, 0x0c	; 12
     df4:	e2 e1       	ldi	r30, 0x12	; 18
     df6:	0c 94 f1 07 	jmp	0xfe2	; 0xfe2 <__epilogue_restores__>

00000dfa <strnlen_P>:
     dfa:	fc 01       	movw	r30, r24
     dfc:	05 90       	lpm	r0, Z+
     dfe:	61 50       	subi	r22, 0x01	; 1
     e00:	70 40       	sbci	r23, 0x00	; 0
     e02:	01 10       	cpse	r0, r1
     e04:	d8 f7       	brcc	.-10     	; 0xdfc <strnlen_P+0x2>
     e06:	80 95       	com	r24
     e08:	90 95       	com	r25
     e0a:	8e 0f       	add	r24, r30
     e0c:	9f 1f       	adc	r25, r31
     e0e:	08 95       	ret

00000e10 <strnlen>:
     e10:	fc 01       	movw	r30, r24
     e12:	61 50       	subi	r22, 0x01	; 1
     e14:	70 40       	sbci	r23, 0x00	; 0
     e16:	01 90       	ld	r0, Z+
     e18:	01 10       	cpse	r0, r1
     e1a:	d8 f7       	brcc	.-10     	; 0xe12 <strnlen+0x2>
     e1c:	80 95       	com	r24
     e1e:	90 95       	com	r25
     e20:	8e 0f       	add	r24, r30
     e22:	9f 1f       	adc	r25, r31
     e24:	08 95       	ret

00000e26 <fputc>:
     e26:	0f 93       	push	r16
     e28:	1f 93       	push	r17
     e2a:	cf 93       	push	r28
     e2c:	df 93       	push	r29
     e2e:	18 2f       	mov	r17, r24
     e30:	09 2f       	mov	r16, r25
     e32:	eb 01       	movw	r28, r22
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	81 fd       	sbrc	r24, 1
     e38:	03 c0       	rjmp	.+6      	; 0xe40 <fputc+0x1a>
     e3a:	8f ef       	ldi	r24, 0xFF	; 255
     e3c:	9f ef       	ldi	r25, 0xFF	; 255
     e3e:	20 c0       	rjmp	.+64     	; 0xe80 <fputc+0x5a>
     e40:	82 ff       	sbrs	r24, 2
     e42:	10 c0       	rjmp	.+32     	; 0xe64 <fputc+0x3e>
     e44:	4e 81       	ldd	r20, Y+6	; 0x06
     e46:	5f 81       	ldd	r21, Y+7	; 0x07
     e48:	2c 81       	ldd	r18, Y+4	; 0x04
     e4a:	3d 81       	ldd	r19, Y+5	; 0x05
     e4c:	42 17       	cp	r20, r18
     e4e:	53 07       	cpc	r21, r19
     e50:	7c f4       	brge	.+30     	; 0xe70 <fputc+0x4a>
     e52:	e8 81       	ld	r30, Y
     e54:	f9 81       	ldd	r31, Y+1	; 0x01
     e56:	9f 01       	movw	r18, r30
     e58:	2f 5f       	subi	r18, 0xFF	; 255
     e5a:	3f 4f       	sbci	r19, 0xFF	; 255
     e5c:	39 83       	std	Y+1, r19	; 0x01
     e5e:	28 83       	st	Y, r18
     e60:	10 83       	st	Z, r17
     e62:	06 c0       	rjmp	.+12     	; 0xe70 <fputc+0x4a>
     e64:	e8 85       	ldd	r30, Y+8	; 0x08
     e66:	f9 85       	ldd	r31, Y+9	; 0x09
     e68:	81 2f       	mov	r24, r17
     e6a:	09 95       	icall
     e6c:	89 2b       	or	r24, r25
     e6e:	29 f7       	brne	.-54     	; 0xe3a <fputc+0x14>
     e70:	2e 81       	ldd	r18, Y+6	; 0x06
     e72:	3f 81       	ldd	r19, Y+7	; 0x07
     e74:	2f 5f       	subi	r18, 0xFF	; 255
     e76:	3f 4f       	sbci	r19, 0xFF	; 255
     e78:	3f 83       	std	Y+7, r19	; 0x07
     e7a:	2e 83       	std	Y+6, r18	; 0x06
     e7c:	81 2f       	mov	r24, r17
     e7e:	90 2f       	mov	r25, r16
     e80:	df 91       	pop	r29
     e82:	cf 91       	pop	r28
     e84:	1f 91       	pop	r17
     e86:	0f 91       	pop	r16
     e88:	08 95       	ret

00000e8a <__ultoa_invert>:
     e8a:	fa 01       	movw	r30, r20
     e8c:	aa 27       	eor	r26, r26
     e8e:	28 30       	cpi	r18, 0x08	; 8
     e90:	51 f1       	breq	.+84     	; 0xee6 <__ultoa_invert+0x5c>
     e92:	20 31       	cpi	r18, 0x10	; 16
     e94:	81 f1       	breq	.+96     	; 0xef6 <__ultoa_invert+0x6c>
     e96:	e8 94       	clt
     e98:	6f 93       	push	r22
     e9a:	6e 7f       	andi	r22, 0xFE	; 254
     e9c:	6e 5f       	subi	r22, 0xFE	; 254
     e9e:	7f 4f       	sbci	r23, 0xFF	; 255
     ea0:	8f 4f       	sbci	r24, 0xFF	; 255
     ea2:	9f 4f       	sbci	r25, 0xFF	; 255
     ea4:	af 4f       	sbci	r26, 0xFF	; 255
     ea6:	b1 e0       	ldi	r27, 0x01	; 1
     ea8:	3e d0       	rcall	.+124    	; 0xf26 <__ultoa_invert+0x9c>
     eaa:	b4 e0       	ldi	r27, 0x04	; 4
     eac:	3c d0       	rcall	.+120    	; 0xf26 <__ultoa_invert+0x9c>
     eae:	67 0f       	add	r22, r23
     eb0:	78 1f       	adc	r23, r24
     eb2:	89 1f       	adc	r24, r25
     eb4:	9a 1f       	adc	r25, r26
     eb6:	a1 1d       	adc	r26, r1
     eb8:	68 0f       	add	r22, r24
     eba:	79 1f       	adc	r23, r25
     ebc:	8a 1f       	adc	r24, r26
     ebe:	91 1d       	adc	r25, r1
     ec0:	a1 1d       	adc	r26, r1
     ec2:	6a 0f       	add	r22, r26
     ec4:	71 1d       	adc	r23, r1
     ec6:	81 1d       	adc	r24, r1
     ec8:	91 1d       	adc	r25, r1
     eca:	a1 1d       	adc	r26, r1
     ecc:	20 d0       	rcall	.+64     	; 0xf0e <__ultoa_invert+0x84>
     ece:	09 f4       	brne	.+2      	; 0xed2 <__ultoa_invert+0x48>
     ed0:	68 94       	set
     ed2:	3f 91       	pop	r19
     ed4:	2a e0       	ldi	r18, 0x0A	; 10
     ed6:	26 9f       	mul	r18, r22
     ed8:	11 24       	eor	r1, r1
     eda:	30 19       	sub	r19, r0
     edc:	30 5d       	subi	r19, 0xD0	; 208
     ede:	31 93       	st	Z+, r19
     ee0:	de f6       	brtc	.-74     	; 0xe98 <__ultoa_invert+0xe>
     ee2:	cf 01       	movw	r24, r30
     ee4:	08 95       	ret
     ee6:	46 2f       	mov	r20, r22
     ee8:	47 70       	andi	r20, 0x07	; 7
     eea:	40 5d       	subi	r20, 0xD0	; 208
     eec:	41 93       	st	Z+, r20
     eee:	b3 e0       	ldi	r27, 0x03	; 3
     ef0:	0f d0       	rcall	.+30     	; 0xf10 <__ultoa_invert+0x86>
     ef2:	c9 f7       	brne	.-14     	; 0xee6 <__ultoa_invert+0x5c>
     ef4:	f6 cf       	rjmp	.-20     	; 0xee2 <__ultoa_invert+0x58>
     ef6:	46 2f       	mov	r20, r22
     ef8:	4f 70       	andi	r20, 0x0F	; 15
     efa:	40 5d       	subi	r20, 0xD0	; 208
     efc:	4a 33       	cpi	r20, 0x3A	; 58
     efe:	18 f0       	brcs	.+6      	; 0xf06 <__ultoa_invert+0x7c>
     f00:	49 5d       	subi	r20, 0xD9	; 217
     f02:	31 fd       	sbrc	r19, 1
     f04:	40 52       	subi	r20, 0x20	; 32
     f06:	41 93       	st	Z+, r20
     f08:	02 d0       	rcall	.+4      	; 0xf0e <__ultoa_invert+0x84>
     f0a:	a9 f7       	brne	.-22     	; 0xef6 <__ultoa_invert+0x6c>
     f0c:	ea cf       	rjmp	.-44     	; 0xee2 <__ultoa_invert+0x58>
     f0e:	b4 e0       	ldi	r27, 0x04	; 4
     f10:	a6 95       	lsr	r26
     f12:	97 95       	ror	r25
     f14:	87 95       	ror	r24
     f16:	77 95       	ror	r23
     f18:	67 95       	ror	r22
     f1a:	ba 95       	dec	r27
     f1c:	c9 f7       	brne	.-14     	; 0xf10 <__ultoa_invert+0x86>
     f1e:	00 97       	sbiw	r24, 0x00	; 0
     f20:	61 05       	cpc	r22, r1
     f22:	71 05       	cpc	r23, r1
     f24:	08 95       	ret
     f26:	9b 01       	movw	r18, r22
     f28:	ac 01       	movw	r20, r24
     f2a:	0a 2e       	mov	r0, r26
     f2c:	06 94       	lsr	r0
     f2e:	57 95       	ror	r21
     f30:	47 95       	ror	r20
     f32:	37 95       	ror	r19
     f34:	27 95       	ror	r18
     f36:	ba 95       	dec	r27
     f38:	c9 f7       	brne	.-14     	; 0xf2c <__ultoa_invert+0xa2>
     f3a:	62 0f       	add	r22, r18
     f3c:	73 1f       	adc	r23, r19
     f3e:	84 1f       	adc	r24, r20
     f40:	95 1f       	adc	r25, r21
     f42:	a0 1d       	adc	r26, r0
     f44:	08 95       	ret

00000f46 <__divmodsi4>:
     f46:	05 2e       	mov	r0, r21
     f48:	97 fb       	bst	r25, 7
     f4a:	1e f4       	brtc	.+6      	; 0xf52 <__divmodsi4+0xc>
     f4c:	00 94       	com	r0
     f4e:	0e 94 ba 07 	call	0xf74	; 0xf74 <__negsi2>
     f52:	57 fd       	sbrc	r21, 7
     f54:	07 d0       	rcall	.+14     	; 0xf64 <__divmodsi4_neg2>
     f56:	0e 94 0c 08 	call	0x1018	; 0x1018 <__udivmodsi4>
     f5a:	07 fc       	sbrc	r0, 7
     f5c:	03 d0       	rcall	.+6      	; 0xf64 <__divmodsi4_neg2>
     f5e:	4e f4       	brtc	.+18     	; 0xf72 <__divmodsi4_exit>
     f60:	0c 94 ba 07 	jmp	0xf74	; 0xf74 <__negsi2>

00000f64 <__divmodsi4_neg2>:
     f64:	50 95       	com	r21
     f66:	40 95       	com	r20
     f68:	30 95       	com	r19
     f6a:	21 95       	neg	r18
     f6c:	3f 4f       	sbci	r19, 0xFF	; 255
     f6e:	4f 4f       	sbci	r20, 0xFF	; 255
     f70:	5f 4f       	sbci	r21, 0xFF	; 255

00000f72 <__divmodsi4_exit>:
     f72:	08 95       	ret

00000f74 <__negsi2>:
     f74:	90 95       	com	r25
     f76:	80 95       	com	r24
     f78:	70 95       	com	r23
     f7a:	61 95       	neg	r22
     f7c:	7f 4f       	sbci	r23, 0xFF	; 255
     f7e:	8f 4f       	sbci	r24, 0xFF	; 255
     f80:	9f 4f       	sbci	r25, 0xFF	; 255
     f82:	08 95       	ret

00000f84 <__muluhisi3>:
     f84:	0e 94 2e 08 	call	0x105c	; 0x105c <__umulhisi3>
     f88:	a5 9f       	mul	r26, r21
     f8a:	90 0d       	add	r25, r0
     f8c:	b4 9f       	mul	r27, r20
     f8e:	90 0d       	add	r25, r0
     f90:	a4 9f       	mul	r26, r20
     f92:	80 0d       	add	r24, r0
     f94:	91 1d       	adc	r25, r1
     f96:	11 24       	eor	r1, r1
     f98:	08 95       	ret

00000f9a <__mulshisi3>:
     f9a:	b7 ff       	sbrs	r27, 7
     f9c:	0c 94 c2 07 	jmp	0xf84	; 0xf84 <__muluhisi3>

00000fa0 <__mulohisi3>:
     fa0:	0e 94 c2 07 	call	0xf84	; 0xf84 <__muluhisi3>
     fa4:	82 1b       	sub	r24, r18
     fa6:	93 0b       	sbc	r25, r19
     fa8:	08 95       	ret

00000faa <__prologue_saves__>:
     faa:	2f 92       	push	r2
     fac:	3f 92       	push	r3
     fae:	4f 92       	push	r4
     fb0:	5f 92       	push	r5
     fb2:	6f 92       	push	r6
     fb4:	7f 92       	push	r7
     fb6:	8f 92       	push	r8
     fb8:	9f 92       	push	r9
     fba:	af 92       	push	r10
     fbc:	bf 92       	push	r11
     fbe:	cf 92       	push	r12
     fc0:	df 92       	push	r13
     fc2:	ef 92       	push	r14
     fc4:	ff 92       	push	r15
     fc6:	0f 93       	push	r16
     fc8:	1f 93       	push	r17
     fca:	cf 93       	push	r28
     fcc:	df 93       	push	r29
     fce:	cd b7       	in	r28, 0x3d	; 61
     fd0:	de b7       	in	r29, 0x3e	; 62
     fd2:	ca 1b       	sub	r28, r26
     fd4:	db 0b       	sbc	r29, r27
     fd6:	0f b6       	in	r0, 0x3f	; 63
     fd8:	f8 94       	cli
     fda:	de bf       	out	0x3e, r29	; 62
     fdc:	0f be       	out	0x3f, r0	; 63
     fde:	cd bf       	out	0x3d, r28	; 61
     fe0:	09 94       	ijmp

00000fe2 <__epilogue_restores__>:
     fe2:	2a 88       	ldd	r2, Y+18	; 0x12
     fe4:	39 88       	ldd	r3, Y+17	; 0x11
     fe6:	48 88       	ldd	r4, Y+16	; 0x10
     fe8:	5f 84       	ldd	r5, Y+15	; 0x0f
     fea:	6e 84       	ldd	r6, Y+14	; 0x0e
     fec:	7d 84       	ldd	r7, Y+13	; 0x0d
     fee:	8c 84       	ldd	r8, Y+12	; 0x0c
     ff0:	9b 84       	ldd	r9, Y+11	; 0x0b
     ff2:	aa 84       	ldd	r10, Y+10	; 0x0a
     ff4:	b9 84       	ldd	r11, Y+9	; 0x09
     ff6:	c8 84       	ldd	r12, Y+8	; 0x08
     ff8:	df 80       	ldd	r13, Y+7	; 0x07
     ffa:	ee 80       	ldd	r14, Y+6	; 0x06
     ffc:	fd 80       	ldd	r15, Y+5	; 0x05
     ffe:	0c 81       	ldd	r16, Y+4	; 0x04
    1000:	1b 81       	ldd	r17, Y+3	; 0x03
    1002:	aa 81       	ldd	r26, Y+2	; 0x02
    1004:	b9 81       	ldd	r27, Y+1	; 0x01
    1006:	ce 0f       	add	r28, r30
    1008:	d1 1d       	adc	r29, r1
    100a:	0f b6       	in	r0, 0x3f	; 63
    100c:	f8 94       	cli
    100e:	de bf       	out	0x3e, r29	; 62
    1010:	0f be       	out	0x3f, r0	; 63
    1012:	cd bf       	out	0x3d, r28	; 61
    1014:	ed 01       	movw	r28, r26
    1016:	08 95       	ret

00001018 <__udivmodsi4>:
    1018:	a1 e2       	ldi	r26, 0x21	; 33
    101a:	1a 2e       	mov	r1, r26
    101c:	aa 1b       	sub	r26, r26
    101e:	bb 1b       	sub	r27, r27
    1020:	fd 01       	movw	r30, r26
    1022:	0d c0       	rjmp	.+26     	; 0x103e <__udivmodsi4_ep>

00001024 <__udivmodsi4_loop>:
    1024:	aa 1f       	adc	r26, r26
    1026:	bb 1f       	adc	r27, r27
    1028:	ee 1f       	adc	r30, r30
    102a:	ff 1f       	adc	r31, r31
    102c:	a2 17       	cp	r26, r18
    102e:	b3 07       	cpc	r27, r19
    1030:	e4 07       	cpc	r30, r20
    1032:	f5 07       	cpc	r31, r21
    1034:	20 f0       	brcs	.+8      	; 0x103e <__udivmodsi4_ep>
    1036:	a2 1b       	sub	r26, r18
    1038:	b3 0b       	sbc	r27, r19
    103a:	e4 0b       	sbc	r30, r20
    103c:	f5 0b       	sbc	r31, r21

0000103e <__udivmodsi4_ep>:
    103e:	66 1f       	adc	r22, r22
    1040:	77 1f       	adc	r23, r23
    1042:	88 1f       	adc	r24, r24
    1044:	99 1f       	adc	r25, r25
    1046:	1a 94       	dec	r1
    1048:	69 f7       	brne	.-38     	; 0x1024 <__udivmodsi4_loop>
    104a:	60 95       	com	r22
    104c:	70 95       	com	r23
    104e:	80 95       	com	r24
    1050:	90 95       	com	r25
    1052:	9b 01       	movw	r18, r22
    1054:	ac 01       	movw	r20, r24
    1056:	bd 01       	movw	r22, r26
    1058:	cf 01       	movw	r24, r30
    105a:	08 95       	ret

0000105c <__umulhisi3>:
    105c:	a2 9f       	mul	r26, r18
    105e:	b0 01       	movw	r22, r0
    1060:	b3 9f       	mul	r27, r19
    1062:	c0 01       	movw	r24, r0
    1064:	a3 9f       	mul	r26, r19
    1066:	70 0d       	add	r23, r0
    1068:	81 1d       	adc	r24, r1
    106a:	11 24       	eor	r1, r1
    106c:	91 1d       	adc	r25, r1
    106e:	b2 9f       	mul	r27, r18
    1070:	70 0d       	add	r23, r0
    1072:	81 1d       	adc	r24, r1
    1074:	11 24       	eor	r1, r1
    1076:	91 1d       	adc	r25, r1
    1078:	08 95       	ret

0000107a <_exit>:
    107a:	f8 94       	cli

0000107c <__stop_program>:
    107c:	ff cf       	rjmp	.-2      	; 0x107c <__stop_program>
