
Ping_Pong_Shit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000306  00800100  000020c4  00002158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000020c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003e  00800406  00800406  0000245e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000245e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000003b8  00000000  00000000  000024ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003e93  00000000  00000000  00002872  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000171d  00000000  00000000  00006705  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001aad  00000000  00000000  00007e22  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000a60  00000000  00000000  000098d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000009f1  00000000  00000000  0000a330  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001da1  00000000  00000000  0000ad21  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000330  00000000  00000000  0000cac2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 5d 0b 	jmp	0x16ba	; 0x16ba <__vector_7>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <mcp2515_bit_modify+0x20>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	14 e0       	ldi	r17, 0x04	; 4
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e4 ec       	ldi	r30, 0xC4	; 196
     37c:	f0 e2       	ldi	r31, 0x20	; 32
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a6 30       	cpi	r26, 0x06	; 6
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	24 e0       	ldi	r18, 0x04	; 4
     38c:	a6 e0       	ldi	r26, 0x06	; 6
     38e:	b4 e0       	ldi	r27, 0x04	; 4
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a4 34       	cpi	r26, 0x44	; 68
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 80 09 	call	0x1300	; 0x1300 <main>
     39e:	0c 94 60 10 	jmp	0x20c0	; 0x20c0 <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <button_init>:
 */ 

#include <avr/io.h>

void button_init() {
	DDRB &= ~((1<<PINB1) | (1<<PINB2) | (1<<PINB3));
     3a6:	87 b3       	in	r24, 0x17	; 23
     3a8:	81 7f       	andi	r24, 0xF1	; 241
     3aa:	87 bb       	out	0x17, r24	; 23
     3ac:	08 95       	ret

000003ae <button_read>:
}

uint8_t button_read(uint8_t channel) {
	return (PINB&(1<<channel)) >> channel;
     3ae:	26 b3       	in	r18, 0x16	; 22
     3b0:	41 e0       	ldi	r20, 0x01	; 1
     3b2:	50 e0       	ldi	r21, 0x00	; 0
     3b4:	08 2e       	mov	r0, r24
     3b6:	02 c0       	rjmp	.+4      	; 0x3bc <button_read+0xe>
     3b8:	44 0f       	add	r20, r20
     3ba:	55 1f       	adc	r21, r21
     3bc:	0a 94       	dec	r0
     3be:	e2 f7       	brpl	.-8      	; 0x3b8 <button_read+0xa>
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	24 23       	and	r18, r20
     3c4:	35 23       	and	r19, r21
     3c6:	a9 01       	movw	r20, r18
     3c8:	02 c0       	rjmp	.+4      	; 0x3ce <button_read+0x20>
     3ca:	55 95       	asr	r21
     3cc:	47 95       	ror	r20
     3ce:	8a 95       	dec	r24
     3d0:	e2 f7       	brpl	.-8      	; 0x3ca <button_read+0x1c>
     3d2:	ca 01       	movw	r24, r20
}
     3d4:	08 95       	ret

000003d6 <button_rising_edge_detect>:

uint8_t button_rising_edge_detect(uint8_t channel){
	static last;
	static uint8_t current;
	current = button_read(channel);
     3d6:	0e 94 d7 01 	call	0x3ae	; 0x3ae <button_read>
     3da:	80 93 08 04 	sts	0x0408, r24
	if (last != current){
     3de:	28 2f       	mov	r18, r24
     3e0:	30 e0       	ldi	r19, 0x00	; 0
     3e2:	40 91 06 04 	lds	r20, 0x0406
     3e6:	50 91 07 04 	lds	r21, 0x0407
     3ea:	24 17       	cp	r18, r20
     3ec:	35 07       	cpc	r19, r21
     3ee:	49 f0       	breq	.+18     	; 0x402 <button_rising_edge_detect+0x2c>
		last = current;
     3f0:	30 93 07 04 	sts	0x0407, r19
     3f4:	20 93 06 04 	sts	0x0406, r18
		if(current == 1){
     3f8:	91 e0       	ldi	r25, 0x01	; 1
     3fa:	81 30       	cpi	r24, 0x01	; 1
     3fc:	19 f0       	breq	.+6      	; 0x404 <button_rising_edge_detect+0x2e>
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	01 c0       	rjmp	.+2      	; 0x404 <button_rising_edge_detect+0x2e>
			return 1;
		}
	}
	return 0;
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	89 2f       	mov	r24, r25
     406:	08 95       	ret

00000408 <can_init>:
//Global variable for joystick 
can_message_t joy_message;*/

void can_init(){
	//Enter config mode
	mcp2515_init();
     408:	0e 94 c5 05 	call	0xb8a	; 0xb8a <mcp2515_init>
	printf("CANCTRL (expect 0x87): 0x%02x\n", mcp2515_read(MCP_CANCTRL));
     40c:	8f e0       	ldi	r24, 0x0F	; 15
     40e:	0e 94 b3 05 	call	0xb66	; 0xb66 <mcp2515_read>
     412:	1f 92       	push	r1
     414:	8f 93       	push	r24
     416:	8a e2       	ldi	r24, 0x2A	; 42
     418:	91 e0       	ldi	r25, 0x01	; 1
     41a:	9f 93       	push	r25
     41c:	8f 93       	push	r24
     41e:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <printf>

	//RX0 - Turn mask/filter off
	mcp2515_bit_modify(MCP_RXB0CTRL, 0b01100000, 0xFF);
     422:	4f ef       	ldi	r20, 0xFF	; 255
     424:	60 e6       	ldi	r22, 0x60	; 96
     426:	80 e6       	ldi	r24, 0x60	; 96
     428:	0e 94 91 05 	call	0xb22	; 0xb22 <mcp2515_bit_modify>
	//RX0 - Disable rollover
	mcp2515_bit_modify(MCP_RXB0CTRL, 0b00000100, 0);
     42c:	40 e0       	ldi	r20, 0x00	; 0
     42e:	64 e0       	ldi	r22, 0x04	; 4
     430:	80 e6       	ldi	r24, 0x60	; 96
     432:	0e 94 91 05 	call	0xb22	; 0xb22 <mcp2515_bit_modify>

	mcp2515_bit_modify(MCP_CANINTE, MCP_RX0IF, 0xff);
     436:	4f ef       	ldi	r20, 0xFF	; 255
     438:	61 e0       	ldi	r22, 0x01	; 1
     43a:	8b e2       	ldi	r24, 0x2B	; 43
     43c:	0e 94 91 05 	call	0xb22	; 0xb22 <mcp2515_bit_modify>
	
	//Enable normal mode
	mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
     440:	40 e0       	ldi	r20, 0x00	; 0
     442:	60 ee       	ldi	r22, 0xE0	; 224
     444:	8f e0       	ldi	r24, 0x0F	; 15
     446:	0e 94 91 05 	call	0xb22	; 0xb22 <mcp2515_bit_modify>
     44a:	0f 90       	pop	r0
     44c:	0f 90       	pop	r0
     44e:	0f 90       	pop	r0
     450:	0f 90       	pop	r0
     452:	08 95       	ret

00000454 <can_transmit_complete>:
	return 1;
}

int can_transmit_complete(){
	//Check if TX buffer is not pending
	return (!test_bit(mcp2515_read(MCP_TXB0CTRL), 3));
     454:	80 e3       	ldi	r24, 0x30	; 48
     456:	0e 94 b3 05 	call	0xb66	; 0xb66 <mcp2515_read>
     45a:	86 95       	lsr	r24
     45c:	86 95       	lsr	r24
     45e:	86 95       	lsr	r24
     460:	91 e0       	ldi	r25, 0x01	; 1
     462:	89 27       	eor	r24, r25
}
     464:	81 70       	andi	r24, 0x01	; 1
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	08 95       	ret

0000046a <can_message_send>:
	//Enable normal mode
	mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);

}

void can_message_send(can_message_t* message){
     46a:	1f 93       	push	r17
     46c:	cf 93       	push	r28
     46e:	df 93       	push	r29
     470:	ec 01       	movw	r28, r24
	while (!can_transmit_complete()) {}
     472:	0e 94 2a 02 	call	0x454	; 0x454 <can_transmit_complete>
     476:	89 2b       	or	r24, r25
     478:	e1 f3       	breq	.-8      	; 0x472 <can_message_send+0x8>
	//Use standard ID to set the message
	mcp2515_write(MCP_TXB0SIDH, (int8_t)(message->id >> 3));
     47a:	68 81       	ld	r22, Y
     47c:	79 81       	ldd	r23, Y+1	; 0x01
     47e:	75 95       	asr	r23
     480:	67 95       	ror	r22
     482:	75 95       	asr	r23
     484:	67 95       	ror	r22
     486:	75 95       	asr	r23
     488:	67 95       	ror	r22
     48a:	81 e3       	ldi	r24, 0x31	; 49
     48c:	0e 94 6d 05 	call	0xada	; 0xada <mcp2515_write>
	mcp2515_write(MCP_TXB0SIDL, (int8_t)(message->id << 5));
     490:	68 81       	ld	r22, Y
     492:	79 81       	ldd	r23, Y+1	; 0x01
     494:	66 0f       	add	r22, r22
     496:	77 1f       	adc	r23, r23
     498:	62 95       	swap	r22
     49a:	72 95       	swap	r23
     49c:	70 7f       	andi	r23, 0xF0	; 240
     49e:	76 27       	eor	r23, r22
     4a0:	60 7f       	andi	r22, 0xF0	; 240
     4a2:	76 27       	eor	r23, r22
     4a4:	82 e3       	ldi	r24, 0x32	; 50
     4a6:	0e 94 6d 05 	call	0xada	; 0xada <mcp2515_write>

	//Set correct data lenght and use data frame, max 8 bytes
	mcp2515_write(MCP_TXB0DLC, (0x0F) & (message->length));
     4aa:	6a 81       	ldd	r22, Y+2	; 0x02
     4ac:	6f 70       	andi	r22, 0x0F	; 15
     4ae:	85 e3       	ldi	r24, 0x35	; 53
     4b0:	0e 94 6d 05 	call	0xada	; 0xada <mcp2515_write>

	//For loop to set data bytes
	for (uint8_t i = 0; i < message->length; i++) {
     4b4:	8a 81       	ldd	r24, Y+2	; 0x02
     4b6:	88 23       	and	r24, r24
     4b8:	69 f0       	breq	.+26     	; 0x4d4 <can_message_send+0x6a>
     4ba:	10 e0       	ldi	r17, 0x00	; 0
		mcp2515_write(MCP_TXB0D0 + i, message->data[i]);
     4bc:	fe 01       	movw	r30, r28
     4be:	e1 0f       	add	r30, r17
     4c0:	f1 1d       	adc	r31, r1
     4c2:	63 81       	ldd	r22, Z+3	; 0x03
     4c4:	86 e3       	ldi	r24, 0x36	; 54
     4c6:	81 0f       	add	r24, r17
     4c8:	0e 94 6d 05 	call	0xada	; 0xada <mcp2515_write>

	//Set correct data lenght and use data frame, max 8 bytes
	mcp2515_write(MCP_TXB0DLC, (0x0F) & (message->length));

	//For loop to set data bytes
	for (uint8_t i = 0; i < message->length; i++) {
     4cc:	1f 5f       	subi	r17, 0xFF	; 255
     4ce:	8a 81       	ldd	r24, Y+2	; 0x02
     4d0:	18 17       	cp	r17, r24
     4d2:	a0 f3       	brcs	.-24     	; 0x4bc <can_message_send+0x52>
		mcp2515_write(MCP_TXB0D0 + i, message->data[i]);
	}

	mcp2515_request_to_send(1);
     4d4:	81 e0       	ldi	r24, 0x01	; 1
     4d6:	0e 94 81 05 	call	0xb02	; 0xb02 <mcp2515_request_to_send>
}
     4da:	df 91       	pop	r29
     4dc:	cf 91       	pop	r28
     4de:	1f 91       	pop	r17
     4e0:	08 95       	ret

000004e2 <can_data_receive>:
int can_transmit_complete(){
	//Check if TX buffer is not pending
	return (!test_bit(mcp2515_read(MCP_TXB0CTRL), 3));
}

can_message_t can_data_receive(){
     4e2:	9f 92       	push	r9
     4e4:	af 92       	push	r10
     4e6:	bf 92       	push	r11
     4e8:	cf 92       	push	r12
     4ea:	df 92       	push	r13
     4ec:	ef 92       	push	r14
     4ee:	ff 92       	push	r15
     4f0:	0f 93       	push	r16
     4f2:	1f 93       	push	r17
     4f4:	cf 93       	push	r28
     4f6:	df 93       	push	r29
     4f8:	cd b7       	in	r28, 0x3d	; 61
     4fa:	de b7       	in	r29, 0x3e	; 62
     4fc:	2b 97       	sbiw	r28, 0x0b	; 11
     4fe:	0f b6       	in	r0, 0x3f	; 63
     500:	f8 94       	cli
     502:	de bf       	out	0x3e, r29	; 62
     504:	0f be       	out	0x3f, r0	; 63
     506:	cd bf       	out	0x3d, r28	; 61
     508:	7c 01       	movw	r14, r24
	can_message_t message;
	
	//Check if RX buffer have message
	//if (rx_flag == 1) {
	if (mcp2515_read(MCP_CANINTF) & MCP_RX0IF) {
     50a:	8c e2       	ldi	r24, 0x2C	; 44
     50c:	0e 94 b3 05 	call	0xb66	; 0xb66 <mcp2515_read>
     510:	80 ff       	sbrs	r24, 0
     512:	33 c0       	rjmp	.+102    	; 0x57a <__stack+0x7b>
		//Get ID if message
		message.id = (mcp2515_read(MCP_RXB0SIDH) << 3) | (mcp2515_read(MCP_RXB0SIDL) >> 5);
     514:	81 e6       	ldi	r24, 0x61	; 97
     516:	0e 94 b3 05 	call	0xb66	; 0xb66 <mcp2515_read>
     51a:	c8 2e       	mov	r12, r24
     51c:	82 e6       	ldi	r24, 0x62	; 98
     51e:	0e 94 b3 05 	call	0xb66	; 0xb66 <mcp2515_read>
     522:	82 95       	swap	r24
     524:	86 95       	lsr	r24
     526:	87 70       	andi	r24, 0x07	; 7
     528:	d1 2c       	mov	r13, r1
     52a:	cc 0c       	add	r12, r12
     52c:	dd 1c       	adc	r13, r13
     52e:	cc 0c       	add	r12, r12
     530:	dd 1c       	adc	r13, r13
     532:	cc 0c       	add	r12, r12
     534:	dd 1c       	adc	r13, r13
     536:	c8 2a       	or	r12, r24

		//Get lenght of message
		message.length = (0x0F) & (mcp2515_read(MCP_RXB0DLC));
     538:	85 e6       	ldi	r24, 0x65	; 101
     53a:	0e 94 b3 05 	call	0xb66	; 0xb66 <mcp2515_read>
     53e:	8f 70       	andi	r24, 0x0F	; 15
     540:	98 2e       	mov	r9, r24

		//Get message data
		for(uint8_t i = 0; i < message.length; i++){
     542:	a9 f0       	breq	.+42     	; 0x56e <__stack+0x6f>
     544:	8e 01       	movw	r16, r28
     546:	0c 5f       	subi	r16, 0xFC	; 252
     548:	1f 4f       	sbci	r17, 0xFF	; 255
     54a:	0f 2e       	mov	r0, r31
     54c:	f6 e6       	ldi	r31, 0x66	; 102
     54e:	af 2e       	mov	r10, r31
     550:	f0 2d       	mov	r31, r0
     552:	a8 0e       	add	r10, r24
     554:	0f 2e       	mov	r0, r31
     556:	f6 e6       	ldi	r31, 0x66	; 102
     558:	bf 2e       	mov	r11, r31
     55a:	f0 2d       	mov	r31, r0
			message.data[i] = mcp2515_read(MCP_RXB0D0 + i);
     55c:	8b 2d       	mov	r24, r11
     55e:	0e 94 b3 05 	call	0xb66	; 0xb66 <mcp2515_read>
     562:	f8 01       	movw	r30, r16
     564:	81 93       	st	Z+, r24
     566:	8f 01       	movw	r16, r30
     568:	b3 94       	inc	r11

		//Get lenght of message
		message.length = (0x0F) & (mcp2515_read(MCP_RXB0DLC));

		//Get message data
		for(uint8_t i = 0; i < message.length; i++){
     56a:	ba 10       	cpse	r11, r10
     56c:	f7 cf       	rjmp	.-18     	; 0x55c <__stack+0x5d>
			message.data[i] = mcp2515_read(MCP_RXB0D0 + i);
		}

		//Clear flag
		mcp2515_bit_modify(MCP_CANINTF, MCP_RX0IF, 0);
     56e:	40 e0       	ldi	r20, 0x00	; 0
     570:	61 e0       	ldi	r22, 0x01	; 1
     572:	8c e2       	ldi	r24, 0x2C	; 44
     574:	0e 94 91 05 	call	0xb22	; 0xb22 <mcp2515_bit_modify>
     578:	03 c0       	rjmp	.+6      	; 0x580 <__stack+0x81>
	} else {
		message.id = -1;
     57a:	cc 24       	eor	r12, r12
     57c:	ca 94       	dec	r12
     57e:	dc 2c       	mov	r13, r12
	}

	return message;
     580:	da 82       	std	Y+2, r13	; 0x02
     582:	c9 82       	std	Y+1, r12	; 0x01
     584:	9b 82       	std	Y+3, r9	; 0x03
     586:	8b e0       	ldi	r24, 0x0B	; 11
     588:	fe 01       	movw	r30, r28
     58a:	31 96       	adiw	r30, 0x01	; 1
     58c:	d7 01       	movw	r26, r14
     58e:	01 90       	ld	r0, Z+
     590:	0d 92       	st	X+, r0
     592:	8a 95       	dec	r24
     594:	e1 f7       	brne	.-8      	; 0x58e <__stack+0x8f>
}
     596:	c7 01       	movw	r24, r14
     598:	2b 96       	adiw	r28, 0x0b	; 11
     59a:	0f b6       	in	r0, 0x3f	; 63
     59c:	f8 94       	cli
     59e:	de bf       	out	0x3e, r29	; 62
     5a0:	0f be       	out	0x3f, r0	; 63
     5a2:	cd bf       	out	0x3d, r28	; 61
     5a4:	df 91       	pop	r29
     5a6:	cf 91       	pop	r28
     5a8:	1f 91       	pop	r17
     5aa:	0f 91       	pop	r16
     5ac:	ff 90       	pop	r15
     5ae:	ef 90       	pop	r14
     5b0:	df 90       	pop	r13
     5b2:	cf 90       	pop	r12
     5b4:	bf 90       	pop	r11
     5b6:	af 90       	pop	r10
     5b8:	9f 90       	pop	r9
     5ba:	08 95       	ret

000005bc <can_joystick_transmit>:
		//_delay_ms(1000);
		flash_diode();
	}
}

void can_joystick_transmit(){
     5bc:	0f 93       	push	r16
     5be:	1f 93       	push	r17
     5c0:	cf 93       	push	r28
     5c2:	df 93       	push	r29
	static uint8_t prevX;
	static uint8_t prevY;
	static uint8_t prevL;
	static uint8_t prevR;
	
	joy_message.id = 0x000000; 
     5c4:	c3 e2       	ldi	r28, 0x23	; 35
     5c6:	d4 e0       	ldi	r29, 0x04	; 4
     5c8:	19 82       	std	Y+1, r1	; 0x01
     5ca:	18 82       	st	Y, r1
	joy_message.length = 5;
     5cc:	85 e0       	ldi	r24, 0x05	; 5
     5ce:	80 93 25 04 	sts	0x0425, r24
	

	//reduce sent messages when joystick is not changing - NOT WORKING WHEN prev < data.
	if(		/*abs((int)(prevX - joy_message.data[0])) > JOYSTICK_ERROR_MARGIN || 
			abs((int)(prevY - joy_message.data[1])) > JOYSTICK_ERROR_MARGIN*/ 1) {
		joy_message.data[CAN_DATA_JOY_X] = read_converted(JOYSTICK_X);
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	0e 94 21 05 	call	0xa42	; 0xa42 <read_converted>
     5d8:	06 e2       	ldi	r16, 0x26	; 38
     5da:	14 e0       	ldi	r17, 0x04	; 4
     5dc:	f8 01       	movw	r30, r16
     5de:	80 83       	st	Z, r24
		joy_message.data[CAN_DATA_JOY_Y] = read_converted(JOYSTICK_Y);
     5e0:	81 e0       	ldi	r24, 0x01	; 1
     5e2:	0e 94 21 05 	call	0xa42	; 0xa42 <read_converted>
     5e6:	80 93 27 04 	sts	0x0427, r24
		joy_message.id |= (1<<JOY_CAN_ID);
     5ea:	28 81       	ld	r18, Y
     5ec:	39 81       	ldd	r19, Y+1	; 0x01
     5ee:	21 60       	ori	r18, 0x01	; 1
     5f0:	39 83       	std	Y+1, r19	; 0x01
     5f2:	28 83       	st	Y, r18
			
		//flash_diode();
	} 
	prevX = joy_message.data[CAN_DATA_JOY_X];
     5f4:	f8 01       	movw	r30, r16
     5f6:	90 81       	ld	r25, Z
     5f8:	90 93 22 04 	sts	0x0422, r25
	prevY = joy_message.data[CAN_DATA_JOY_Y];
     5fc:	80 93 21 04 	sts	0x0421, r24
	
	//reduce sent messages when slider = prev
	if(		/*abs(((int)prevL - (int)joy_message.data[2])) > JOYSTICK_ERROR_MARGIN ||
			abs(((int)prevR - (int)joy_message.data[3])) > JOYSTICK_ERROR_MARGIN*/ 1) {
		joy_message.data[CAN_DATA_SLIDER_L] = joystick_read(SLIDE_L);
     600:	82 e0       	ldi	r24, 0x02	; 2
     602:	0e 94 07 05 	call	0xa0e	; 0xa0e <joystick_read>
     606:	08 e2       	ldi	r16, 0x28	; 40
     608:	14 e0       	ldi	r17, 0x04	; 4
     60a:	f8 01       	movw	r30, r16
     60c:	80 83       	st	Z, r24
		joy_message.data[CAN_DATA_SLIDER_R] = joystick_read(SLIDE_R);
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	0e 94 07 05 	call	0xa0e	; 0xa0e <joystick_read>
     614:	80 93 29 04 	sts	0x0429, r24
		joy_message.id |= (1<<SLIDER_CAN_ID);
     618:	28 81       	ld	r18, Y
     61a:	39 81       	ldd	r19, Y+1	; 0x01
     61c:	28 60       	ori	r18, 0x08	; 8
     61e:	39 83       	std	Y+1, r19	; 0x01
     620:	28 83       	st	Y, r18
		//flash_diode();
	}	
	prevL = joy_message.data[CAN_DATA_SLIDER_L];
     622:	f8 01       	movw	r30, r16
     624:	90 81       	ld	r25, Z
     626:	90 93 20 04 	sts	0x0420, r25
	prevR = joy_message.data[CAN_DATA_SLIDER_R];
     62a:	80 93 1f 04 	sts	0x041F, r24
	
	
	if(button_rising_edge_detect(3)){
     62e:	83 e0       	ldi	r24, 0x03	; 3
     630:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <button_rising_edge_detect>
     634:	88 23       	and	r24, r24
     636:	61 f0       	breq	.+24     	; 0x650 <can_joystick_transmit+0x94>
		joy_message.data[CAN_DATA_BUTTON] = 3;
     638:	83 e0       	ldi	r24, 0x03	; 3
     63a:	80 93 2a 04 	sts	0x042A, r24
		joy_message.id |= (1<<BUTTON_CAN_ID);
     63e:	88 81       	ld	r24, Y
     640:	99 81       	ldd	r25, Y+1	; 0x01
     642:	84 60       	ori	r24, 0x04	; 4
     644:	99 83       	std	Y+1, r25	; 0x01
     646:	88 83       	st	Y, r24
		ball_rolling = 1;
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	80 93 2f 04 	sts	0x042F, r24
     64e:	02 c0       	rjmp	.+4      	; 0x654 <can_joystick_transmit+0x98>
	} else { joy_message.data[CAN_DATA_BUTTON] = 0; }
     650:	10 92 2a 04 	sts	0x042A, r1
	
	
	can_message_send(&joy_message);
     654:	83 e2       	ldi	r24, 0x23	; 35
     656:	94 e0       	ldi	r25, 0x04	; 4
     658:	0e 94 35 02 	call	0x46a	; 0x46a <can_message_send>
	//flash_diode();
}
     65c:	df 91       	pop	r29
     65e:	cf 91       	pop	r28
     660:	1f 91       	pop	r17
     662:	0f 91       	pop	r16
     664:	08 95       	ret

00000666 <can_handle_message>:
	
	

}*/

void can_handle_message(){
     666:	cf 93       	push	r28
     668:	df 93       	push	r29
     66a:	cd b7       	in	r28, 0x3d	; 61
     66c:	de b7       	in	r29, 0x3e	; 62
     66e:	2b 97       	sbiw	r28, 0x0b	; 11
     670:	0f b6       	in	r0, 0x3f	; 63
     672:	f8 94       	cli
     674:	de bf       	out	0x3e, r29	; 62
     676:	0f be       	out	0x3f, r0	; 63
     678:	cd bf       	out	0x3d, r28	; 61
	static can_message_t message;
	message = can_data_receive();
     67a:	ce 01       	movw	r24, r28
     67c:	01 96       	adiw	r24, 0x01	; 1
     67e:	0e 94 71 02 	call	0x4e2	; 0x4e2 <can_data_receive>
     682:	8b e0       	ldi	r24, 0x0B	; 11
     684:	fe 01       	movw	r30, r28
     686:	31 96       	adiw	r30, 0x01	; 1
     688:	a4 e1       	ldi	r26, 0x14	; 20
     68a:	b4 e0       	ldi	r27, 0x04	; 4
     68c:	01 90       	ld	r0, Z+
     68e:	0d 92       	st	X+, r0
     690:	8a 95       	dec	r24
     692:	e1 f7       	brne	.-8      	; 0x68c <can_handle_message+0x26>
	can_data_receive();
     694:	ce 01       	movw	r24, r28
     696:	01 96       	adiw	r24, 0x01	; 1
     698:	0e 94 71 02 	call	0x4e2	; 0x4e2 <can_data_receive>
		
	//can_print_message(&message);
			
	if(message.id == IR_CAN_ID) {
     69c:	80 91 14 04 	lds	r24, 0x0414
     6a0:	90 91 15 04 	lds	r25, 0x0415
     6a4:	01 97       	sbiw	r24, 0x01	; 1
     6a6:	21 f4       	brne	.+8      	; 0x6b0 <can_handle_message+0x4a>
		flash_diode();
     6a8:	0e 94 25 0b 	call	0x164a	; 0x164a <flash_diode>
		game_not_lost = 0;
     6ac:	10 92 30 04 	sts	0x0430, r1
	}
		
}	
     6b0:	2b 96       	adiw	r28, 0x0b	; 11
     6b2:	0f b6       	in	r0, 0x3f	; 63
     6b4:	f8 94       	cli
     6b6:	de bf       	out	0x3e, r29	; 62
     6b8:	0f be       	out	0x3f, r0	; 63
     6ba:	cd bf       	out	0x3d, r28	; 61
     6bc:	df 91       	pop	r29
     6be:	cf 91       	pop	r28
     6c0:	08 95       	ret

000006c2 <can_play_music>:

#define SLP 110

void can_play_music(){
	static can_message_t message;
	message.id = (1<<MUSIC_PLAY_CAN_ID);
     6c2:	80 e1       	ldi	r24, 0x10	; 16
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	90 93 0a 04 	sts	0x040A, r25
     6ca:	80 93 09 04 	sts	0x0409, r24
	message.length = 0;
     6ce:	10 92 0b 04 	sts	0x040B, r1
	//puts("NEVER GONNA GIVE");
	can_message_send(&message);
     6d2:	89 e0       	ldi	r24, 0x09	; 9
     6d4:	94 e0       	ldi	r25, 0x04	; 4
     6d6:	0e 94 35 02 	call	0x46a	; 0x46a <can_message_send>
	while(1) {
		oled_clear_screen();
		//_delay_ms(1*SLP);
		oled_pos(1, 2);
		oled_printf("NEVER");
     6da:	0f 2e       	mov	r0, r31
     6dc:	fc ea       	ldi	r31, 0xAC	; 172
     6de:	ef 2e       	mov	r14, r31
     6e0:	f1 e0       	ldi	r31, 0x01	; 1
     6e2:	ff 2e       	mov	r15, r31
     6e4:	f0 2d       	mov	r31, r0
		_delay_ms(2*SLP);
		oled_clear_screen();

		oled_pos(2, 4);
		oled_printf("GONNA");
     6e6:	02 eb       	ldi	r16, 0xB2	; 178
     6e8:	11 e0       	ldi	r17, 0x01	; 1
		_delay_ms(2*SLP);
		oled_clear_screen();

		oled_pos(3, 6);
		oled_printf("GIVE");
     6ea:	0f 2e       	mov	r0, r31
     6ec:	f8 eb       	ldi	r31, 0xB8	; 184
     6ee:	af 2e       	mov	r10, r31
     6f0:	f1 e0       	ldi	r31, 0x01	; 1
     6f2:	bf 2e       	mov	r11, r31
     6f4:	f0 2d       	mov	r31, r0
		_delay_ms(4*SLP);
		oled_clear_screen();

		oled_pos(4, 8);
		oled_printf("YOU");
     6f6:	cd eb       	ldi	r28, 0xBD	; 189
     6f8:	d1 e0       	ldi	r29, 0x01	; 1
		_delay_ms(4*SLP);
		oled_clear_screen();

		oled_pos(5, 10);
		oled_printf("UP");
     6fa:	0f 2e       	mov	r0, r31
     6fc:	f1 ec       	ldi	r31, 0xC1	; 193
     6fe:	cf 2e       	mov	r12, r31
     700:	f1 e0       	ldi	r31, 0x01	; 1
     702:	df 2e       	mov	r13, r31
     704:	f0 2d       	mov	r31, r0
		oled_printf("GONNA");
		_delay_ms(2*SLP);
		oled_clear_screen();

		oled_pos(3, 6);
		oled_printf("LET");
     706:	0f 2e       	mov	r0, r31
     708:	f4 ec       	ldi	r31, 0xC4	; 196
     70a:	8f 2e       	mov	r8, r31
     70c:	f1 e0       	ldi	r31, 0x01	; 1
     70e:	9f 2e       	mov	r9, r31
     710:	f0 2d       	mov	r31, r0
		oled_printf("YOU");
		_delay_ms(4*SLP);
		oled_clear_screen();

		oled_pos(5, 2);
		oled_printf("DOWN");
     712:	0f 2e       	mov	r0, r31
     714:	f8 ec       	ldi	r31, 0xC8	; 200
     716:	6f 2e       	mov	r6, r31
     718:	f1 e0       	ldi	r31, 0x01	; 1
     71a:	7f 2e       	mov	r7, r31
     71c:	f0 2d       	mov	r31, r0
		oled_printf("GONNA");
		_delay_ms(2*SLP);
		oled_clear_screen();

		oled_pos(3, 6);
		oled_printf("RUN");
     71e:	0f 2e       	mov	r0, r31
     720:	fd ec       	ldi	r31, 0xCD	; 205
     722:	4f 2e       	mov	r4, r31
     724:	f1 e0       	ldi	r31, 0x01	; 1
     726:	5f 2e       	mov	r5, r31
     728:	f0 2d       	mov	r31, r0
		_delay_ms(4*SLP);
		oled_clear_screen();

		oled_pos(4, 8);
		oled_printf("AROUND");
     72a:	0f 2e       	mov	r0, r31
     72c:	f1 ed       	ldi	r31, 0xD1	; 209
     72e:	2f 2e       	mov	r2, r31
     730:	f1 e0       	ldi	r31, 0x01	; 1
     732:	3f 2e       	mov	r3, r31
     734:	f0 2d       	mov	r31, r0
	message.id = (1<<MUSIC_PLAY_CAN_ID);
	message.length = 0;
	//puts("NEVER GONNA GIVE");
	can_message_send(&message);
	while(1) {
		oled_clear_screen();
     736:	0e 94 09 06 	call	0xc12	; 0xc12 <oled_clear_screen>
		//_delay_ms(1*SLP);
		oled_pos(1, 2);
     73a:	62 e0       	ldi	r22, 0x02	; 2
     73c:	70 e0       	ldi	r23, 0x00	; 0
     73e:	81 e0       	ldi	r24, 0x01	; 1
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	0e 94 19 06 	call	0xc32	; 0xc32 <oled_pos>
		oled_printf("NEVER");
     746:	ff 92       	push	r15
     748:	ef 92       	push	r14
     74a:	0e 94 41 06 	call	0xc82	; 0xc82 <oled_printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     74e:	2c ec       	ldi	r18, 0xCC	; 204
     750:	8c e4       	ldi	r24, 0x4C	; 76
     752:	93 e0       	ldi	r25, 0x03	; 3
     754:	21 50       	subi	r18, 0x01	; 1
     756:	80 40       	sbci	r24, 0x00	; 0
     758:	90 40       	sbci	r25, 0x00	; 0
     75a:	e1 f7       	brne	.-8      	; 0x754 <can_play_music+0x92>
     75c:	00 c0       	rjmp	.+0      	; 0x75e <can_play_music+0x9c>
		_delay_ms(2*SLP);
		oled_clear_screen();
     75e:	0e 94 09 06 	call	0xc12	; 0xc12 <oled_clear_screen>

		oled_pos(2, 4);
     762:	64 e0       	ldi	r22, 0x04	; 4
     764:	70 e0       	ldi	r23, 0x00	; 0
     766:	82 e0       	ldi	r24, 0x02	; 2
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	0e 94 19 06 	call	0xc32	; 0xc32 <oled_pos>
		oled_printf("GONNA");
     76e:	1f 93       	push	r17
     770:	0f 93       	push	r16
     772:	0e 94 41 06 	call	0xc82	; 0xc82 <oled_printf>
     776:	ac ec       	ldi	r26, 0xCC	; 204
     778:	bc e4       	ldi	r27, 0x4C	; 76
     77a:	23 e0       	ldi	r18, 0x03	; 3
     77c:	a1 50       	subi	r26, 0x01	; 1
     77e:	b0 40       	sbci	r27, 0x00	; 0
     780:	20 40       	sbci	r18, 0x00	; 0
     782:	e1 f7       	brne	.-8      	; 0x77c <can_play_music+0xba>
     784:	00 c0       	rjmp	.+0      	; 0x786 <can_play_music+0xc4>
		_delay_ms(2*SLP);
		oled_clear_screen();
     786:	0e 94 09 06 	call	0xc12	; 0xc12 <oled_clear_screen>

		oled_pos(3, 6);
     78a:	66 e0       	ldi	r22, 0x06	; 6
     78c:	70 e0       	ldi	r23, 0x00	; 0
     78e:	83 e0       	ldi	r24, 0x03	; 3
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	0e 94 19 06 	call	0xc32	; 0xc32 <oled_pos>
		oled_printf("GIVE");
     796:	bf 92       	push	r11
     798:	af 92       	push	r10
     79a:	0e 94 41 06 	call	0xc82	; 0xc82 <oled_printf>
     79e:	89 e9       	ldi	r24, 0x99	; 153
     7a0:	99 e9       	ldi	r25, 0x99	; 153
     7a2:	a6 e0       	ldi	r26, 0x06	; 6
     7a4:	81 50       	subi	r24, 0x01	; 1
     7a6:	90 40       	sbci	r25, 0x00	; 0
     7a8:	a0 40       	sbci	r26, 0x00	; 0
     7aa:	e1 f7       	brne	.-8      	; 0x7a4 <can_play_music+0xe2>
     7ac:	00 00       	nop
		_delay_ms(4*SLP);
		oled_clear_screen();
     7ae:	0e 94 09 06 	call	0xc12	; 0xc12 <oled_clear_screen>

		oled_pos(4, 8);
     7b2:	68 e0       	ldi	r22, 0x08	; 8
     7b4:	70 e0       	ldi	r23, 0x00	; 0
     7b6:	84 e0       	ldi	r24, 0x04	; 4
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	0e 94 19 06 	call	0xc32	; 0xc32 <oled_pos>
		oled_printf("YOU");
     7be:	df 93       	push	r29
     7c0:	cf 93       	push	r28
     7c2:	0e 94 41 06 	call	0xc82	; 0xc82 <oled_printf>
     7c6:	89 e9       	ldi	r24, 0x99	; 153
     7c8:	99 e9       	ldi	r25, 0x99	; 153
     7ca:	a6 e0       	ldi	r26, 0x06	; 6
     7cc:	81 50       	subi	r24, 0x01	; 1
     7ce:	90 40       	sbci	r25, 0x00	; 0
     7d0:	a0 40       	sbci	r26, 0x00	; 0
     7d2:	e1 f7       	brne	.-8      	; 0x7cc <can_play_music+0x10a>
     7d4:	00 00       	nop
		_delay_ms(4*SLP);
		oled_clear_screen();
     7d6:	0e 94 09 06 	call	0xc12	; 0xc12 <oled_clear_screen>

		oled_pos(5, 10);
     7da:	6a e0       	ldi	r22, 0x0A	; 10
     7dc:	70 e0       	ldi	r23, 0x00	; 0
     7de:	85 e0       	ldi	r24, 0x05	; 5
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	0e 94 19 06 	call	0xc32	; 0xc32 <oled_pos>
		oled_printf("UP");
     7e6:	df 92       	push	r13
     7e8:	cf 92       	push	r12
     7ea:	0e 94 41 06 	call	0xc82	; 0xc82 <oled_printf>
     7ee:	b2 e3       	ldi	r27, 0x32	; 50
     7f0:	23 e3       	ldi	r18, 0x33	; 51
     7f2:	8d e0       	ldi	r24, 0x0D	; 13
     7f4:	b1 50       	subi	r27, 0x01	; 1
     7f6:	20 40       	sbci	r18, 0x00	; 0
     7f8:	80 40       	sbci	r24, 0x00	; 0
     7fa:	e1 f7       	brne	.-8      	; 0x7f4 <can_play_music+0x132>
     7fc:	00 c0       	rjmp	.+0      	; 0x7fe <can_play_music+0x13c>
     7fe:	00 c0       	rjmp	.+0      	; 0x800 <can_play_music+0x13e>
		_delay_ms(8*SLP);

		oled_clear_screen();
     800:	0e 94 09 06 	call	0xc12	; 0xc12 <oled_clear_screen>


		//_delay_ms(1*SLP);
		oled_pos(1, 8);
     804:	68 e0       	ldi	r22, 0x08	; 8
     806:	70 e0       	ldi	r23, 0x00	; 0
     808:	81 e0       	ldi	r24, 0x01	; 1
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	0e 94 19 06 	call	0xc32	; 0xc32 <oled_pos>
		oled_printf("NEVER");
     810:	ff 92       	push	r15
     812:	ef 92       	push	r14
     814:	0e 94 41 06 	call	0xc82	; 0xc82 <oled_printf>
     818:	9c ec       	ldi	r25, 0xCC	; 204
     81a:	ac e4       	ldi	r26, 0x4C	; 76
     81c:	b3 e0       	ldi	r27, 0x03	; 3
     81e:	91 50       	subi	r25, 0x01	; 1
     820:	a0 40       	sbci	r26, 0x00	; 0
     822:	b0 40       	sbci	r27, 0x00	; 0
     824:	e1 f7       	brne	.-8      	; 0x81e <can_play_music+0x15c>
     826:	00 c0       	rjmp	.+0      	; 0x828 <can_play_music+0x166>
		_delay_ms(2*SLP);
		oled_clear_screen();
     828:	0e 94 09 06 	call	0xc12	; 0xc12 <oled_clear_screen>

		oled_pos(2, 7);
     82c:	67 e0       	ldi	r22, 0x07	; 7
     82e:	70 e0       	ldi	r23, 0x00	; 0
     830:	82 e0       	ldi	r24, 0x02	; 2
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	0e 94 19 06 	call	0xc32	; 0xc32 <oled_pos>
		oled_printf("GONNA");
     838:	1f 93       	push	r17
     83a:	0f 93       	push	r16
     83c:	0e 94 41 06 	call	0xc82	; 0xc82 <oled_printf>
     840:	2c ec       	ldi	r18, 0xCC	; 204
     842:	8c e4       	ldi	r24, 0x4C	; 76
     844:	93 e0       	ldi	r25, 0x03	; 3
     846:	21 50       	subi	r18, 0x01	; 1
     848:	80 40       	sbci	r24, 0x00	; 0
     84a:	90 40       	sbci	r25, 0x00	; 0
     84c:	e1 f7       	brne	.-8      	; 0x846 <can_play_music+0x184>
     84e:	00 c0       	rjmp	.+0      	; 0x850 <can_play_music+0x18e>
		_delay_ms(2*SLP);
		oled_clear_screen();
     850:	0e 94 09 06 	call	0xc12	; 0xc12 <oled_clear_screen>

		oled_pos(3, 6);
     854:	66 e0       	ldi	r22, 0x06	; 6
     856:	70 e0       	ldi	r23, 0x00	; 0
     858:	83 e0       	ldi	r24, 0x03	; 3
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	0e 94 19 06 	call	0xc32	; 0xc32 <oled_pos>
		oled_printf("LET");
     860:	9f 92       	push	r9
     862:	8f 92       	push	r8
     864:	0e 94 41 06 	call	0xc82	; 0xc82 <oled_printf>
     868:	a9 e9       	ldi	r26, 0x99	; 153
     86a:	b9 e9       	ldi	r27, 0x99	; 153
     86c:	26 e0       	ldi	r18, 0x06	; 6
     86e:	a1 50       	subi	r26, 0x01	; 1
     870:	b0 40       	sbci	r27, 0x00	; 0
     872:	20 40       	sbci	r18, 0x00	; 0
     874:	e1 f7       	brne	.-8      	; 0x86e <can_play_music+0x1ac>
     876:	00 00       	nop
		_delay_ms(4*SLP);
		oled_clear_screen();
     878:	0e 94 09 06 	call	0xc12	; 0xc12 <oled_clear_screen>

		oled_pos(4, 5);
     87c:	65 e0       	ldi	r22, 0x05	; 5
     87e:	70 e0       	ldi	r23, 0x00	; 0
     880:	84 e0       	ldi	r24, 0x04	; 4
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	0e 94 19 06 	call	0xc32	; 0xc32 <oled_pos>
		oled_printf("YOU");
     888:	df 93       	push	r29
     88a:	cf 93       	push	r28
     88c:	0e 94 41 06 	call	0xc82	; 0xc82 <oled_printf>
     890:	a9 e9       	ldi	r26, 0x99	; 153
     892:	b9 e9       	ldi	r27, 0x99	; 153
     894:	26 e0       	ldi	r18, 0x06	; 6
     896:	a1 50       	subi	r26, 0x01	; 1
     898:	b0 40       	sbci	r27, 0x00	; 0
     89a:	20 40       	sbci	r18, 0x00	; 0
     89c:	e1 f7       	brne	.-8      	; 0x896 <can_play_music+0x1d4>
     89e:	00 00       	nop
		_delay_ms(4*SLP);
		oled_clear_screen();
     8a0:	0e 94 09 06 	call	0xc12	; 0xc12 <oled_clear_screen>

		oled_pos(5, 2);
     8a4:	62 e0       	ldi	r22, 0x02	; 2
     8a6:	70 e0       	ldi	r23, 0x00	; 0
     8a8:	85 e0       	ldi	r24, 0x05	; 5
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	0e 94 19 06 	call	0xc32	; 0xc32 <oled_pos>
		oled_printf("DOWN");
     8b0:	7f 92       	push	r7
     8b2:	6f 92       	push	r6
     8b4:	0e 94 41 06 	call	0xc82	; 0xc82 <oled_printf>
     8b8:	82 e3       	ldi	r24, 0x32	; 50
     8ba:	93 e3       	ldi	r25, 0x33	; 51
     8bc:	ad e0       	ldi	r26, 0x0D	; 13
     8be:	81 50       	subi	r24, 0x01	; 1
     8c0:	90 40       	sbci	r25, 0x00	; 0
     8c2:	a0 40       	sbci	r26, 0x00	; 0
     8c4:	e1 f7       	brne	.-8      	; 0x8be <can_play_music+0x1fc>
     8c6:	00 c0       	rjmp	.+0      	; 0x8c8 <can_play_music+0x206>
     8c8:	00 c0       	rjmp	.+0      	; 0x8ca <can_play_music+0x208>
		_delay_ms(8*SLP);


		oled_clear_screen();
     8ca:	0e 94 09 06 	call	0xc12	; 0xc12 <oled_clear_screen>


		//_delay_ms(1*SLP);
		oled_pos(1, 2);
     8ce:	62 e0       	ldi	r22, 0x02	; 2
     8d0:	70 e0       	ldi	r23, 0x00	; 0
     8d2:	81 e0       	ldi	r24, 0x01	; 1
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	0e 94 19 06 	call	0xc32	; 0xc32 <oled_pos>
		oled_printf("NEVER");
     8da:	ff 92       	push	r15
     8dc:	ef 92       	push	r14
     8de:	0e 94 41 06 	call	0xc82	; 0xc82 <oled_printf>
     8e2:	bc ec       	ldi	r27, 0xCC	; 204
     8e4:	2c e4       	ldi	r18, 0x4C	; 76
     8e6:	83 e0       	ldi	r24, 0x03	; 3
     8e8:	b1 50       	subi	r27, 0x01	; 1
     8ea:	20 40       	sbci	r18, 0x00	; 0
     8ec:	80 40       	sbci	r24, 0x00	; 0
     8ee:	e1 f7       	brne	.-8      	; 0x8e8 <can_play_music+0x226>
     8f0:	00 c0       	rjmp	.+0      	; 0x8f2 <can_play_music+0x230>
		_delay_ms(2*SLP);
		oled_clear_screen();
     8f2:	0e 94 09 06 	call	0xc12	; 0xc12 <oled_clear_screen>

		oled_pos(2, 4);
     8f6:	64 e0       	ldi	r22, 0x04	; 4
     8f8:	70 e0       	ldi	r23, 0x00	; 0
     8fa:	82 e0       	ldi	r24, 0x02	; 2
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	0e 94 19 06 	call	0xc32	; 0xc32 <oled_pos>
		oled_printf("GONNA");
     902:	1f 93       	push	r17
     904:	0f 93       	push	r16
     906:	0e 94 41 06 	call	0xc82	; 0xc82 <oled_printf>
     90a:	9c ec       	ldi	r25, 0xCC	; 204
     90c:	ac e4       	ldi	r26, 0x4C	; 76
     90e:	b3 e0       	ldi	r27, 0x03	; 3
     910:	91 50       	subi	r25, 0x01	; 1
     912:	a0 40       	sbci	r26, 0x00	; 0
     914:	b0 40       	sbci	r27, 0x00	; 0
     916:	e1 f7       	brne	.-8      	; 0x910 <can_play_music+0x24e>
     918:	00 c0       	rjmp	.+0      	; 0x91a <can_play_music+0x258>
		_delay_ms(2*SLP);
		oled_clear_screen();
     91a:	0e 94 09 06 	call	0xc12	; 0xc12 <oled_clear_screen>

		oled_pos(3, 6);
     91e:	66 e0       	ldi	r22, 0x06	; 6
     920:	70 e0       	ldi	r23, 0x00	; 0
     922:	83 e0       	ldi	r24, 0x03	; 3
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	0e 94 19 06 	call	0xc32	; 0xc32 <oled_pos>
		oled_printf("RUN");
     92a:	5f 92       	push	r5
     92c:	4f 92       	push	r4
     92e:	0e 94 41 06 	call	0xc82	; 0xc82 <oled_printf>
     932:	29 e9       	ldi	r18, 0x99	; 153
     934:	89 e9       	ldi	r24, 0x99	; 153
     936:	96 e0       	ldi	r25, 0x06	; 6
     938:	21 50       	subi	r18, 0x01	; 1
     93a:	80 40       	sbci	r24, 0x00	; 0
     93c:	90 40       	sbci	r25, 0x00	; 0
     93e:	e1 f7       	brne	.-8      	; 0x938 <can_play_music+0x276>
     940:	00 00       	nop
		_delay_ms(4*SLP);
		oled_clear_screen();
     942:	0e 94 09 06 	call	0xc12	; 0xc12 <oled_clear_screen>

		oled_pos(4, 8);
     946:	68 e0       	ldi	r22, 0x08	; 8
     948:	70 e0       	ldi	r23, 0x00	; 0
     94a:	84 e0       	ldi	r24, 0x04	; 4
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	0e 94 19 06 	call	0xc32	; 0xc32 <oled_pos>
		oled_printf("AROUND");
     952:	3f 92       	push	r3
     954:	2f 92       	push	r2
     956:	0e 94 41 06 	call	0xc82	; 0xc82 <oled_printf>
     95a:	a2 e3       	ldi	r26, 0x32	; 50
     95c:	b3 e3       	ldi	r27, 0x33	; 51
     95e:	2d e0       	ldi	r18, 0x0D	; 13
     960:	a1 50       	subi	r26, 0x01	; 1
     962:	b0 40       	sbci	r27, 0x00	; 0
     964:	20 40       	sbci	r18, 0x00	; 0
     966:	e1 f7       	brne	.-8      	; 0x960 <can_play_music+0x29e>
     968:	00 c0       	rjmp	.+0      	; 0x96a <can_play_music+0x2a8>
     96a:	00 c0       	rjmp	.+0      	; 0x96c <can_play_music+0x2aa>
		_delay_ms(8*SLP);
		oled_clear_screen();
     96c:	0e 94 09 06 	call	0xc12	; 0xc12 <oled_clear_screen>

		oled_pos(5, 10);
     970:	6a e0       	ldi	r22, 0x0A	; 10
     972:	70 e0       	ldi	r23, 0x00	; 0
     974:	85 e0       	ldi	r24, 0x05	; 5
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	0e 94 19 06 	call	0xc32	; 0xc32 <oled_pos>
		oled_printf("AND");
     97c:	a8 ed       	ldi	r26, 0xD8	; 216
     97e:	b1 e0       	ldi	r27, 0x01	; 1
     980:	bf 93       	push	r27
     982:	af 93       	push	r26
     984:	0e 94 41 06 	call	0xc82	; 0xc82 <oled_printf>
     988:	86 e6       	ldi	r24, 0x66	; 102
     98a:	96 ee       	ldi	r25, 0xE6	; 230
     98c:	a9 e0       	ldi	r26, 0x09	; 9
     98e:	81 50       	subi	r24, 0x01	; 1
     990:	90 40       	sbci	r25, 0x00	; 0
     992:	a0 40       	sbci	r26, 0x00	; 0
     994:	e1 f7       	brne	.-8      	; 0x98e <can_play_music+0x2cc>
     996:	00 00       	nop
		_delay_ms(6*SLP);


		oled_clear_screen();
     998:	0e 94 09 06 	call	0xc12	; 0xc12 <oled_clear_screen>

		oled_pos(2, 8);
     99c:	68 e0       	ldi	r22, 0x08	; 8
     99e:	70 e0       	ldi	r23, 0x00	; 0
     9a0:	82 e0       	ldi	r24, 0x02	; 2
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	0e 94 19 06 	call	0xc32	; 0xc32 <oled_pos>
		oled_printf("DESERT");
     9a8:	ac ed       	ldi	r26, 0xDC	; 220
     9aa:	b1 e0       	ldi	r27, 0x01	; 1
     9ac:	bf 93       	push	r27
     9ae:	af 93       	push	r26
     9b0:	0e 94 41 06 	call	0xc82	; 0xc82 <oled_printf>
     9b4:	86 e6       	ldi	r24, 0x66	; 102
     9b6:	96 ee       	ldi	r25, 0xE6	; 230
     9b8:	a9 e0       	ldi	r26, 0x09	; 9
     9ba:	81 50       	subi	r24, 0x01	; 1
     9bc:	90 40       	sbci	r25, 0x00	; 0
     9be:	a0 40       	sbci	r26, 0x00	; 0
     9c0:	e1 f7       	brne	.-8      	; 0x9ba <can_play_music+0x2f8>
     9c2:	00 00       	nop
		_delay_ms(6*SLP);
		oled_clear_screen();
     9c4:	8d b7       	in	r24, 0x3d	; 61
     9c6:	9e b7       	in	r25, 0x3e	; 62
     9c8:	80 96       	adiw	r24, 0x20	; 32
     9ca:	0f b6       	in	r0, 0x3f	; 63
     9cc:	f8 94       	cli
     9ce:	9e bf       	out	0x3e, r25	; 62
     9d0:	0f be       	out	0x3f, r0	; 63
     9d2:	8d bf       	out	0x3d, r24	; 61
     9d4:	0e 94 09 06 	call	0xc12	; 0xc12 <oled_clear_screen>

		oled_pos(4, 4);
     9d8:	64 e0       	ldi	r22, 0x04	; 4
     9da:	70 e0       	ldi	r23, 0x00	; 0
     9dc:	84 e0       	ldi	r24, 0x04	; 4
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	0e 94 19 06 	call	0xc32	; 0xc32 <oled_pos>
		oled_printf("YOU");
     9e4:	df 93       	push	r29
     9e6:	cf 93       	push	r28
     9e8:	0e 94 41 06 	call	0xc82	; 0xc82 <oled_printf>
     9ec:	bf ef       	ldi	r27, 0xFF	; 255
     9ee:	2f e7       	ldi	r18, 0x7F	; 127
     9f0:	80 e1       	ldi	r24, 0x10	; 16
     9f2:	b1 50       	subi	r27, 0x01	; 1
     9f4:	20 40       	sbci	r18, 0x00	; 0
     9f6:	80 40       	sbci	r24, 0x00	; 0
     9f8:	e1 f7       	brne	.-8      	; 0x9f2 <can_play_music+0x330>
     9fa:	00 c0       	rjmp	.+0      	; 0x9fc <can_play_music+0x33a>
     9fc:	00 00       	nop
     9fe:	a6 e6       	ldi	r26, 0x66	; 102
     a00:	b6 e5       	ldi	r27, 0x56	; 86
     a02:	11 97       	sbiw	r26, 0x01	; 1
     a04:	f1 f7       	brne	.-4      	; 0xa02 <can_play_music+0x340>
     a06:	00 00       	nop
     a08:	0f 90       	pop	r0
     a0a:	0f 90       	pop	r0
     a0c:	94 ce       	rjmp	.-728    	; 0x736 <can_play_music+0x74>

00000a0e <joystick_read>:
			 v;
}

unsigned int joystick_read(joy_channel channel){
	volatile char* ext_ram = (char*) 0x1400;
	ext_ram[0] = 0x4 + channel;
     a0e:	8c 5f       	subi	r24, 0xFC	; 252
     a10:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a14:	81 e4       	ldi	r24, 0x41	; 65
     a16:	8a 95       	dec	r24
     a18:	f1 f7       	brne	.-4      	; 0xa16 <joystick_read+0x8>
     a1a:	00 c0       	rjmp	.+0      	; 0xa1c <joystick_read+0xe>
	_delay_us(40);
	return (uint8_t) ext_ram[0];
     a1c:	80 91 00 14 	lds	r24, 0x1400
}
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	08 95       	ret

00000a24 <joystick_init>:
int center_val_X;
int center_val_Y;


void joystick_init(){ 
	center_val_X = joystick_read(JOYSTICK_X);
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	0e 94 07 05 	call	0xa0e	; 0xa0e <joystick_read>
     a2a:	90 93 32 04 	sts	0x0432, r25
     a2e:	80 93 31 04 	sts	0x0431, r24
	center_val_Y = joystick_read(JOYSTICK_Y);
     a32:	81 e0       	ldi	r24, 0x01	; 1
     a34:	0e 94 07 05 	call	0xa0e	; 0xa0e <joystick_read>
     a38:	90 93 34 04 	sts	0x0434, r25
     a3c:	80 93 33 04 	sts	0x0433, r24
     a40:	08 95       	ret

00000a42 <read_converted>:
}

signed int read_converted(joy_channel channel){
     a42:	cf 93       	push	r28
     a44:	c8 2f       	mov	r28, r24

	int v = (joystick_read(channel));
     a46:	0e 94 07 05 	call	0xa0e	; 0xa0e <joystick_read>

	if      (channel == JOYSTICK_X)  {v -= center_val_X;}
     a4a:	c1 11       	cpse	r28, r1
     a4c:	07 c0       	rjmp	.+14     	; 0xa5c <read_converted+0x1a>
     a4e:	20 91 31 04 	lds	r18, 0x0431
     a52:	30 91 32 04 	lds	r19, 0x0432
     a56:	82 1b       	sub	r24, r18
     a58:	93 0b       	sbc	r25, r19
     a5a:	08 c0       	rjmp	.+16     	; 0xa6c <read_converted+0x2a>
	else if (channel == JOYSTICK_Y)  {v -= center_val_Y;}
     a5c:	c1 30       	cpi	r28, 0x01	; 1
     a5e:	31 f4       	brne	.+12     	; 0xa6c <read_converted+0x2a>
     a60:	20 91 33 04 	lds	r18, 0x0433
     a64:	30 91 34 04 	lds	r19, 0x0434
     a68:	82 1b       	sub	r24, r18
     a6a:	93 0b       	sbc	r25, r19

	return  (v > 127)	? 127 :
     a6c:	80 38       	cpi	r24, 0x80	; 128
     a6e:	2f ef       	ldi	r18, 0xFF	; 255
     a70:	92 07       	cpc	r25, r18
     a72:	14 f4       	brge	.+4      	; 0xa78 <read_converted+0x36>
     a74:	80 e8       	ldi	r24, 0x80	; 128
     a76:	9f ef       	ldi	r25, 0xFF	; 255
     a78:	80 38       	cpi	r24, 0x80	; 128
     a7a:	91 05       	cpc	r25, r1
     a7c:	14 f0       	brlt	.+4      	; 0xa82 <read_converted+0x40>
     a7e:	8f e7       	ldi	r24, 0x7F	; 127
     a80:	90 e0       	ldi	r25, 0x00	; 0
			(v < -128)	? -128 :
			 v;
}
     a82:	cf 91       	pop	r28
     a84:	08 95       	ret

00000a86 <joystick_direction_Y>:
	_delay_us(40);
	return (uint8_t) ext_ram[0];
}

signed int joystick_direction_Y(){
	signed int joy_Y = read_converted(JOYSTICK_Y);
     a86:	81 e0       	ldi	r24, 0x01	; 1
     a88:	0e 94 21 05 	call	0xa42	; 0xa42 <read_converted>
	if(joy_Y >= 100){
     a8c:	84 36       	cpi	r24, 0x64	; 100
     a8e:	91 05       	cpc	r25, r1
     a90:	64 f4       	brge	.+24     	; 0xaaa <joystick_direction_Y+0x24>
		return 1;
	} else if (joy_Y <= -100) {
     a92:	21 e0       	ldi	r18, 0x01	; 1
     a94:	30 e0       	ldi	r19, 0x00	; 0
     a96:	8d 39       	cpi	r24, 0x9D	; 157
     a98:	9f 4f       	sbci	r25, 0xFF	; 255
     a9a:	14 f0       	brlt	.+4      	; 0xaa0 <joystick_direction_Y+0x1a>
     a9c:	20 e0       	ldi	r18, 0x00	; 0
     a9e:	30 e0       	ldi	r19, 0x00	; 0
     aa0:	88 27       	eor	r24, r24
     aa2:	99 27       	eor	r25, r25
     aa4:	82 1b       	sub	r24, r18
     aa6:	93 0b       	sbc	r25, r19
     aa8:	08 95       	ret
}

signed int joystick_direction_Y(){
	signed int joy_Y = read_converted(JOYSTICK_Y);
	if(joy_Y >= 100){
		return 1;
     aaa:	81 e0       	ldi	r24, 0x01	; 1
     aac:	90 e0       	ldi	r25, 0x00	; 0
	} else if (joy_Y <= -100) {
		return -1;
	} 
	return 0;
}
     aae:	08 95       	ret

00000ab0 <joystick_direction_X>:

signed int joystick_direction_X(){
	signed int joy_X = read_converted(JOYSTICK_X);
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	0e 94 21 05 	call	0xa42	; 0xa42 <read_converted>
	if(joy_X >= 100){
     ab6:	84 36       	cpi	r24, 0x64	; 100
     ab8:	91 05       	cpc	r25, r1
     aba:	64 f4       	brge	.+24     	; 0xad4 <joystick_direction_X+0x24>
		return 1;
	} else if (joy_X <= -100) {
     abc:	21 e0       	ldi	r18, 0x01	; 1
     abe:	30 e0       	ldi	r19, 0x00	; 0
     ac0:	8d 39       	cpi	r24, 0x9D	; 157
     ac2:	9f 4f       	sbci	r25, 0xFF	; 255
     ac4:	14 f0       	brlt	.+4      	; 0xaca <joystick_direction_X+0x1a>
     ac6:	20 e0       	ldi	r18, 0x00	; 0
     ac8:	30 e0       	ldi	r19, 0x00	; 0
     aca:	88 27       	eor	r24, r24
     acc:	99 27       	eor	r25, r25
     ace:	82 1b       	sub	r24, r18
     ad0:	93 0b       	sbc	r25, r19
     ad2:	08 95       	ret
}

signed int joystick_direction_X(){
	signed int joy_X = read_converted(JOYSTICK_X);
	if(joy_X >= 100){
		return 1;
     ad4:	81 e0       	ldi	r24, 0x01	; 1
     ad6:	90 e0       	ldi	r25, 0x00	; 0
	} else if (joy_X <= -100) {
		return -1;
	}
	return 0;
}
     ad8:	08 95       	ret

00000ada <mcp2515_write>:
	} else {
		;//printf("MCP2515 is in config mode after reset\n");
	}
}

void mcp2515_write(uint8_t address, uint8_t data){
     ada:	cf 93       	push	r28
     adc:	df 93       	push	r29
     ade:	d8 2f       	mov	r29, r24
     ae0:	c6 2f       	mov	r28, r22
	spi_select();
     ae2:	0e 94 9d 07 	call	0xf3a	; 0xf3a <spi_select>

	spi_send(MCP_WRITE);
     ae6:	82 e0       	ldi	r24, 0x02	; 2
     ae8:	0e 94 92 07 	call	0xf24	; 0xf24 <spi_send>
	spi_send(address);
     aec:	8d 2f       	mov	r24, r29
     aee:	0e 94 92 07 	call	0xf24	; 0xf24 <spi_send>
	spi_send(data);
     af2:	8c 2f       	mov	r24, r28
     af4:	0e 94 92 07 	call	0xf24	; 0xf24 <spi_send>

	spi_deselect();
     af8:	0e 94 9f 07 	call	0xf3e	; 0xf3e <spi_deselect>
}
     afc:	df 91       	pop	r29
     afe:	cf 91       	pop	r28
     b00:	08 95       	ret

00000b02 <mcp2515_request_to_send>:

void mcp2515_request_to_send(uint8_t command){
     b02:	cf 93       	push	r28
	//Check last 3 bits of given command
	if (command <= 7) {
     b04:	88 30       	cpi	r24, 0x08	; 8
     b06:	18 f4       	brcc	.+6      	; 0xb0e <mcp2515_request_to_send+0xc>
		command = MCP_RTS | command;
     b08:	c8 2f       	mov	r28, r24
     b0a:	c0 68       	ori	r28, 0x80	; 128
     b0c:	01 c0       	rjmp	.+2      	; 0xb10 <mcp2515_request_to_send+0xe>
	} else {
		command = MCP_RTS;
     b0e:	c0 e8       	ldi	r28, 0x80	; 128
	}

	//Select, send RTS command, then deselect
	spi_select();
     b10:	0e 94 9d 07 	call	0xf3a	; 0xf3a <spi_select>
	spi_send(command);
     b14:	8c 2f       	mov	r24, r28
     b16:	0e 94 92 07 	call	0xf24	; 0xf24 <spi_send>
	spi_deselect();
     b1a:	0e 94 9f 07 	call	0xf3e	; 0xf3e <spi_deselect>
}
     b1e:	cf 91       	pop	r28
     b20:	08 95       	ret

00000b22 <mcp2515_bit_modify>:

void mcp2515_bit_modify(uint8_t address, uint8_t mask, uint8_t data){
     b22:	1f 93       	push	r17
     b24:	cf 93       	push	r28
     b26:	df 93       	push	r29
     b28:	18 2f       	mov	r17, r24
     b2a:	d6 2f       	mov	r29, r22
     b2c:	c4 2f       	mov	r28, r20
	spi_select();
     b2e:	0e 94 9d 07 	call	0xf3a	; 0xf3a <spi_select>

	spi_send(MCP_BITMOD);
     b32:	85 e0       	ldi	r24, 0x05	; 5
     b34:	0e 94 92 07 	call	0xf24	; 0xf24 <spi_send>
	spi_send(address);
     b38:	81 2f       	mov	r24, r17
     b3a:	0e 94 92 07 	call	0xf24	; 0xf24 <spi_send>
	spi_send(mask);
     b3e:	8d 2f       	mov	r24, r29
     b40:	0e 94 92 07 	call	0xf24	; 0xf24 <spi_send>
	spi_send(data);
     b44:	8c 2f       	mov	r24, r28
     b46:	0e 94 92 07 	call	0xf24	; 0xf24 <spi_send>

	spi_deselect();
     b4a:	0e 94 9f 07 	call	0xf3e	; 0xf3e <spi_deselect>
}
     b4e:	df 91       	pop	r29
     b50:	cf 91       	pop	r28
     b52:	1f 91       	pop	r17
     b54:	08 95       	ret

00000b56 <mcp2515_reset>:

void mcp2515_reset(){
	spi_select();
     b56:	0e 94 9d 07 	call	0xf3a	; 0xf3a <spi_select>
	spi_send(MCP_RESET);	
     b5a:	80 ec       	ldi	r24, 0xC0	; 192
     b5c:	0e 94 92 07 	call	0xf24	; 0xf24 <spi_send>
	spi_deselect();
     b60:	0e 94 9f 07 	call	0xf3e	; 0xf3e <spi_deselect>
     b64:	08 95       	ret

00000b66 <mcp2515_read>:
}


uint8_t mcp2515_read(uint8_t address){
     b66:	cf 93       	push	r28
     b68:	c8 2f       	mov	r28, r24
	uint8_t result;

	spi_select();
     b6a:	0e 94 9d 07 	call	0xf3a	; 0xf3a <spi_select>
	
	//Send command and address, then read result
	spi_send(MCP_READ);
     b6e:	83 e0       	ldi	r24, 0x03	; 3
     b70:	0e 94 92 07 	call	0xf24	; 0xf24 <spi_send>
	spi_send(address);
     b74:	8c 2f       	mov	r24, r28
     b76:	0e 94 92 07 	call	0xf24	; 0xf24 <spi_send>

	result = spi_read();
     b7a:	0e 94 96 07 	call	0xf2c	; 0xf2c <spi_read>
     b7e:	c8 2f       	mov	r28, r24
	spi_deselect();
     b80:	0e 94 9f 07 	call	0xf3e	; 0xf3e <spi_deselect>

	return result;	
}
     b84:	8c 2f       	mov	r24, r28
     b86:	cf 91       	pop	r28
     b88:	08 95       	ret

00000b8a <mcp2515_init>:
#include <util/delay.h>
#include "uart_driver.h"
#include "spi_driver.h"
#include "mcp2515_driver.h"

void mcp2515_init() {
     b8a:	cf 93       	push	r28
     b8c:	df 93       	push	r29
     b8e:	1f 92       	push	r1
     b90:	cd b7       	in	r28, 0x3d	; 61
     b92:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t value_check;

	//Start SPI driver
	spi_init();
     b94:	0e 94 8a 07 	call	0xf14	; 0xf14 <spi_init>

	mcp2515_reset();
     b98:	0e 94 ab 05 	call	0xb56	; 0xb56 <mcp2515_reset>
	
	//Testing for correct initialization
	value_check = mcp2515_read(MCP_CANSTAT);
     b9c:	8e e0       	ldi	r24, 0x0E	; 14
     b9e:	0e 94 b3 05 	call	0xb66	; 0xb66 <mcp2515_read>
     ba2:	89 83       	std	Y+1, r24	; 0x01
	
	if ((value_check & MODE_MASK) != MODE_CONFIG) {
     ba4:	89 81       	ldd	r24, Y+1	; 0x01
     ba6:	80 7e       	andi	r24, 0xE0	; 224
     ba8:	80 38       	cpi	r24, 0x80	; 128
     baa:	21 f0       	breq	.+8      	; 0xbb4 <mcp2515_init+0x2a>
		printf("MCP2515 is not in config mode after reset\n");
     bac:	83 ee       	ldi	r24, 0xE3	; 227
     bae:	91 e0       	ldi	r25, 0x01	; 1
     bb0:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <puts>
	} else {
		;//printf("MCP2515 is in config mode after reset\n");
	}
}
     bb4:	0f 90       	pop	r0
     bb6:	df 91       	pop	r29
     bb8:	cf 91       	pop	r28
     bba:	08 95       	ret

00000bbc <oled_print_char>:
		//Set higher column address                                                                                                                                                                                                                                                                                                                                                                     
		*oled_command_addr = 0x10 + (column * (FONTWIDTH)>>4);
	}
}

void oled_print_char(char ch){
     bbc:	28 e0       	ldi	r18, 0x08	; 8
     bbe:	82 9f       	mul	r24, r18
     bc0:	c0 01       	movw	r24, r0
     bc2:	11 24       	eor	r1, r1
     bc4:	fc 01       	movw	r30, r24
     bc6:	e0 59       	subi	r30, 0x90	; 144
     bc8:	f0 40       	sbci	r31, 0x00	; 0
	for (uint8_t i = 0; i<FONTWIDTH; i++) {
     bca:	80 e0       	ldi	r24, 0x00	; 0
		oled_write_data(pgm_read_byte(&font[ch - FONTOFFSET][i]));
     bcc:	94 91       	lpm	r25, Z
void oled_write_command(uint8_t command){
	*oled_command_addr = command;
}

void oled_write_data(uint8_t data){
	*oled_data_addr = data;
     bce:	a0 91 0a 01 	lds	r26, 0x010A
     bd2:	b0 91 0b 01 	lds	r27, 0x010B
     bd6:	9c 93       	st	X, r25
		*oled_command_addr = 0x10 + (column * (FONTWIDTH)>>4);
	}
}

void oled_print_char(char ch){
	for (uint8_t i = 0; i<FONTWIDTH; i++) {
     bd8:	8f 5f       	subi	r24, 0xFF	; 255
     bda:	31 96       	adiw	r30, 0x01	; 1
     bdc:	88 30       	cpi	r24, 0x08	; 8
     bde:	b1 f7       	brne	.-20     	; 0xbcc <oled_print_char+0x10>
		oled_write_data(pgm_read_byte(&font[ch - FONTOFFSET][i]));
	}
}
     be0:	08 95       	ret

00000be2 <oled_goto_page>:
void oled_back(){
	
}

void oled_goto_page(unsigned int page) {
	oled_write_command(0xB0 + page);
     be2:	90 eb       	ldi	r25, 0xB0	; 176
     be4:	98 0f       	add	r25, r24
	_delay_ms(800);
	oled_clear_screen();
}

void oled_write_command(uint8_t command){
	*oled_command_addr = command;
     be6:	e0 91 0c 01 	lds	r30, 0x010C
     bea:	f0 91 0d 01 	lds	r31, 0x010D
     bee:	90 83       	st	Z, r25
	
}

void oled_goto_page(unsigned int page) {
	oled_write_command(0xB0 + page);
	global_page = page;
     bf0:	80 93 35 04 	sts	0x0435, r24
     bf4:	82 e5       	ldi	r24, 0x52	; 82
     bf6:	8a 95       	dec	r24
     bf8:	f1 f7       	brne	.-4      	; 0xbf6 <oled_goto_page+0x14>
     bfa:	08 95       	ret

00000bfc <oled_clear_line>:
	_delay_us(50);
}

void oled_clear_line(){
     bfc:	80 e8       	ldi	r24, 0x80	; 128
     bfe:	90 e0       	ldi	r25, 0x00	; 0
void oled_write_command(uint8_t command){
	*oled_command_addr = command;
}

void oled_write_data(uint8_t data){
	*oled_data_addr = data;
     c00:	e0 91 0a 01 	lds	r30, 0x010A
     c04:	f0 91 0b 01 	lds	r31, 0x010B
     c08:	10 82       	st	Z, r1
     c0a:	01 97       	sbiw	r24, 0x01	; 1
	global_page = page;
	_delay_us(50);
}

void oled_clear_line(){
	for (int i = 0; i<128; i++) {
     c0c:	00 97       	sbiw	r24, 0x00	; 0
     c0e:	c1 f7       	brne	.-16     	; 0xc00 <oled_clear_line+0x4>
		oled_write_data(0b00000000);
	}
}
     c10:	08 95       	ret

00000c12 <oled_clear_screen>:

void oled_clear_screen() {
     c12:	cf 93       	push	r28
     c14:	df 93       	push	r29
     c16:	c0 e0       	ldi	r28, 0x00	; 0
     c18:	d0 e0       	ldi	r29, 0x00	; 0
	for (uint8_t i = 0; i<8; i++) {
		oled_goto_page(i);
     c1a:	ce 01       	movw	r24, r28
     c1c:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <oled_goto_page>
		oled_clear_line();
     c20:	0e 94 fe 05 	call	0xbfc	; 0xbfc <oled_clear_line>
     c24:	21 96       	adiw	r28, 0x01	; 1
		oled_write_data(0b00000000);
	}
}

void oled_clear_screen() {
	for (uint8_t i = 0; i<8; i++) {
     c26:	c8 30       	cpi	r28, 0x08	; 8
     c28:	d1 05       	cpc	r29, r1
     c2a:	b9 f7       	brne	.-18     	; 0xc1a <oled_clear_screen+0x8>
		oled_goto_page(i);
		oled_clear_line();
		//_delay_ms(50);
	}
}
     c2c:	df 91       	pop	r29
     c2e:	cf 91       	pop	r28
     c30:	08 95       	ret

00000c32 <oled_pos>:

void oled_pos(unsigned int row, unsigned int column){
     c32:	cf 93       	push	r28
     c34:	df 93       	push	r29
     c36:	eb 01       	movw	r28, r22
	oled_goto_page(row);
     c38:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <oled_goto_page>
	if(column < (128/FONTWIDTH)){
     c3c:	c0 31       	cpi	r28, 0x10	; 16
     c3e:	d1 05       	cpc	r29, r1
     c40:	e8 f4       	brcc	.+58     	; 0xc7c <oled_pos+0x4a>
		//Save column program goes to
		global_col = column * FONTWIDTH;
     c42:	8c 2f       	mov	r24, r28
     c44:	88 0f       	add	r24, r24
     c46:	88 0f       	add	r24, r24
     c48:	88 0f       	add	r24, r24
     c4a:	80 93 36 04 	sts	0x0436, r24
		//Set lower column address
		*oled_command_addr = 0x00 + (column * (FONTWIDTH)>>4);
     c4e:	e0 91 0c 01 	lds	r30, 0x010C
     c52:	f0 91 0d 01 	lds	r31, 0x010D
     c56:	cc 0f       	add	r28, r28
     c58:	dd 1f       	adc	r29, r29
     c5a:	cc 0f       	add	r28, r28
     c5c:	dd 1f       	adc	r29, r29
     c5e:	cc 0f       	add	r28, r28
     c60:	dd 1f       	adc	r29, r29
     c62:	d2 95       	swap	r29
     c64:	c2 95       	swap	r28
     c66:	cf 70       	andi	r28, 0x0F	; 15
     c68:	cd 27       	eor	r28, r29
     c6a:	df 70       	andi	r29, 0x0F	; 15
     c6c:	cd 27       	eor	r28, r29
     c6e:	c0 83       	st	Z, r28
		//Set higher column address                                                                                                                                                                                                                                                                                                                                                                     
		*oled_command_addr = 0x10 + (column * (FONTWIDTH)>>4);
     c70:	e0 91 0c 01 	lds	r30, 0x010C
     c74:	f0 91 0d 01 	lds	r31, 0x010D
     c78:	c0 5f       	subi	r28, 0xF0	; 240
     c7a:	c0 83       	st	Z, r28
	}
}
     c7c:	df 91       	pop	r29
     c7e:	cf 91       	pop	r28
     c80:	08 95       	ret

00000c82 <oled_printf>:
	for (uint8_t i = 0; i<FONTWIDTH; i++) {
		oled_write_data(pgm_read_byte(&font[ch - FONTOFFSET][i]));
	}
}

void oled_printf(char* fmt, ...){
     c82:	cf 93       	push	r28
     c84:	df 93       	push	r29
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	de b7       	in	r29, 0x3e	; 62
     c8a:	fe 01       	movw	r30, r28
     c8c:	35 96       	adiw	r30, 0x05	; 5
     c8e:	61 91       	ld	r22, Z+
     c90:	71 91       	ld	r23, Z+
	va_list v;
	va_start(v, fmt);
	vfprintf(&oled_stdout, fmt, v);
     c92:	af 01       	movw	r20, r30
     c94:	8e e0       	ldi	r24, 0x0E	; 14
     c96:	91 e0       	ldi	r25, 0x01	; 1
     c98:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <vfprintf>
	va_end(v);
}
     c9c:	df 91       	pop	r29
     c9e:	cf 91       	pop	r28
     ca0:	08 95       	ret

00000ca2 <oled_init>:
	_delay_ms(800);
	oled_clear_screen();
}

void oled_write_command(uint8_t command){
	*oled_command_addr = command;
     ca2:	e0 91 0c 01 	lds	r30, 0x010C
     ca6:	f0 91 0d 01 	lds	r31, 0x010D
     caa:	8e ea       	ldi	r24, 0xAE	; 174
     cac:	80 83       	st	Z, r24
     cae:	e0 91 0c 01 	lds	r30, 0x010C
     cb2:	f0 91 0d 01 	lds	r31, 0x010D
     cb6:	81 ea       	ldi	r24, 0xA1	; 161
     cb8:	80 83       	st	Z, r24
     cba:	e0 91 0c 01 	lds	r30, 0x010C
     cbe:	f0 91 0d 01 	lds	r31, 0x010D
     cc2:	8a ed       	ldi	r24, 0xDA	; 218
     cc4:	80 83       	st	Z, r24
     cc6:	e0 91 0c 01 	lds	r30, 0x010C
     cca:	f0 91 0d 01 	lds	r31, 0x010D
     cce:	82 e1       	ldi	r24, 0x12	; 18
     cd0:	80 83       	st	Z, r24
     cd2:	e0 91 0c 01 	lds	r30, 0x010C
     cd6:	f0 91 0d 01 	lds	r31, 0x010D
     cda:	88 ec       	ldi	r24, 0xC8	; 200
     cdc:	80 83       	st	Z, r24
     cde:	e0 91 0c 01 	lds	r30, 0x010C
     ce2:	f0 91 0d 01 	lds	r31, 0x010D
     ce6:	88 ea       	ldi	r24, 0xA8	; 168
     ce8:	80 83       	st	Z, r24
     cea:	e0 91 0c 01 	lds	r30, 0x010C
     cee:	f0 91 0d 01 	lds	r31, 0x010D
     cf2:	8f e3       	ldi	r24, 0x3F	; 63
     cf4:	80 83       	st	Z, r24
     cf6:	e0 91 0c 01 	lds	r30, 0x010C
     cfa:	f0 91 0d 01 	lds	r31, 0x010D
     cfe:	85 ed       	ldi	r24, 0xD5	; 213
     d00:	80 83       	st	Z, r24
     d02:	e0 91 0c 01 	lds	r30, 0x010C
     d06:	f0 91 0d 01 	lds	r31, 0x010D
     d0a:	80 e8       	ldi	r24, 0x80	; 128
     d0c:	80 83       	st	Z, r24
     d0e:	e0 91 0c 01 	lds	r30, 0x010C
     d12:	f0 91 0d 01 	lds	r31, 0x010D
     d16:	81 e8       	ldi	r24, 0x81	; 129
     d18:	80 83       	st	Z, r24
     d1a:	e0 91 0c 01 	lds	r30, 0x010C
     d1e:	f0 91 0d 01 	lds	r31, 0x010D
     d22:	80 e5       	ldi	r24, 0x50	; 80
     d24:	80 83       	st	Z, r24
     d26:	e0 91 0c 01 	lds	r30, 0x010C
     d2a:	f0 91 0d 01 	lds	r31, 0x010D
     d2e:	89 ed       	ldi	r24, 0xD9	; 217
     d30:	80 83       	st	Z, r24
     d32:	e0 91 0c 01 	lds	r30, 0x010C
     d36:	f0 91 0d 01 	lds	r31, 0x010D
     d3a:	81 e2       	ldi	r24, 0x21	; 33
     d3c:	80 83       	st	Z, r24
     d3e:	e0 91 0c 01 	lds	r30, 0x010C
     d42:	f0 91 0d 01 	lds	r31, 0x010D
     d46:	80 e2       	ldi	r24, 0x20	; 32
     d48:	80 83       	st	Z, r24
     d4a:	e0 91 0c 01 	lds	r30, 0x010C
     d4e:	f0 91 0d 01 	lds	r31, 0x010D
     d52:	82 e0       	ldi	r24, 0x02	; 2
     d54:	80 83       	st	Z, r24
     d56:	e0 91 0c 01 	lds	r30, 0x010C
     d5a:	f0 91 0d 01 	lds	r31, 0x010D
     d5e:	8b ed       	ldi	r24, 0xDB	; 219
     d60:	80 83       	st	Z, r24
     d62:	e0 91 0c 01 	lds	r30, 0x010C
     d66:	f0 91 0d 01 	lds	r31, 0x010D
     d6a:	80 e3       	ldi	r24, 0x30	; 48
     d6c:	80 83       	st	Z, r24
     d6e:	e0 91 0c 01 	lds	r30, 0x010C
     d72:	f0 91 0d 01 	lds	r31, 0x010D
     d76:	8d ea       	ldi	r24, 0xAD	; 173
     d78:	80 83       	st	Z, r24
     d7a:	e0 91 0c 01 	lds	r30, 0x010C
     d7e:	f0 91 0d 01 	lds	r31, 0x010D
     d82:	10 82       	st	Z, r1
     d84:	e0 91 0c 01 	lds	r30, 0x010C
     d88:	f0 91 0d 01 	lds	r31, 0x010D
     d8c:	84 ea       	ldi	r24, 0xA4	; 164
     d8e:	80 83       	st	Z, r24
     d90:	e0 91 0c 01 	lds	r30, 0x010C
     d94:	f0 91 0d 01 	lds	r31, 0x010D
     d98:	86 ea       	ldi	r24, 0xA6	; 166
     d9a:	80 83       	st	Z, r24
     d9c:	e0 91 0c 01 	lds	r30, 0x010C
     da0:	f0 91 0d 01 	lds	r31, 0x010D
     da4:	8f ea       	ldi	r24, 0xAF	; 175
     da6:	80 83       	st	Z, r24
	oled_write_command(0x00);
	oled_write_command(0xa4);    //out follows RAM content
	oled_write_command(0xa6);    //set normal display
	oled_write_command(0xaf);    // display on
	
	oled_clear_screen();
     da8:	0e 94 09 06 	call	0xc12	; 0xc12 <oled_clear_screen>
	oled_pos(2,3);
     dac:	63 e0       	ldi	r22, 0x03	; 3
     dae:	70 e0       	ldi	r23, 0x00	; 0
     db0:	82 e0       	ldi	r24, 0x02	; 2
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	0e 94 19 06 	call	0xc32	; 0xc32 <oled_pos>
	oled_printf(" #SWAG");
     db8:	84 e4       	ldi	r24, 0x44	; 68
     dba:	92 e0       	ldi	r25, 0x02	; 2
     dbc:	9f 93       	push	r25
     dbe:	8f 93       	push	r24
     dc0:	0e 94 41 06 	call	0xc82	; 0xc82 <oled_printf>
	oled_pos(3,7);
     dc4:	67 e0       	ldi	r22, 0x07	; 7
     dc6:	70 e0       	ldi	r23, 0x00	; 0
     dc8:	83 e0       	ldi	r24, 0x03	; 3
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	0e 94 19 06 	call	0xc32	; 0xc32 <oled_pos>
	oled_printf("  4");
     dd0:	8b e4       	ldi	r24, 0x4B	; 75
     dd2:	92 e0       	ldi	r25, 0x02	; 2
     dd4:	9f 93       	push	r25
     dd6:	8f 93       	push	r24
     dd8:	0e 94 41 06 	call	0xc82	; 0xc82 <oled_printf>
	oled_pos(4,9);
     ddc:	69 e0       	ldi	r22, 0x09	; 9
     dde:	70 e0       	ldi	r23, 0x00	; 0
     de0:	84 e0       	ldi	r24, 0x04	; 4
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	0e 94 19 06 	call	0xc32	; 0xc32 <oled_pos>
	oled_printf(" LYFE");
     de8:	8f e4       	ldi	r24, 0x4F	; 79
     dea:	92 e0       	ldi	r25, 0x02	; 2
     dec:	9f 93       	push	r25
     dee:	8f 93       	push	r24
     df0:	0e 94 41 06 	call	0xc82	; 0xc82 <oled_printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     df4:	2f ef       	ldi	r18, 0xFF	; 255
     df6:	8f ef       	ldi	r24, 0xFF	; 255
     df8:	9b e0       	ldi	r25, 0x0B	; 11
     dfa:	21 50       	subi	r18, 0x01	; 1
     dfc:	80 40       	sbci	r24, 0x00	; 0
     dfe:	90 40       	sbci	r25, 0x00	; 0
     e00:	e1 f7       	brne	.-8      	; 0xdfa <oled_init+0x158>
     e02:	00 c0       	rjmp	.+0      	; 0xe04 <oled_init+0x162>
     e04:	00 c0       	rjmp	.+0      	; 0xe06 <oled_init+0x164>
	_delay_ms(800);
	oled_clear_screen();
     e06:	0e 94 09 06 	call	0xc12	; 0xc12 <oled_clear_screen>
     e0a:	0f 90       	pop	r0
     e0c:	0f 90       	pop	r0
     e0e:	0f 90       	pop	r0
     e10:	0f 90       	pop	r0
     e12:	0f 90       	pop	r0
     e14:	0f 90       	pop	r0
     e16:	08 95       	ret

00000e18 <oled_get_arrow_page>:

//Arrow functions

uint8_t oled_get_arrow_page(){
	return arrow_global;
}
     e18:	80 91 2e 04 	lds	r24, 0x042E
     e1c:	08 95       	ret

00000e1e <oled_print_arrow>:

void oled_print_arrow(uint8_t row, uint8_t col){
	arrow_global = row;
     e1e:	80 93 2e 04 	sts	0x042E, r24
	oled_pos(row, col);
     e22:	70 e0       	ldi	r23, 0x00	; 0
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	0e 94 19 06 	call	0xc32	; 0xc32 <oled_pos>
void oled_write_command(uint8_t command){
	*oled_command_addr = command;
}

void oled_write_data(uint8_t data){
	*oled_data_addr = data;
     e2a:	e0 91 0a 01 	lds	r30, 0x010A
     e2e:	f0 91 0b 01 	lds	r31, 0x010B
     e32:	88 e1       	ldi	r24, 0x18	; 24
     e34:	80 83       	st	Z, r24
     e36:	e0 91 0a 01 	lds	r30, 0x010A
     e3a:	f0 91 0b 01 	lds	r31, 0x010B
     e3e:	80 83       	st	Z, r24
     e40:	e0 91 0a 01 	lds	r30, 0x010A
     e44:	f0 91 0b 01 	lds	r31, 0x010B
     e48:	9e e7       	ldi	r25, 0x7E	; 126
     e4a:	90 83       	st	Z, r25
     e4c:	e0 91 0a 01 	lds	r30, 0x010A
     e50:	f0 91 0b 01 	lds	r31, 0x010B
     e54:	9c e3       	ldi	r25, 0x3C	; 60
     e56:	90 83       	st	Z, r25
     e58:	e0 91 0a 01 	lds	r30, 0x010A
     e5c:	f0 91 0b 01 	lds	r31, 0x010B
     e60:	80 83       	st	Z, r24
     e62:	08 95       	ret

00000e64 <oled_clear_arrow>:
	oled_write_data(0b00111100);
	oled_write_data(0b00011000);
}

void oled_clear_arrow(uint8_t row, uint8_t col){
	oled_pos(row, col);
     e64:	70 e0       	ldi	r23, 0x00	; 0
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	0e 94 19 06 	call	0xc32	; 0xc32 <oled_pos>
void oled_write_command(uint8_t command){
	*oled_command_addr = command;
}

void oled_write_data(uint8_t data){
	*oled_data_addr = data;
     e6c:	e0 91 0a 01 	lds	r30, 0x010A
     e70:	f0 91 0b 01 	lds	r31, 0x010B
     e74:	10 82       	st	Z, r1
     e76:	e0 91 0a 01 	lds	r30, 0x010A
     e7a:	f0 91 0b 01 	lds	r31, 0x010B
     e7e:	10 82       	st	Z, r1
     e80:	e0 91 0a 01 	lds	r30, 0x010A
     e84:	f0 91 0b 01 	lds	r31, 0x010B
     e88:	10 82       	st	Z, r1
     e8a:	e0 91 0a 01 	lds	r30, 0x010A
     e8e:	f0 91 0b 01 	lds	r31, 0x010B
     e92:	10 82       	st	Z, r1
     e94:	e0 91 0a 01 	lds	r30, 0x010A
     e98:	f0 91 0b 01 	lds	r31, 0x010B
     e9c:	10 82       	st	Z, r1
     e9e:	08 95       	ret

00000ea0 <oled_move_arrow>:
	oled_write_data(0b00000000);
	oled_write_data(0b00000000);
}

void oled_move_arrow(signed int joystick_Y, unsigned int menu_min, unsigned int menu_max){
	if(joystick_Y < 0 && arrow_global < menu_max) {
     ea0:	99 23       	and	r25, r25
     ea2:	a4 f4       	brge	.+40     	; 0xecc <oled_move_arrow+0x2c>
     ea4:	e0 91 2e 04 	lds	r30, 0x042E
     ea8:	2e 2f       	mov	r18, r30
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	24 17       	cp	r18, r20
     eae:	35 07       	cpc	r19, r21
     eb0:	68 f4       	brcc	.+26     	; 0xecc <oled_move_arrow+0x2c>
		oled_clear_arrow(arrow_global, 0);
     eb2:	60 e0       	ldi	r22, 0x00	; 0
     eb4:	8e 2f       	mov	r24, r30
     eb6:	0e 94 32 07 	call	0xe64	; 0xe64 <oled_clear_arrow>
		arrow_global++;
     eba:	80 91 2e 04 	lds	r24, 0x042E
     ebe:	8f 5f       	subi	r24, 0xFF	; 255
     ec0:	80 93 2e 04 	sts	0x042E, r24
		oled_print_arrow(arrow_global, 0);
     ec4:	60 e0       	ldi	r22, 0x00	; 0
     ec6:	0e 94 0f 07 	call	0xe1e	; 0xe1e <oled_print_arrow>
     eca:	08 95       	ret
	} else if (joystick_Y > 0 && arrow_global > menu_min) {
     ecc:	18 16       	cp	r1, r24
     ece:	19 06       	cpc	r1, r25
     ed0:	94 f4       	brge	.+36     	; 0xef6 <oled_move_arrow+0x56>
     ed2:	80 91 2e 04 	lds	r24, 0x042E
     ed6:	28 2f       	mov	r18, r24
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	62 17       	cp	r22, r18
     edc:	73 07       	cpc	r23, r19
     ede:	58 f4       	brcc	.+22     	; 0xef6 <oled_move_arrow+0x56>
		oled_clear_arrow(arrow_global, 0);
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	0e 94 32 07 	call	0xe64	; 0xe64 <oled_clear_arrow>
		arrow_global--;
     ee6:	80 91 2e 04 	lds	r24, 0x042E
     eea:	81 50       	subi	r24, 0x01	; 1
     eec:	80 93 2e 04 	sts	0x042E, r24
		oled_print_arrow(arrow_global, 0);
     ef0:	60 e0       	ldi	r22, 0x00	; 0
     ef2:	0e 94 0f 07 	call	0xe1e	; 0xe1e <oled_print_arrow>
     ef6:	08 95       	ret

00000ef8 <oled_arrow_handler>:
	}
}

unsigned int oled_arrow_handler(signed int joystick_Y, unsigned int menu_min, unsigned int menu_max){
	oled_move_arrow(joystick_Y, menu_min, menu_max);
     ef8:	0e 94 50 07 	call	0xea0	; 0xea0 <oled_move_arrow>
     efc:	2c ec       	ldi	r18, 0xCC	; 204
     efe:	8c e0       	ldi	r24, 0x0C	; 12
     f00:	91 e0       	ldi	r25, 0x01	; 1
     f02:	21 50       	subi	r18, 0x01	; 1
     f04:	80 40       	sbci	r24, 0x00	; 0
     f06:	90 40       	sbci	r25, 0x00	; 0
     f08:	e1 f7       	brne	.-8      	; 0xf02 <oled_arrow_handler+0xa>
     f0a:	00 c0       	rjmp	.+0      	; 0xf0c <oled_arrow_handler+0x14>
	_delay_ms(70);
	return arrow_global;
     f0c:	80 91 2e 04 	lds	r24, 0x042E
}
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	08 95       	ret

00000f14 <spi_init>:
#define SPI_MISO PB6
#define SPI_SCK PB7 

void spi_init(){
	//Set MOSI, SCK and SS as output pins 	
	DDRB |= (1 << SPI_MOSI) | (1 << SPI_SCK) | (1 << SPI_SS);
     f14:	87 b3       	in	r24, 0x17	; 23
     f16:	80 6b       	ori	r24, 0xB0	; 176
     f18:	87 bb       	out	0x17, r24	; 23
	
	//Set MISO as input pin
	DDRB &= ~(1 << SPI_MISO);
     f1a:	be 98       	cbi	0x17, 6	; 23
	
	//Enable SPI in master mode and set clock rate fosc/16
	SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0);
     f1c:	8d b1       	in	r24, 0x0d	; 13
     f1e:	81 65       	ori	r24, 0x51	; 81
     f20:	8d b9       	out	0x0d, r24	; 13
     f22:	08 95       	ret

00000f24 <spi_send>:
	return SPDR;
}

void spi_send(char data){
	//Start transmission
	SPDR = data;
     f24:	8f b9       	out	0x0f, r24	; 15
	
	//Wait for transmission, checks if register is empty 
	while(!(SPSR & (1 << SPIF)));
     f26:	77 9b       	sbis	0x0e, 7	; 14
     f28:	fe cf       	rjmp	.-4      	; 0xf26 <spi_send+0x2>
}
     f2a:	08 95       	ret

00000f2c <spi_read>:
}


uint8_t spi_read(){
	//Dummy send in order to read from slave
	spi_send(0xaa);
     f2c:	8a ea       	ldi	r24, 0xAA	; 170
     f2e:	0e 94 92 07 	call	0xf24	; 0xf24 <spi_send>
	
	while(!(SPSR & (1 << SPIF)));
     f32:	77 9b       	sbis	0x0e, 7	; 14
     f34:	fe cf       	rjmp	.-4      	; 0xf32 <spi_read+0x6>

	return SPDR;
     f36:	8f b1       	in	r24, 0x0f	; 15
}
     f38:	08 95       	ret

00000f3a <spi_select>:
	while(!(SPSR & (1 << SPIF)));
}

void spi_select(){
	//Set !SS to 0 for selection of slave
	PORTB &= ~(1 << SPI_SS);
     f3a:	c4 98       	cbi	0x18, 4	; 24
     f3c:	08 95       	ret

00000f3e <spi_deselect>:
}

void spi_deselect(){
	//Set !SS to 1 for deselection of slave
	PORTB |= (1 << SPI_SS);
     f3e:	c4 9a       	sbi	0x18, 4	; 24
     f40:	08 95       	ret

00000f42 <SRAM_test>:
	if (address_offset > 0x100) { return 0; }
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	return ext_ram[address_offset];
}

void SRAM_test(void) {
     f42:	cf 92       	push	r12
     f44:	df 92       	push	r13
     f46:	ef 92       	push	r14
     f48:	ff 92       	push	r15
     f4a:	0f 93       	push	r16
     f4c:	1f 93       	push	r17
     f4e:	cf 93       	push	r28
     f50:	df 93       	push	r29
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size       = 0x800;
	uint16_t write_errors       = 0;
	uint16_t retrieval_errors   = 0;

	oled_clear_screen();
     f52:	0e 94 09 06 	call	0xc12	; 0xc12 <oled_clear_screen>
	oled_pos(3,2);
     f56:	62 e0       	ldi	r22, 0x02	; 2
     f58:	70 e0       	ldi	r23, 0x00	; 0
     f5a:	83 e0       	ldi	r24, 0x03	; 3
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	0e 94 19 06 	call	0xc32	; 0xc32 <oled_pos>
	oled_printf("TESTING SRAM");
     f62:	85 e5       	ldi	r24, 0x55	; 85
     f64:	92 e0       	ldi	r25, 0x02	; 2
     f66:	9f 93       	push	r25
     f68:	8f 93       	push	r24
     f6a:	0e 94 41 06 	call	0xc82	; 0xc82 <oled_printf>
	printf("\nStarting SRAM test...\n");
     f6e:	82 e6       	ldi	r24, 0x62	; 98
     f70:	92 e0       	ldi	r25, 0x02	; 2
     f72:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <puts>

	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
     f76:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <rand>
     f7a:	6c 01       	movw	r12, r24

	// Write phase: Immediately check that the correct value was stored
	srand(seed);
     f7c:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <srand>
     f80:	0f 90       	pop	r0
     f82:	0f 90       	pop	r0
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     f84:	c0 e0       	ldi	r28, 0x00	; 0
     f86:	d0 e0       	ldi	r29, 0x00	; 0
}

void SRAM_test(void) {
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size       = 0x800;
	uint16_t write_errors       = 0;
     f88:	00 e0       	ldi	r16, 0x00	; 0
     f8a:	10 e0       	ldi	r17, 0x00	; 0
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		ext_ram[i] = some_value;
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
     f8c:	0f 2e       	mov	r0, r31
     f8e:	f9 e7       	ldi	r31, 0x79	; 121
     f90:	ef 2e       	mov	r14, r31
     f92:	f2 e0       	ldi	r31, 0x02	; 2
     f94:	ff 2e       	mov	r15, r31
     f96:	f0 2d       	mov	r31, r0
	uint16_t seed = rand();

	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     f98:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <rand>
     f9c:	fe 01       	movw	r30, r28
     f9e:	f8 5e       	subi	r31, 0xE8	; 232
		ext_ram[i] = some_value;
     fa0:	80 83       	st	Z, r24
		uint8_t retreived_value = ext_ram[i];
     fa2:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     fa4:	28 17       	cp	r18, r24
     fa6:	a9 f0       	breq	.+42     	; 0xfd2 <SRAM_test+0x90>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
     fa8:	99 27       	eor	r25, r25
     faa:	9f 93       	push	r25
     fac:	8f 93       	push	r24
     fae:	1f 92       	push	r1
     fb0:	2f 93       	push	r18
     fb2:	df 93       	push	r29
     fb4:	cf 93       	push	r28
     fb6:	ff 92       	push	r15
     fb8:	ef 92       	push	r14
     fba:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <printf>
			write_errors++;
     fbe:	0f 5f       	subi	r16, 0xFF	; 255
     fc0:	1f 4f       	sbci	r17, 0xFF	; 255
     fc2:	8d b7       	in	r24, 0x3d	; 61
     fc4:	9e b7       	in	r25, 0x3e	; 62
     fc6:	08 96       	adiw	r24, 0x08	; 8
     fc8:	0f b6       	in	r0, 0x3f	; 63
     fca:	f8 94       	cli
     fcc:	9e bf       	out	0x3e, r25	; 62
     fce:	0f be       	out	0x3f, r0	; 63
     fd0:	8d bf       	out	0x3d, r24	; 61
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();

	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     fd2:	21 96       	adiw	r28, 0x01	; 1
     fd4:	c1 15       	cp	r28, r1
     fd6:	98 e0       	ldi	r25, 0x08	; 8
     fd8:	d9 07       	cpc	r29, r25
     fda:	f1 f6       	brne	.-68     	; 0xf98 <SRAM_test+0x56>
			write_errors++;
		}
	}

	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);    // reset the PRNG to the state it had before the write phase
     fdc:	c6 01       	movw	r24, r12
     fde:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     fe2:	c0 e0       	ldi	r28, 0x00	; 0
     fe4:	d0 e0       	ldi	r29, 0x00	; 0

void SRAM_test(void) {
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size       = 0x800;
	uint16_t write_errors       = 0;
	uint16_t retrieval_errors   = 0;
     fe6:	e1 2c       	mov	r14, r1
     fe8:	f1 2c       	mov	r15, r1
	srand(seed);    // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
     fea:	0f 2e       	mov	r0, r31
     fec:	f2 eb       	ldi	r31, 0xB2	; 178
     fee:	cf 2e       	mov	r12, r31
     ff0:	f2 e0       	ldi	r31, 0x02	; 2
     ff2:	df 2e       	mov	r13, r31
     ff4:	f0 2d       	mov	r31, r0
	}

	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);    // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     ff6:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <rand>
     ffa:	fe 01       	movw	r30, r28
     ffc:	f8 5e       	subi	r31, 0xE8	; 232
		uint8_t retreived_value = ext_ram[i];
     ffe:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
    1000:	28 17       	cp	r18, r24
    1002:	b1 f0       	breq	.+44     	; 0x1030 <SRAM_test+0xee>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
    1004:	99 27       	eor	r25, r25
    1006:	9f 93       	push	r25
    1008:	8f 93       	push	r24
    100a:	1f 92       	push	r1
    100c:	2f 93       	push	r18
    100e:	df 93       	push	r29
    1010:	cf 93       	push	r28
    1012:	df 92       	push	r13
    1014:	cf 92       	push	r12
    1016:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <printf>
			retrieval_errors++;
    101a:	9f ef       	ldi	r25, 0xFF	; 255
    101c:	e9 1a       	sub	r14, r25
    101e:	f9 0a       	sbc	r15, r25
    1020:	8d b7       	in	r24, 0x3d	; 61
    1022:	9e b7       	in	r25, 0x3e	; 62
    1024:	08 96       	adiw	r24, 0x08	; 8
    1026:	0f b6       	in	r0, 0x3f	; 63
    1028:	f8 94       	cli
    102a:	9e bf       	out	0x3e, r25	; 62
    102c:	0f be       	out	0x3f, r0	; 63
    102e:	8d bf       	out	0x3d, r24	; 61
		}
	}

	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);    // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
    1030:	21 96       	adiw	r28, 0x01	; 1
    1032:	c1 15       	cp	r28, r1
    1034:	98 e0       	ldi	r25, 0x08	; 8
    1036:	d9 07       	cpc	r29, r25
    1038:	f1 f6       	brne	.-68     	; 0xff6 <SRAM_test+0xb4>
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	if (retrieval_errors != 0 || write_errors != 0) { 
    103a:	e1 14       	cp	r14, r1
    103c:	f1 04       	cpc	r15, r1
    103e:	19 f4       	brne	.+6      	; 0x1046 <SRAM_test+0x104>
    1040:	01 15       	cp	r16, r1
    1042:	11 05       	cpc	r17, r1
    1044:	71 f1       	breq	.+92     	; 0x10a2 <SRAM_test+0x160>
		oled_pos(5,0);
    1046:	60 e0       	ldi	r22, 0x00	; 0
    1048:	70 e0       	ldi	r23, 0x00	; 0
    104a:	85 e0       	ldi	r24, 0x05	; 5
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	0e 94 19 06 	call	0xc32	; 0xc32 <oled_pos>
		oled_printf("R ERRORS:  %4d",retrieval_errors);
    1052:	ff 92       	push	r15
    1054:	ef 92       	push	r14
    1056:	8f ee       	ldi	r24, 0xEF	; 239
    1058:	92 e0       	ldi	r25, 0x02	; 2
    105a:	9f 93       	push	r25
    105c:	8f 93       	push	r24
    105e:	0e 94 41 06 	call	0xc82	; 0xc82 <oled_printf>
		oled_pos(6,0);
    1062:	60 e0       	ldi	r22, 0x00	; 0
    1064:	70 e0       	ldi	r23, 0x00	; 0
    1066:	86 e0       	ldi	r24, 0x06	; 6
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	0e 94 19 06 	call	0xc32	; 0xc32 <oled_pos>
		oled_printf("W ERRORS:  %4d",write_errors);
    106e:	1f 93       	push	r17
    1070:	0f 93       	push	r16
    1072:	8e ef       	ldi	r24, 0xFE	; 254
    1074:	92 e0       	ldi	r25, 0x02	; 2
    1076:	9f 93       	push	r25
    1078:	8f 93       	push	r24
    107a:	0e 94 41 06 	call	0xc82	; 0xc82 <oled_printf>
    107e:	2f ef       	ldi	r18, 0xFF	; 255
    1080:	8f ef       	ldi	r24, 0xFF	; 255
    1082:	9b e3       	ldi	r25, 0x3B	; 59
    1084:	21 50       	subi	r18, 0x01	; 1
    1086:	80 40       	sbci	r24, 0x00	; 0
    1088:	90 40       	sbci	r25, 0x00	; 0
    108a:	e1 f7       	brne	.-8      	; 0x1084 <SRAM_test+0x142>
    108c:	00 c0       	rjmp	.+0      	; 0x108e <SRAM_test+0x14c>
    108e:	00 00       	nop
    1090:	8d b7       	in	r24, 0x3d	; 61
    1092:	9e b7       	in	r25, 0x3e	; 62
    1094:	08 96       	adiw	r24, 0x08	; 8
    1096:	0f b6       	in	r0, 0x3f	; 63
    1098:	f8 94       	cli
    109a:	9e bf       	out	0x3e, r25	; 62
    109c:	0f be       	out	0x3f, r0	; 63
    109e:	8d bf       	out	0x3d, r24	; 61
    10a0:	0e c0       	rjmp	.+28     	; 0x10be <SRAM_test+0x17c>
		_delay_ms(4000);
	} else {
		oled_pos(6,4);
    10a2:	64 e0       	ldi	r22, 0x04	; 4
    10a4:	70 e0       	ldi	r23, 0x00	; 0
    10a6:	86 e0       	ldi	r24, 0x06	; 6
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	0e 94 19 06 	call	0xc32	; 0xc32 <oled_pos>
		oled_printf("NO ERRORS");
    10ae:	8d e0       	ldi	r24, 0x0D	; 13
    10b0:	93 e0       	ldi	r25, 0x03	; 3
    10b2:	9f 93       	push	r25
    10b4:	8f 93       	push	r24
    10b6:	0e 94 41 06 	call	0xc82	; 0xc82 <oled_printf>
    10ba:	0f 90       	pop	r0
    10bc:	0f 90       	pop	r0
	}
	printf("SRAM test completed with \n%4d errors in write phase and \n%4d errors in retrieval phase\n\n", write_errors, retrieval_errors);
    10be:	ff 92       	push	r15
    10c0:	ef 92       	push	r14
    10c2:	1f 93       	push	r17
    10c4:	0f 93       	push	r16
    10c6:	87 e1       	ldi	r24, 0x17	; 23
    10c8:	93 e0       	ldi	r25, 0x03	; 3
    10ca:	9f 93       	push	r25
    10cc:	8f 93       	push	r24
    10ce:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <printf>
    10d2:	0f 90       	pop	r0
    10d4:	0f 90       	pop	r0
    10d6:	0f 90       	pop	r0
    10d8:	0f 90       	pop	r0
    10da:	0f 90       	pop	r0
    10dc:	0f 90       	pop	r0
    10de:	df 91       	pop	r29
    10e0:	cf 91       	pop	r28
    10e2:	1f 91       	pop	r17
    10e4:	0f 91       	pop	r16
    10e6:	ff 90       	pop	r15
    10e8:	ef 90       	pop	r14
    10ea:	df 90       	pop	r13
    10ec:	cf 90       	pop	r12
    10ee:	08 95       	ret

000010f0 <SRAM_init>:
#include "SRAM_driver.h"
#include "oled_driver.h"

//Simple setup for SRAM, also tests for correctness
void SRAM_init(){
	MCUCR = 0x80;
    10f0:	80 e8       	ldi	r24, 0x80	; 128
    10f2:	85 bf       	out	0x35, r24	; 53
	DDRA = 0xFF;
    10f4:	8f ef       	ldi	r24, 0xFF	; 255
    10f6:	8a bb       	out	0x1a, r24	; 26
	SRAM_test();
    10f8:	0e 94 a1 07 	call	0xf42	; 0xf42 <SRAM_test>
    10fc:	08 95       	ret

000010fe <uart_sendChar>:

}

void uart_sendChar(unsigned char data){
	//Wait for empty transmitter buffer
	while(!(UCSR0A & (1<<UDRE0)));
    10fe:	5d 9b       	sbis	0x0b, 5	; 11
    1100:	fe cf       	rjmp	.-4      	; 0x10fe <uart_sendChar>
		
	//Put data into buffer, then send the data
	UDR0 = data;
    1102:	8c b9       	out	0x0c, r24	; 12
    1104:	08 95       	ret

00001106 <uart_getChar>:
}


unsigned int uart_getChar(){
	//Wait for the data to be received 
	while(!(UCSR0A & (1<<RXC0))){}
    1106:	5f 9b       	sbis	0x0b, 7	; 11
    1108:	fe cf       	rjmp	.-4      	; 0x1106 <uart_getChar>
	
	//Get status and the 9th bit, then data from buffer
	return UDR0;
    110a:	8c b1       	in	r24, 0x0c	; 12
}
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	08 95       	ret

00001110 <uart_init>:

static FILE uart_io = FDEV_SETUP_STREAM(uart_sendChar, uart_getChar, _FDEV_SETUP_RW);

void uart_init(unsigned int ubrr){
	//Set baud rate
	UBRR0L = (unsigned int) ubrr;
    1110:	89 b9       	out	0x09, r24	; 9
	
	//Enable receiver and transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
    1112:	88 e1       	ldi	r24, 0x18	; 24
    1114:	8a b9       	out	0x0a, r24	; 10
	
	stdout = &uart_io;
    1116:	8c e1       	ldi	r24, 0x1C	; 28
    1118:	91 e0       	ldi	r25, 0x01	; 1
    111a:	90 93 41 04 	sts	0x0441, r25
    111e:	80 93 40 04 	sts	0x0440, r24
	stdin = &uart_io;
    1122:	90 93 3f 04 	sts	0x043F, r25
    1126:	80 93 3e 04 	sts	0x043E, r24
    112a:	08 95       	ret

0000112c <game_keep_score>:
uint16_t game_score;
uint8_t game_score_counter;


void game_keep_score(){
	if (ball_rolling)  { game_score_counter++; }
    112c:	80 91 2f 04 	lds	r24, 0x042F
    1130:	88 23       	and	r24, r24
    1132:	29 f0       	breq	.+10     	; 0x113e <game_keep_score+0x12>
    1134:	80 91 39 04 	lds	r24, 0x0439
    1138:	8f 5f       	subi	r24, 0xFF	; 255
    113a:	80 93 39 04 	sts	0x0439, r24

	if (game_score_counter > 7) {
    113e:	80 91 39 04 	lds	r24, 0x0439
    1142:	88 30       	cpi	r24, 0x08	; 8
    1144:	08 f1       	brcs	.+66     	; 0x1188 <game_keep_score+0x5c>
		game_score++;
    1146:	80 91 37 04 	lds	r24, 0x0437
    114a:	90 91 38 04 	lds	r25, 0x0438
    114e:	01 96       	adiw	r24, 0x01	; 1
    1150:	90 93 38 04 	sts	0x0438, r25
    1154:	80 93 37 04 	sts	0x0437, r24
		game_score_counter = 0;
    1158:	10 92 39 04 	sts	0x0439, r1
		oled_pos(3, 11);
    115c:	6b e0       	ldi	r22, 0x0B	; 11
    115e:	70 e0       	ldi	r23, 0x00	; 0
    1160:	83 e0       	ldi	r24, 0x03	; 3
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	0e 94 19 06 	call	0xc32	; 0xc32 <oled_pos>
		oled_printf("%d", game_score);
    1168:	80 91 38 04 	lds	r24, 0x0438
    116c:	8f 93       	push	r24
    116e:	80 91 37 04 	lds	r24, 0x0437
    1172:	8f 93       	push	r24
    1174:	86 e9       	ldi	r24, 0x96	; 150
    1176:	91 e0       	ldi	r25, 0x01	; 1
    1178:	9f 93       	push	r25
    117a:	8f 93       	push	r24
    117c:	0e 94 41 06 	call	0xc82	; 0xc82 <oled_printf>
    1180:	0f 90       	pop	r0
    1182:	0f 90       	pop	r0
    1184:	0f 90       	pop	r0
    1186:	0f 90       	pop	r0
    1188:	08 95       	ret

0000118a <game_reset_score>:
	}
}

void game_reset_score(){
	game_score = 0;
    118a:	10 92 38 04 	sts	0x0438, r1
    118e:	10 92 37 04 	sts	0x0437, r1
	game_score_counter = 0;
    1192:	10 92 39 04 	sts	0x0439, r1
    1196:	08 95       	ret

00001198 <game_start>:
}

void game_start(){
    1198:	cf 93       	push	r28
    119a:	df 93       	push	r29
    119c:	cd b7       	in	r28, 0x3d	; 61
    119e:	de b7       	in	r29, 0x3e	; 62
    11a0:	2b 97       	sbiw	r28, 0x0b	; 11
    11a2:	0f b6       	in	r0, 0x3f	; 63
    11a4:	f8 94       	cli
    11a6:	de bf       	out	0x3e, r29	; 62
    11a8:	0f be       	out	0x3f, r0	; 63
    11aa:	cd bf       	out	0x3d, r28	; 61
	game_reset_score();
    11ac:	0e 94 c5 08 	call	0x118a	; 0x118a <game_reset_score>
	game_not_lost = 1;
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	80 93 30 04 	sts	0x0430, r24
/*
	oled_clear_screen();
	oled_pos(3,2);
	oled_printf("remove ball");
	_delay_ms(1500);*/
	oled_clear_screen();
    11b6:	0e 94 09 06 	call	0xc12	; 0xc12 <oled_clear_screen>
	oled_pos(3, 2);
    11ba:	62 e0       	ldi	r22, 0x02	; 2
    11bc:	70 e0       	ldi	r23, 0x00	; 0
    11be:	83 e0       	ldi	r24, 0x03	; 3
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	0e 94 19 06 	call	0xc32	; 0xc32 <oled_pos>
	oled_printf("Score: ");
    11c6:	80 e7       	ldi	r24, 0x70	; 112
    11c8:	93 e0       	ldi	r25, 0x03	; 3
    11ca:	9f 93       	push	r25
    11cc:	8f 93       	push	r24
    11ce:	0e 94 41 06 	call	0xc82	; 0xc82 <oled_printf>

	//flush pending game_lost messages
	can_data_receive();
    11d2:	ce 01       	movw	r24, r28
    11d4:	01 96       	adiw	r24, 0x01	; 1
    11d6:	0e 94 71 02 	call	0x4e2	; 0x4e2 <can_data_receive>
	can_data_receive();
    11da:	ce 01       	movw	r24, r28
    11dc:	01 96       	adiw	r24, 0x01	; 1
    11de:	0e 94 71 02 	call	0x4e2	; 0x4e2 <can_data_receive>
	timer_enable();
    11e2:	0e 94 4e 0b 	call	0x169c	; 0x169c <timer_enable>
	
	ball_rolling = 0;
    11e6:	10 92 2f 04 	sts	0x042F, r1
    11ea:	0f 90       	pop	r0
    11ec:	0f 90       	pop	r0
}
    11ee:	2b 96       	adiw	r28, 0x0b	; 11
    11f0:	0f b6       	in	r0, 0x3f	; 63
    11f2:	f8 94       	cli
    11f4:	de bf       	out	0x3e, r29	; 62
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	cd bf       	out	0x3d, r28	; 61
    11fa:	df 91       	pop	r29
    11fc:	cf 91       	pop	r28
    11fe:	08 95       	ret

00001200 <game_end>:

void game_end(){
	//turns off all communication with Node2
	timer_disable();
    1200:	0e 94 57 0b 	call	0x16ae	; 0x16ae <timer_disable>
	//can_play_music();
	oled_clear_screen();
    1204:	0e 94 09 06 	call	0xc12	; 0xc12 <oled_clear_screen>

	//print GAME OVER
	oled_pos(3, 4);
    1208:	64 e0       	ldi	r22, 0x04	; 4
    120a:	70 e0       	ldi	r23, 0x00	; 0
    120c:	83 e0       	ldi	r24, 0x03	; 3
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	0e 94 19 06 	call	0xc32	; 0xc32 <oled_pos>
	oled_printf("GAME OVER");
    1214:	88 e7       	ldi	r24, 0x78	; 120
    1216:	93 e0       	ldi	r25, 0x03	; 3
    1218:	9f 93       	push	r25
    121a:	8f 93       	push	r24
    121c:	0e 94 41 06 	call	0xc82	; 0xc82 <oled_printf>
    1220:	2f ef       	ldi	r18, 0xFF	; 255
    1222:	8f e7       	ldi	r24, 0x7F	; 127
    1224:	96 e1       	ldi	r25, 0x16	; 22
    1226:	21 50       	subi	r18, 0x01	; 1
    1228:	80 40       	sbci	r24, 0x00	; 0
    122a:	90 40       	sbci	r25, 0x00	; 0
    122c:	e1 f7       	brne	.-8      	; 0x1226 <game_end+0x26>
    122e:	00 c0       	rjmp	.+0      	; 0x1230 <game_end+0x30>
    1230:	00 c0       	rjmp	.+0      	; 0x1232 <game_end+0x32>
	_delay_ms(1500);
	oled_clear_screen();
    1232:	0e 94 09 06 	call	0xc12	; 0xc12 <oled_clear_screen>


	oled_pos(2, 2);
    1236:	62 e0       	ldi	r22, 0x02	; 2
    1238:	70 e0       	ldi	r23, 0x00	; 0
    123a:	82 e0       	ldi	r24, 0x02	; 2
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	0e 94 19 06 	call	0xc32	; 0xc32 <oled_pos>
	oled_printf("Final score:");
    1242:	82 e8       	ldi	r24, 0x82	; 130
    1244:	93 e0       	ldi	r25, 0x03	; 3
    1246:	9f 93       	push	r25
    1248:	8f 93       	push	r24
    124a:	0e 94 41 06 	call	0xc82	; 0xc82 <oled_printf>
	oled_pos(4, 7);
    124e:	67 e0       	ldi	r22, 0x07	; 7
    1250:	70 e0       	ldi	r23, 0x00	; 0
    1252:	84 e0       	ldi	r24, 0x04	; 4
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	0e 94 19 06 	call	0xc32	; 0xc32 <oled_pos>
	oled_printf("%d", game_score);
    125a:	80 91 38 04 	lds	r24, 0x0438
    125e:	8f 93       	push	r24
    1260:	80 91 37 04 	lds	r24, 0x0437
    1264:	8f 93       	push	r24
    1266:	86 e9       	ldi	r24, 0x96	; 150
    1268:	91 e0       	ldi	r25, 0x01	; 1
    126a:	9f 93       	push	r25
    126c:	8f 93       	push	r24
    126e:	0e 94 41 06 	call	0xc82	; 0xc82 <oled_printf>
	printf("Final score: %d\n", game_score);
    1272:	80 91 38 04 	lds	r24, 0x0438
    1276:	8f 93       	push	r24
    1278:	80 91 37 04 	lds	r24, 0x0437
    127c:	8f 93       	push	r24
    127e:	8f e8       	ldi	r24, 0x8F	; 143
    1280:	93 e0       	ldi	r25, 0x03	; 3
    1282:	9f 93       	push	r25
    1284:	8f 93       	push	r24
    1286:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <printf>

	oled_pos(7, 0);
    128a:	60 e0       	ldi	r22, 0x00	; 0
    128c:	70 e0       	ldi	r23, 0x00	; 0
    128e:	87 e0       	ldi	r24, 0x07	; 7
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	0e 94 19 06 	call	0xc32	; 0xc32 <oled_pos>
	oled_printf("press any button");
    1296:	80 ea       	ldi	r24, 0xA0	; 160
    1298:	93 e0       	ldi	r25, 0x03	; 3
    129a:	9f 93       	push	r25
    129c:	8f 93       	push	r24
    129e:	0e 94 41 06 	call	0xc82	; 0xc82 <oled_printf>
	while ((!button_read(2) && !button_read(1) && button_read(3)) ); //wait for button press
    12a2:	8d b7       	in	r24, 0x3d	; 61
    12a4:	9e b7       	in	r25, 0x3e	; 62
    12a6:	0e 96       	adiw	r24, 0x0e	; 14
    12a8:	0f b6       	in	r0, 0x3f	; 63
    12aa:	f8 94       	cli
    12ac:	9e bf       	out	0x3e, r25	; 62
    12ae:	0f be       	out	0x3f, r0	; 63
    12b0:	8d bf       	out	0x3d, r24	; 61
    12b2:	82 e0       	ldi	r24, 0x02	; 2
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	0e 94 d7 01 	call	0x3ae	; 0x3ae <button_read>
    12ba:	89 2b       	or	r24, r25
    12bc:	61 f4       	brne	.+24     	; 0x12d6 <game_end+0xd6>
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	0e 94 d7 01 	call	0x3ae	; 0x3ae <button_read>
    12c6:	89 2b       	or	r24, r25
    12c8:	31 f4       	brne	.+12     	; 0x12d6 <game_end+0xd6>
    12ca:	83 e0       	ldi	r24, 0x03	; 3
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	0e 94 d7 01 	call	0x3ae	; 0x3ae <button_read>
    12d2:	89 2b       	or	r24, r25
    12d4:	71 f7       	brne	.-36     	; 0x12b2 <game_end+0xb2>
    12d6:	9f ef       	ldi	r25, 0xFF	; 255
    12d8:	2f e7       	ldi	r18, 0x7F	; 127
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	91 50       	subi	r25, 0x01	; 1
    12de:	20 40       	sbci	r18, 0x00	; 0
    12e0:	80 40       	sbci	r24, 0x00	; 0
    12e2:	e1 f7       	brne	.-8      	; 0x12dc <game_end+0xdc>
    12e4:	00 c0       	rjmp	.+0      	; 0x12e6 <game_end+0xe6>
    12e6:	00 c0       	rjmp	.+0      	; 0x12e8 <game_end+0xe8>
	_delay_ms(100);
	oled_clear_screen();
    12e8:	0e 94 09 06 	call	0xc12	; 0xc12 <oled_clear_screen>
    12ec:	08 95       	ret

000012ee <game_main>:
}

void game_main(){
	game_start();
    12ee:	0e 94 cc 08 	call	0x1198	; 0x1198 <game_start>
	while(game_not_lost){
    12f2:	80 91 30 04 	lds	r24, 0x0430
    12f6:	81 11       	cpse	r24, r1
    12f8:	fc cf       	rjmp	.-8      	; 0x12f2 <game_main+0x4>
		//Write data to SRAM to be used in OLED later
	
	}
	game_end();
    12fa:	0e 94 00 09 	call	0x1200	; 0x1200 <game_end>
    12fe:	08 95       	ret

00001300 <main>:
#include "Drivers/mcp2515_driver.h"
#include "Drivers/can_driver.h"
#include "timer.h"

int main(void) {
    uart_init(MYUBRR);
    1300:	8f e1       	ldi	r24, 0x1F	; 31
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	0e 94 88 08 	call	0x1110	; 0x1110 <uart_init>
	printf("\nREBOOTED\n");
    1308:	81 eb       	ldi	r24, 0xB1	; 177
    130a:	93 e0       	ldi	r25, 0x03	; 3
    130c:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <puts>
	SRAM_init();
    1310:	0e 94 78 08 	call	0x10f0	; 0x10f0 <SRAM_init>
	joystick_init();
    1314:	0e 94 12 05 	call	0xa24	; 0xa24 <joystick_init>
	button_init();
    1318:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <button_init>
	oled_init();
    131c:	0e 94 51 06 	call	0xca2	; 0xca2 <oled_init>
	//mcp2515_init();
	can_init();	
    1320:	0e 94 04 02 	call	0x408	; 0x408 <can_init>
	timer_init();
    1324:	0e 94 2e 0b 	call	0x165c	; 0x165c <timer_init>

	DDRB |= (1<<DDB0);
    1328:	b8 9a       	sbi	0x17, 0	; 23

	printf("\nAll init done\n\n");
    132a:	8b eb       	ldi	r24, 0xBB	; 187
    132c:	93 e0       	ldi	r25, 0x03	; 3
    132e:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <puts>
	//can_joy_test();
	while(1) { 
		//shell();
		//spi_test();

 		menuitem* test_menu = MENU_create_menu();
    1332:	0e 94 fe 09 	call	0x13fc	; 0x13fc <MENU_create_menu>
 		MENU_navigate(test_menu);
    1336:	0e 94 a9 0a 	call	0x1552	; 0x1552 <MENU_navigate>
    133a:	2f ef       	ldi	r18, 0xFF	; 255
    133c:	8f ef       	ldi	r24, 0xFF	; 255
    133e:	95 e9       	ldi	r25, 0x95	; 149
    1340:	21 50       	subi	r18, 0x01	; 1
    1342:	80 40       	sbci	r24, 0x00	; 0
    1344:	90 40       	sbci	r25, 0x00	; 0
    1346:	e1 f7       	brne	.-8      	; 0x1340 <main+0x40>
    1348:	00 c0       	rjmp	.+0      	; 0x134a <main+0x4a>
    134a:	00 00       	nop
    134c:	f2 cf       	rjmp	.-28     	; 0x1332 <main+0x32>

0000134e <MENU_new_item>:
#include "Drivers/mcp2515_driver.h"
#include "Drivers/can_driver.h"

#define MENU_INDENT 2

menuitem* MENU_new_item(char *name, void (*handlerFunc)(void), uint8_t number_of_submenus) {
    134e:	df 92       	push	r13
    1350:	ef 92       	push	r14
    1352:	ff 92       	push	r15
    1354:	0f 93       	push	r16
    1356:	1f 93       	push	r17
    1358:	cf 93       	push	r28
    135a:	df 93       	push	r29
    135c:	7c 01       	movw	r14, r24
    135e:	8b 01       	movw	r16, r22
    1360:	d4 2e       	mov	r13, r20
	menuitem* new_item = malloc(sizeof(menuitem));
    1362:	89 e0       	ldi	r24, 0x09	; 9
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	0e 94 88 0b 	call	0x1710	; 0x1710 <malloc>
    136a:	ec 01       	movw	r28, r24
	
	new_item->name = name;
    136c:	fe 82       	std	Y+6, r15	; 0x06
    136e:	ed 82       	std	Y+5, r14	; 0x05
	new_item->handlerFunc = handlerFunc;
    1370:	18 87       	std	Y+8, r17	; 0x08
    1372:	0f 83       	std	Y+7, r16	; 0x07
	new_item->number_of_submenus = number_of_submenus;
    1374:	d8 82       	st	Y, r13
	new_item->submenus = malloc(number_of_submenus * sizeof(menuitem));
    1376:	4d 2d       	mov	r20, r13
    1378:	50 e0       	ldi	r21, 0x00	; 0
    137a:	ca 01       	movw	r24, r20
    137c:	88 0f       	add	r24, r24
    137e:	99 1f       	adc	r25, r25
    1380:	88 0f       	add	r24, r24
    1382:	99 1f       	adc	r25, r25
    1384:	88 0f       	add	r24, r24
    1386:	99 1f       	adc	r25, r25
    1388:	84 0f       	add	r24, r20
    138a:	95 1f       	adc	r25, r21
    138c:	0e 94 88 0b 	call	0x1710	; 0x1710 <malloc>
    1390:	9a 83       	std	Y+2, r25	; 0x02
    1392:	89 83       	std	Y+1, r24	; 0x01
	
	return new_item;
}
    1394:	ce 01       	movw	r24, r28
    1396:	df 91       	pop	r29
    1398:	cf 91       	pop	r28
    139a:	1f 91       	pop	r17
    139c:	0f 91       	pop	r16
    139e:	ff 90       	pop	r15
    13a0:	ef 90       	pop	r14
    13a2:	df 90       	pop	r13
    13a4:	08 95       	ret

000013a6 <MENU_assign_parents>:

void MENU_assign_parents(menuitem *current_menu){
    13a6:	1f 93       	push	r17
    13a8:	cf 93       	push	r28
    13aa:	df 93       	push	r29
    13ac:	ec 01       	movw	r28, r24
	for (uint8_t n = 0; n < current_menu->number_of_submenus; n++) {
    13ae:	88 81       	ld	r24, Y
    13b0:	88 23       	and	r24, r24
    13b2:	01 f1       	breq	.+64     	; 0x13f4 <MENU_assign_parents+0x4e>
    13b4:	10 e0       	ldi	r17, 0x00	; 0
		current_menu->submenus[n]->parent = current_menu;
    13b6:	81 2f       	mov	r24, r17
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	88 0f       	add	r24, r24
    13bc:	99 1f       	adc	r25, r25
    13be:	e9 81       	ldd	r30, Y+1	; 0x01
    13c0:	fa 81       	ldd	r31, Y+2	; 0x02
    13c2:	e8 0f       	add	r30, r24
    13c4:	f9 1f       	adc	r31, r25
    13c6:	01 90       	ld	r0, Z+
    13c8:	f0 81       	ld	r31, Z
    13ca:	e0 2d       	mov	r30, r0
    13cc:	d4 83       	std	Z+4, r29	; 0x04
    13ce:	c3 83       	std	Z+3, r28	; 0x03
		if (current_menu->submenus[n]->number_of_submenus > 0) {
    13d0:	29 81       	ldd	r18, Y+1	; 0x01
    13d2:	3a 81       	ldd	r19, Y+2	; 0x02
    13d4:	f9 01       	movw	r30, r18
    13d6:	e8 0f       	add	r30, r24
    13d8:	f9 1f       	adc	r31, r25
    13da:	01 90       	ld	r0, Z+
    13dc:	f0 81       	ld	r31, Z
    13de:	e0 2d       	mov	r30, r0
    13e0:	80 81       	ld	r24, Z
    13e2:	88 23       	and	r24, r24
    13e4:	19 f0       	breq	.+6      	; 0x13ec <MENU_assign_parents+0x46>
			MENU_assign_parents(current_menu->submenus[n]);
    13e6:	cf 01       	movw	r24, r30
    13e8:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <MENU_assign_parents>
	
	return new_item;
}

void MENU_assign_parents(menuitem *current_menu){
	for (uint8_t n = 0; n < current_menu->number_of_submenus; n++) {
    13ec:	1f 5f       	subi	r17, 0xFF	; 255
    13ee:	88 81       	ld	r24, Y
    13f0:	18 17       	cp	r17, r24
    13f2:	08 f3       	brcs	.-62     	; 0x13b6 <MENU_assign_parents+0x10>
		current_menu->submenus[n]->parent = current_menu;
		if (current_menu->submenus[n]->number_of_submenus > 0) {
			MENU_assign_parents(current_menu->submenus[n]);
		}
	}
}
    13f4:	df 91       	pop	r29
    13f6:	cf 91       	pop	r28
    13f8:	1f 91       	pop	r17
    13fa:	08 95       	ret

000013fc <MENU_create_menu>:


menuitem* MENU_create_menu(){
    13fc:	0f 93       	push	r16
    13fe:	1f 93       	push	r17
    1400:	cf 93       	push	r28
    1402:	df 93       	push	r29
	menuitem* root_menu = MENU_new_item("Main", NULL, 3);
    1404:	43 e0       	ldi	r20, 0x03	; 3
    1406:	60 e0       	ldi	r22, 0x00	; 0
    1408:	70 e0       	ldi	r23, 0x00	; 0
    140a:	8b ec       	ldi	r24, 0xCB	; 203
    140c:	93 e0       	ldi	r25, 0x03	; 3
    140e:	0e 94 a7 09 	call	0x134e	; 0x134e <MENU_new_item>
    1412:	ec 01       	movw	r28, r24
	root_menu->parent = NULL;
    1414:	1c 82       	std	Y+4, r1	; 0x04
    1416:	1b 82       	std	Y+3, r1	; 0x03
	root_menu->submenus[0] = MENU_new_item("Play game", game_main, 0);
    1418:	09 81       	ldd	r16, Y+1	; 0x01
    141a:	1a 81       	ldd	r17, Y+2	; 0x02
    141c:	40 e0       	ldi	r20, 0x00	; 0
    141e:	67 e7       	ldi	r22, 0x77	; 119
    1420:	79 e0       	ldi	r23, 0x09	; 9
    1422:	80 ed       	ldi	r24, 0xD0	; 208
    1424:	93 e0       	ldi	r25, 0x03	; 3
    1426:	0e 94 a7 09 	call	0x134e	; 0x134e <MENU_new_item>
    142a:	f8 01       	movw	r30, r16
    142c:	91 83       	std	Z+1, r25	; 0x01
    142e:	80 83       	st	Z, r24
	root_menu->submenus[1] = MENU_new_item("Mario", can_play_music, 0);
    1430:	09 81       	ldd	r16, Y+1	; 0x01
    1432:	1a 81       	ldd	r17, Y+2	; 0x02
    1434:	40 e0       	ldi	r20, 0x00	; 0
    1436:	61 e6       	ldi	r22, 0x61	; 97
    1438:	73 e0       	ldi	r23, 0x03	; 3
    143a:	8a ed       	ldi	r24, 0xDA	; 218
    143c:	93 e0       	ldi	r25, 0x03	; 3
    143e:	0e 94 a7 09 	call	0x134e	; 0x134e <MENU_new_item>
    1442:	f8 01       	movw	r30, r16
    1444:	93 83       	std	Z+3, r25	; 0x03
    1446:	82 83       	std	Z+2, r24	; 0x02
	root_menu->submenus[2] = MENU_new_item("Test functions", NULL, 2);
    1448:	09 81       	ldd	r16, Y+1	; 0x01
    144a:	1a 81       	ldd	r17, Y+2	; 0x02
    144c:	42 e0       	ldi	r20, 0x02	; 2
    144e:	60 e0       	ldi	r22, 0x00	; 0
    1450:	70 e0       	ldi	r23, 0x00	; 0
    1452:	80 ee       	ldi	r24, 0xE0	; 224
    1454:	93 e0       	ldi	r25, 0x03	; 3
    1456:	0e 94 a7 09 	call	0x134e	; 0x134e <MENU_new_item>
    145a:	f8 01       	movw	r30, r16
    145c:	95 83       	std	Z+5, r25	; 0x05
    145e:	84 83       	std	Z+4, r24	; 0x04
	root_menu->submenus[2]->submenus[0] = MENU_new_item("Flash diode", flash_diode, 0);
    1460:	e9 81       	ldd	r30, Y+1	; 0x01
    1462:	fa 81       	ldd	r31, Y+2	; 0x02
    1464:	04 80       	ldd	r0, Z+4	; 0x04
    1466:	f5 81       	ldd	r31, Z+5	; 0x05
    1468:	e0 2d       	mov	r30, r0
    146a:	01 81       	ldd	r16, Z+1	; 0x01
    146c:	12 81       	ldd	r17, Z+2	; 0x02
    146e:	40 e0       	ldi	r20, 0x00	; 0
    1470:	65 e2       	ldi	r22, 0x25	; 37
    1472:	7b e0       	ldi	r23, 0x0B	; 11
    1474:	8f ee       	ldi	r24, 0xEF	; 239
    1476:	93 e0       	ldi	r25, 0x03	; 3
    1478:	0e 94 a7 09 	call	0x134e	; 0x134e <MENU_new_item>
    147c:	f8 01       	movw	r30, r16
    147e:	91 83       	std	Z+1, r25	; 0x01
    1480:	80 83       	st	Z, r24
	root_menu->submenus[2]->submenus[1] = MENU_new_item("SRAM test", SRAM_test, 0);
    1482:	e9 81       	ldd	r30, Y+1	; 0x01
    1484:	fa 81       	ldd	r31, Y+2	; 0x02
    1486:	04 80       	ldd	r0, Z+4	; 0x04
    1488:	f5 81       	ldd	r31, Z+5	; 0x05
    148a:	e0 2d       	mov	r30, r0
    148c:	01 81       	ldd	r16, Z+1	; 0x01
    148e:	12 81       	ldd	r17, Z+2	; 0x02
    1490:	40 e0       	ldi	r20, 0x00	; 0
    1492:	61 ea       	ldi	r22, 0xA1	; 161
    1494:	77 e0       	ldi	r23, 0x07	; 7
    1496:	8b ef       	ldi	r24, 0xFB	; 251
    1498:	93 e0       	ldi	r25, 0x03	; 3
    149a:	0e 94 a7 09 	call	0x134e	; 0x134e <MENU_new_item>
    149e:	f8 01       	movw	r30, r16
    14a0:	93 83       	std	Z+3, r25	; 0x03
    14a2:	82 83       	std	Z+2, r24	; 0x02

	
	MENU_assign_parents(root_menu);
    14a4:	ce 01       	movw	r24, r28
    14a6:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <MENU_assign_parents>
		
	return root_menu;
}
    14aa:	ce 01       	movw	r24, r28
    14ac:	df 91       	pop	r29
    14ae:	cf 91       	pop	r28
    14b0:	1f 91       	pop	r17
    14b2:	0f 91       	pop	r16
    14b4:	08 95       	ret

000014b6 <MENU_print>:

//fixed
void MENU_print(menuitem *current_menu_item){
    14b6:	ef 92       	push	r14
    14b8:	ff 92       	push	r15
    14ba:	0f 93       	push	r16
    14bc:	1f 93       	push	r17
    14be:	cf 93       	push	r28
    14c0:	df 93       	push	r29
    14c2:	7c 01       	movw	r14, r24
	oled_clear_screen();
    14c4:	0e 94 09 06 	call	0xc12	; 0xc12 <oled_clear_screen>
	oled_print_arrow(1, 0);
    14c8:	60 e0       	ldi	r22, 0x00	; 0
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	0e 94 0f 07 	call	0xe1e	; 0xe1e <oled_print_arrow>
	oled_pos(0,0);
    14d0:	60 e0       	ldi	r22, 0x00	; 0
    14d2:	70 e0       	ldi	r23, 0x00	; 0
    14d4:	80 e0       	ldi	r24, 0x00	; 0
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	0e 94 19 06 	call	0xc32	; 0xc32 <oled_pos>
	oled_printf(current_menu_item->name);
    14dc:	d7 01       	movw	r26, r14
    14de:	16 96       	adiw	r26, 0x06	; 6
    14e0:	8c 91       	ld	r24, X
    14e2:	16 97       	sbiw	r26, 0x06	; 6
    14e4:	8f 93       	push	r24
    14e6:	15 96       	adiw	r26, 0x05	; 5
    14e8:	8c 91       	ld	r24, X
    14ea:	8f 93       	push	r24
    14ec:	0e 94 41 06 	call	0xc82	; 0xc82 <oled_printf>
	//printf("%s\n", current_menu_item->name);
	
	for (unsigned int i = 0; i < current_menu_item->number_of_submenus; i++) {
    14f0:	0f 90       	pop	r0
    14f2:	0f 90       	pop	r0
    14f4:	f7 01       	movw	r30, r14
    14f6:	80 81       	ld	r24, Z
    14f8:	88 23       	and	r24, r24
    14fa:	21 f1       	breq	.+72     	; 0x1544 <MENU_print+0x8e>
    14fc:	00 e0       	ldi	r16, 0x00	; 0
    14fe:	10 e0       	ldi	r17, 0x00	; 0
    1500:	c0 e0       	ldi	r28, 0x00	; 0
    1502:	d0 e0       	ldi	r29, 0x00	; 0
		oled_pos(i + 1, MENU_INDENT);
    1504:	21 96       	adiw	r28, 0x01	; 1
    1506:	62 e0       	ldi	r22, 0x02	; 2
    1508:	70 e0       	ldi	r23, 0x00	; 0
    150a:	ce 01       	movw	r24, r28
    150c:	0e 94 19 06 	call	0xc32	; 0xc32 <oled_pos>
		oled_printf(current_menu_item->submenus[i]->name);
    1510:	d7 01       	movw	r26, r14
    1512:	11 96       	adiw	r26, 0x01	; 1
    1514:	ed 91       	ld	r30, X+
    1516:	fc 91       	ld	r31, X
    1518:	12 97       	sbiw	r26, 0x02	; 2
    151a:	e0 0f       	add	r30, r16
    151c:	f1 1f       	adc	r31, r17
    151e:	01 90       	ld	r0, Z+
    1520:	f0 81       	ld	r31, Z
    1522:	e0 2d       	mov	r30, r0
    1524:	86 81       	ldd	r24, Z+6	; 0x06
    1526:	8f 93       	push	r24
    1528:	85 81       	ldd	r24, Z+5	; 0x05
    152a:	8f 93       	push	r24
    152c:	0e 94 41 06 	call	0xc82	; 0xc82 <oled_printf>
    1530:	0e 5f       	subi	r16, 0xFE	; 254
    1532:	1f 4f       	sbci	r17, 0xFF	; 255
	oled_print_arrow(1, 0);
	oled_pos(0,0);
	oled_printf(current_menu_item->name);
	//printf("%s\n", current_menu_item->name);
	
	for (unsigned int i = 0; i < current_menu_item->number_of_submenus; i++) {
    1534:	f7 01       	movw	r30, r14
    1536:	80 81       	ld	r24, Z
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	0f 90       	pop	r0
    153c:	0f 90       	pop	r0
    153e:	c8 17       	cp	r28, r24
    1540:	d9 07       	cpc	r29, r25
    1542:	00 f3       	brcs	.-64     	; 0x1504 <MENU_print+0x4e>
		oled_pos(i + 1, MENU_INDENT);
		oled_printf(current_menu_item->submenus[i]->name);
		//printf("%s\n",current_menu_item->submenus[i]->name);
	}
}
    1544:	df 91       	pop	r29
    1546:	cf 91       	pop	r28
    1548:	1f 91       	pop	r17
    154a:	0f 91       	pop	r16
    154c:	ff 90       	pop	r15
    154e:	ef 90       	pop	r14
    1550:	08 95       	ret

00001552 <MENU_navigate>:

void MENU_navigate(menuitem *current_menu){
    1552:	8c 01       	movw	r16, r24
	MENU_print(current_menu);
    1554:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <MENU_print>
	while(1){
		if(joystick_direction_Y() != 0){
    1558:	0e 94 43 05 	call	0xa86	; 0xa86 <joystick_direction_Y>
    155c:	89 2b       	or	r24, r25
    155e:	51 f0       	breq	.+20     	; 0x1574 <MENU_navigate+0x22>
			oled_arrow_handler(joystick_direction_Y(), 1, current_menu->number_of_submenus);
    1560:	f8 01       	movw	r30, r16
    1562:	c0 81       	ld	r28, Z
    1564:	d0 e0       	ldi	r29, 0x00	; 0
    1566:	0e 94 43 05 	call	0xa86	; 0xa86 <joystick_direction_Y>
    156a:	ae 01       	movw	r20, r28
    156c:	61 e0       	ldi	r22, 0x01	; 1
    156e:	70 e0       	ldi	r23, 0x00	; 0
    1570:	0e 94 7c 07 	call	0xef8	; 0xef8 <oled_arrow_handler>
		}
		
		if(joystick_direction_X() != 0){
    1574:	0e 94 58 05 	call	0xab0	; 0xab0 <joystick_direction_X>
    1578:	89 2b       	or	r24, r25
    157a:	71 f3       	breq	.-36     	; 0x1558 <MENU_navigate+0x6>
			if (joystick_direction_X() == 1) {
    157c:	0e 94 58 05 	call	0xab0	; 0xab0 <joystick_direction_X>
    1580:	01 97       	sbiw	r24, 0x01	; 1
    1582:	09 f0       	breq	.+2      	; 0x1586 <MENU_navigate+0x34>
    1584:	4b c0       	rjmp	.+150    	; 0x161c <MENU_navigate+0xca>
				if (current_menu->submenus[oled_get_arrow_page() - 1]->number_of_submenus > 0) {
    1586:	f8 01       	movw	r30, r16
    1588:	c1 81       	ldd	r28, Z+1	; 0x01
    158a:	d2 81       	ldd	r29, Z+2	; 0x02
    158c:	0e 94 0c 07 	call	0xe18	; 0xe18 <oled_get_arrow_page>
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	81 50       	subi	r24, 0x01	; 1
    1594:	90 48       	sbci	r25, 0x80	; 128
    1596:	88 0f       	add	r24, r24
    1598:	99 1f       	adc	r25, r25
    159a:	c8 0f       	add	r28, r24
    159c:	d9 1f       	adc	r29, r25
    159e:	e8 81       	ld	r30, Y
    15a0:	f9 81       	ldd	r31, Y+1	; 0x01
    15a2:	80 81       	ld	r24, Z
    15a4:	88 23       	and	r24, r24
    15a6:	91 f0       	breq	.+36     	; 0x15cc <MENU_navigate+0x7a>
					current_menu = current_menu->submenus[oled_get_arrow_page() - 1];
    15a8:	f8 01       	movw	r30, r16
    15aa:	c1 81       	ldd	r28, Z+1	; 0x01
    15ac:	d2 81       	ldd	r29, Z+2	; 0x02
    15ae:	0e 94 0c 07 	call	0xe18	; 0xe18 <oled_get_arrow_page>
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	81 50       	subi	r24, 0x01	; 1
    15b6:	90 48       	sbci	r25, 0x80	; 128
    15b8:	88 0f       	add	r24, r24
    15ba:	99 1f       	adc	r25, r25
    15bc:	c8 0f       	add	r28, r24
    15be:	d9 1f       	adc	r29, r25
    15c0:	08 81       	ld	r16, Y
    15c2:	19 81       	ldd	r17, Y+1	; 0x01
					//printf(current_menu->submenus[0]->name);
					//last_arrow_pos = 1;
					MENU_print(current_menu);
    15c4:	c8 01       	movw	r24, r16
    15c6:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <MENU_print>
    15ca:	35 c0       	rjmp	.+106    	; 0x1636 <MENU_navigate+0xe4>
				} else  if (current_menu->submenus[oled_get_arrow_page() - 1]->handlerFunc != NULL) {
    15cc:	f8 01       	movw	r30, r16
    15ce:	c1 81       	ldd	r28, Z+1	; 0x01
    15d0:	d2 81       	ldd	r29, Z+2	; 0x02
    15d2:	0e 94 0c 07 	call	0xe18	; 0xe18 <oled_get_arrow_page>
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	81 50       	subi	r24, 0x01	; 1
    15da:	90 48       	sbci	r25, 0x80	; 128
    15dc:	88 0f       	add	r24, r24
    15de:	99 1f       	adc	r25, r25
    15e0:	c8 0f       	add	r28, r24
    15e2:	d9 1f       	adc	r29, r25
    15e4:	e8 81       	ld	r30, Y
    15e6:	f9 81       	ldd	r31, Y+1	; 0x01
    15e8:	87 81       	ldd	r24, Z+7	; 0x07
    15ea:	90 85       	ldd	r25, Z+8	; 0x08
    15ec:	89 2b       	or	r24, r25
    15ee:	19 f1       	breq	.+70     	; 0x1636 <MENU_navigate+0xe4>
					current_menu->submenus[oled_get_arrow_page() - 1]->handlerFunc();
    15f0:	f8 01       	movw	r30, r16
    15f2:	c1 81       	ldd	r28, Z+1	; 0x01
    15f4:	d2 81       	ldd	r29, Z+2	; 0x02
    15f6:	0e 94 0c 07 	call	0xe18	; 0xe18 <oled_get_arrow_page>
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	81 50       	subi	r24, 0x01	; 1
    15fe:	90 48       	sbci	r25, 0x80	; 128
    1600:	88 0f       	add	r24, r24
    1602:	99 1f       	adc	r25, r25
    1604:	c8 0f       	add	r28, r24
    1606:	d9 1f       	adc	r29, r25
    1608:	e8 81       	ld	r30, Y
    160a:	f9 81       	ldd	r31, Y+1	; 0x01
    160c:	07 80       	ldd	r0, Z+7	; 0x07
    160e:	f0 85       	ldd	r31, Z+8	; 0x08
    1610:	e0 2d       	mov	r30, r0
    1612:	09 95       	icall
					//last_arrow_pos = 1;
					MENU_print(current_menu);
    1614:	c8 01       	movw	r24, r16
    1616:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <MENU_print>
    161a:	0d c0       	rjmp	.+26     	; 0x1636 <MENU_navigate+0xe4>
				}
			} else if (joystick_direction_X() == -1 && current_menu->parent != NULL) {
    161c:	0e 94 58 05 	call	0xab0	; 0xab0 <joystick_direction_X>
    1620:	01 96       	adiw	r24, 0x01	; 1
    1622:	49 f4       	brne	.+18     	; 0x1636 <MENU_navigate+0xe4>
    1624:	f8 01       	movw	r30, r16
    1626:	c3 81       	ldd	r28, Z+3	; 0x03
    1628:	d4 81       	ldd	r29, Z+4	; 0x04
    162a:	20 97       	sbiw	r28, 0x00	; 0
    162c:	21 f0       	breq	.+8      	; 0x1636 <MENU_navigate+0xe4>
				current_menu = current_menu->parent;
				//last_arrow_pos = 1;
				MENU_print(current_menu);
    162e:	ce 01       	movw	r24, r28
    1630:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <MENU_print>
					current_menu->submenus[oled_get_arrow_page() - 1]->handlerFunc();
					//last_arrow_pos = 1;
					MENU_print(current_menu);
				}
			} else if (joystick_direction_X() == -1 && current_menu->parent != NULL) {
				current_menu = current_menu->parent;
    1634:	8e 01       	movw	r16, r28
    1636:	ff ef       	ldi	r31, 0xFF	; 255
    1638:	2f e7       	ldi	r18, 0x7F	; 127
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	f1 50       	subi	r31, 0x01	; 1
    163e:	20 40       	sbci	r18, 0x00	; 0
    1640:	80 40       	sbci	r24, 0x00	; 0
    1642:	e1 f7       	brne	.-8      	; 0x163c <MENU_navigate+0xea>
    1644:	00 c0       	rjmp	.+0      	; 0x1646 <MENU_navigate+0xf4>
    1646:	00 c0       	rjmp	.+0      	; 0x1648 <MENU_navigate+0xf6>
    1648:	87 cf       	rjmp	.-242    	; 0x1558 <MENU_navigate+0x6>

0000164a <flash_diode>:
#include "Drivers/oled_driver.h"


//Simple test, Ex 1, task 6
void flash_diode(){
	PORTB |= (1<<PINB0);
    164a:	c0 9a       	sbi	0x18, 0	; 24
    164c:	8f ef       	ldi	r24, 0xFF	; 255
    164e:	97 e1       	ldi	r25, 0x17	; 23
    1650:	01 97       	sbiw	r24, 0x01	; 1
    1652:	f1 f7       	brne	.-4      	; 0x1650 <flash_diode+0x6>
    1654:	00 c0       	rjmp	.+0      	; 0x1656 <flash_diode+0xc>
    1656:	00 00       	nop
	_delay_ms(5);
	PORTB &= ~(1<<PINB0);
    1658:	c0 98       	cbi	0x18, 0	; 24
    165a:	08 95       	ret

0000165c <timer_init>:
#include "game.h"

void timer_init() {	
	//timer_enable();
		
	TCCR3A &= ~(1<<WGM30);
    165c:	eb e8       	ldi	r30, 0x8B	; 139
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	80 81       	ld	r24, Z
    1662:	8e 7f       	andi	r24, 0xFE	; 254
    1664:	80 83       	st	Z, r24
	TCCR3A &= ~(1<<WGM31);
    1666:	80 81       	ld	r24, Z
    1668:	8d 7f       	andi	r24, 0xFD	; 253
    166a:	80 83       	st	Z, r24
	TCCR3B |=  (1<<WGM32);
    166c:	ea e8       	ldi	r30, 0x8A	; 138
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	80 81       	ld	r24, Z
    1672:	88 60       	ori	r24, 0x08	; 8
    1674:	80 83       	st	Z, r24
	TCCR3B &= ~(1<<WGM33);
    1676:	80 81       	ld	r24, Z
    1678:	8f 7e       	andi	r24, 0xEF	; 239
    167a:	80 83       	st	Z, r24
	//TCCR3A |=  (1<<COM3A1) | (1<<COM3A0);
		
	OCR3A = 68; //68 for 70Hz, 4760 for 1Hz
    167c:	84 e4       	ldi	r24, 0x44	; 68
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	90 93 87 00 	sts	0x0087, r25
    1684:	80 93 86 00 	sts	0x0086, r24
		
	//enable interrupt on OCR3A compare

	ETIMSK |= (1<<OCIE3A);
    1688:	ed e7       	ldi	r30, 0x7D	; 125
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	80 81       	ld	r24, Z
    168e:	80 61       	ori	r24, 0x10	; 16
    1690:	80 83       	st	Z, r24
	TIFR |= (1<<ICF1);
    1692:	88 b7       	in	r24, 0x38	; 56
    1694:	88 60       	ori	r24, 0x08	; 8
    1696:	88 bf       	out	0x38, r24	; 56
				
	sei();		
    1698:	78 94       	sei
    169a:	08 95       	ret

0000169c <timer_enable>:
}

void timer_enable(){
	//CS3{2:0}   = 101  prescaler set to 1024
	TCCR3B |=  (1<<CS32) | (1<<CS30);
    169c:	ea e8       	ldi	r30, 0x8A	; 138
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	85 60       	ori	r24, 0x05	; 5
    16a4:	80 83       	st	Z, r24
	TCCR3B &= ~(1<<CS31);
    16a6:	80 81       	ld	r24, Z
    16a8:	8d 7f       	andi	r24, 0xFD	; 253
    16aa:	80 83       	st	Z, r24
    16ac:	08 95       	ret

000016ae <timer_disable>:
}

void timer_disable(){
	TCCR3B &= ~((1<<CS30) | (1<<CS31) | (1<<CS32));
    16ae:	ea e8       	ldi	r30, 0x8A	; 138
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	88 7f       	andi	r24, 0xF8	; 248
    16b6:	80 83       	st	Z, r24
    16b8:	08 95       	ret

000016ba <__vector_7>:
	} else {
		timer_disable();
	}
}

ISR(TIMER3_COMPA_vect){
    16ba:	1f 92       	push	r1
    16bc:	0f 92       	push	r0
    16be:	0f b6       	in	r0, 0x3f	; 63
    16c0:	0f 92       	push	r0
    16c2:	11 24       	eor	r1, r1
    16c4:	2f 93       	push	r18
    16c6:	3f 93       	push	r19
    16c8:	4f 93       	push	r20
    16ca:	5f 93       	push	r21
    16cc:	6f 93       	push	r22
    16ce:	7f 93       	push	r23
    16d0:	8f 93       	push	r24
    16d2:	9f 93       	push	r25
    16d4:	af 93       	push	r26
    16d6:	bf 93       	push	r27
    16d8:	ef 93       	push	r30
    16da:	ff 93       	push	r31
	can_joystick_transmit();
    16dc:	0e 94 de 02 	call	0x5bc	; 0x5bc <can_joystick_transmit>
	if(button_rising_edge_detect(2)){
		can_button_transmit(2);
		flash_diode();
	}*/

	if (game_not_lost){	game_keep_score(); }
    16e0:	80 91 30 04 	lds	r24, 0x0430
    16e4:	81 11       	cpse	r24, r1
    16e6:	0e 94 96 08 	call	0x112c	; 0x112c <game_keep_score>
		
	can_handle_message();
    16ea:	0e 94 33 03 	call	0x666	; 0x666 <can_handle_message>
    16ee:	ff 91       	pop	r31
    16f0:	ef 91       	pop	r30
    16f2:	bf 91       	pop	r27
    16f4:	af 91       	pop	r26
    16f6:	9f 91       	pop	r25
    16f8:	8f 91       	pop	r24
    16fa:	7f 91       	pop	r23
    16fc:	6f 91       	pop	r22
    16fe:	5f 91       	pop	r21
    1700:	4f 91       	pop	r20
    1702:	3f 91       	pop	r19
    1704:	2f 91       	pop	r18
    1706:	0f 90       	pop	r0
    1708:	0f be       	out	0x3f, r0	; 63
    170a:	0f 90       	pop	r0
    170c:	1f 90       	pop	r1
    170e:	18 95       	reti

00001710 <malloc>:
    1710:	cf 93       	push	r28
    1712:	df 93       	push	r29
    1714:	82 30       	cpi	r24, 0x02	; 2
    1716:	91 05       	cpc	r25, r1
    1718:	10 f4       	brcc	.+4      	; 0x171e <malloc+0xe>
    171a:	82 e0       	ldi	r24, 0x02	; 2
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	e0 91 3c 04 	lds	r30, 0x043C
    1722:	f0 91 3d 04 	lds	r31, 0x043D
    1726:	20 e0       	ldi	r18, 0x00	; 0
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	a0 e0       	ldi	r26, 0x00	; 0
    172c:	b0 e0       	ldi	r27, 0x00	; 0
    172e:	30 97       	sbiw	r30, 0x00	; 0
    1730:	39 f1       	breq	.+78     	; 0x1780 <malloc+0x70>
    1732:	40 81       	ld	r20, Z
    1734:	51 81       	ldd	r21, Z+1	; 0x01
    1736:	48 17       	cp	r20, r24
    1738:	59 07       	cpc	r21, r25
    173a:	b8 f0       	brcs	.+46     	; 0x176a <malloc+0x5a>
    173c:	48 17       	cp	r20, r24
    173e:	59 07       	cpc	r21, r25
    1740:	71 f4       	brne	.+28     	; 0x175e <malloc+0x4e>
    1742:	82 81       	ldd	r24, Z+2	; 0x02
    1744:	93 81       	ldd	r25, Z+3	; 0x03
    1746:	10 97       	sbiw	r26, 0x00	; 0
    1748:	29 f0       	breq	.+10     	; 0x1754 <malloc+0x44>
    174a:	13 96       	adiw	r26, 0x03	; 3
    174c:	9c 93       	st	X, r25
    174e:	8e 93       	st	-X, r24
    1750:	12 97       	sbiw	r26, 0x02	; 2
    1752:	2c c0       	rjmp	.+88     	; 0x17ac <malloc+0x9c>
    1754:	90 93 3d 04 	sts	0x043D, r25
    1758:	80 93 3c 04 	sts	0x043C, r24
    175c:	27 c0       	rjmp	.+78     	; 0x17ac <malloc+0x9c>
    175e:	21 15       	cp	r18, r1
    1760:	31 05       	cpc	r19, r1
    1762:	31 f0       	breq	.+12     	; 0x1770 <malloc+0x60>
    1764:	42 17       	cp	r20, r18
    1766:	53 07       	cpc	r21, r19
    1768:	18 f0       	brcs	.+6      	; 0x1770 <malloc+0x60>
    176a:	a9 01       	movw	r20, r18
    176c:	db 01       	movw	r26, r22
    176e:	01 c0       	rjmp	.+2      	; 0x1772 <malloc+0x62>
    1770:	ef 01       	movw	r28, r30
    1772:	9a 01       	movw	r18, r20
    1774:	bd 01       	movw	r22, r26
    1776:	df 01       	movw	r26, r30
    1778:	02 80       	ldd	r0, Z+2	; 0x02
    177a:	f3 81       	ldd	r31, Z+3	; 0x03
    177c:	e0 2d       	mov	r30, r0
    177e:	d7 cf       	rjmp	.-82     	; 0x172e <malloc+0x1e>
    1780:	21 15       	cp	r18, r1
    1782:	31 05       	cpc	r19, r1
    1784:	f9 f0       	breq	.+62     	; 0x17c4 <malloc+0xb4>
    1786:	28 1b       	sub	r18, r24
    1788:	39 0b       	sbc	r19, r25
    178a:	24 30       	cpi	r18, 0x04	; 4
    178c:	31 05       	cpc	r19, r1
    178e:	80 f4       	brcc	.+32     	; 0x17b0 <malloc+0xa0>
    1790:	8a 81       	ldd	r24, Y+2	; 0x02
    1792:	9b 81       	ldd	r25, Y+3	; 0x03
    1794:	61 15       	cp	r22, r1
    1796:	71 05       	cpc	r23, r1
    1798:	21 f0       	breq	.+8      	; 0x17a2 <malloc+0x92>
    179a:	fb 01       	movw	r30, r22
    179c:	93 83       	std	Z+3, r25	; 0x03
    179e:	82 83       	std	Z+2, r24	; 0x02
    17a0:	04 c0       	rjmp	.+8      	; 0x17aa <malloc+0x9a>
    17a2:	90 93 3d 04 	sts	0x043D, r25
    17a6:	80 93 3c 04 	sts	0x043C, r24
    17aa:	fe 01       	movw	r30, r28
    17ac:	32 96       	adiw	r30, 0x02	; 2
    17ae:	44 c0       	rjmp	.+136    	; 0x1838 <malloc+0x128>
    17b0:	fe 01       	movw	r30, r28
    17b2:	e2 0f       	add	r30, r18
    17b4:	f3 1f       	adc	r31, r19
    17b6:	81 93       	st	Z+, r24
    17b8:	91 93       	st	Z+, r25
    17ba:	22 50       	subi	r18, 0x02	; 2
    17bc:	31 09       	sbc	r19, r1
    17be:	39 83       	std	Y+1, r19	; 0x01
    17c0:	28 83       	st	Y, r18
    17c2:	3a c0       	rjmp	.+116    	; 0x1838 <malloc+0x128>
    17c4:	20 91 3a 04 	lds	r18, 0x043A
    17c8:	30 91 3b 04 	lds	r19, 0x043B
    17cc:	23 2b       	or	r18, r19
    17ce:	41 f4       	brne	.+16     	; 0x17e0 <malloc+0xd0>
    17d0:	20 91 02 01 	lds	r18, 0x0102
    17d4:	30 91 03 01 	lds	r19, 0x0103
    17d8:	30 93 3b 04 	sts	0x043B, r19
    17dc:	20 93 3a 04 	sts	0x043A, r18
    17e0:	20 91 00 01 	lds	r18, 0x0100
    17e4:	30 91 01 01 	lds	r19, 0x0101
    17e8:	21 15       	cp	r18, r1
    17ea:	31 05       	cpc	r19, r1
    17ec:	41 f4       	brne	.+16     	; 0x17fe <malloc+0xee>
    17ee:	2d b7       	in	r18, 0x3d	; 61
    17f0:	3e b7       	in	r19, 0x3e	; 62
    17f2:	40 91 04 01 	lds	r20, 0x0104
    17f6:	50 91 05 01 	lds	r21, 0x0105
    17fa:	24 1b       	sub	r18, r20
    17fc:	35 0b       	sbc	r19, r21
    17fe:	e0 91 3a 04 	lds	r30, 0x043A
    1802:	f0 91 3b 04 	lds	r31, 0x043B
    1806:	e2 17       	cp	r30, r18
    1808:	f3 07       	cpc	r31, r19
    180a:	a0 f4       	brcc	.+40     	; 0x1834 <malloc+0x124>
    180c:	2e 1b       	sub	r18, r30
    180e:	3f 0b       	sbc	r19, r31
    1810:	28 17       	cp	r18, r24
    1812:	39 07       	cpc	r19, r25
    1814:	78 f0       	brcs	.+30     	; 0x1834 <malloc+0x124>
    1816:	ac 01       	movw	r20, r24
    1818:	4e 5f       	subi	r20, 0xFE	; 254
    181a:	5f 4f       	sbci	r21, 0xFF	; 255
    181c:	24 17       	cp	r18, r20
    181e:	35 07       	cpc	r19, r21
    1820:	48 f0       	brcs	.+18     	; 0x1834 <malloc+0x124>
    1822:	4e 0f       	add	r20, r30
    1824:	5f 1f       	adc	r21, r31
    1826:	50 93 3b 04 	sts	0x043B, r21
    182a:	40 93 3a 04 	sts	0x043A, r20
    182e:	81 93       	st	Z+, r24
    1830:	91 93       	st	Z+, r25
    1832:	02 c0       	rjmp	.+4      	; 0x1838 <malloc+0x128>
    1834:	e0 e0       	ldi	r30, 0x00	; 0
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	cf 01       	movw	r24, r30
    183a:	df 91       	pop	r29
    183c:	cf 91       	pop	r28
    183e:	08 95       	ret

00001840 <free>:
    1840:	cf 93       	push	r28
    1842:	df 93       	push	r29
    1844:	00 97       	sbiw	r24, 0x00	; 0
    1846:	09 f4       	brne	.+2      	; 0x184a <free+0xa>
    1848:	87 c0       	rjmp	.+270    	; 0x1958 <free+0x118>
    184a:	fc 01       	movw	r30, r24
    184c:	32 97       	sbiw	r30, 0x02	; 2
    184e:	13 82       	std	Z+3, r1	; 0x03
    1850:	12 82       	std	Z+2, r1	; 0x02
    1852:	c0 91 3c 04 	lds	r28, 0x043C
    1856:	d0 91 3d 04 	lds	r29, 0x043D
    185a:	20 97       	sbiw	r28, 0x00	; 0
    185c:	81 f4       	brne	.+32     	; 0x187e <free+0x3e>
    185e:	20 81       	ld	r18, Z
    1860:	31 81       	ldd	r19, Z+1	; 0x01
    1862:	28 0f       	add	r18, r24
    1864:	39 1f       	adc	r19, r25
    1866:	80 91 3a 04 	lds	r24, 0x043A
    186a:	90 91 3b 04 	lds	r25, 0x043B
    186e:	82 17       	cp	r24, r18
    1870:	93 07       	cpc	r25, r19
    1872:	79 f5       	brne	.+94     	; 0x18d2 <free+0x92>
    1874:	f0 93 3b 04 	sts	0x043B, r31
    1878:	e0 93 3a 04 	sts	0x043A, r30
    187c:	6d c0       	rjmp	.+218    	; 0x1958 <free+0x118>
    187e:	de 01       	movw	r26, r28
    1880:	20 e0       	ldi	r18, 0x00	; 0
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	ae 17       	cp	r26, r30
    1886:	bf 07       	cpc	r27, r31
    1888:	50 f4       	brcc	.+20     	; 0x189e <free+0x5e>
    188a:	12 96       	adiw	r26, 0x02	; 2
    188c:	4d 91       	ld	r20, X+
    188e:	5c 91       	ld	r21, X
    1890:	13 97       	sbiw	r26, 0x03	; 3
    1892:	9d 01       	movw	r18, r26
    1894:	41 15       	cp	r20, r1
    1896:	51 05       	cpc	r21, r1
    1898:	09 f1       	breq	.+66     	; 0x18dc <free+0x9c>
    189a:	da 01       	movw	r26, r20
    189c:	f3 cf       	rjmp	.-26     	; 0x1884 <free+0x44>
    189e:	b3 83       	std	Z+3, r27	; 0x03
    18a0:	a2 83       	std	Z+2, r26	; 0x02
    18a2:	40 81       	ld	r20, Z
    18a4:	51 81       	ldd	r21, Z+1	; 0x01
    18a6:	84 0f       	add	r24, r20
    18a8:	95 1f       	adc	r25, r21
    18aa:	8a 17       	cp	r24, r26
    18ac:	9b 07       	cpc	r25, r27
    18ae:	71 f4       	brne	.+28     	; 0x18cc <free+0x8c>
    18b0:	8d 91       	ld	r24, X+
    18b2:	9c 91       	ld	r25, X
    18b4:	11 97       	sbiw	r26, 0x01	; 1
    18b6:	84 0f       	add	r24, r20
    18b8:	95 1f       	adc	r25, r21
    18ba:	02 96       	adiw	r24, 0x02	; 2
    18bc:	91 83       	std	Z+1, r25	; 0x01
    18be:	80 83       	st	Z, r24
    18c0:	12 96       	adiw	r26, 0x02	; 2
    18c2:	8d 91       	ld	r24, X+
    18c4:	9c 91       	ld	r25, X
    18c6:	13 97       	sbiw	r26, 0x03	; 3
    18c8:	93 83       	std	Z+3, r25	; 0x03
    18ca:	82 83       	std	Z+2, r24	; 0x02
    18cc:	21 15       	cp	r18, r1
    18ce:	31 05       	cpc	r19, r1
    18d0:	29 f4       	brne	.+10     	; 0x18dc <free+0x9c>
    18d2:	f0 93 3d 04 	sts	0x043D, r31
    18d6:	e0 93 3c 04 	sts	0x043C, r30
    18da:	3e c0       	rjmp	.+124    	; 0x1958 <free+0x118>
    18dc:	d9 01       	movw	r26, r18
    18de:	13 96       	adiw	r26, 0x03	; 3
    18e0:	fc 93       	st	X, r31
    18e2:	ee 93       	st	-X, r30
    18e4:	12 97       	sbiw	r26, 0x02	; 2
    18e6:	4d 91       	ld	r20, X+
    18e8:	5d 91       	ld	r21, X+
    18ea:	a4 0f       	add	r26, r20
    18ec:	b5 1f       	adc	r27, r21
    18ee:	ea 17       	cp	r30, r26
    18f0:	fb 07       	cpc	r31, r27
    18f2:	79 f4       	brne	.+30     	; 0x1912 <free+0xd2>
    18f4:	80 81       	ld	r24, Z
    18f6:	91 81       	ldd	r25, Z+1	; 0x01
    18f8:	84 0f       	add	r24, r20
    18fa:	95 1f       	adc	r25, r21
    18fc:	02 96       	adiw	r24, 0x02	; 2
    18fe:	d9 01       	movw	r26, r18
    1900:	11 96       	adiw	r26, 0x01	; 1
    1902:	9c 93       	st	X, r25
    1904:	8e 93       	st	-X, r24
    1906:	82 81       	ldd	r24, Z+2	; 0x02
    1908:	93 81       	ldd	r25, Z+3	; 0x03
    190a:	13 96       	adiw	r26, 0x03	; 3
    190c:	9c 93       	st	X, r25
    190e:	8e 93       	st	-X, r24
    1910:	12 97       	sbiw	r26, 0x02	; 2
    1912:	e0 e0       	ldi	r30, 0x00	; 0
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	8a 81       	ldd	r24, Y+2	; 0x02
    1918:	9b 81       	ldd	r25, Y+3	; 0x03
    191a:	00 97       	sbiw	r24, 0x00	; 0
    191c:	19 f0       	breq	.+6      	; 0x1924 <free+0xe4>
    191e:	fe 01       	movw	r30, r28
    1920:	ec 01       	movw	r28, r24
    1922:	f9 cf       	rjmp	.-14     	; 0x1916 <free+0xd6>
    1924:	ce 01       	movw	r24, r28
    1926:	02 96       	adiw	r24, 0x02	; 2
    1928:	28 81       	ld	r18, Y
    192a:	39 81       	ldd	r19, Y+1	; 0x01
    192c:	82 0f       	add	r24, r18
    192e:	93 1f       	adc	r25, r19
    1930:	20 91 3a 04 	lds	r18, 0x043A
    1934:	30 91 3b 04 	lds	r19, 0x043B
    1938:	28 17       	cp	r18, r24
    193a:	39 07       	cpc	r19, r25
    193c:	69 f4       	brne	.+26     	; 0x1958 <free+0x118>
    193e:	30 97       	sbiw	r30, 0x00	; 0
    1940:	29 f4       	brne	.+10     	; 0x194c <free+0x10c>
    1942:	10 92 3d 04 	sts	0x043D, r1
    1946:	10 92 3c 04 	sts	0x043C, r1
    194a:	02 c0       	rjmp	.+4      	; 0x1950 <free+0x110>
    194c:	13 82       	std	Z+3, r1	; 0x03
    194e:	12 82       	std	Z+2, r1	; 0x02
    1950:	d0 93 3b 04 	sts	0x043B, r29
    1954:	c0 93 3a 04 	sts	0x043A, r28
    1958:	df 91       	pop	r29
    195a:	cf 91       	pop	r28
    195c:	08 95       	ret

0000195e <do_rand>:
    195e:	8f 92       	push	r8
    1960:	9f 92       	push	r9
    1962:	af 92       	push	r10
    1964:	bf 92       	push	r11
    1966:	cf 92       	push	r12
    1968:	df 92       	push	r13
    196a:	ef 92       	push	r14
    196c:	ff 92       	push	r15
    196e:	cf 93       	push	r28
    1970:	df 93       	push	r29
    1972:	ec 01       	movw	r28, r24
    1974:	68 81       	ld	r22, Y
    1976:	79 81       	ldd	r23, Y+1	; 0x01
    1978:	8a 81       	ldd	r24, Y+2	; 0x02
    197a:	9b 81       	ldd	r25, Y+3	; 0x03
    197c:	61 15       	cp	r22, r1
    197e:	71 05       	cpc	r23, r1
    1980:	81 05       	cpc	r24, r1
    1982:	91 05       	cpc	r25, r1
    1984:	21 f4       	brne	.+8      	; 0x198e <do_rand+0x30>
    1986:	64 e2       	ldi	r22, 0x24	; 36
    1988:	79 ed       	ldi	r23, 0xD9	; 217
    198a:	8b e5       	ldi	r24, 0x5B	; 91
    198c:	97 e0       	ldi	r25, 0x07	; 7
    198e:	2d e1       	ldi	r18, 0x1D	; 29
    1990:	33 ef       	ldi	r19, 0xF3	; 243
    1992:	41 e0       	ldi	r20, 0x01	; 1
    1994:	50 e0       	ldi	r21, 0x00	; 0
    1996:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <__divmodsi4>
    199a:	49 01       	movw	r8, r18
    199c:	5a 01       	movw	r10, r20
    199e:	9b 01       	movw	r18, r22
    19a0:	ac 01       	movw	r20, r24
    19a2:	a7 ea       	ldi	r26, 0xA7	; 167
    19a4:	b1 e4       	ldi	r27, 0x41	; 65
    19a6:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <__muluhisi3>
    19aa:	6b 01       	movw	r12, r22
    19ac:	7c 01       	movw	r14, r24
    19ae:	ac ee       	ldi	r26, 0xEC	; 236
    19b0:	b4 ef       	ldi	r27, 0xF4	; 244
    19b2:	a5 01       	movw	r20, r10
    19b4:	94 01       	movw	r18, r8
    19b6:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <__mulohisi3>
    19ba:	c6 0e       	add	r12, r22
    19bc:	d7 1e       	adc	r13, r23
    19be:	e8 1e       	adc	r14, r24
    19c0:	f9 1e       	adc	r15, r25
    19c2:	f7 fe       	sbrs	r15, 7
    19c4:	06 c0       	rjmp	.+12     	; 0x19d2 <do_rand+0x74>
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	c8 1a       	sub	r12, r24
    19ca:	d1 08       	sbc	r13, r1
    19cc:	e1 08       	sbc	r14, r1
    19ce:	80 e8       	ldi	r24, 0x80	; 128
    19d0:	f8 0a       	sbc	r15, r24
    19d2:	c8 82       	st	Y, r12
    19d4:	d9 82       	std	Y+1, r13	; 0x01
    19d6:	ea 82       	std	Y+2, r14	; 0x02
    19d8:	fb 82       	std	Y+3, r15	; 0x03
    19da:	c6 01       	movw	r24, r12
    19dc:	9f 77       	andi	r25, 0x7F	; 127
    19de:	df 91       	pop	r29
    19e0:	cf 91       	pop	r28
    19e2:	ff 90       	pop	r15
    19e4:	ef 90       	pop	r14
    19e6:	df 90       	pop	r13
    19e8:	cf 90       	pop	r12
    19ea:	bf 90       	pop	r11
    19ec:	af 90       	pop	r10
    19ee:	9f 90       	pop	r9
    19f0:	8f 90       	pop	r8
    19f2:	08 95       	ret

000019f4 <rand_r>:
    19f4:	0e 94 af 0c 	call	0x195e	; 0x195e <do_rand>
    19f8:	08 95       	ret

000019fa <rand>:
    19fa:	86 e0       	ldi	r24, 0x06	; 6
    19fc:	91 e0       	ldi	r25, 0x01	; 1
    19fe:	0e 94 af 0c 	call	0x195e	; 0x195e <do_rand>
    1a02:	08 95       	ret

00001a04 <srand>:
    1a04:	a0 e0       	ldi	r26, 0x00	; 0
    1a06:	b0 e0       	ldi	r27, 0x00	; 0
    1a08:	80 93 06 01 	sts	0x0106, r24
    1a0c:	90 93 07 01 	sts	0x0107, r25
    1a10:	a0 93 08 01 	sts	0x0108, r26
    1a14:	b0 93 09 01 	sts	0x0109, r27
    1a18:	08 95       	ret

00001a1a <printf>:
    1a1a:	a0 e0       	ldi	r26, 0x00	; 0
    1a1c:	b0 e0       	ldi	r27, 0x00	; 0
    1a1e:	e3 e1       	ldi	r30, 0x13	; 19
    1a20:	fd e0       	ldi	r31, 0x0D	; 13
    1a22:	0c 94 08 10 	jmp	0x2010	; 0x2010 <__prologue_saves__+0x20>
    1a26:	fe 01       	movw	r30, r28
    1a28:	35 96       	adiw	r30, 0x05	; 5
    1a2a:	61 91       	ld	r22, Z+
    1a2c:	71 91       	ld	r23, Z+
    1a2e:	af 01       	movw	r20, r30
    1a30:	80 91 40 04 	lds	r24, 0x0440
    1a34:	90 91 41 04 	lds	r25, 0x0441
    1a38:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <vfprintf>
    1a3c:	e2 e0       	ldi	r30, 0x02	; 2
    1a3e:	0c 94 24 10 	jmp	0x2048	; 0x2048 <__epilogue_restores__+0x20>

00001a42 <puts>:
    1a42:	0f 93       	push	r16
    1a44:	1f 93       	push	r17
    1a46:	cf 93       	push	r28
    1a48:	df 93       	push	r29
    1a4a:	e0 91 40 04 	lds	r30, 0x0440
    1a4e:	f0 91 41 04 	lds	r31, 0x0441
    1a52:	23 81       	ldd	r18, Z+3	; 0x03
    1a54:	21 ff       	sbrs	r18, 1
    1a56:	1b c0       	rjmp	.+54     	; 0x1a8e <puts+0x4c>
    1a58:	ec 01       	movw	r28, r24
    1a5a:	00 e0       	ldi	r16, 0x00	; 0
    1a5c:	10 e0       	ldi	r17, 0x00	; 0
    1a5e:	89 91       	ld	r24, Y+
    1a60:	60 91 40 04 	lds	r22, 0x0440
    1a64:	70 91 41 04 	lds	r23, 0x0441
    1a68:	db 01       	movw	r26, r22
    1a6a:	18 96       	adiw	r26, 0x08	; 8
    1a6c:	ed 91       	ld	r30, X+
    1a6e:	fc 91       	ld	r31, X
    1a70:	19 97       	sbiw	r26, 0x09	; 9
    1a72:	88 23       	and	r24, r24
    1a74:	31 f0       	breq	.+12     	; 0x1a82 <puts+0x40>
    1a76:	09 95       	icall
    1a78:	89 2b       	or	r24, r25
    1a7a:	89 f3       	breq	.-30     	; 0x1a5e <puts+0x1c>
    1a7c:	0f ef       	ldi	r16, 0xFF	; 255
    1a7e:	1f ef       	ldi	r17, 0xFF	; 255
    1a80:	ee cf       	rjmp	.-36     	; 0x1a5e <puts+0x1c>
    1a82:	8a e0       	ldi	r24, 0x0A	; 10
    1a84:	09 95       	icall
    1a86:	89 2b       	or	r24, r25
    1a88:	11 f4       	brne	.+4      	; 0x1a8e <puts+0x4c>
    1a8a:	c8 01       	movw	r24, r16
    1a8c:	02 c0       	rjmp	.+4      	; 0x1a92 <puts+0x50>
    1a8e:	8f ef       	ldi	r24, 0xFF	; 255
    1a90:	9f ef       	ldi	r25, 0xFF	; 255
    1a92:	df 91       	pop	r29
    1a94:	cf 91       	pop	r28
    1a96:	1f 91       	pop	r17
    1a98:	0f 91       	pop	r16
    1a9a:	08 95       	ret

00001a9c <vfprintf>:
    1a9c:	ac e0       	ldi	r26, 0x0C	; 12
    1a9e:	b0 e0       	ldi	r27, 0x00	; 0
    1aa0:	e4 e5       	ldi	r30, 0x54	; 84
    1aa2:	fd e0       	ldi	r31, 0x0D	; 13
    1aa4:	0c 94 f8 0f 	jmp	0x1ff0	; 0x1ff0 <__prologue_saves__>
    1aa8:	7c 01       	movw	r14, r24
    1aaa:	6b 01       	movw	r12, r22
    1aac:	8a 01       	movw	r16, r20
    1aae:	fc 01       	movw	r30, r24
    1ab0:	17 82       	std	Z+7, r1	; 0x07
    1ab2:	16 82       	std	Z+6, r1	; 0x06
    1ab4:	83 81       	ldd	r24, Z+3	; 0x03
    1ab6:	81 ff       	sbrs	r24, 1
    1ab8:	bd c1       	rjmp	.+890    	; 0x1e34 <vfprintf+0x398>
    1aba:	ce 01       	movw	r24, r28
    1abc:	01 96       	adiw	r24, 0x01	; 1
    1abe:	4c 01       	movw	r8, r24
    1ac0:	f7 01       	movw	r30, r14
    1ac2:	93 81       	ldd	r25, Z+3	; 0x03
    1ac4:	f6 01       	movw	r30, r12
    1ac6:	93 fd       	sbrc	r25, 3
    1ac8:	85 91       	lpm	r24, Z+
    1aca:	93 ff       	sbrs	r25, 3
    1acc:	81 91       	ld	r24, Z+
    1ace:	6f 01       	movw	r12, r30
    1ad0:	88 23       	and	r24, r24
    1ad2:	09 f4       	brne	.+2      	; 0x1ad6 <vfprintf+0x3a>
    1ad4:	ab c1       	rjmp	.+854    	; 0x1e2c <vfprintf+0x390>
    1ad6:	85 32       	cpi	r24, 0x25	; 37
    1ad8:	39 f4       	brne	.+14     	; 0x1ae8 <vfprintf+0x4c>
    1ada:	93 fd       	sbrc	r25, 3
    1adc:	85 91       	lpm	r24, Z+
    1ade:	93 ff       	sbrs	r25, 3
    1ae0:	81 91       	ld	r24, Z+
    1ae2:	6f 01       	movw	r12, r30
    1ae4:	85 32       	cpi	r24, 0x25	; 37
    1ae6:	29 f4       	brne	.+10     	; 0x1af2 <vfprintf+0x56>
    1ae8:	b7 01       	movw	r22, r14
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <fputc>
    1af0:	e7 cf       	rjmp	.-50     	; 0x1ac0 <vfprintf+0x24>
    1af2:	51 2c       	mov	r5, r1
    1af4:	31 2c       	mov	r3, r1
    1af6:	20 e0       	ldi	r18, 0x00	; 0
    1af8:	20 32       	cpi	r18, 0x20	; 32
    1afa:	a0 f4       	brcc	.+40     	; 0x1b24 <vfprintf+0x88>
    1afc:	8b 32       	cpi	r24, 0x2B	; 43
    1afe:	69 f0       	breq	.+26     	; 0x1b1a <vfprintf+0x7e>
    1b00:	30 f4       	brcc	.+12     	; 0x1b0e <vfprintf+0x72>
    1b02:	80 32       	cpi	r24, 0x20	; 32
    1b04:	59 f0       	breq	.+22     	; 0x1b1c <vfprintf+0x80>
    1b06:	83 32       	cpi	r24, 0x23	; 35
    1b08:	69 f4       	brne	.+26     	; 0x1b24 <vfprintf+0x88>
    1b0a:	20 61       	ori	r18, 0x10	; 16
    1b0c:	2c c0       	rjmp	.+88     	; 0x1b66 <vfprintf+0xca>
    1b0e:	8d 32       	cpi	r24, 0x2D	; 45
    1b10:	39 f0       	breq	.+14     	; 0x1b20 <vfprintf+0x84>
    1b12:	80 33       	cpi	r24, 0x30	; 48
    1b14:	39 f4       	brne	.+14     	; 0x1b24 <vfprintf+0x88>
    1b16:	21 60       	ori	r18, 0x01	; 1
    1b18:	26 c0       	rjmp	.+76     	; 0x1b66 <vfprintf+0xca>
    1b1a:	22 60       	ori	r18, 0x02	; 2
    1b1c:	24 60       	ori	r18, 0x04	; 4
    1b1e:	23 c0       	rjmp	.+70     	; 0x1b66 <vfprintf+0xca>
    1b20:	28 60       	ori	r18, 0x08	; 8
    1b22:	21 c0       	rjmp	.+66     	; 0x1b66 <vfprintf+0xca>
    1b24:	27 fd       	sbrc	r18, 7
    1b26:	27 c0       	rjmp	.+78     	; 0x1b76 <vfprintf+0xda>
    1b28:	30 ed       	ldi	r19, 0xD0	; 208
    1b2a:	38 0f       	add	r19, r24
    1b2c:	3a 30       	cpi	r19, 0x0A	; 10
    1b2e:	78 f4       	brcc	.+30     	; 0x1b4e <vfprintf+0xb2>
    1b30:	26 ff       	sbrs	r18, 6
    1b32:	06 c0       	rjmp	.+12     	; 0x1b40 <vfprintf+0xa4>
    1b34:	fa e0       	ldi	r31, 0x0A	; 10
    1b36:	5f 9e       	mul	r5, r31
    1b38:	30 0d       	add	r19, r0
    1b3a:	11 24       	eor	r1, r1
    1b3c:	53 2e       	mov	r5, r19
    1b3e:	13 c0       	rjmp	.+38     	; 0x1b66 <vfprintf+0xca>
    1b40:	8a e0       	ldi	r24, 0x0A	; 10
    1b42:	38 9e       	mul	r3, r24
    1b44:	30 0d       	add	r19, r0
    1b46:	11 24       	eor	r1, r1
    1b48:	33 2e       	mov	r3, r19
    1b4a:	20 62       	ori	r18, 0x20	; 32
    1b4c:	0c c0       	rjmp	.+24     	; 0x1b66 <vfprintf+0xca>
    1b4e:	8e 32       	cpi	r24, 0x2E	; 46
    1b50:	21 f4       	brne	.+8      	; 0x1b5a <vfprintf+0xbe>
    1b52:	26 fd       	sbrc	r18, 6
    1b54:	6b c1       	rjmp	.+726    	; 0x1e2c <vfprintf+0x390>
    1b56:	20 64       	ori	r18, 0x40	; 64
    1b58:	06 c0       	rjmp	.+12     	; 0x1b66 <vfprintf+0xca>
    1b5a:	8c 36       	cpi	r24, 0x6C	; 108
    1b5c:	11 f4       	brne	.+4      	; 0x1b62 <vfprintf+0xc6>
    1b5e:	20 68       	ori	r18, 0x80	; 128
    1b60:	02 c0       	rjmp	.+4      	; 0x1b66 <vfprintf+0xca>
    1b62:	88 36       	cpi	r24, 0x68	; 104
    1b64:	41 f4       	brne	.+16     	; 0x1b76 <vfprintf+0xda>
    1b66:	f6 01       	movw	r30, r12
    1b68:	93 fd       	sbrc	r25, 3
    1b6a:	85 91       	lpm	r24, Z+
    1b6c:	93 ff       	sbrs	r25, 3
    1b6e:	81 91       	ld	r24, Z+
    1b70:	6f 01       	movw	r12, r30
    1b72:	81 11       	cpse	r24, r1
    1b74:	c1 cf       	rjmp	.-126    	; 0x1af8 <vfprintf+0x5c>
    1b76:	98 2f       	mov	r25, r24
    1b78:	9f 7d       	andi	r25, 0xDF	; 223
    1b7a:	95 54       	subi	r25, 0x45	; 69
    1b7c:	93 30       	cpi	r25, 0x03	; 3
    1b7e:	28 f4       	brcc	.+10     	; 0x1b8a <vfprintf+0xee>
    1b80:	0c 5f       	subi	r16, 0xFC	; 252
    1b82:	1f 4f       	sbci	r17, 0xFF	; 255
    1b84:	ff e3       	ldi	r31, 0x3F	; 63
    1b86:	f9 83       	std	Y+1, r31	; 0x01
    1b88:	0d c0       	rjmp	.+26     	; 0x1ba4 <vfprintf+0x108>
    1b8a:	83 36       	cpi	r24, 0x63	; 99
    1b8c:	31 f0       	breq	.+12     	; 0x1b9a <vfprintf+0xfe>
    1b8e:	83 37       	cpi	r24, 0x73	; 115
    1b90:	71 f0       	breq	.+28     	; 0x1bae <vfprintf+0x112>
    1b92:	83 35       	cpi	r24, 0x53	; 83
    1b94:	09 f0       	breq	.+2      	; 0x1b98 <vfprintf+0xfc>
    1b96:	5b c0       	rjmp	.+182    	; 0x1c4e <vfprintf+0x1b2>
    1b98:	22 c0       	rjmp	.+68     	; 0x1bde <vfprintf+0x142>
    1b9a:	f8 01       	movw	r30, r16
    1b9c:	80 81       	ld	r24, Z
    1b9e:	89 83       	std	Y+1, r24	; 0x01
    1ba0:	0e 5f       	subi	r16, 0xFE	; 254
    1ba2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ba4:	44 24       	eor	r4, r4
    1ba6:	43 94       	inc	r4
    1ba8:	51 2c       	mov	r5, r1
    1baa:	54 01       	movw	r10, r8
    1bac:	15 c0       	rjmp	.+42     	; 0x1bd8 <vfprintf+0x13c>
    1bae:	38 01       	movw	r6, r16
    1bb0:	f2 e0       	ldi	r31, 0x02	; 2
    1bb2:	6f 0e       	add	r6, r31
    1bb4:	71 1c       	adc	r7, r1
    1bb6:	f8 01       	movw	r30, r16
    1bb8:	a0 80       	ld	r10, Z
    1bba:	b1 80       	ldd	r11, Z+1	; 0x01
    1bbc:	26 ff       	sbrs	r18, 6
    1bbe:	03 c0       	rjmp	.+6      	; 0x1bc6 <vfprintf+0x12a>
    1bc0:	65 2d       	mov	r22, r5
    1bc2:	70 e0       	ldi	r23, 0x00	; 0
    1bc4:	02 c0       	rjmp	.+4      	; 0x1bca <vfprintf+0x12e>
    1bc6:	6f ef       	ldi	r22, 0xFF	; 255
    1bc8:	7f ef       	ldi	r23, 0xFF	; 255
    1bca:	c5 01       	movw	r24, r10
    1bcc:	2c 87       	std	Y+12, r18	; 0x0c
    1bce:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <strnlen>
    1bd2:	2c 01       	movw	r4, r24
    1bd4:	83 01       	movw	r16, r6
    1bd6:	2c 85       	ldd	r18, Y+12	; 0x0c
    1bd8:	2f 77       	andi	r18, 0x7F	; 127
    1bda:	22 2e       	mov	r2, r18
    1bdc:	17 c0       	rjmp	.+46     	; 0x1c0c <vfprintf+0x170>
    1bde:	38 01       	movw	r6, r16
    1be0:	f2 e0       	ldi	r31, 0x02	; 2
    1be2:	6f 0e       	add	r6, r31
    1be4:	71 1c       	adc	r7, r1
    1be6:	f8 01       	movw	r30, r16
    1be8:	a0 80       	ld	r10, Z
    1bea:	b1 80       	ldd	r11, Z+1	; 0x01
    1bec:	26 ff       	sbrs	r18, 6
    1bee:	03 c0       	rjmp	.+6      	; 0x1bf6 <vfprintf+0x15a>
    1bf0:	65 2d       	mov	r22, r5
    1bf2:	70 e0       	ldi	r23, 0x00	; 0
    1bf4:	02 c0       	rjmp	.+4      	; 0x1bfa <vfprintf+0x15e>
    1bf6:	6f ef       	ldi	r22, 0xFF	; 255
    1bf8:	7f ef       	ldi	r23, 0xFF	; 255
    1bfa:	c5 01       	movw	r24, r10
    1bfc:	2c 87       	std	Y+12, r18	; 0x0c
    1bfe:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <strnlen_P>
    1c02:	2c 01       	movw	r4, r24
    1c04:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c06:	20 68       	ori	r18, 0x80	; 128
    1c08:	22 2e       	mov	r2, r18
    1c0a:	83 01       	movw	r16, r6
    1c0c:	23 fc       	sbrc	r2, 3
    1c0e:	1b c0       	rjmp	.+54     	; 0x1c46 <vfprintf+0x1aa>
    1c10:	83 2d       	mov	r24, r3
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	48 16       	cp	r4, r24
    1c16:	59 06       	cpc	r5, r25
    1c18:	b0 f4       	brcc	.+44     	; 0x1c46 <vfprintf+0x1aa>
    1c1a:	b7 01       	movw	r22, r14
    1c1c:	80 e2       	ldi	r24, 0x20	; 32
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <fputc>
    1c24:	3a 94       	dec	r3
    1c26:	f4 cf       	rjmp	.-24     	; 0x1c10 <vfprintf+0x174>
    1c28:	f5 01       	movw	r30, r10
    1c2a:	27 fc       	sbrc	r2, 7
    1c2c:	85 91       	lpm	r24, Z+
    1c2e:	27 fe       	sbrs	r2, 7
    1c30:	81 91       	ld	r24, Z+
    1c32:	5f 01       	movw	r10, r30
    1c34:	b7 01       	movw	r22, r14
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <fputc>
    1c3c:	31 10       	cpse	r3, r1
    1c3e:	3a 94       	dec	r3
    1c40:	f1 e0       	ldi	r31, 0x01	; 1
    1c42:	4f 1a       	sub	r4, r31
    1c44:	51 08       	sbc	r5, r1
    1c46:	41 14       	cp	r4, r1
    1c48:	51 04       	cpc	r5, r1
    1c4a:	71 f7       	brne	.-36     	; 0x1c28 <vfprintf+0x18c>
    1c4c:	e5 c0       	rjmp	.+458    	; 0x1e18 <vfprintf+0x37c>
    1c4e:	84 36       	cpi	r24, 0x64	; 100
    1c50:	11 f0       	breq	.+4      	; 0x1c56 <vfprintf+0x1ba>
    1c52:	89 36       	cpi	r24, 0x69	; 105
    1c54:	39 f5       	brne	.+78     	; 0x1ca4 <vfprintf+0x208>
    1c56:	f8 01       	movw	r30, r16
    1c58:	27 ff       	sbrs	r18, 7
    1c5a:	07 c0       	rjmp	.+14     	; 0x1c6a <vfprintf+0x1ce>
    1c5c:	60 81       	ld	r22, Z
    1c5e:	71 81       	ldd	r23, Z+1	; 0x01
    1c60:	82 81       	ldd	r24, Z+2	; 0x02
    1c62:	93 81       	ldd	r25, Z+3	; 0x03
    1c64:	0c 5f       	subi	r16, 0xFC	; 252
    1c66:	1f 4f       	sbci	r17, 0xFF	; 255
    1c68:	08 c0       	rjmp	.+16     	; 0x1c7a <vfprintf+0x1de>
    1c6a:	60 81       	ld	r22, Z
    1c6c:	71 81       	ldd	r23, Z+1	; 0x01
    1c6e:	88 27       	eor	r24, r24
    1c70:	77 fd       	sbrc	r23, 7
    1c72:	80 95       	com	r24
    1c74:	98 2f       	mov	r25, r24
    1c76:	0e 5f       	subi	r16, 0xFE	; 254
    1c78:	1f 4f       	sbci	r17, 0xFF	; 255
    1c7a:	2f 76       	andi	r18, 0x6F	; 111
    1c7c:	b2 2e       	mov	r11, r18
    1c7e:	97 ff       	sbrs	r25, 7
    1c80:	09 c0       	rjmp	.+18     	; 0x1c94 <vfprintf+0x1f8>
    1c82:	90 95       	com	r25
    1c84:	80 95       	com	r24
    1c86:	70 95       	com	r23
    1c88:	61 95       	neg	r22
    1c8a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c8c:	8f 4f       	sbci	r24, 0xFF	; 255
    1c8e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c90:	20 68       	ori	r18, 0x80	; 128
    1c92:	b2 2e       	mov	r11, r18
    1c94:	2a e0       	ldi	r18, 0x0A	; 10
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	a4 01       	movw	r20, r8
    1c9a:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__ultoa_invert>
    1c9e:	a8 2e       	mov	r10, r24
    1ca0:	a8 18       	sub	r10, r8
    1ca2:	44 c0       	rjmp	.+136    	; 0x1d2c <vfprintf+0x290>
    1ca4:	85 37       	cpi	r24, 0x75	; 117
    1ca6:	29 f4       	brne	.+10     	; 0x1cb2 <vfprintf+0x216>
    1ca8:	2f 7e       	andi	r18, 0xEF	; 239
    1caa:	b2 2e       	mov	r11, r18
    1cac:	2a e0       	ldi	r18, 0x0A	; 10
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	25 c0       	rjmp	.+74     	; 0x1cfc <vfprintf+0x260>
    1cb2:	f2 2f       	mov	r31, r18
    1cb4:	f9 7f       	andi	r31, 0xF9	; 249
    1cb6:	bf 2e       	mov	r11, r31
    1cb8:	8f 36       	cpi	r24, 0x6F	; 111
    1cba:	c1 f0       	breq	.+48     	; 0x1cec <vfprintf+0x250>
    1cbc:	18 f4       	brcc	.+6      	; 0x1cc4 <vfprintf+0x228>
    1cbe:	88 35       	cpi	r24, 0x58	; 88
    1cc0:	79 f0       	breq	.+30     	; 0x1ce0 <vfprintf+0x244>
    1cc2:	b4 c0       	rjmp	.+360    	; 0x1e2c <vfprintf+0x390>
    1cc4:	80 37       	cpi	r24, 0x70	; 112
    1cc6:	19 f0       	breq	.+6      	; 0x1cce <vfprintf+0x232>
    1cc8:	88 37       	cpi	r24, 0x78	; 120
    1cca:	21 f0       	breq	.+8      	; 0x1cd4 <vfprintf+0x238>
    1ccc:	af c0       	rjmp	.+350    	; 0x1e2c <vfprintf+0x390>
    1cce:	2f 2f       	mov	r18, r31
    1cd0:	20 61       	ori	r18, 0x10	; 16
    1cd2:	b2 2e       	mov	r11, r18
    1cd4:	b4 fe       	sbrs	r11, 4
    1cd6:	0d c0       	rjmp	.+26     	; 0x1cf2 <vfprintf+0x256>
    1cd8:	8b 2d       	mov	r24, r11
    1cda:	84 60       	ori	r24, 0x04	; 4
    1cdc:	b8 2e       	mov	r11, r24
    1cde:	09 c0       	rjmp	.+18     	; 0x1cf2 <vfprintf+0x256>
    1ce0:	24 ff       	sbrs	r18, 4
    1ce2:	0a c0       	rjmp	.+20     	; 0x1cf8 <vfprintf+0x25c>
    1ce4:	9f 2f       	mov	r25, r31
    1ce6:	96 60       	ori	r25, 0x06	; 6
    1ce8:	b9 2e       	mov	r11, r25
    1cea:	06 c0       	rjmp	.+12     	; 0x1cf8 <vfprintf+0x25c>
    1cec:	28 e0       	ldi	r18, 0x08	; 8
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	05 c0       	rjmp	.+10     	; 0x1cfc <vfprintf+0x260>
    1cf2:	20 e1       	ldi	r18, 0x10	; 16
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	02 c0       	rjmp	.+4      	; 0x1cfc <vfprintf+0x260>
    1cf8:	20 e1       	ldi	r18, 0x10	; 16
    1cfa:	32 e0       	ldi	r19, 0x02	; 2
    1cfc:	f8 01       	movw	r30, r16
    1cfe:	b7 fe       	sbrs	r11, 7
    1d00:	07 c0       	rjmp	.+14     	; 0x1d10 <vfprintf+0x274>
    1d02:	60 81       	ld	r22, Z
    1d04:	71 81       	ldd	r23, Z+1	; 0x01
    1d06:	82 81       	ldd	r24, Z+2	; 0x02
    1d08:	93 81       	ldd	r25, Z+3	; 0x03
    1d0a:	0c 5f       	subi	r16, 0xFC	; 252
    1d0c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d0e:	06 c0       	rjmp	.+12     	; 0x1d1c <vfprintf+0x280>
    1d10:	60 81       	ld	r22, Z
    1d12:	71 81       	ldd	r23, Z+1	; 0x01
    1d14:	80 e0       	ldi	r24, 0x00	; 0
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	0e 5f       	subi	r16, 0xFE	; 254
    1d1a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d1c:	a4 01       	movw	r20, r8
    1d1e:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__ultoa_invert>
    1d22:	a8 2e       	mov	r10, r24
    1d24:	a8 18       	sub	r10, r8
    1d26:	fb 2d       	mov	r31, r11
    1d28:	ff 77       	andi	r31, 0x7F	; 127
    1d2a:	bf 2e       	mov	r11, r31
    1d2c:	b6 fe       	sbrs	r11, 6
    1d2e:	0b c0       	rjmp	.+22     	; 0x1d46 <vfprintf+0x2aa>
    1d30:	2b 2d       	mov	r18, r11
    1d32:	2e 7f       	andi	r18, 0xFE	; 254
    1d34:	a5 14       	cp	r10, r5
    1d36:	50 f4       	brcc	.+20     	; 0x1d4c <vfprintf+0x2b0>
    1d38:	b4 fe       	sbrs	r11, 4
    1d3a:	0a c0       	rjmp	.+20     	; 0x1d50 <vfprintf+0x2b4>
    1d3c:	b2 fc       	sbrc	r11, 2
    1d3e:	08 c0       	rjmp	.+16     	; 0x1d50 <vfprintf+0x2b4>
    1d40:	2b 2d       	mov	r18, r11
    1d42:	2e 7e       	andi	r18, 0xEE	; 238
    1d44:	05 c0       	rjmp	.+10     	; 0x1d50 <vfprintf+0x2b4>
    1d46:	7a 2c       	mov	r7, r10
    1d48:	2b 2d       	mov	r18, r11
    1d4a:	03 c0       	rjmp	.+6      	; 0x1d52 <vfprintf+0x2b6>
    1d4c:	7a 2c       	mov	r7, r10
    1d4e:	01 c0       	rjmp	.+2      	; 0x1d52 <vfprintf+0x2b6>
    1d50:	75 2c       	mov	r7, r5
    1d52:	24 ff       	sbrs	r18, 4
    1d54:	0d c0       	rjmp	.+26     	; 0x1d70 <vfprintf+0x2d4>
    1d56:	fe 01       	movw	r30, r28
    1d58:	ea 0d       	add	r30, r10
    1d5a:	f1 1d       	adc	r31, r1
    1d5c:	80 81       	ld	r24, Z
    1d5e:	80 33       	cpi	r24, 0x30	; 48
    1d60:	11 f4       	brne	.+4      	; 0x1d66 <vfprintf+0x2ca>
    1d62:	29 7e       	andi	r18, 0xE9	; 233
    1d64:	09 c0       	rjmp	.+18     	; 0x1d78 <vfprintf+0x2dc>
    1d66:	22 ff       	sbrs	r18, 2
    1d68:	06 c0       	rjmp	.+12     	; 0x1d76 <vfprintf+0x2da>
    1d6a:	73 94       	inc	r7
    1d6c:	73 94       	inc	r7
    1d6e:	04 c0       	rjmp	.+8      	; 0x1d78 <vfprintf+0x2dc>
    1d70:	82 2f       	mov	r24, r18
    1d72:	86 78       	andi	r24, 0x86	; 134
    1d74:	09 f0       	breq	.+2      	; 0x1d78 <vfprintf+0x2dc>
    1d76:	73 94       	inc	r7
    1d78:	23 fd       	sbrc	r18, 3
    1d7a:	13 c0       	rjmp	.+38     	; 0x1da2 <vfprintf+0x306>
    1d7c:	20 ff       	sbrs	r18, 0
    1d7e:	06 c0       	rjmp	.+12     	; 0x1d8c <vfprintf+0x2f0>
    1d80:	5a 2c       	mov	r5, r10
    1d82:	73 14       	cp	r7, r3
    1d84:	18 f4       	brcc	.+6      	; 0x1d8c <vfprintf+0x2f0>
    1d86:	53 0c       	add	r5, r3
    1d88:	57 18       	sub	r5, r7
    1d8a:	73 2c       	mov	r7, r3
    1d8c:	73 14       	cp	r7, r3
    1d8e:	68 f4       	brcc	.+26     	; 0x1daa <vfprintf+0x30e>
    1d90:	b7 01       	movw	r22, r14
    1d92:	80 e2       	ldi	r24, 0x20	; 32
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	2c 87       	std	Y+12, r18	; 0x0c
    1d98:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <fputc>
    1d9c:	73 94       	inc	r7
    1d9e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1da0:	f5 cf       	rjmp	.-22     	; 0x1d8c <vfprintf+0x2f0>
    1da2:	73 14       	cp	r7, r3
    1da4:	10 f4       	brcc	.+4      	; 0x1daa <vfprintf+0x30e>
    1da6:	37 18       	sub	r3, r7
    1da8:	01 c0       	rjmp	.+2      	; 0x1dac <vfprintf+0x310>
    1daa:	31 2c       	mov	r3, r1
    1dac:	24 ff       	sbrs	r18, 4
    1dae:	12 c0       	rjmp	.+36     	; 0x1dd4 <vfprintf+0x338>
    1db0:	b7 01       	movw	r22, r14
    1db2:	80 e3       	ldi	r24, 0x30	; 48
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	2c 87       	std	Y+12, r18	; 0x0c
    1db8:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <fputc>
    1dbc:	2c 85       	ldd	r18, Y+12	; 0x0c
    1dbe:	22 ff       	sbrs	r18, 2
    1dc0:	17 c0       	rjmp	.+46     	; 0x1df0 <vfprintf+0x354>
    1dc2:	21 ff       	sbrs	r18, 1
    1dc4:	03 c0       	rjmp	.+6      	; 0x1dcc <vfprintf+0x330>
    1dc6:	88 e5       	ldi	r24, 0x58	; 88
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	02 c0       	rjmp	.+4      	; 0x1dd0 <vfprintf+0x334>
    1dcc:	88 e7       	ldi	r24, 0x78	; 120
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	b7 01       	movw	r22, r14
    1dd2:	0c c0       	rjmp	.+24     	; 0x1dec <vfprintf+0x350>
    1dd4:	82 2f       	mov	r24, r18
    1dd6:	86 78       	andi	r24, 0x86	; 134
    1dd8:	59 f0       	breq	.+22     	; 0x1df0 <vfprintf+0x354>
    1dda:	21 fd       	sbrc	r18, 1
    1ddc:	02 c0       	rjmp	.+4      	; 0x1de2 <vfprintf+0x346>
    1dde:	80 e2       	ldi	r24, 0x20	; 32
    1de0:	01 c0       	rjmp	.+2      	; 0x1de4 <vfprintf+0x348>
    1de2:	8b e2       	ldi	r24, 0x2B	; 43
    1de4:	27 fd       	sbrc	r18, 7
    1de6:	8d e2       	ldi	r24, 0x2D	; 45
    1de8:	b7 01       	movw	r22, r14
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <fputc>
    1df0:	a5 14       	cp	r10, r5
    1df2:	38 f4       	brcc	.+14     	; 0x1e02 <vfprintf+0x366>
    1df4:	b7 01       	movw	r22, r14
    1df6:	80 e3       	ldi	r24, 0x30	; 48
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <fputc>
    1dfe:	5a 94       	dec	r5
    1e00:	f7 cf       	rjmp	.-18     	; 0x1df0 <vfprintf+0x354>
    1e02:	aa 94       	dec	r10
    1e04:	f4 01       	movw	r30, r8
    1e06:	ea 0d       	add	r30, r10
    1e08:	f1 1d       	adc	r31, r1
    1e0a:	80 81       	ld	r24, Z
    1e0c:	b7 01       	movw	r22, r14
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <fputc>
    1e14:	a1 10       	cpse	r10, r1
    1e16:	f5 cf       	rjmp	.-22     	; 0x1e02 <vfprintf+0x366>
    1e18:	33 20       	and	r3, r3
    1e1a:	09 f4       	brne	.+2      	; 0x1e1e <vfprintf+0x382>
    1e1c:	51 ce       	rjmp	.-862    	; 0x1ac0 <vfprintf+0x24>
    1e1e:	b7 01       	movw	r22, r14
    1e20:	80 e2       	ldi	r24, 0x20	; 32
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <fputc>
    1e28:	3a 94       	dec	r3
    1e2a:	f6 cf       	rjmp	.-20     	; 0x1e18 <vfprintf+0x37c>
    1e2c:	f7 01       	movw	r30, r14
    1e2e:	86 81       	ldd	r24, Z+6	; 0x06
    1e30:	97 81       	ldd	r25, Z+7	; 0x07
    1e32:	02 c0       	rjmp	.+4      	; 0x1e38 <vfprintf+0x39c>
    1e34:	8f ef       	ldi	r24, 0xFF	; 255
    1e36:	9f ef       	ldi	r25, 0xFF	; 255
    1e38:	2c 96       	adiw	r28, 0x0c	; 12
    1e3a:	e2 e1       	ldi	r30, 0x12	; 18
    1e3c:	0c 94 14 10 	jmp	0x2028	; 0x2028 <__epilogue_restores__>

00001e40 <strnlen_P>:
    1e40:	fc 01       	movw	r30, r24
    1e42:	05 90       	lpm	r0, Z+
    1e44:	61 50       	subi	r22, 0x01	; 1
    1e46:	70 40       	sbci	r23, 0x00	; 0
    1e48:	01 10       	cpse	r0, r1
    1e4a:	d8 f7       	brcc	.-10     	; 0x1e42 <strnlen_P+0x2>
    1e4c:	80 95       	com	r24
    1e4e:	90 95       	com	r25
    1e50:	8e 0f       	add	r24, r30
    1e52:	9f 1f       	adc	r25, r31
    1e54:	08 95       	ret

00001e56 <strnlen>:
    1e56:	fc 01       	movw	r30, r24
    1e58:	61 50       	subi	r22, 0x01	; 1
    1e5a:	70 40       	sbci	r23, 0x00	; 0
    1e5c:	01 90       	ld	r0, Z+
    1e5e:	01 10       	cpse	r0, r1
    1e60:	d8 f7       	brcc	.-10     	; 0x1e58 <strnlen+0x2>
    1e62:	80 95       	com	r24
    1e64:	90 95       	com	r25
    1e66:	8e 0f       	add	r24, r30
    1e68:	9f 1f       	adc	r25, r31
    1e6a:	08 95       	ret

00001e6c <fputc>:
    1e6c:	0f 93       	push	r16
    1e6e:	1f 93       	push	r17
    1e70:	cf 93       	push	r28
    1e72:	df 93       	push	r29
    1e74:	18 2f       	mov	r17, r24
    1e76:	09 2f       	mov	r16, r25
    1e78:	eb 01       	movw	r28, r22
    1e7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7c:	81 fd       	sbrc	r24, 1
    1e7e:	03 c0       	rjmp	.+6      	; 0x1e86 <fputc+0x1a>
    1e80:	8f ef       	ldi	r24, 0xFF	; 255
    1e82:	9f ef       	ldi	r25, 0xFF	; 255
    1e84:	20 c0       	rjmp	.+64     	; 0x1ec6 <fputc+0x5a>
    1e86:	82 ff       	sbrs	r24, 2
    1e88:	10 c0       	rjmp	.+32     	; 0x1eaa <fputc+0x3e>
    1e8a:	4e 81       	ldd	r20, Y+6	; 0x06
    1e8c:	5f 81       	ldd	r21, Y+7	; 0x07
    1e8e:	2c 81       	ldd	r18, Y+4	; 0x04
    1e90:	3d 81       	ldd	r19, Y+5	; 0x05
    1e92:	42 17       	cp	r20, r18
    1e94:	53 07       	cpc	r21, r19
    1e96:	7c f4       	brge	.+30     	; 0x1eb6 <fputc+0x4a>
    1e98:	e8 81       	ld	r30, Y
    1e9a:	f9 81       	ldd	r31, Y+1	; 0x01
    1e9c:	9f 01       	movw	r18, r30
    1e9e:	2f 5f       	subi	r18, 0xFF	; 255
    1ea0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ea2:	39 83       	std	Y+1, r19	; 0x01
    1ea4:	28 83       	st	Y, r18
    1ea6:	10 83       	st	Z, r17
    1ea8:	06 c0       	rjmp	.+12     	; 0x1eb6 <fputc+0x4a>
    1eaa:	e8 85       	ldd	r30, Y+8	; 0x08
    1eac:	f9 85       	ldd	r31, Y+9	; 0x09
    1eae:	81 2f       	mov	r24, r17
    1eb0:	09 95       	icall
    1eb2:	89 2b       	or	r24, r25
    1eb4:	29 f7       	brne	.-54     	; 0x1e80 <fputc+0x14>
    1eb6:	2e 81       	ldd	r18, Y+6	; 0x06
    1eb8:	3f 81       	ldd	r19, Y+7	; 0x07
    1eba:	2f 5f       	subi	r18, 0xFF	; 255
    1ebc:	3f 4f       	sbci	r19, 0xFF	; 255
    1ebe:	3f 83       	std	Y+7, r19	; 0x07
    1ec0:	2e 83       	std	Y+6, r18	; 0x06
    1ec2:	81 2f       	mov	r24, r17
    1ec4:	90 2f       	mov	r25, r16
    1ec6:	df 91       	pop	r29
    1ec8:	cf 91       	pop	r28
    1eca:	1f 91       	pop	r17
    1ecc:	0f 91       	pop	r16
    1ece:	08 95       	ret

00001ed0 <__ultoa_invert>:
    1ed0:	fa 01       	movw	r30, r20
    1ed2:	aa 27       	eor	r26, r26
    1ed4:	28 30       	cpi	r18, 0x08	; 8
    1ed6:	51 f1       	breq	.+84     	; 0x1f2c <__ultoa_invert+0x5c>
    1ed8:	20 31       	cpi	r18, 0x10	; 16
    1eda:	81 f1       	breq	.+96     	; 0x1f3c <__ultoa_invert+0x6c>
    1edc:	e8 94       	clt
    1ede:	6f 93       	push	r22
    1ee0:	6e 7f       	andi	r22, 0xFE	; 254
    1ee2:	6e 5f       	subi	r22, 0xFE	; 254
    1ee4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ee6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ee8:	9f 4f       	sbci	r25, 0xFF	; 255
    1eea:	af 4f       	sbci	r26, 0xFF	; 255
    1eec:	b1 e0       	ldi	r27, 0x01	; 1
    1eee:	3e d0       	rcall	.+124    	; 0x1f6c <__ultoa_invert+0x9c>
    1ef0:	b4 e0       	ldi	r27, 0x04	; 4
    1ef2:	3c d0       	rcall	.+120    	; 0x1f6c <__ultoa_invert+0x9c>
    1ef4:	67 0f       	add	r22, r23
    1ef6:	78 1f       	adc	r23, r24
    1ef8:	89 1f       	adc	r24, r25
    1efa:	9a 1f       	adc	r25, r26
    1efc:	a1 1d       	adc	r26, r1
    1efe:	68 0f       	add	r22, r24
    1f00:	79 1f       	adc	r23, r25
    1f02:	8a 1f       	adc	r24, r26
    1f04:	91 1d       	adc	r25, r1
    1f06:	a1 1d       	adc	r26, r1
    1f08:	6a 0f       	add	r22, r26
    1f0a:	71 1d       	adc	r23, r1
    1f0c:	81 1d       	adc	r24, r1
    1f0e:	91 1d       	adc	r25, r1
    1f10:	a1 1d       	adc	r26, r1
    1f12:	20 d0       	rcall	.+64     	; 0x1f54 <__ultoa_invert+0x84>
    1f14:	09 f4       	brne	.+2      	; 0x1f18 <__ultoa_invert+0x48>
    1f16:	68 94       	set
    1f18:	3f 91       	pop	r19
    1f1a:	2a e0       	ldi	r18, 0x0A	; 10
    1f1c:	26 9f       	mul	r18, r22
    1f1e:	11 24       	eor	r1, r1
    1f20:	30 19       	sub	r19, r0
    1f22:	30 5d       	subi	r19, 0xD0	; 208
    1f24:	31 93       	st	Z+, r19
    1f26:	de f6       	brtc	.-74     	; 0x1ede <__ultoa_invert+0xe>
    1f28:	cf 01       	movw	r24, r30
    1f2a:	08 95       	ret
    1f2c:	46 2f       	mov	r20, r22
    1f2e:	47 70       	andi	r20, 0x07	; 7
    1f30:	40 5d       	subi	r20, 0xD0	; 208
    1f32:	41 93       	st	Z+, r20
    1f34:	b3 e0       	ldi	r27, 0x03	; 3
    1f36:	0f d0       	rcall	.+30     	; 0x1f56 <__ultoa_invert+0x86>
    1f38:	c9 f7       	brne	.-14     	; 0x1f2c <__ultoa_invert+0x5c>
    1f3a:	f6 cf       	rjmp	.-20     	; 0x1f28 <__ultoa_invert+0x58>
    1f3c:	46 2f       	mov	r20, r22
    1f3e:	4f 70       	andi	r20, 0x0F	; 15
    1f40:	40 5d       	subi	r20, 0xD0	; 208
    1f42:	4a 33       	cpi	r20, 0x3A	; 58
    1f44:	18 f0       	brcs	.+6      	; 0x1f4c <__ultoa_invert+0x7c>
    1f46:	49 5d       	subi	r20, 0xD9	; 217
    1f48:	31 fd       	sbrc	r19, 1
    1f4a:	40 52       	subi	r20, 0x20	; 32
    1f4c:	41 93       	st	Z+, r20
    1f4e:	02 d0       	rcall	.+4      	; 0x1f54 <__ultoa_invert+0x84>
    1f50:	a9 f7       	brne	.-22     	; 0x1f3c <__ultoa_invert+0x6c>
    1f52:	ea cf       	rjmp	.-44     	; 0x1f28 <__ultoa_invert+0x58>
    1f54:	b4 e0       	ldi	r27, 0x04	; 4
    1f56:	a6 95       	lsr	r26
    1f58:	97 95       	ror	r25
    1f5a:	87 95       	ror	r24
    1f5c:	77 95       	ror	r23
    1f5e:	67 95       	ror	r22
    1f60:	ba 95       	dec	r27
    1f62:	c9 f7       	brne	.-14     	; 0x1f56 <__ultoa_invert+0x86>
    1f64:	00 97       	sbiw	r24, 0x00	; 0
    1f66:	61 05       	cpc	r22, r1
    1f68:	71 05       	cpc	r23, r1
    1f6a:	08 95       	ret
    1f6c:	9b 01       	movw	r18, r22
    1f6e:	ac 01       	movw	r20, r24
    1f70:	0a 2e       	mov	r0, r26
    1f72:	06 94       	lsr	r0
    1f74:	57 95       	ror	r21
    1f76:	47 95       	ror	r20
    1f78:	37 95       	ror	r19
    1f7a:	27 95       	ror	r18
    1f7c:	ba 95       	dec	r27
    1f7e:	c9 f7       	brne	.-14     	; 0x1f72 <__ultoa_invert+0xa2>
    1f80:	62 0f       	add	r22, r18
    1f82:	73 1f       	adc	r23, r19
    1f84:	84 1f       	adc	r24, r20
    1f86:	95 1f       	adc	r25, r21
    1f88:	a0 1d       	adc	r26, r0
    1f8a:	08 95       	ret

00001f8c <__divmodsi4>:
    1f8c:	05 2e       	mov	r0, r21
    1f8e:	97 fb       	bst	r25, 7
    1f90:	1e f4       	brtc	.+6      	; 0x1f98 <__divmodsi4+0xc>
    1f92:	00 94       	com	r0
    1f94:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <__negsi2>
    1f98:	57 fd       	sbrc	r21, 7
    1f9a:	07 d0       	rcall	.+14     	; 0x1faa <__divmodsi4_neg2>
    1f9c:	0e 94 2f 10 	call	0x205e	; 0x205e <__udivmodsi4>
    1fa0:	07 fc       	sbrc	r0, 7
    1fa2:	03 d0       	rcall	.+6      	; 0x1faa <__divmodsi4_neg2>
    1fa4:	4e f4       	brtc	.+18     	; 0x1fb8 <__divmodsi4_exit>
    1fa6:	0c 94 dd 0f 	jmp	0x1fba	; 0x1fba <__negsi2>

00001faa <__divmodsi4_neg2>:
    1faa:	50 95       	com	r21
    1fac:	40 95       	com	r20
    1fae:	30 95       	com	r19
    1fb0:	21 95       	neg	r18
    1fb2:	3f 4f       	sbci	r19, 0xFF	; 255
    1fb4:	4f 4f       	sbci	r20, 0xFF	; 255
    1fb6:	5f 4f       	sbci	r21, 0xFF	; 255

00001fb8 <__divmodsi4_exit>:
    1fb8:	08 95       	ret

00001fba <__negsi2>:
    1fba:	90 95       	com	r25
    1fbc:	80 95       	com	r24
    1fbe:	70 95       	com	r23
    1fc0:	61 95       	neg	r22
    1fc2:	7f 4f       	sbci	r23, 0xFF	; 255
    1fc4:	8f 4f       	sbci	r24, 0xFF	; 255
    1fc6:	9f 4f       	sbci	r25, 0xFF	; 255
    1fc8:	08 95       	ret

00001fca <__muluhisi3>:
    1fca:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__umulhisi3>
    1fce:	a5 9f       	mul	r26, r21
    1fd0:	90 0d       	add	r25, r0
    1fd2:	b4 9f       	mul	r27, r20
    1fd4:	90 0d       	add	r25, r0
    1fd6:	a4 9f       	mul	r26, r20
    1fd8:	80 0d       	add	r24, r0
    1fda:	91 1d       	adc	r25, r1
    1fdc:	11 24       	eor	r1, r1
    1fde:	08 95       	ret

00001fe0 <__mulshisi3>:
    1fe0:	b7 ff       	sbrs	r27, 7
    1fe2:	0c 94 e5 0f 	jmp	0x1fca	; 0x1fca <__muluhisi3>

00001fe6 <__mulohisi3>:
    1fe6:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <__muluhisi3>
    1fea:	82 1b       	sub	r24, r18
    1fec:	93 0b       	sbc	r25, r19
    1fee:	08 95       	ret

00001ff0 <__prologue_saves__>:
    1ff0:	2f 92       	push	r2
    1ff2:	3f 92       	push	r3
    1ff4:	4f 92       	push	r4
    1ff6:	5f 92       	push	r5
    1ff8:	6f 92       	push	r6
    1ffa:	7f 92       	push	r7
    1ffc:	8f 92       	push	r8
    1ffe:	9f 92       	push	r9
    2000:	af 92       	push	r10
    2002:	bf 92       	push	r11
    2004:	cf 92       	push	r12
    2006:	df 92       	push	r13
    2008:	ef 92       	push	r14
    200a:	ff 92       	push	r15
    200c:	0f 93       	push	r16
    200e:	1f 93       	push	r17
    2010:	cf 93       	push	r28
    2012:	df 93       	push	r29
    2014:	cd b7       	in	r28, 0x3d	; 61
    2016:	de b7       	in	r29, 0x3e	; 62
    2018:	ca 1b       	sub	r28, r26
    201a:	db 0b       	sbc	r29, r27
    201c:	0f b6       	in	r0, 0x3f	; 63
    201e:	f8 94       	cli
    2020:	de bf       	out	0x3e, r29	; 62
    2022:	0f be       	out	0x3f, r0	; 63
    2024:	cd bf       	out	0x3d, r28	; 61
    2026:	09 94       	ijmp

00002028 <__epilogue_restores__>:
    2028:	2a 88       	ldd	r2, Y+18	; 0x12
    202a:	39 88       	ldd	r3, Y+17	; 0x11
    202c:	48 88       	ldd	r4, Y+16	; 0x10
    202e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2030:	6e 84       	ldd	r6, Y+14	; 0x0e
    2032:	7d 84       	ldd	r7, Y+13	; 0x0d
    2034:	8c 84       	ldd	r8, Y+12	; 0x0c
    2036:	9b 84       	ldd	r9, Y+11	; 0x0b
    2038:	aa 84       	ldd	r10, Y+10	; 0x0a
    203a:	b9 84       	ldd	r11, Y+9	; 0x09
    203c:	c8 84       	ldd	r12, Y+8	; 0x08
    203e:	df 80       	ldd	r13, Y+7	; 0x07
    2040:	ee 80       	ldd	r14, Y+6	; 0x06
    2042:	fd 80       	ldd	r15, Y+5	; 0x05
    2044:	0c 81       	ldd	r16, Y+4	; 0x04
    2046:	1b 81       	ldd	r17, Y+3	; 0x03
    2048:	aa 81       	ldd	r26, Y+2	; 0x02
    204a:	b9 81       	ldd	r27, Y+1	; 0x01
    204c:	ce 0f       	add	r28, r30
    204e:	d1 1d       	adc	r29, r1
    2050:	0f b6       	in	r0, 0x3f	; 63
    2052:	f8 94       	cli
    2054:	de bf       	out	0x3e, r29	; 62
    2056:	0f be       	out	0x3f, r0	; 63
    2058:	cd bf       	out	0x3d, r28	; 61
    205a:	ed 01       	movw	r28, r26
    205c:	08 95       	ret

0000205e <__udivmodsi4>:
    205e:	a1 e2       	ldi	r26, 0x21	; 33
    2060:	1a 2e       	mov	r1, r26
    2062:	aa 1b       	sub	r26, r26
    2064:	bb 1b       	sub	r27, r27
    2066:	fd 01       	movw	r30, r26
    2068:	0d c0       	rjmp	.+26     	; 0x2084 <__udivmodsi4_ep>

0000206a <__udivmodsi4_loop>:
    206a:	aa 1f       	adc	r26, r26
    206c:	bb 1f       	adc	r27, r27
    206e:	ee 1f       	adc	r30, r30
    2070:	ff 1f       	adc	r31, r31
    2072:	a2 17       	cp	r26, r18
    2074:	b3 07       	cpc	r27, r19
    2076:	e4 07       	cpc	r30, r20
    2078:	f5 07       	cpc	r31, r21
    207a:	20 f0       	brcs	.+8      	; 0x2084 <__udivmodsi4_ep>
    207c:	a2 1b       	sub	r26, r18
    207e:	b3 0b       	sbc	r27, r19
    2080:	e4 0b       	sbc	r30, r20
    2082:	f5 0b       	sbc	r31, r21

00002084 <__udivmodsi4_ep>:
    2084:	66 1f       	adc	r22, r22
    2086:	77 1f       	adc	r23, r23
    2088:	88 1f       	adc	r24, r24
    208a:	99 1f       	adc	r25, r25
    208c:	1a 94       	dec	r1
    208e:	69 f7       	brne	.-38     	; 0x206a <__udivmodsi4_loop>
    2090:	60 95       	com	r22
    2092:	70 95       	com	r23
    2094:	80 95       	com	r24
    2096:	90 95       	com	r25
    2098:	9b 01       	movw	r18, r22
    209a:	ac 01       	movw	r20, r24
    209c:	bd 01       	movw	r22, r26
    209e:	cf 01       	movw	r24, r30
    20a0:	08 95       	ret

000020a2 <__umulhisi3>:
    20a2:	a2 9f       	mul	r26, r18
    20a4:	b0 01       	movw	r22, r0
    20a6:	b3 9f       	mul	r27, r19
    20a8:	c0 01       	movw	r24, r0
    20aa:	a3 9f       	mul	r26, r19
    20ac:	70 0d       	add	r23, r0
    20ae:	81 1d       	adc	r24, r1
    20b0:	11 24       	eor	r1, r1
    20b2:	91 1d       	adc	r25, r1
    20b4:	b2 9f       	mul	r27, r18
    20b6:	70 0d       	add	r23, r0
    20b8:	81 1d       	adc	r24, r1
    20ba:	11 24       	eor	r1, r1
    20bc:	91 1d       	adc	r25, r1
    20be:	08 95       	ret

000020c0 <_exit>:
    20c0:	f8 94       	cli

000020c2 <__stop_program>:
    20c2:	ff cf       	rjmp	.-2      	; 0x20c2 <__stop_program>
