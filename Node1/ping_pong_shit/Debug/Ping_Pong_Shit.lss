
Ping_Pong_Shit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000024e  00800100  00001488  0000151c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001488  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  0080034e  0080034e  0000176a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000176a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002e0  00000000  00000000  000017c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002ca7  00000000  00000000  00001aa6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001161  00000000  00000000  0000474d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001222  00000000  00000000  000058ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000007b8  00000000  00000000  00006ad0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000846  00000000  00000000  00007288  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001611  00000000  00000000  00007ace  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000288  00000000  00000000  000090df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__vector_7>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <SRAM_test+0x128>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	13 e0       	ldi	r17, 0x03	; 3
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e8 e8       	ldi	r30, 0x88	; 136
     37c:	f4 e1       	ldi	r31, 0x14	; 20
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	ae 34       	cpi	r26, 0x4E	; 78
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	23 e0       	ldi	r18, 0x03	; 3
     38c:	ae e4       	ldi	r26, 0x4E	; 78
     38e:	b3 e0       	ldi	r27, 0x03	; 3
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a5 36       	cpi	r26, 0x65	; 101
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 02 06 	call	0xc04	; 0xc04 <main>
     39e:	0c 94 42 0a 	jmp	0x1484	; 0x1484 <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <can_init>:
can_message_t joy_message;*/


void can_init(){
	//Enter config mode
	mcp2515_init();
     3a6:	0e 94 af 03 	call	0x75e	; 0x75e <mcp2515_init>
	printf("CANCTRL (expect 0x87): 0x%02x\n", mcp2515_read(MCP_CANCTRL));
     3aa:	8f e0       	ldi	r24, 0x0F	; 15
     3ac:	0e 94 9d 03 	call	0x73a	; 0x73a <mcp2515_read>
     3b0:	1f 92       	push	r1
     3b2:	8f 93       	push	r24
     3b4:	84 e2       	ldi	r24, 0x24	; 36
     3b6:	91 e0       	ldi	r25, 0x01	; 1
     3b8:	9f 93       	push	r25
     3ba:	8f 93       	push	r24
     3bc:	0e 94 ef 06 	call	0xdde	; 0xdde <printf>

	//RX0 - Turn mask/filter off
	mcp2515_bit_modify(MCP_RXB0CTRL, 0b01100000, 0xFF);
     3c0:	4f ef       	ldi	r20, 0xFF	; 255
     3c2:	60 e6       	ldi	r22, 0x60	; 96
     3c4:	80 e6       	ldi	r24, 0x60	; 96
     3c6:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <mcp2515_bit_modify>
	//RX0 - Disable rollover
	mcp2515_bit_modify(MCP_RXB0CTRL, 0b00000100, 0);
     3ca:	40 e0       	ldi	r20, 0x00	; 0
     3cc:	64 e0       	ldi	r22, 0x04	; 4
     3ce:	80 e6       	ldi	r24, 0x60	; 96
     3d0:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <mcp2515_bit_modify>

	mcp2515_bit_modify(MCP_CANINTE, MCP_RX0IF, 0xff);
     3d4:	4f ef       	ldi	r20, 0xFF	; 255
     3d6:	61 e0       	ldi	r22, 0x01	; 1
     3d8:	8b e2       	ldi	r24, 0x2B	; 43
     3da:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <mcp2515_bit_modify>
	
	//Enable normal mode
	mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
     3de:	40 e0       	ldi	r20, 0x00	; 0
     3e0:	60 ee       	ldi	r22, 0xE0	; 224
     3e2:	8f e0       	ldi	r24, 0x0F	; 15
     3e4:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <mcp2515_bit_modify>
     3e8:	0f 90       	pop	r0
     3ea:	0f 90       	pop	r0
     3ec:	0f 90       	pop	r0
     3ee:	0f 90       	pop	r0
     3f0:	08 95       	ret

000003f2 <can_transmit_complete>:
	return 1;
}

int can_transmit_complete(){
	//Check if TX buffer is not pending
	return (!test_bit(mcp2515_read(MCP_TXB0CTRL), 3));
     3f2:	80 e3       	ldi	r24, 0x30	; 48
     3f4:	0e 94 9d 03 	call	0x73a	; 0x73a <mcp2515_read>
     3f8:	86 95       	lsr	r24
     3fa:	86 95       	lsr	r24
     3fc:	86 95       	lsr	r24
     3fe:	91 e0       	ldi	r25, 0x01	; 1
     400:	89 27       	eor	r24, r25
}
     402:	81 70       	andi	r24, 0x01	; 1
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	08 95       	ret

00000408 <can_message_send>:
	//Enable normal mode
	mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);

}

void can_message_send(can_message_t* message){
     408:	1f 93       	push	r17
     40a:	cf 93       	push	r28
     40c:	df 93       	push	r29
     40e:	ec 01       	movw	r28, r24
	while (!can_transmit_complete()) {}
     410:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <can_transmit_complete>
     414:	89 2b       	or	r24, r25
     416:	e1 f3       	breq	.-8      	; 0x410 <can_message_send+0x8>
	//Use standard ID to set the message
	mcp2515_write(MCP_TXB0SIDH, (int8_t)(message->id >> 3));
     418:	68 81       	ld	r22, Y
     41a:	79 81       	ldd	r23, Y+1	; 0x01
     41c:	75 95       	asr	r23
     41e:	67 95       	ror	r22
     420:	75 95       	asr	r23
     422:	67 95       	ror	r22
     424:	75 95       	asr	r23
     426:	67 95       	ror	r22
     428:	81 e3       	ldi	r24, 0x31	; 49
     42a:	0e 94 57 03 	call	0x6ae	; 0x6ae <mcp2515_write>
	mcp2515_write(MCP_TXB0SIDL, (int8_t)(message->id << 5));
     42e:	68 81       	ld	r22, Y
     430:	79 81       	ldd	r23, Y+1	; 0x01
     432:	66 0f       	add	r22, r22
     434:	77 1f       	adc	r23, r23
     436:	62 95       	swap	r22
     438:	72 95       	swap	r23
     43a:	70 7f       	andi	r23, 0xF0	; 240
     43c:	76 27       	eor	r23, r22
     43e:	60 7f       	andi	r22, 0xF0	; 240
     440:	76 27       	eor	r23, r22
     442:	82 e3       	ldi	r24, 0x32	; 50
     444:	0e 94 57 03 	call	0x6ae	; 0x6ae <mcp2515_write>

	//Set correct data lenght and use data frame, max 8 bytes
	mcp2515_write(MCP_TXB0DLC, (0x0F) & (message->length));
     448:	6a 81       	ldd	r22, Y+2	; 0x02
     44a:	6f 70       	andi	r22, 0x0F	; 15
     44c:	85 e3       	ldi	r24, 0x35	; 53
     44e:	0e 94 57 03 	call	0x6ae	; 0x6ae <mcp2515_write>

	//For loop to set data bytes
	for (uint8_t i = 0; i < message->length; i++) {
     452:	8a 81       	ldd	r24, Y+2	; 0x02
     454:	88 23       	and	r24, r24
     456:	69 f0       	breq	.+26     	; 0x472 <can_message_send+0x6a>
     458:	10 e0       	ldi	r17, 0x00	; 0
		mcp2515_write(MCP_TXB0D0 + i, message->data[i]);
     45a:	fe 01       	movw	r30, r28
     45c:	e1 0f       	add	r30, r17
     45e:	f1 1d       	adc	r31, r1
     460:	63 81       	ldd	r22, Z+3	; 0x03
     462:	86 e3       	ldi	r24, 0x36	; 54
     464:	81 0f       	add	r24, r17
     466:	0e 94 57 03 	call	0x6ae	; 0x6ae <mcp2515_write>

	//Set correct data lenght and use data frame, max 8 bytes
	mcp2515_write(MCP_TXB0DLC, (0x0F) & (message->length));

	//For loop to set data bytes
	for (uint8_t i = 0; i < message->length; i++) {
     46a:	1f 5f       	subi	r17, 0xFF	; 255
     46c:	8a 81       	ldd	r24, Y+2	; 0x02
     46e:	18 17       	cp	r17, r24
     470:	a0 f3       	brcs	.-24     	; 0x45a <can_message_send+0x52>
		mcp2515_write(MCP_TXB0D0 + i, message->data[i]);
	}

	mcp2515_request_to_send(1);
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <mcp2515_request_to_send>
}
     478:	df 91       	pop	r29
     47a:	cf 91       	pop	r28
     47c:	1f 91       	pop	r17
     47e:	08 95       	ret

00000480 <can_data_receive>:
void can_interrupt_vector(){
	//Clear interrupt flag
	rx_flag = 1;
}*/

can_message_t can_data_receive(){
     480:	9f 92       	push	r9
     482:	af 92       	push	r10
     484:	bf 92       	push	r11
     486:	cf 92       	push	r12
     488:	df 92       	push	r13
     48a:	ef 92       	push	r14
     48c:	ff 92       	push	r15
     48e:	0f 93       	push	r16
     490:	1f 93       	push	r17
     492:	cf 93       	push	r28
     494:	df 93       	push	r29
     496:	cd b7       	in	r28, 0x3d	; 61
     498:	de b7       	in	r29, 0x3e	; 62
     49a:	2b 97       	sbiw	r28, 0x0b	; 11
     49c:	0f b6       	in	r0, 0x3f	; 63
     49e:	f8 94       	cli
     4a0:	de bf       	out	0x3e, r29	; 62
     4a2:	0f be       	out	0x3f, r0	; 63
     4a4:	cd bf       	out	0x3d, r28	; 61
     4a6:	7c 01       	movw	r14, r24
	can_message_t message;
	
	//Check if RX buffer have message
	//if (rx_flag == 1) {
	if (mcp2515_read(MCP_CANINTF) & MCP_RX0IF) {
     4a8:	8c e2       	ldi	r24, 0x2C	; 44
     4aa:	0e 94 9d 03 	call	0x73a	; 0x73a <mcp2515_read>
     4ae:	80 ff       	sbrs	r24, 0
     4b0:	33 c0       	rjmp	.+102    	; 0x518 <__stack+0x19>
		//Get ID if message
		message.id = (mcp2515_read(MCP_RXB0SIDH) << 3) | (mcp2515_read(MCP_RXB0SIDL) >> 5);
     4b2:	81 e6       	ldi	r24, 0x61	; 97
     4b4:	0e 94 9d 03 	call	0x73a	; 0x73a <mcp2515_read>
     4b8:	c8 2e       	mov	r12, r24
     4ba:	82 e6       	ldi	r24, 0x62	; 98
     4bc:	0e 94 9d 03 	call	0x73a	; 0x73a <mcp2515_read>
     4c0:	82 95       	swap	r24
     4c2:	86 95       	lsr	r24
     4c4:	87 70       	andi	r24, 0x07	; 7
     4c6:	d1 2c       	mov	r13, r1
     4c8:	cc 0c       	add	r12, r12
     4ca:	dd 1c       	adc	r13, r13
     4cc:	cc 0c       	add	r12, r12
     4ce:	dd 1c       	adc	r13, r13
     4d0:	cc 0c       	add	r12, r12
     4d2:	dd 1c       	adc	r13, r13
     4d4:	c8 2a       	or	r12, r24

		//Get lenght of message
		message.length = (0x0F) & (mcp2515_read(MCP_RXB0DLC));
     4d6:	85 e6       	ldi	r24, 0x65	; 101
     4d8:	0e 94 9d 03 	call	0x73a	; 0x73a <mcp2515_read>
     4dc:	8f 70       	andi	r24, 0x0F	; 15
     4de:	98 2e       	mov	r9, r24

		//Get message data
		for(uint8_t i = 0; i < message.length; i++){
     4e0:	a9 f0       	breq	.+42     	; 0x50c <__stack+0xd>
     4e2:	8e 01       	movw	r16, r28
     4e4:	0c 5f       	subi	r16, 0xFC	; 252
     4e6:	1f 4f       	sbci	r17, 0xFF	; 255
     4e8:	0f 2e       	mov	r0, r31
     4ea:	f6 e6       	ldi	r31, 0x66	; 102
     4ec:	af 2e       	mov	r10, r31
     4ee:	f0 2d       	mov	r31, r0
     4f0:	a8 0e       	add	r10, r24
     4f2:	0f 2e       	mov	r0, r31
     4f4:	f6 e6       	ldi	r31, 0x66	; 102
     4f6:	bf 2e       	mov	r11, r31
     4f8:	f0 2d       	mov	r31, r0
			message.data[i] = mcp2515_read(MCP_RXB0D0 + i);
     4fa:	8b 2d       	mov	r24, r11
     4fc:	0e 94 9d 03 	call	0x73a	; 0x73a <mcp2515_read>
     500:	f8 01       	movw	r30, r16
     502:	81 93       	st	Z+, r24
     504:	8f 01       	movw	r16, r30
     506:	b3 94       	inc	r11

		//Get lenght of message
		message.length = (0x0F) & (mcp2515_read(MCP_RXB0DLC));

		//Get message data
		for(uint8_t i = 0; i < message.length; i++){
     508:	ba 10       	cpse	r11, r10
     50a:	f7 cf       	rjmp	.-18     	; 0x4fa <can_data_receive+0x7a>
			message.data[i] = mcp2515_read(MCP_RXB0D0 + i);
		}

		//Clear flag
		mcp2515_bit_modify(MCP_CANINTF, MCP_RX0IF, 0);
     50c:	40 e0       	ldi	r20, 0x00	; 0
     50e:	61 e0       	ldi	r22, 0x01	; 1
     510:	8c e2       	ldi	r24, 0x2C	; 44
     512:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <mcp2515_bit_modify>
     516:	03 c0       	rjmp	.+6      	; 0x51e <__stack+0x1f>
	} else {
		message.id = -1;
     518:	cc 24       	eor	r12, r12
     51a:	ca 94       	dec	r12
     51c:	dc 2c       	mov	r13, r12
	}

	return message;
     51e:	da 82       	std	Y+2, r13	; 0x02
     520:	c9 82       	std	Y+1, r12	; 0x01
     522:	9b 82       	std	Y+3, r9	; 0x03
     524:	8b e0       	ldi	r24, 0x0B	; 11
     526:	fe 01       	movw	r30, r28
     528:	31 96       	adiw	r30, 0x01	; 1
     52a:	d7 01       	movw	r26, r14
     52c:	01 90       	ld	r0, Z+
     52e:	0d 92       	st	X+, r0
     530:	8a 95       	dec	r24
     532:	e1 f7       	brne	.-8      	; 0x52c <__stack+0x2d>
}
     534:	c7 01       	movw	r24, r14
     536:	2b 96       	adiw	r28, 0x0b	; 11
     538:	0f b6       	in	r0, 0x3f	; 63
     53a:	f8 94       	cli
     53c:	de bf       	out	0x3e, r29	; 62
     53e:	0f be       	out	0x3f, r0	; 63
     540:	cd bf       	out	0x3d, r28	; 61
     542:	df 91       	pop	r29
     544:	cf 91       	pop	r28
     546:	1f 91       	pop	r17
     548:	0f 91       	pop	r16
     54a:	ff 90       	pop	r15
     54c:	ef 90       	pop	r14
     54e:	df 90       	pop	r13
     550:	cf 90       	pop	r12
     552:	bf 90       	pop	r11
     554:	af 90       	pop	r10
     556:	9f 90       	pop	r9
     558:	08 95       	ret

0000055a <can_print_message>:
		flash_diode();
		_delay_ms(1000);
	}
}

void can_print_message(const can_message_t *message) {
     55a:	ff 92       	push	r15
     55c:	0f 93       	push	r16
     55e:	1f 93       	push	r17
     560:	cf 93       	push	r28
     562:	df 93       	push	r29
     564:	ec 01       	movw	r28, r24
	if (message->id == -1) {
     566:	88 81       	ld	r24, Y
     568:	99 81       	ldd	r25, Y+1	; 0x01
     56a:	8f 3f       	cpi	r24, 0xFF	; 255
     56c:	2f ef       	ldi	r18, 0xFF	; 255
     56e:	92 07       	cpc	r25, r18
     570:	29 f4       	brne	.+10     	; 0x57c <can_print_message+0x22>
		printf("No message in buffer\n\n");
     572:	83 e4       	ldi	r24, 0x43	; 67
     574:	91 e0       	ldi	r25, 0x01	; 1
     576:	0e 94 03 07 	call	0xe06	; 0xe06 <puts>
     57a:	41 c0       	rjmp	.+130    	; 0x5fe <can_print_message+0xa4>
		} else {
		printf("Message id: %d\nMessage length %d\n", message->id, message->length);
     57c:	2a 81       	ldd	r18, Y+2	; 0x02
     57e:	1f 92       	push	r1
     580:	2f 93       	push	r18
     582:	9f 93       	push	r25
     584:	8f 93       	push	r24
     586:	89 e5       	ldi	r24, 0x59	; 89
     588:	91 e0       	ldi	r25, 0x01	; 1
     58a:	9f 93       	push	r25
     58c:	8f 93       	push	r24
     58e:	0e 94 ef 06 	call	0xdde	; 0xdde <printf>
		printf("Message data: [ %d", message->data[0]);
     592:	2b 81       	ldd	r18, Y+3	; 0x03
     594:	82 2f       	mov	r24, r18
     596:	99 27       	eor	r25, r25
     598:	87 fd       	sbrc	r24, 7
     59a:	90 95       	com	r25
     59c:	9f 93       	push	r25
     59e:	2f 93       	push	r18
     5a0:	8b e7       	ldi	r24, 0x7B	; 123
     5a2:	91 e0       	ldi	r25, 0x01	; 1
     5a4:	9f 93       	push	r25
     5a6:	8f 93       	push	r24
     5a8:	0e 94 ef 06 	call	0xdde	; 0xdde <printf>
		for(uint8_t i = 1; i < message->length; i++) {
     5ac:	8d b7       	in	r24, 0x3d	; 61
     5ae:	9e b7       	in	r25, 0x3e	; 62
     5b0:	0a 96       	adiw	r24, 0x0a	; 10
     5b2:	0f b6       	in	r0, 0x3f	; 63
     5b4:	f8 94       	cli
     5b6:	9e bf       	out	0x3e, r25	; 62
     5b8:	0f be       	out	0x3f, r0	; 63
     5ba:	8d bf       	out	0x3d, r24	; 61
     5bc:	8a 81       	ldd	r24, Y+2	; 0x02
     5be:	82 30       	cpi	r24, 0x02	; 2
     5c0:	d0 f0       	brcs	.+52     	; 0x5f6 <can_print_message+0x9c>
     5c2:	ff 24       	eor	r15, r15
     5c4:	f3 94       	inc	r15
			printf(", %d",message->data[i]);
     5c6:	0e e8       	ldi	r16, 0x8E	; 142
     5c8:	11 e0       	ldi	r17, 0x01	; 1
     5ca:	fe 01       	movw	r30, r28
     5cc:	ef 0d       	add	r30, r15
     5ce:	f1 1d       	adc	r31, r1
     5d0:	23 81       	ldd	r18, Z+3	; 0x03
     5d2:	82 2f       	mov	r24, r18
     5d4:	99 27       	eor	r25, r25
     5d6:	87 fd       	sbrc	r24, 7
     5d8:	90 95       	com	r25
     5da:	9f 93       	push	r25
     5dc:	2f 93       	push	r18
     5de:	1f 93       	push	r17
     5e0:	0f 93       	push	r16
     5e2:	0e 94 ef 06 	call	0xdde	; 0xdde <printf>
	if (message->id == -1) {
		printf("No message in buffer\n\n");
		} else {
		printf("Message id: %d\nMessage length %d\n", message->id, message->length);
		printf("Message data: [ %d", message->data[0]);
		for(uint8_t i = 1; i < message->length; i++) {
     5e6:	f3 94       	inc	r15
     5e8:	0f 90       	pop	r0
     5ea:	0f 90       	pop	r0
     5ec:	0f 90       	pop	r0
     5ee:	0f 90       	pop	r0
     5f0:	8a 81       	ldd	r24, Y+2	; 0x02
     5f2:	f8 16       	cp	r15, r24
     5f4:	50 f3       	brcs	.-44     	; 0x5ca <can_print_message+0x70>
			printf(", %d",message->data[i]);
		}
		printf(" ]\n\n");
     5f6:	83 e9       	ldi	r24, 0x93	; 147
     5f8:	91 e0       	ldi	r25, 0x01	; 1
     5fa:	0e 94 03 07 	call	0xe06	; 0xe06 <puts>
	}
}
     5fe:	df 91       	pop	r29
     600:	cf 91       	pop	r28
     602:	1f 91       	pop	r17
     604:	0f 91       	pop	r16
     606:	ff 90       	pop	r15
     608:	08 95       	ret

0000060a <can_joystick_transmit>:
	}
}

void can_joystick_transmit(unsigned int id){
	static can_message_t joy_message;
	joy_message.id = id; 
     60a:	90 93 4f 03 	sts	0x034F, r25
     60e:	80 93 4e 03 	sts	0x034E, r24
	joy_message.length = 2;
     612:	82 e0       	ldi	r24, 0x02	; 2
     614:	80 93 50 03 	sts	0x0350, r24
	
	joy_message.data[0] = read_converted(JOYSTICK_X);
     618:	80 e0       	ldi	r24, 0x00	; 0
     61a:	0e 94 35 03 	call	0x66a	; 0x66a <read_converted>
     61e:	80 93 51 03 	sts	0x0351, r24
	joy_message.data[1] = read_converted(JOYSTICK_Y);
     622:	81 e0       	ldi	r24, 0x01	; 1
     624:	0e 94 35 03 	call	0x66a	; 0x66a <read_converted>
     628:	80 93 52 03 	sts	0x0352, r24

	//can_print_message(&joy_message);

	can_message_send(&joy_message);
     62c:	8e e4       	ldi	r24, 0x4E	; 78
     62e:	93 e0       	ldi	r25, 0x03	; 3
     630:	0e 94 04 02 	call	0x408	; 0x408 <can_message_send>
     634:	08 95       	ret

00000636 <joystick_read>:
			 v;
}

unsigned int joystick_read(joy_channel channel){
	volatile char* ext_ram = (char*) 0x1400;
	ext_ram[0] = 0x4 + channel;
     636:	8c 5f       	subi	r24, 0xFC	; 252
     638:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     63c:	81 e4       	ldi	r24, 0x41	; 65
     63e:	8a 95       	dec	r24
     640:	f1 f7       	brne	.-4      	; 0x63e <joystick_read+0x8>
     642:	00 c0       	rjmp	.+0      	; 0x644 <joystick_read+0xe>
	_delay_us(40);
	return (uint8_t) ext_ram[0];
     644:	80 91 00 14 	lds	r24, 0x1400
}
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	08 95       	ret

0000064c <joystick_init>:
int center_val_X;
int center_val_Y;


void joystick_init(){ 
	center_val_X = joystick_read(JOYSTICK_X);
     64c:	80 e0       	ldi	r24, 0x00	; 0
     64e:	0e 94 1b 03 	call	0x636	; 0x636 <joystick_read>
     652:	90 93 5a 03 	sts	0x035A, r25
     656:	80 93 59 03 	sts	0x0359, r24
	center_val_Y = joystick_read(JOYSTICK_Y);
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	0e 94 1b 03 	call	0x636	; 0x636 <joystick_read>
     660:	90 93 5c 03 	sts	0x035C, r25
     664:	80 93 5b 03 	sts	0x035B, r24
     668:	08 95       	ret

0000066a <read_converted>:
}

signed int read_converted(joy_channel channel){
     66a:	cf 93       	push	r28
     66c:	c8 2f       	mov	r28, r24

	int v = (joystick_read(channel));
     66e:	0e 94 1b 03 	call	0x636	; 0x636 <joystick_read>

	if      (channel == JOYSTICK_X)  {v -= center_val_X;}
     672:	c1 11       	cpse	r28, r1
     674:	07 c0       	rjmp	.+14     	; 0x684 <read_converted+0x1a>
     676:	20 91 59 03 	lds	r18, 0x0359
     67a:	30 91 5a 03 	lds	r19, 0x035A
     67e:	82 1b       	sub	r24, r18
     680:	93 0b       	sbc	r25, r19
     682:	08 c0       	rjmp	.+16     	; 0x694 <read_converted+0x2a>
	else if (channel == JOYSTICK_Y)  {v -= center_val_Y;}
     684:	c1 30       	cpi	r28, 0x01	; 1
     686:	31 f4       	brne	.+12     	; 0x694 <read_converted+0x2a>
     688:	20 91 5b 03 	lds	r18, 0x035B
     68c:	30 91 5c 03 	lds	r19, 0x035C
     690:	82 1b       	sub	r24, r18
     692:	93 0b       	sbc	r25, r19

	return  (v > 127)	? 127 :
     694:	80 38       	cpi	r24, 0x80	; 128
     696:	2f ef       	ldi	r18, 0xFF	; 255
     698:	92 07       	cpc	r25, r18
     69a:	14 f4       	brge	.+4      	; 0x6a0 <read_converted+0x36>
     69c:	80 e8       	ldi	r24, 0x80	; 128
     69e:	9f ef       	ldi	r25, 0xFF	; 255
     6a0:	80 38       	cpi	r24, 0x80	; 128
     6a2:	91 05       	cpc	r25, r1
     6a4:	14 f0       	brlt	.+4      	; 0x6aa <read_converted+0x40>
     6a6:	8f e7       	ldi	r24, 0x7F	; 127
     6a8:	90 e0       	ldi	r25, 0x00	; 0
			(v < -128)	? -128 :
			 v;
}
     6aa:	cf 91       	pop	r28
     6ac:	08 95       	ret

000006ae <mcp2515_write>:
	} else {
		;//printf("MCP2515 is in config mode after reset\n");
	}
}

void mcp2515_write(uint8_t address, uint8_t data){
     6ae:	cf 93       	push	r28
     6b0:	df 93       	push	r29
     6b2:	d8 2f       	mov	r29, r24
     6b4:	c6 2f       	mov	r28, r22
	spi_select();
     6b6:	0e 94 09 05 	call	0xa12	; 0xa12 <spi_select>

	spi_send(MCP_WRITE);
     6ba:	82 e0       	ldi	r24, 0x02	; 2
     6bc:	0e 94 fe 04 	call	0x9fc	; 0x9fc <spi_send>
	spi_send(address);
     6c0:	8d 2f       	mov	r24, r29
     6c2:	0e 94 fe 04 	call	0x9fc	; 0x9fc <spi_send>
	spi_send(data);
     6c6:	8c 2f       	mov	r24, r28
     6c8:	0e 94 fe 04 	call	0x9fc	; 0x9fc <spi_send>

	spi_deselect();
     6cc:	0e 94 0b 05 	call	0xa16	; 0xa16 <spi_deselect>
}
     6d0:	df 91       	pop	r29
     6d2:	cf 91       	pop	r28
     6d4:	08 95       	ret

000006d6 <mcp2515_request_to_send>:

void mcp2515_request_to_send(uint8_t command){
     6d6:	cf 93       	push	r28
	//Check last 3 bits of given command
	if (command <= 7) {
     6d8:	88 30       	cpi	r24, 0x08	; 8
     6da:	18 f4       	brcc	.+6      	; 0x6e2 <mcp2515_request_to_send+0xc>
		command = MCP_RTS | command;
     6dc:	c8 2f       	mov	r28, r24
     6de:	c0 68       	ori	r28, 0x80	; 128
     6e0:	01 c0       	rjmp	.+2      	; 0x6e4 <mcp2515_request_to_send+0xe>
	} else {
		command = MCP_RTS;
     6e2:	c0 e8       	ldi	r28, 0x80	; 128
	}

	//Select, send RTS command, then deselect
	spi_select();
     6e4:	0e 94 09 05 	call	0xa12	; 0xa12 <spi_select>
	spi_send(command);
     6e8:	8c 2f       	mov	r24, r28
     6ea:	0e 94 fe 04 	call	0x9fc	; 0x9fc <spi_send>
	spi_deselect();
     6ee:	0e 94 0b 05 	call	0xa16	; 0xa16 <spi_deselect>
}
     6f2:	cf 91       	pop	r28
     6f4:	08 95       	ret

000006f6 <mcp2515_bit_modify>:

void mcp2515_bit_modify(uint8_t address, uint8_t mask, uint8_t data){
     6f6:	1f 93       	push	r17
     6f8:	cf 93       	push	r28
     6fa:	df 93       	push	r29
     6fc:	18 2f       	mov	r17, r24
     6fe:	d6 2f       	mov	r29, r22
     700:	c4 2f       	mov	r28, r20
	spi_select();
     702:	0e 94 09 05 	call	0xa12	; 0xa12 <spi_select>

	spi_send(MCP_BITMOD);
     706:	85 e0       	ldi	r24, 0x05	; 5
     708:	0e 94 fe 04 	call	0x9fc	; 0x9fc <spi_send>
	spi_send(address);
     70c:	81 2f       	mov	r24, r17
     70e:	0e 94 fe 04 	call	0x9fc	; 0x9fc <spi_send>
	spi_send(mask);
     712:	8d 2f       	mov	r24, r29
     714:	0e 94 fe 04 	call	0x9fc	; 0x9fc <spi_send>
	spi_send(data);
     718:	8c 2f       	mov	r24, r28
     71a:	0e 94 fe 04 	call	0x9fc	; 0x9fc <spi_send>

	spi_deselect();
     71e:	0e 94 0b 05 	call	0xa16	; 0xa16 <spi_deselect>
}
     722:	df 91       	pop	r29
     724:	cf 91       	pop	r28
     726:	1f 91       	pop	r17
     728:	08 95       	ret

0000072a <mcp2515_reset>:

void mcp2515_reset(){
	spi_select();
     72a:	0e 94 09 05 	call	0xa12	; 0xa12 <spi_select>
	spi_send(MCP_RESET);	
     72e:	80 ec       	ldi	r24, 0xC0	; 192
     730:	0e 94 fe 04 	call	0x9fc	; 0x9fc <spi_send>
	spi_deselect();
     734:	0e 94 0b 05 	call	0xa16	; 0xa16 <spi_deselect>
     738:	08 95       	ret

0000073a <mcp2515_read>:
}


uint8_t mcp2515_read(uint8_t address){
     73a:	cf 93       	push	r28
     73c:	c8 2f       	mov	r28, r24
	uint8_t result;

	spi_select();
     73e:	0e 94 09 05 	call	0xa12	; 0xa12 <spi_select>
	
	//Send command and address, then read result
	spi_send(MCP_READ);
     742:	83 e0       	ldi	r24, 0x03	; 3
     744:	0e 94 fe 04 	call	0x9fc	; 0x9fc <spi_send>
	spi_send(address);
     748:	8c 2f       	mov	r24, r28
     74a:	0e 94 fe 04 	call	0x9fc	; 0x9fc <spi_send>

	result = spi_read();
     74e:	0e 94 02 05 	call	0xa04	; 0xa04 <spi_read>
     752:	c8 2f       	mov	r28, r24
	spi_deselect();
     754:	0e 94 0b 05 	call	0xa16	; 0xa16 <spi_deselect>

	return result;	
}
     758:	8c 2f       	mov	r24, r28
     75a:	cf 91       	pop	r28
     75c:	08 95       	ret

0000075e <mcp2515_init>:
#include <util/delay.h>
#include "uart_driver.h"
#include "spi_driver.h"
#include "mcp2515_driver.h"

void mcp2515_init() {
     75e:	cf 93       	push	r28
     760:	df 93       	push	r29
     762:	1f 92       	push	r1
     764:	cd b7       	in	r28, 0x3d	; 61
     766:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t value_check;

	//Start SPI driver
	spi_init();
     768:	0e 94 f6 04 	call	0x9ec	; 0x9ec <spi_init>

	mcp2515_reset();
     76c:	0e 94 95 03 	call	0x72a	; 0x72a <mcp2515_reset>
	
	//Testing for correct initialization
	value_check = mcp2515_read(MCP_CANSTAT);
     770:	8e e0       	ldi	r24, 0x0E	; 14
     772:	0e 94 9d 03 	call	0x73a	; 0x73a <mcp2515_read>
     776:	89 83       	std	Y+1, r24	; 0x01
	
	if ((value_check & MODE_MASK) != MODE_CONFIG) {
     778:	89 81       	ldd	r24, Y+1	; 0x01
     77a:	80 7e       	andi	r24, 0xE0	; 224
     77c:	80 38       	cpi	r24, 0x80	; 128
     77e:	21 f0       	breq	.+8      	; 0x788 <mcp2515_init+0x2a>
		printf("MCP2515 is not in config mode after reset\n");
     780:	86 ea       	ldi	r24, 0xA6	; 166
     782:	91 e0       	ldi	r25, 0x01	; 1
     784:	0e 94 03 07 	call	0xe06	; 0xe06 <puts>
	} else {
		;//printf("MCP2515 is in config mode after reset\n");
	}
}
     788:	0f 90       	pop	r0
     78a:	df 91       	pop	r29
     78c:	cf 91       	pop	r28
     78e:	08 95       	ret

00000790 <oled_print_char>:
		//Set higher column address                                                                                                                                                                                                                                                                                                                                                                     
		*oled_command_addr = 0x10 + (column * (FONTWIDTH)>>4);
	}
}

void oled_print_char(char ch){
     790:	28 e0       	ldi	r18, 0x08	; 8
     792:	82 9f       	mul	r24, r18
     794:	c0 01       	movw	r24, r0
     796:	11 24       	eor	r1, r1
     798:	fc 01       	movw	r30, r24
     79a:	e0 59       	subi	r30, 0x90	; 144
     79c:	f0 40       	sbci	r31, 0x00	; 0
	for (uint8_t i = 0; i<FONTWIDTH; i++) {
     79e:	80 e0       	ldi	r24, 0x00	; 0
		oled_write_data(pgm_read_byte(&font[ch - FONTOFFSET][i]));
     7a0:	94 91       	lpm	r25, Z
void oled_write_command(uint8_t command){
	*oled_command_addr = command;
}

void oled_write_data(uint8_t data){
	*oled_data_addr = data;
     7a2:	a0 91 04 01 	lds	r26, 0x0104
     7a6:	b0 91 05 01 	lds	r27, 0x0105
     7aa:	9c 93       	st	X, r25
		*oled_command_addr = 0x10 + (column * (FONTWIDTH)>>4);
	}
}

void oled_print_char(char ch){
	for (uint8_t i = 0; i<FONTWIDTH; i++) {
     7ac:	8f 5f       	subi	r24, 0xFF	; 255
     7ae:	31 96       	adiw	r30, 0x01	; 1
     7b0:	88 30       	cpi	r24, 0x08	; 8
     7b2:	b1 f7       	brne	.-20     	; 0x7a0 <oled_print_char+0x10>
		oled_write_data(pgm_read_byte(&font[ch - FONTOFFSET][i]));
	}
}
     7b4:	08 95       	ret

000007b6 <oled_goto_page>:
void oled_back(){
	
}

void oled_goto_page(unsigned int page) {
	oled_write_command(0xB0 + page);
     7b6:	90 eb       	ldi	r25, 0xB0	; 176
     7b8:	98 0f       	add	r25, r24
	_delay_ms(800);
	oled_clear_screen();
}

void oled_write_command(uint8_t command){
	*oled_command_addr = command;
     7ba:	e0 91 06 01 	lds	r30, 0x0106
     7be:	f0 91 07 01 	lds	r31, 0x0107
     7c2:	90 83       	st	Z, r25
	
}

void oled_goto_page(unsigned int page) {
	oled_write_command(0xB0 + page);
	global_page = page;
     7c4:	80 93 5d 03 	sts	0x035D, r24
     7c8:	82 e5       	ldi	r24, 0x52	; 82
     7ca:	8a 95       	dec	r24
     7cc:	f1 f7       	brne	.-4      	; 0x7ca <oled_goto_page+0x14>
     7ce:	08 95       	ret

000007d0 <oled_clear_line>:
	_delay_us(50);
}

void oled_clear_line(){
     7d0:	80 e8       	ldi	r24, 0x80	; 128
     7d2:	90 e0       	ldi	r25, 0x00	; 0
void oled_write_command(uint8_t command){
	*oled_command_addr = command;
}

void oled_write_data(uint8_t data){
	*oled_data_addr = data;
     7d4:	e0 91 04 01 	lds	r30, 0x0104
     7d8:	f0 91 05 01 	lds	r31, 0x0105
     7dc:	10 82       	st	Z, r1
     7de:	01 97       	sbiw	r24, 0x01	; 1
	global_page = page;
	_delay_us(50);
}

void oled_clear_line(){
	for (int i = 0; i<128; i++) {
     7e0:	00 97       	sbiw	r24, 0x00	; 0
     7e2:	c1 f7       	brne	.-16     	; 0x7d4 <oled_clear_line+0x4>
		oled_write_data(0b00000000);
	}
}
     7e4:	08 95       	ret

000007e6 <oled_clear_screen>:

void oled_clear_screen() {
     7e6:	cf 93       	push	r28
     7e8:	df 93       	push	r29
     7ea:	c0 e0       	ldi	r28, 0x00	; 0
     7ec:	d0 e0       	ldi	r29, 0x00	; 0
	for (uint8_t i = 0; i<8; i++) {
		oled_goto_page(i);
     7ee:	ce 01       	movw	r24, r28
     7f0:	0e 94 db 03 	call	0x7b6	; 0x7b6 <oled_goto_page>
		oled_clear_line();
     7f4:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <oled_clear_line>
     7f8:	21 96       	adiw	r28, 0x01	; 1
		oled_write_data(0b00000000);
	}
}

void oled_clear_screen() {
	for (uint8_t i = 0; i<8; i++) {
     7fa:	c8 30       	cpi	r28, 0x08	; 8
     7fc:	d1 05       	cpc	r29, r1
     7fe:	b9 f7       	brne	.-18     	; 0x7ee <oled_clear_screen+0x8>
		oled_goto_page(i);
		oled_clear_line();
		//_delay_ms(50);
	}
}
     800:	df 91       	pop	r29
     802:	cf 91       	pop	r28
     804:	08 95       	ret

00000806 <oled_pos>:

void oled_pos(unsigned int row, unsigned int column){
     806:	cf 93       	push	r28
     808:	df 93       	push	r29
     80a:	eb 01       	movw	r28, r22
	oled_goto_page(row);
     80c:	0e 94 db 03 	call	0x7b6	; 0x7b6 <oled_goto_page>
	if(column < (128/FONTWIDTH)){
     810:	c0 31       	cpi	r28, 0x10	; 16
     812:	d1 05       	cpc	r29, r1
     814:	e8 f4       	brcc	.+58     	; 0x850 <oled_pos+0x4a>
		//Save column program goes to
		global_col = column * FONTWIDTH;
     816:	8c 2f       	mov	r24, r28
     818:	88 0f       	add	r24, r24
     81a:	88 0f       	add	r24, r24
     81c:	88 0f       	add	r24, r24
     81e:	80 93 5e 03 	sts	0x035E, r24
		//Set lower column address
		*oled_command_addr = 0x00 + (column * (FONTWIDTH)>>4);
     822:	e0 91 06 01 	lds	r30, 0x0106
     826:	f0 91 07 01 	lds	r31, 0x0107
     82a:	cc 0f       	add	r28, r28
     82c:	dd 1f       	adc	r29, r29
     82e:	cc 0f       	add	r28, r28
     830:	dd 1f       	adc	r29, r29
     832:	cc 0f       	add	r28, r28
     834:	dd 1f       	adc	r29, r29
     836:	d2 95       	swap	r29
     838:	c2 95       	swap	r28
     83a:	cf 70       	andi	r28, 0x0F	; 15
     83c:	cd 27       	eor	r28, r29
     83e:	df 70       	andi	r29, 0x0F	; 15
     840:	cd 27       	eor	r28, r29
     842:	c0 83       	st	Z, r28
		//Set higher column address                                                                                                                                                                                                                                                                                                                                                                     
		*oled_command_addr = 0x10 + (column * (FONTWIDTH)>>4);
     844:	e0 91 06 01 	lds	r30, 0x0106
     848:	f0 91 07 01 	lds	r31, 0x0107
     84c:	c0 5f       	subi	r28, 0xF0	; 240
     84e:	c0 83       	st	Z, r28
	}
}
     850:	df 91       	pop	r29
     852:	cf 91       	pop	r28
     854:	08 95       	ret

00000856 <oled_printf>:
	for (uint8_t i = 0; i<FONTWIDTH; i++) {
		oled_write_data(pgm_read_byte(&font[ch - FONTOFFSET][i]));
	}
}

void oled_printf(char* fmt, ...){
     856:	cf 93       	push	r28
     858:	df 93       	push	r29
     85a:	cd b7       	in	r28, 0x3d	; 61
     85c:	de b7       	in	r29, 0x3e	; 62
     85e:	fe 01       	movw	r30, r28
     860:	35 96       	adiw	r30, 0x05	; 5
     862:	61 91       	ld	r22, Z+
     864:	71 91       	ld	r23, Z+
	va_list v;
	va_start(v, fmt);
	vfprintf(&oled_stdout, fmt, v);
     866:	af 01       	movw	r20, r30
     868:	88 e0       	ldi	r24, 0x08	; 8
     86a:	91 e0       	ldi	r25, 0x01	; 1
     86c:	0e 94 30 07 	call	0xe60	; 0xe60 <vfprintf>
	va_end(v);
}
     870:	df 91       	pop	r29
     872:	cf 91       	pop	r28
     874:	08 95       	ret

00000876 <oled_init>:
	_delay_ms(800);
	oled_clear_screen();
}

void oled_write_command(uint8_t command){
	*oled_command_addr = command;
     876:	e0 91 06 01 	lds	r30, 0x0106
     87a:	f0 91 07 01 	lds	r31, 0x0107
     87e:	8e ea       	ldi	r24, 0xAE	; 174
     880:	80 83       	st	Z, r24
     882:	e0 91 06 01 	lds	r30, 0x0106
     886:	f0 91 07 01 	lds	r31, 0x0107
     88a:	81 ea       	ldi	r24, 0xA1	; 161
     88c:	80 83       	st	Z, r24
     88e:	e0 91 06 01 	lds	r30, 0x0106
     892:	f0 91 07 01 	lds	r31, 0x0107
     896:	8a ed       	ldi	r24, 0xDA	; 218
     898:	80 83       	st	Z, r24
     89a:	e0 91 06 01 	lds	r30, 0x0106
     89e:	f0 91 07 01 	lds	r31, 0x0107
     8a2:	82 e1       	ldi	r24, 0x12	; 18
     8a4:	80 83       	st	Z, r24
     8a6:	e0 91 06 01 	lds	r30, 0x0106
     8aa:	f0 91 07 01 	lds	r31, 0x0107
     8ae:	88 ec       	ldi	r24, 0xC8	; 200
     8b0:	80 83       	st	Z, r24
     8b2:	e0 91 06 01 	lds	r30, 0x0106
     8b6:	f0 91 07 01 	lds	r31, 0x0107
     8ba:	88 ea       	ldi	r24, 0xA8	; 168
     8bc:	80 83       	st	Z, r24
     8be:	e0 91 06 01 	lds	r30, 0x0106
     8c2:	f0 91 07 01 	lds	r31, 0x0107
     8c6:	8f e3       	ldi	r24, 0x3F	; 63
     8c8:	80 83       	st	Z, r24
     8ca:	e0 91 06 01 	lds	r30, 0x0106
     8ce:	f0 91 07 01 	lds	r31, 0x0107
     8d2:	85 ed       	ldi	r24, 0xD5	; 213
     8d4:	80 83       	st	Z, r24
     8d6:	e0 91 06 01 	lds	r30, 0x0106
     8da:	f0 91 07 01 	lds	r31, 0x0107
     8de:	80 e8       	ldi	r24, 0x80	; 128
     8e0:	80 83       	st	Z, r24
     8e2:	e0 91 06 01 	lds	r30, 0x0106
     8e6:	f0 91 07 01 	lds	r31, 0x0107
     8ea:	81 e8       	ldi	r24, 0x81	; 129
     8ec:	80 83       	st	Z, r24
     8ee:	e0 91 06 01 	lds	r30, 0x0106
     8f2:	f0 91 07 01 	lds	r31, 0x0107
     8f6:	80 e5       	ldi	r24, 0x50	; 80
     8f8:	80 83       	st	Z, r24
     8fa:	e0 91 06 01 	lds	r30, 0x0106
     8fe:	f0 91 07 01 	lds	r31, 0x0107
     902:	89 ed       	ldi	r24, 0xD9	; 217
     904:	80 83       	st	Z, r24
     906:	e0 91 06 01 	lds	r30, 0x0106
     90a:	f0 91 07 01 	lds	r31, 0x0107
     90e:	81 e2       	ldi	r24, 0x21	; 33
     910:	80 83       	st	Z, r24
     912:	e0 91 06 01 	lds	r30, 0x0106
     916:	f0 91 07 01 	lds	r31, 0x0107
     91a:	80 e2       	ldi	r24, 0x20	; 32
     91c:	80 83       	st	Z, r24
     91e:	e0 91 06 01 	lds	r30, 0x0106
     922:	f0 91 07 01 	lds	r31, 0x0107
     926:	82 e0       	ldi	r24, 0x02	; 2
     928:	80 83       	st	Z, r24
     92a:	e0 91 06 01 	lds	r30, 0x0106
     92e:	f0 91 07 01 	lds	r31, 0x0107
     932:	8b ed       	ldi	r24, 0xDB	; 219
     934:	80 83       	st	Z, r24
     936:	e0 91 06 01 	lds	r30, 0x0106
     93a:	f0 91 07 01 	lds	r31, 0x0107
     93e:	80 e3       	ldi	r24, 0x30	; 48
     940:	80 83       	st	Z, r24
     942:	e0 91 06 01 	lds	r30, 0x0106
     946:	f0 91 07 01 	lds	r31, 0x0107
     94a:	8d ea       	ldi	r24, 0xAD	; 173
     94c:	80 83       	st	Z, r24
     94e:	e0 91 06 01 	lds	r30, 0x0106
     952:	f0 91 07 01 	lds	r31, 0x0107
     956:	10 82       	st	Z, r1
     958:	e0 91 06 01 	lds	r30, 0x0106
     95c:	f0 91 07 01 	lds	r31, 0x0107
     960:	84 ea       	ldi	r24, 0xA4	; 164
     962:	80 83       	st	Z, r24
     964:	e0 91 06 01 	lds	r30, 0x0106
     968:	f0 91 07 01 	lds	r31, 0x0107
     96c:	86 ea       	ldi	r24, 0xA6	; 166
     96e:	80 83       	st	Z, r24
     970:	e0 91 06 01 	lds	r30, 0x0106
     974:	f0 91 07 01 	lds	r31, 0x0107
     978:	8f ea       	ldi	r24, 0xAF	; 175
     97a:	80 83       	st	Z, r24
	oled_write_command(0x00);
	oled_write_command(0xa4);    //out follows RAM content
	oled_write_command(0xa6);    //set normal display
	oled_write_command(0xaf);    // display on
	
	oled_clear_screen();
     97c:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <oled_clear_screen>
	oled_pos(2,3);
     980:	63 e0       	ldi	r22, 0x03	; 3
     982:	70 e0       	ldi	r23, 0x00	; 0
     984:	82 e0       	ldi	r24, 0x02	; 2
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	0e 94 03 04 	call	0x806	; 0x806 <oled_pos>
	oled_printf(" #SWAG");
     98c:	87 e0       	ldi	r24, 0x07	; 7
     98e:	92 e0       	ldi	r25, 0x02	; 2
     990:	9f 93       	push	r25
     992:	8f 93       	push	r24
     994:	0e 94 2b 04 	call	0x856	; 0x856 <oled_printf>
	oled_pos(3,7);
     998:	67 e0       	ldi	r22, 0x07	; 7
     99a:	70 e0       	ldi	r23, 0x00	; 0
     99c:	83 e0       	ldi	r24, 0x03	; 3
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	0e 94 03 04 	call	0x806	; 0x806 <oled_pos>
	oled_printf("  4");
     9a4:	8e e0       	ldi	r24, 0x0E	; 14
     9a6:	92 e0       	ldi	r25, 0x02	; 2
     9a8:	9f 93       	push	r25
     9aa:	8f 93       	push	r24
     9ac:	0e 94 2b 04 	call	0x856	; 0x856 <oled_printf>
	oled_pos(4,9);
     9b0:	69 e0       	ldi	r22, 0x09	; 9
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	84 e0       	ldi	r24, 0x04	; 4
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	0e 94 03 04 	call	0x806	; 0x806 <oled_pos>
	oled_printf(" LYFE");
     9bc:	82 e1       	ldi	r24, 0x12	; 18
     9be:	92 e0       	ldi	r25, 0x02	; 2
     9c0:	9f 93       	push	r25
     9c2:	8f 93       	push	r24
     9c4:	0e 94 2b 04 	call	0x856	; 0x856 <oled_printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9c8:	2f ef       	ldi	r18, 0xFF	; 255
     9ca:	8f ef       	ldi	r24, 0xFF	; 255
     9cc:	9b e0       	ldi	r25, 0x0B	; 11
     9ce:	21 50       	subi	r18, 0x01	; 1
     9d0:	80 40       	sbci	r24, 0x00	; 0
     9d2:	90 40       	sbci	r25, 0x00	; 0
     9d4:	e1 f7       	brne	.-8      	; 0x9ce <oled_init+0x158>
     9d6:	00 c0       	rjmp	.+0      	; 0x9d8 <oled_init+0x162>
     9d8:	00 c0       	rjmp	.+0      	; 0x9da <oled_init+0x164>
	_delay_ms(800);
	oled_clear_screen();
     9da:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <oled_clear_screen>
     9de:	0f 90       	pop	r0
     9e0:	0f 90       	pop	r0
     9e2:	0f 90       	pop	r0
     9e4:	0f 90       	pop	r0
     9e6:	0f 90       	pop	r0
     9e8:	0f 90       	pop	r0
     9ea:	08 95       	ret

000009ec <spi_init>:
#define SPI_MISO PB6
#define SPI_SCK PB7 

void spi_init(){
	//Set MOSI, SCK and SS as output pins 	
	DDRB |= (1 << SPI_MOSI) | (1 << SPI_SCK) | (1 << SPI_SS);
     9ec:	87 b3       	in	r24, 0x17	; 23
     9ee:	80 6b       	ori	r24, 0xB0	; 176
     9f0:	87 bb       	out	0x17, r24	; 23
	
	//Set MISO as input pin
	DDRB &= ~(1 << SPI_MISO);
     9f2:	be 98       	cbi	0x17, 6	; 23
	
	//Enable SPI in master mode and set clock rate fosc/16
	SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0);
     9f4:	8d b1       	in	r24, 0x0d	; 13
     9f6:	81 65       	ori	r24, 0x51	; 81
     9f8:	8d b9       	out	0x0d, r24	; 13
     9fa:	08 95       	ret

000009fc <spi_send>:
	return SPDR;
}

void spi_send(char data){
	//Start transmission
	SPDR = data;
     9fc:	8f b9       	out	0x0f, r24	; 15
	
	//Wait for transmission, checks if register is empty 
	while(!(SPSR & (1 << SPIF)));
     9fe:	77 9b       	sbis	0x0e, 7	; 14
     a00:	fe cf       	rjmp	.-4      	; 0x9fe <spi_send+0x2>
}
     a02:	08 95       	ret

00000a04 <spi_read>:
}


uint8_t spi_read(){
	//Dummy send in order to read from slave
	spi_send(0xaa);
     a04:	8a ea       	ldi	r24, 0xAA	; 170
     a06:	0e 94 fe 04 	call	0x9fc	; 0x9fc <spi_send>
	
	while(!(SPSR & (1 << SPIF)));
     a0a:	77 9b       	sbis	0x0e, 7	; 14
     a0c:	fe cf       	rjmp	.-4      	; 0xa0a <spi_read+0x6>

	return SPDR;
     a0e:	8f b1       	in	r24, 0x0f	; 15
}
     a10:	08 95       	ret

00000a12 <spi_select>:
	while(!(SPSR & (1 << SPIF)));
}

void spi_select(){
	//Set !SS to 0 for selection of slave
	PORTB &= ~(1 << SPI_SS);
     a12:	c4 98       	cbi	0x18, 4	; 24
     a14:	08 95       	ret

00000a16 <spi_deselect>:
}

void spi_deselect(){
	//Set !SS to 1 for deselection of slave
	PORTB |= (1 << SPI_SS);
     a16:	c4 9a       	sbi	0x18, 4	; 24
     a18:	08 95       	ret

00000a1a <SRAM_test>:
	if (address_offset > 0x100) { return 0; }
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	return ext_ram[address_offset];
}

void SRAM_test(void) {
     a1a:	cf 92       	push	r12
     a1c:	df 92       	push	r13
     a1e:	ef 92       	push	r14
     a20:	ff 92       	push	r15
     a22:	0f 93       	push	r16
     a24:	1f 93       	push	r17
     a26:	cf 93       	push	r28
     a28:	df 93       	push	r29
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size       = 0x800;
	uint16_t write_errors       = 0;
	uint16_t retrieval_errors   = 0;

	oled_clear_screen();
     a2a:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <oled_clear_screen>
	oled_pos(3,2);
     a2e:	62 e0       	ldi	r22, 0x02	; 2
     a30:	70 e0       	ldi	r23, 0x00	; 0
     a32:	83 e0       	ldi	r24, 0x03	; 3
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	0e 94 03 04 	call	0x806	; 0x806 <oled_pos>
	oled_printf("TESTING SRAM");
     a3a:	88 e1       	ldi	r24, 0x18	; 24
     a3c:	92 e0       	ldi	r25, 0x02	; 2
     a3e:	9f 93       	push	r25
     a40:	8f 93       	push	r24
     a42:	0e 94 2b 04 	call	0x856	; 0x856 <oled_printf>
	printf("\nStarting SRAM test...\n");
     a46:	85 e2       	ldi	r24, 0x25	; 37
     a48:	92 e0       	ldi	r25, 0x02	; 2
     a4a:	0e 94 03 07 	call	0xe06	; 0xe06 <puts>

	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
     a4e:	0e 94 df 06 	call	0xdbe	; 0xdbe <rand>
     a52:	6c 01       	movw	r12, r24

	// Write phase: Immediately check that the correct value was stored
	srand(seed);
     a54:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <srand>
     a58:	0f 90       	pop	r0
     a5a:	0f 90       	pop	r0
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     a5c:	c0 e0       	ldi	r28, 0x00	; 0
     a5e:	d0 e0       	ldi	r29, 0x00	; 0
}

void SRAM_test(void) {
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size       = 0x800;
	uint16_t write_errors       = 0;
     a60:	00 e0       	ldi	r16, 0x00	; 0
     a62:	10 e0       	ldi	r17, 0x00	; 0
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		ext_ram[i] = some_value;
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
     a64:	0f 2e       	mov	r0, r31
     a66:	fc e3       	ldi	r31, 0x3C	; 60
     a68:	ef 2e       	mov	r14, r31
     a6a:	f2 e0       	ldi	r31, 0x02	; 2
     a6c:	ff 2e       	mov	r15, r31
     a6e:	f0 2d       	mov	r31, r0
	uint16_t seed = rand();

	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     a70:	0e 94 df 06 	call	0xdbe	; 0xdbe <rand>
     a74:	fe 01       	movw	r30, r28
     a76:	f8 5e       	subi	r31, 0xE8	; 232
		ext_ram[i] = some_value;
     a78:	80 83       	st	Z, r24
		uint8_t retreived_value = ext_ram[i];
     a7a:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     a7c:	28 17       	cp	r18, r24
     a7e:	a9 f0       	breq	.+42     	; 0xaaa <SRAM_test+0x90>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
     a80:	99 27       	eor	r25, r25
     a82:	9f 93       	push	r25
     a84:	8f 93       	push	r24
     a86:	1f 92       	push	r1
     a88:	2f 93       	push	r18
     a8a:	df 93       	push	r29
     a8c:	cf 93       	push	r28
     a8e:	ff 92       	push	r15
     a90:	ef 92       	push	r14
     a92:	0e 94 ef 06 	call	0xdde	; 0xdde <printf>
			write_errors++;
     a96:	0f 5f       	subi	r16, 0xFF	; 255
     a98:	1f 4f       	sbci	r17, 0xFF	; 255
     a9a:	8d b7       	in	r24, 0x3d	; 61
     a9c:	9e b7       	in	r25, 0x3e	; 62
     a9e:	08 96       	adiw	r24, 0x08	; 8
     aa0:	0f b6       	in	r0, 0x3f	; 63
     aa2:	f8 94       	cli
     aa4:	9e bf       	out	0x3e, r25	; 62
     aa6:	0f be       	out	0x3f, r0	; 63
     aa8:	8d bf       	out	0x3d, r24	; 61
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();

	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     aaa:	21 96       	adiw	r28, 0x01	; 1
     aac:	c1 15       	cp	r28, r1
     aae:	98 e0       	ldi	r25, 0x08	; 8
     ab0:	d9 07       	cpc	r29, r25
     ab2:	f1 f6       	brne	.-68     	; 0xa70 <SRAM_test+0x56>
			write_errors++;
		}
	}

	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);    // reset the PRNG to the state it had before the write phase
     ab4:	c6 01       	movw	r24, r12
     ab6:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     aba:	c0 e0       	ldi	r28, 0x00	; 0
     abc:	d0 e0       	ldi	r29, 0x00	; 0

void SRAM_test(void) {
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size       = 0x800;
	uint16_t write_errors       = 0;
	uint16_t retrieval_errors   = 0;
     abe:	e1 2c       	mov	r14, r1
     ac0:	f1 2c       	mov	r15, r1
	srand(seed);    // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
     ac2:	0f 2e       	mov	r0, r31
     ac4:	f5 e7       	ldi	r31, 0x75	; 117
     ac6:	cf 2e       	mov	r12, r31
     ac8:	f2 e0       	ldi	r31, 0x02	; 2
     aca:	df 2e       	mov	r13, r31
     acc:	f0 2d       	mov	r31, r0
	}

	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);    // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     ace:	0e 94 df 06 	call	0xdbe	; 0xdbe <rand>
     ad2:	fe 01       	movw	r30, r28
     ad4:	f8 5e       	subi	r31, 0xE8	; 232
		uint8_t retreived_value = ext_ram[i];
     ad6:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     ad8:	28 17       	cp	r18, r24
     ada:	b1 f0       	breq	.+44     	; 0xb08 <SRAM_test+0xee>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
     adc:	99 27       	eor	r25, r25
     ade:	9f 93       	push	r25
     ae0:	8f 93       	push	r24
     ae2:	1f 92       	push	r1
     ae4:	2f 93       	push	r18
     ae6:	df 93       	push	r29
     ae8:	cf 93       	push	r28
     aea:	df 92       	push	r13
     aec:	cf 92       	push	r12
     aee:	0e 94 ef 06 	call	0xdde	; 0xdde <printf>
			retrieval_errors++;
     af2:	9f ef       	ldi	r25, 0xFF	; 255
     af4:	e9 1a       	sub	r14, r25
     af6:	f9 0a       	sbc	r15, r25
     af8:	8d b7       	in	r24, 0x3d	; 61
     afa:	9e b7       	in	r25, 0x3e	; 62
     afc:	08 96       	adiw	r24, 0x08	; 8
     afe:	0f b6       	in	r0, 0x3f	; 63
     b00:	f8 94       	cli
     b02:	9e bf       	out	0x3e, r25	; 62
     b04:	0f be       	out	0x3f, r0	; 63
     b06:	8d bf       	out	0x3d, r24	; 61
		}
	}

	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);    // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     b08:	21 96       	adiw	r28, 0x01	; 1
     b0a:	c1 15       	cp	r28, r1
     b0c:	98 e0       	ldi	r25, 0x08	; 8
     b0e:	d9 07       	cpc	r29, r25
     b10:	f1 f6       	brne	.-68     	; 0xace <SRAM_test+0xb4>
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	if (retrieval_errors != 0 || write_errors != 0) { 
     b12:	e1 14       	cp	r14, r1
     b14:	f1 04       	cpc	r15, r1
     b16:	19 f4       	brne	.+6      	; 0xb1e <SRAM_test+0x104>
     b18:	01 15       	cp	r16, r1
     b1a:	11 05       	cpc	r17, r1
     b1c:	71 f1       	breq	.+92     	; 0xb7a <SRAM_test+0x160>
		oled_pos(5,0);
     b1e:	60 e0       	ldi	r22, 0x00	; 0
     b20:	70 e0       	ldi	r23, 0x00	; 0
     b22:	85 e0       	ldi	r24, 0x05	; 5
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	0e 94 03 04 	call	0x806	; 0x806 <oled_pos>
		oled_printf("R ERRORS:  %4d",retrieval_errors);
     b2a:	ff 92       	push	r15
     b2c:	ef 92       	push	r14
     b2e:	82 eb       	ldi	r24, 0xB2	; 178
     b30:	92 e0       	ldi	r25, 0x02	; 2
     b32:	9f 93       	push	r25
     b34:	8f 93       	push	r24
     b36:	0e 94 2b 04 	call	0x856	; 0x856 <oled_printf>
		oled_pos(6,0);
     b3a:	60 e0       	ldi	r22, 0x00	; 0
     b3c:	70 e0       	ldi	r23, 0x00	; 0
     b3e:	86 e0       	ldi	r24, 0x06	; 6
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	0e 94 03 04 	call	0x806	; 0x806 <oled_pos>
		oled_printf("W ERRORS:  %4d",write_errors);
     b46:	1f 93       	push	r17
     b48:	0f 93       	push	r16
     b4a:	81 ec       	ldi	r24, 0xC1	; 193
     b4c:	92 e0       	ldi	r25, 0x02	; 2
     b4e:	9f 93       	push	r25
     b50:	8f 93       	push	r24
     b52:	0e 94 2b 04 	call	0x856	; 0x856 <oled_printf>
     b56:	2f ef       	ldi	r18, 0xFF	; 255
     b58:	8f ef       	ldi	r24, 0xFF	; 255
     b5a:	9b e3       	ldi	r25, 0x3B	; 59
     b5c:	21 50       	subi	r18, 0x01	; 1
     b5e:	80 40       	sbci	r24, 0x00	; 0
     b60:	90 40       	sbci	r25, 0x00	; 0
     b62:	e1 f7       	brne	.-8      	; 0xb5c <SRAM_test+0x142>
     b64:	00 c0       	rjmp	.+0      	; 0xb66 <SRAM_test+0x14c>
     b66:	00 00       	nop
     b68:	8d b7       	in	r24, 0x3d	; 61
     b6a:	9e b7       	in	r25, 0x3e	; 62
     b6c:	08 96       	adiw	r24, 0x08	; 8
     b6e:	0f b6       	in	r0, 0x3f	; 63
     b70:	f8 94       	cli
     b72:	9e bf       	out	0x3e, r25	; 62
     b74:	0f be       	out	0x3f, r0	; 63
     b76:	8d bf       	out	0x3d, r24	; 61
     b78:	0e c0       	rjmp	.+28     	; 0xb96 <SRAM_test+0x17c>
		_delay_ms(4000);
	} else {
		oled_pos(6,4);
     b7a:	64 e0       	ldi	r22, 0x04	; 4
     b7c:	70 e0       	ldi	r23, 0x00	; 0
     b7e:	86 e0       	ldi	r24, 0x06	; 6
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	0e 94 03 04 	call	0x806	; 0x806 <oled_pos>
		oled_printf("NO ERRORS");
     b86:	80 ed       	ldi	r24, 0xD0	; 208
     b88:	92 e0       	ldi	r25, 0x02	; 2
     b8a:	9f 93       	push	r25
     b8c:	8f 93       	push	r24
     b8e:	0e 94 2b 04 	call	0x856	; 0x856 <oled_printf>
     b92:	0f 90       	pop	r0
     b94:	0f 90       	pop	r0
	}
	printf("SRAM test completed with \n%4d errors in write phase and \n%4d errors in retrieval phase\n\n", write_errors, retrieval_errors);
     b96:	ff 92       	push	r15
     b98:	ef 92       	push	r14
     b9a:	1f 93       	push	r17
     b9c:	0f 93       	push	r16
     b9e:	8a ed       	ldi	r24, 0xDA	; 218
     ba0:	92 e0       	ldi	r25, 0x02	; 2
     ba2:	9f 93       	push	r25
     ba4:	8f 93       	push	r24
     ba6:	0e 94 ef 06 	call	0xdde	; 0xdde <printf>
     baa:	0f 90       	pop	r0
     bac:	0f 90       	pop	r0
     bae:	0f 90       	pop	r0
     bb0:	0f 90       	pop	r0
     bb2:	0f 90       	pop	r0
     bb4:	0f 90       	pop	r0
     bb6:	df 91       	pop	r29
     bb8:	cf 91       	pop	r28
     bba:	1f 91       	pop	r17
     bbc:	0f 91       	pop	r16
     bbe:	ff 90       	pop	r15
     bc0:	ef 90       	pop	r14
     bc2:	df 90       	pop	r13
     bc4:	cf 90       	pop	r12
     bc6:	08 95       	ret

00000bc8 <SRAM_init>:
#include "SRAM_driver.h"
#include "oled_driver.h"

//Simple setup for SRAM, also tests for correctness
void SRAM_init(){
	MCUCR = 0x80;
     bc8:	80 e8       	ldi	r24, 0x80	; 128
     bca:	85 bf       	out	0x35, r24	; 53
	DDRA = 0xFF;
     bcc:	8f ef       	ldi	r24, 0xFF	; 255
     bce:	8a bb       	out	0x1a, r24	; 26
	SRAM_test();
     bd0:	0e 94 0d 05 	call	0xa1a	; 0xa1a <SRAM_test>
     bd4:	08 95       	ret

00000bd6 <uart_sendChar>:

}

void uart_sendChar(unsigned char data){
	//Wait for empty transmitter buffer
	while(!(UCSR0A & (1<<UDRE0)));
     bd6:	5d 9b       	sbis	0x0b, 5	; 11
     bd8:	fe cf       	rjmp	.-4      	; 0xbd6 <uart_sendChar>
		
	//Put data into buffer, then send the data
	UDR0 = data;
     bda:	8c b9       	out	0x0c, r24	; 12
     bdc:	08 95       	ret

00000bde <uart_getChar>:
}


unsigned int uart_getChar(){
	//Wait for the data to be received 
	while(!(UCSR0A & (1<<RXC0))){}
     bde:	5f 9b       	sbis	0x0b, 7	; 11
     be0:	fe cf       	rjmp	.-4      	; 0xbde <uart_getChar>
	
	//Get status and the 9th bit, then data from buffer
	return UDR0;
     be2:	8c b1       	in	r24, 0x0c	; 12
}
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	08 95       	ret

00000be8 <uart_init>:

static FILE uart_io = FDEV_SETUP_STREAM(uart_sendChar, uart_getChar, _FDEV_SETUP_RW);

void uart_init(unsigned int ubrr){
	//Set baud rate
	UBRR0L = (unsigned int) ubrr;
     be8:	89 b9       	out	0x09, r24	; 9
	
	//Enable receiver and transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
     bea:	88 e1       	ldi	r24, 0x18	; 24
     bec:	8a b9       	out	0x0a, r24	; 10
	
	stdout = &uart_io;
     bee:	86 e1       	ldi	r24, 0x16	; 22
     bf0:	91 e0       	ldi	r25, 0x01	; 1
     bf2:	90 93 62 03 	sts	0x0362, r25
     bf6:	80 93 61 03 	sts	0x0361, r24
	stdin = &uart_io;
     bfa:	90 93 60 03 	sts	0x0360, r25
     bfe:	80 93 5f 03 	sts	0x035F, r24
     c02:	08 95       	ret

00000c04 <main>:
#include "Drivers/uart_driver.h"
#include "Drivers/mcp2515_driver.h"
#include "Drivers/can_driver.h"
#include "timer.h"

int main(void) {
     c04:	cf 93       	push	r28
     c06:	df 93       	push	r29
     c08:	cd b7       	in	r28, 0x3d	; 61
     c0a:	de b7       	in	r29, 0x3e	; 62
     c0c:	66 97       	sbiw	r28, 0x16	; 22
     c0e:	0f b6       	in	r0, 0x3f	; 63
     c10:	f8 94       	cli
     c12:	de bf       	out	0x3e, r29	; 62
     c14:	0f be       	out	0x3f, r0	; 63
     c16:	cd bf       	out	0x3d, r28	; 61
    uart_init(MYUBRR);
     c18:	8f e1       	ldi	r24, 0x1F	; 31
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <uart_init>
	printf("\nREBOOTED\n");
     c20:	83 e3       	ldi	r24, 0x33	; 51
     c22:	93 e0       	ldi	r25, 0x03	; 3
     c24:	0e 94 03 07 	call	0xe06	; 0xe06 <puts>
	SRAM_init();
     c28:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <SRAM_init>
	joystick_init();
     c2c:	0e 94 26 03 	call	0x64c	; 0x64c <joystick_init>
	oled_init();
     c30:	0e 94 3b 04 	call	0x876	; 0x876 <oled_init>
	//mcp2515_init();
	can_init();	
     c34:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <can_init>
	timer_init();
     c38:	0e 94 45 06 	call	0xc8a	; 0xc8a <timer_init>

	DDRB |= (1<<DDB0);
     c3c:	b8 9a       	sbi	0x17, 0	; 23

	printf("\nAll init done\n\n");
     c3e:	8d e3       	ldi	r24, 0x3D	; 61
     c40:	93 e0       	ldi	r25, 0x03	; 3
     c42:	0e 94 03 07 	call	0xe06	; 0xe06 <puts>
		//shell();
		//spi_test();

// 		menuitem* test_menu = MENU_create_menu();
// 		MENU_navigate(test_menu);
		rcv = can_data_receive();
     c46:	1b e0       	ldi	r17, 0x0B	; 11
     c48:	ce 01       	movw	r24, r28
     c4a:	0c 96       	adiw	r24, 0x0c	; 12
     c4c:	0e 94 40 02 	call	0x480	; 0x480 <can_data_receive>
     c50:	fe 01       	movw	r30, r28
     c52:	3c 96       	adiw	r30, 0x0c	; 12
     c54:	de 01       	movw	r26, r28
     c56:	11 96       	adiw	r26, 0x01	; 1
     c58:	81 2f       	mov	r24, r17
     c5a:	01 90       	ld	r0, Z+
     c5c:	0d 92       	st	X+, r0
     c5e:	8a 95       	dec	r24
     c60:	e1 f7       	brne	.-8      	; 0xc5a <main+0x56>
		if (rcv.id != -1){
     c62:	89 81       	ldd	r24, Y+1	; 0x01
     c64:	9a 81       	ldd	r25, Y+2	; 0x02
     c66:	01 96       	adiw	r24, 0x01	; 1
     c68:	79 f3       	breq	.-34     	; 0xc48 <main+0x44>
			can_print_message(&rcv);
     c6a:	ce 01       	movw	r24, r28
     c6c:	01 96       	adiw	r24, 0x01	; 1
     c6e:	0e 94 ad 02 	call	0x55a	; 0x55a <can_print_message>
			flash_diode();
     c72:	0e 94 3c 06 	call	0xc78	; 0xc78 <flash_diode>
     c76:	e8 cf       	rjmp	.-48     	; 0xc48 <main+0x44>

00000c78 <flash_diode>:
#include "Drivers/oled_driver.h"


//Simple test, Ex 1, task 6
void flash_diode(){
	PORTB |= (1<<PINB0);
     c78:	c0 9a       	sbi	0x18, 0	; 24
     c7a:	8f ef       	ldi	r24, 0xFF	; 255
     c7c:	9f e2       	ldi	r25, 0x2F	; 47
     c7e:	01 97       	sbiw	r24, 0x01	; 1
     c80:	f1 f7       	brne	.-4      	; 0xc7e <flash_diode+0x6>
     c82:	00 c0       	rjmp	.+0      	; 0xc84 <flash_diode+0xc>
     c84:	00 00       	nop
	_delay_ms(10);
	PORTB &= ~(1<<PINB0);
     c86:	c0 98       	cbi	0x18, 0	; 24
     c88:	08 95       	ret

00000c8a <timer_init>:
#include "Drivers/can_driver.h"
#include "test_code.h"

void timer_init() {
		//CS3{2:0}   = 101  prescaler set to 1024
		TCCR3B |=  (1<<CS32) | (1<<CS30);
     c8a:	ea e8       	ldi	r30, 0x8A	; 138
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	80 81       	ld	r24, Z
     c90:	85 60       	ori	r24, 0x05	; 5
     c92:	80 83       	st	Z, r24
		TCCR3B &= ~(1<<CS31);
     c94:	80 81       	ld	r24, Z
     c96:	8d 7f       	andi	r24, 0xFD	; 253
     c98:	80 83       	st	Z, r24
		
		TCCR3A &= ~(1<<WGM30);
     c9a:	ab e8       	ldi	r26, 0x8B	; 139
     c9c:	b0 e0       	ldi	r27, 0x00	; 0
     c9e:	8c 91       	ld	r24, X
     ca0:	8e 7f       	andi	r24, 0xFE	; 254
     ca2:	8c 93       	st	X, r24
		TCCR3A &= ~(1<<WGM31);
     ca4:	8c 91       	ld	r24, X
     ca6:	8d 7f       	andi	r24, 0xFD	; 253
     ca8:	8c 93       	st	X, r24
		TCCR3B |=  (1<<WGM32);
     caa:	80 81       	ld	r24, Z
     cac:	88 60       	ori	r24, 0x08	; 8
     cae:	80 83       	st	Z, r24
		TCCR3B &= ~(1<<WGM33);
     cb0:	80 81       	ld	r24, Z
     cb2:	8f 7e       	andi	r24, 0xEF	; 239
     cb4:	80 83       	st	Z, r24
		//TCCR3A |=  (1<<COM3A1) | (1<<COM3A0);
		
		OCR3A = 68; //ca 70Hz 
     cb6:	84 e4       	ldi	r24, 0x44	; 68
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	90 93 87 00 	sts	0x0087, r25
     cbe:	80 93 86 00 	sts	0x0086, r24
		
		//enable interrupt on OCR3A compare

		ETIMSK |= (1<<OCIE3A);
     cc2:	ed e7       	ldi	r30, 0x7D	; 125
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	80 81       	ld	r24, Z
     cc8:	80 61       	ori	r24, 0x10	; 16
     cca:	80 83       	st	Z, r24
		TIFR |= (1<<ICF1);
     ccc:	88 b7       	in	r24, 0x38	; 56
     cce:	88 60       	ori	r24, 0x08	; 8
     cd0:	88 bf       	out	0x38, r24	; 56
		
		
		sei();
     cd2:	78 94       	sei
     cd4:	08 95       	ret

00000cd6 <__vector_7>:
		
}

ISR(TIMER3_COMPA_vect){
     cd6:	1f 92       	push	r1
     cd8:	0f 92       	push	r0
     cda:	0f b6       	in	r0, 0x3f	; 63
     cdc:	0f 92       	push	r0
     cde:	11 24       	eor	r1, r1
     ce0:	2f 93       	push	r18
     ce2:	3f 93       	push	r19
     ce4:	4f 93       	push	r20
     ce6:	5f 93       	push	r21
     ce8:	6f 93       	push	r22
     cea:	7f 93       	push	r23
     cec:	8f 93       	push	r24
     cee:	9f 93       	push	r25
     cf0:	af 93       	push	r26
     cf2:	bf 93       	push	r27
     cf4:	ef 93       	push	r30
     cf6:	ff 93       	push	r31
	can_joystick_transmit(JOY_CAN_ID);
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	0e 94 05 03 	call	0x60a	; 0x60a <can_joystick_transmit>
	//flash_diode();
     d00:	ff 91       	pop	r31
     d02:	ef 91       	pop	r30
     d04:	bf 91       	pop	r27
     d06:	af 91       	pop	r26
     d08:	9f 91       	pop	r25
     d0a:	8f 91       	pop	r24
     d0c:	7f 91       	pop	r23
     d0e:	6f 91       	pop	r22
     d10:	5f 91       	pop	r21
     d12:	4f 91       	pop	r20
     d14:	3f 91       	pop	r19
     d16:	2f 91       	pop	r18
     d18:	0f 90       	pop	r0
     d1a:	0f be       	out	0x3f, r0	; 63
     d1c:	0f 90       	pop	r0
     d1e:	1f 90       	pop	r1
     d20:	18 95       	reti

00000d22 <do_rand>:
     d22:	8f 92       	push	r8
     d24:	9f 92       	push	r9
     d26:	af 92       	push	r10
     d28:	bf 92       	push	r11
     d2a:	cf 92       	push	r12
     d2c:	df 92       	push	r13
     d2e:	ef 92       	push	r14
     d30:	ff 92       	push	r15
     d32:	cf 93       	push	r28
     d34:	df 93       	push	r29
     d36:	ec 01       	movw	r28, r24
     d38:	68 81       	ld	r22, Y
     d3a:	79 81       	ldd	r23, Y+1	; 0x01
     d3c:	8a 81       	ldd	r24, Y+2	; 0x02
     d3e:	9b 81       	ldd	r25, Y+3	; 0x03
     d40:	61 15       	cp	r22, r1
     d42:	71 05       	cpc	r23, r1
     d44:	81 05       	cpc	r24, r1
     d46:	91 05       	cpc	r25, r1
     d48:	21 f4       	brne	.+8      	; 0xd52 <do_rand+0x30>
     d4a:	64 e2       	ldi	r22, 0x24	; 36
     d4c:	79 ed       	ldi	r23, 0xD9	; 217
     d4e:	8b e5       	ldi	r24, 0x5B	; 91
     d50:	97 e0       	ldi	r25, 0x07	; 7
     d52:	2d e1       	ldi	r18, 0x1D	; 29
     d54:	33 ef       	ldi	r19, 0xF3	; 243
     d56:	41 e0       	ldi	r20, 0x01	; 1
     d58:	50 e0       	ldi	r21, 0x00	; 0
     d5a:	0e 94 a8 09 	call	0x1350	; 0x1350 <__divmodsi4>
     d5e:	49 01       	movw	r8, r18
     d60:	5a 01       	movw	r10, r20
     d62:	9b 01       	movw	r18, r22
     d64:	ac 01       	movw	r20, r24
     d66:	a7 ea       	ldi	r26, 0xA7	; 167
     d68:	b1 e4       	ldi	r27, 0x41	; 65
     d6a:	0e 94 c7 09 	call	0x138e	; 0x138e <__muluhisi3>
     d6e:	6b 01       	movw	r12, r22
     d70:	7c 01       	movw	r14, r24
     d72:	ac ee       	ldi	r26, 0xEC	; 236
     d74:	b4 ef       	ldi	r27, 0xF4	; 244
     d76:	a5 01       	movw	r20, r10
     d78:	94 01       	movw	r18, r8
     d7a:	0e 94 d5 09 	call	0x13aa	; 0x13aa <__mulohisi3>
     d7e:	c6 0e       	add	r12, r22
     d80:	d7 1e       	adc	r13, r23
     d82:	e8 1e       	adc	r14, r24
     d84:	f9 1e       	adc	r15, r25
     d86:	f7 fe       	sbrs	r15, 7
     d88:	06 c0       	rjmp	.+12     	; 0xd96 <do_rand+0x74>
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	c8 1a       	sub	r12, r24
     d8e:	d1 08       	sbc	r13, r1
     d90:	e1 08       	sbc	r14, r1
     d92:	80 e8       	ldi	r24, 0x80	; 128
     d94:	f8 0a       	sbc	r15, r24
     d96:	c8 82       	st	Y, r12
     d98:	d9 82       	std	Y+1, r13	; 0x01
     d9a:	ea 82       	std	Y+2, r14	; 0x02
     d9c:	fb 82       	std	Y+3, r15	; 0x03
     d9e:	c6 01       	movw	r24, r12
     da0:	9f 77       	andi	r25, 0x7F	; 127
     da2:	df 91       	pop	r29
     da4:	cf 91       	pop	r28
     da6:	ff 90       	pop	r15
     da8:	ef 90       	pop	r14
     daa:	df 90       	pop	r13
     dac:	cf 90       	pop	r12
     dae:	bf 90       	pop	r11
     db0:	af 90       	pop	r10
     db2:	9f 90       	pop	r9
     db4:	8f 90       	pop	r8
     db6:	08 95       	ret

00000db8 <rand_r>:
     db8:	0e 94 91 06 	call	0xd22	; 0xd22 <do_rand>
     dbc:	08 95       	ret

00000dbe <rand>:
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	91 e0       	ldi	r25, 0x01	; 1
     dc2:	0e 94 91 06 	call	0xd22	; 0xd22 <do_rand>
     dc6:	08 95       	ret

00000dc8 <srand>:
     dc8:	a0 e0       	ldi	r26, 0x00	; 0
     dca:	b0 e0       	ldi	r27, 0x00	; 0
     dcc:	80 93 00 01 	sts	0x0100, r24
     dd0:	90 93 01 01 	sts	0x0101, r25
     dd4:	a0 93 02 01 	sts	0x0102, r26
     dd8:	b0 93 03 01 	sts	0x0103, r27
     ddc:	08 95       	ret

00000dde <printf>:
     dde:	a0 e0       	ldi	r26, 0x00	; 0
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	e5 ef       	ldi	r30, 0xF5	; 245
     de4:	f6 e0       	ldi	r31, 0x06	; 6
     de6:	0c 94 ea 09 	jmp	0x13d4	; 0x13d4 <__prologue_saves__+0x20>
     dea:	fe 01       	movw	r30, r28
     dec:	35 96       	adiw	r30, 0x05	; 5
     dee:	61 91       	ld	r22, Z+
     df0:	71 91       	ld	r23, Z+
     df2:	af 01       	movw	r20, r30
     df4:	80 91 61 03 	lds	r24, 0x0361
     df8:	90 91 62 03 	lds	r25, 0x0362
     dfc:	0e 94 30 07 	call	0xe60	; 0xe60 <vfprintf>
     e00:	e2 e0       	ldi	r30, 0x02	; 2
     e02:	0c 94 06 0a 	jmp	0x140c	; 0x140c <__epilogue_restores__+0x20>

00000e06 <puts>:
     e06:	0f 93       	push	r16
     e08:	1f 93       	push	r17
     e0a:	cf 93       	push	r28
     e0c:	df 93       	push	r29
     e0e:	e0 91 61 03 	lds	r30, 0x0361
     e12:	f0 91 62 03 	lds	r31, 0x0362
     e16:	23 81       	ldd	r18, Z+3	; 0x03
     e18:	21 ff       	sbrs	r18, 1
     e1a:	1b c0       	rjmp	.+54     	; 0xe52 <puts+0x4c>
     e1c:	ec 01       	movw	r28, r24
     e1e:	00 e0       	ldi	r16, 0x00	; 0
     e20:	10 e0       	ldi	r17, 0x00	; 0
     e22:	89 91       	ld	r24, Y+
     e24:	60 91 61 03 	lds	r22, 0x0361
     e28:	70 91 62 03 	lds	r23, 0x0362
     e2c:	db 01       	movw	r26, r22
     e2e:	18 96       	adiw	r26, 0x08	; 8
     e30:	ed 91       	ld	r30, X+
     e32:	fc 91       	ld	r31, X
     e34:	19 97       	sbiw	r26, 0x09	; 9
     e36:	88 23       	and	r24, r24
     e38:	31 f0       	breq	.+12     	; 0xe46 <puts+0x40>
     e3a:	09 95       	icall
     e3c:	89 2b       	or	r24, r25
     e3e:	89 f3       	breq	.-30     	; 0xe22 <puts+0x1c>
     e40:	0f ef       	ldi	r16, 0xFF	; 255
     e42:	1f ef       	ldi	r17, 0xFF	; 255
     e44:	ee cf       	rjmp	.-36     	; 0xe22 <puts+0x1c>
     e46:	8a e0       	ldi	r24, 0x0A	; 10
     e48:	09 95       	icall
     e4a:	89 2b       	or	r24, r25
     e4c:	11 f4       	brne	.+4      	; 0xe52 <puts+0x4c>
     e4e:	c8 01       	movw	r24, r16
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <puts+0x50>
     e52:	8f ef       	ldi	r24, 0xFF	; 255
     e54:	9f ef       	ldi	r25, 0xFF	; 255
     e56:	df 91       	pop	r29
     e58:	cf 91       	pop	r28
     e5a:	1f 91       	pop	r17
     e5c:	0f 91       	pop	r16
     e5e:	08 95       	ret

00000e60 <vfprintf>:
     e60:	ac e0       	ldi	r26, 0x0C	; 12
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e6 e3       	ldi	r30, 0x36	; 54
     e66:	f7 e0       	ldi	r31, 0x07	; 7
     e68:	0c 94 da 09 	jmp	0x13b4	; 0x13b4 <__prologue_saves__>
     e6c:	7c 01       	movw	r14, r24
     e6e:	6b 01       	movw	r12, r22
     e70:	8a 01       	movw	r16, r20
     e72:	fc 01       	movw	r30, r24
     e74:	17 82       	std	Z+7, r1	; 0x07
     e76:	16 82       	std	Z+6, r1	; 0x06
     e78:	83 81       	ldd	r24, Z+3	; 0x03
     e7a:	81 ff       	sbrs	r24, 1
     e7c:	bd c1       	rjmp	.+890    	; 0x11f8 <vfprintf+0x398>
     e7e:	ce 01       	movw	r24, r28
     e80:	01 96       	adiw	r24, 0x01	; 1
     e82:	4c 01       	movw	r8, r24
     e84:	f7 01       	movw	r30, r14
     e86:	93 81       	ldd	r25, Z+3	; 0x03
     e88:	f6 01       	movw	r30, r12
     e8a:	93 fd       	sbrc	r25, 3
     e8c:	85 91       	lpm	r24, Z+
     e8e:	93 ff       	sbrs	r25, 3
     e90:	81 91       	ld	r24, Z+
     e92:	6f 01       	movw	r12, r30
     e94:	88 23       	and	r24, r24
     e96:	09 f4       	brne	.+2      	; 0xe9a <vfprintf+0x3a>
     e98:	ab c1       	rjmp	.+854    	; 0x11f0 <vfprintf+0x390>
     e9a:	85 32       	cpi	r24, 0x25	; 37
     e9c:	39 f4       	brne	.+14     	; 0xeac <vfprintf+0x4c>
     e9e:	93 fd       	sbrc	r25, 3
     ea0:	85 91       	lpm	r24, Z+
     ea2:	93 ff       	sbrs	r25, 3
     ea4:	81 91       	ld	r24, Z+
     ea6:	6f 01       	movw	r12, r30
     ea8:	85 32       	cpi	r24, 0x25	; 37
     eaa:	29 f4       	brne	.+10     	; 0xeb6 <vfprintf+0x56>
     eac:	b7 01       	movw	r22, r14
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	0e 94 18 09 	call	0x1230	; 0x1230 <fputc>
     eb4:	e7 cf       	rjmp	.-50     	; 0xe84 <vfprintf+0x24>
     eb6:	51 2c       	mov	r5, r1
     eb8:	31 2c       	mov	r3, r1
     eba:	20 e0       	ldi	r18, 0x00	; 0
     ebc:	20 32       	cpi	r18, 0x20	; 32
     ebe:	a0 f4       	brcc	.+40     	; 0xee8 <vfprintf+0x88>
     ec0:	8b 32       	cpi	r24, 0x2B	; 43
     ec2:	69 f0       	breq	.+26     	; 0xede <vfprintf+0x7e>
     ec4:	30 f4       	brcc	.+12     	; 0xed2 <vfprintf+0x72>
     ec6:	80 32       	cpi	r24, 0x20	; 32
     ec8:	59 f0       	breq	.+22     	; 0xee0 <vfprintf+0x80>
     eca:	83 32       	cpi	r24, 0x23	; 35
     ecc:	69 f4       	brne	.+26     	; 0xee8 <vfprintf+0x88>
     ece:	20 61       	ori	r18, 0x10	; 16
     ed0:	2c c0       	rjmp	.+88     	; 0xf2a <vfprintf+0xca>
     ed2:	8d 32       	cpi	r24, 0x2D	; 45
     ed4:	39 f0       	breq	.+14     	; 0xee4 <vfprintf+0x84>
     ed6:	80 33       	cpi	r24, 0x30	; 48
     ed8:	39 f4       	brne	.+14     	; 0xee8 <vfprintf+0x88>
     eda:	21 60       	ori	r18, 0x01	; 1
     edc:	26 c0       	rjmp	.+76     	; 0xf2a <vfprintf+0xca>
     ede:	22 60       	ori	r18, 0x02	; 2
     ee0:	24 60       	ori	r18, 0x04	; 4
     ee2:	23 c0       	rjmp	.+70     	; 0xf2a <vfprintf+0xca>
     ee4:	28 60       	ori	r18, 0x08	; 8
     ee6:	21 c0       	rjmp	.+66     	; 0xf2a <vfprintf+0xca>
     ee8:	27 fd       	sbrc	r18, 7
     eea:	27 c0       	rjmp	.+78     	; 0xf3a <vfprintf+0xda>
     eec:	30 ed       	ldi	r19, 0xD0	; 208
     eee:	38 0f       	add	r19, r24
     ef0:	3a 30       	cpi	r19, 0x0A	; 10
     ef2:	78 f4       	brcc	.+30     	; 0xf12 <vfprintf+0xb2>
     ef4:	26 ff       	sbrs	r18, 6
     ef6:	06 c0       	rjmp	.+12     	; 0xf04 <vfprintf+0xa4>
     ef8:	fa e0       	ldi	r31, 0x0A	; 10
     efa:	5f 9e       	mul	r5, r31
     efc:	30 0d       	add	r19, r0
     efe:	11 24       	eor	r1, r1
     f00:	53 2e       	mov	r5, r19
     f02:	13 c0       	rjmp	.+38     	; 0xf2a <vfprintf+0xca>
     f04:	8a e0       	ldi	r24, 0x0A	; 10
     f06:	38 9e       	mul	r3, r24
     f08:	30 0d       	add	r19, r0
     f0a:	11 24       	eor	r1, r1
     f0c:	33 2e       	mov	r3, r19
     f0e:	20 62       	ori	r18, 0x20	; 32
     f10:	0c c0       	rjmp	.+24     	; 0xf2a <vfprintf+0xca>
     f12:	8e 32       	cpi	r24, 0x2E	; 46
     f14:	21 f4       	brne	.+8      	; 0xf1e <vfprintf+0xbe>
     f16:	26 fd       	sbrc	r18, 6
     f18:	6b c1       	rjmp	.+726    	; 0x11f0 <vfprintf+0x390>
     f1a:	20 64       	ori	r18, 0x40	; 64
     f1c:	06 c0       	rjmp	.+12     	; 0xf2a <vfprintf+0xca>
     f1e:	8c 36       	cpi	r24, 0x6C	; 108
     f20:	11 f4       	brne	.+4      	; 0xf26 <vfprintf+0xc6>
     f22:	20 68       	ori	r18, 0x80	; 128
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <vfprintf+0xca>
     f26:	88 36       	cpi	r24, 0x68	; 104
     f28:	41 f4       	brne	.+16     	; 0xf3a <vfprintf+0xda>
     f2a:	f6 01       	movw	r30, r12
     f2c:	93 fd       	sbrc	r25, 3
     f2e:	85 91       	lpm	r24, Z+
     f30:	93 ff       	sbrs	r25, 3
     f32:	81 91       	ld	r24, Z+
     f34:	6f 01       	movw	r12, r30
     f36:	81 11       	cpse	r24, r1
     f38:	c1 cf       	rjmp	.-126    	; 0xebc <vfprintf+0x5c>
     f3a:	98 2f       	mov	r25, r24
     f3c:	9f 7d       	andi	r25, 0xDF	; 223
     f3e:	95 54       	subi	r25, 0x45	; 69
     f40:	93 30       	cpi	r25, 0x03	; 3
     f42:	28 f4       	brcc	.+10     	; 0xf4e <vfprintf+0xee>
     f44:	0c 5f       	subi	r16, 0xFC	; 252
     f46:	1f 4f       	sbci	r17, 0xFF	; 255
     f48:	ff e3       	ldi	r31, 0x3F	; 63
     f4a:	f9 83       	std	Y+1, r31	; 0x01
     f4c:	0d c0       	rjmp	.+26     	; 0xf68 <vfprintf+0x108>
     f4e:	83 36       	cpi	r24, 0x63	; 99
     f50:	31 f0       	breq	.+12     	; 0xf5e <vfprintf+0xfe>
     f52:	83 37       	cpi	r24, 0x73	; 115
     f54:	71 f0       	breq	.+28     	; 0xf72 <vfprintf+0x112>
     f56:	83 35       	cpi	r24, 0x53	; 83
     f58:	09 f0       	breq	.+2      	; 0xf5c <vfprintf+0xfc>
     f5a:	5b c0       	rjmp	.+182    	; 0x1012 <vfprintf+0x1b2>
     f5c:	22 c0       	rjmp	.+68     	; 0xfa2 <vfprintf+0x142>
     f5e:	f8 01       	movw	r30, r16
     f60:	80 81       	ld	r24, Z
     f62:	89 83       	std	Y+1, r24	; 0x01
     f64:	0e 5f       	subi	r16, 0xFE	; 254
     f66:	1f 4f       	sbci	r17, 0xFF	; 255
     f68:	44 24       	eor	r4, r4
     f6a:	43 94       	inc	r4
     f6c:	51 2c       	mov	r5, r1
     f6e:	54 01       	movw	r10, r8
     f70:	15 c0       	rjmp	.+42     	; 0xf9c <vfprintf+0x13c>
     f72:	38 01       	movw	r6, r16
     f74:	f2 e0       	ldi	r31, 0x02	; 2
     f76:	6f 0e       	add	r6, r31
     f78:	71 1c       	adc	r7, r1
     f7a:	f8 01       	movw	r30, r16
     f7c:	a0 80       	ld	r10, Z
     f7e:	b1 80       	ldd	r11, Z+1	; 0x01
     f80:	26 ff       	sbrs	r18, 6
     f82:	03 c0       	rjmp	.+6      	; 0xf8a <vfprintf+0x12a>
     f84:	65 2d       	mov	r22, r5
     f86:	70 e0       	ldi	r23, 0x00	; 0
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <vfprintf+0x12e>
     f8a:	6f ef       	ldi	r22, 0xFF	; 255
     f8c:	7f ef       	ldi	r23, 0xFF	; 255
     f8e:	c5 01       	movw	r24, r10
     f90:	2c 87       	std	Y+12, r18	; 0x0c
     f92:	0e 94 0d 09 	call	0x121a	; 0x121a <strnlen>
     f96:	2c 01       	movw	r4, r24
     f98:	83 01       	movw	r16, r6
     f9a:	2c 85       	ldd	r18, Y+12	; 0x0c
     f9c:	2f 77       	andi	r18, 0x7F	; 127
     f9e:	22 2e       	mov	r2, r18
     fa0:	17 c0       	rjmp	.+46     	; 0xfd0 <vfprintf+0x170>
     fa2:	38 01       	movw	r6, r16
     fa4:	f2 e0       	ldi	r31, 0x02	; 2
     fa6:	6f 0e       	add	r6, r31
     fa8:	71 1c       	adc	r7, r1
     faa:	f8 01       	movw	r30, r16
     fac:	a0 80       	ld	r10, Z
     fae:	b1 80       	ldd	r11, Z+1	; 0x01
     fb0:	26 ff       	sbrs	r18, 6
     fb2:	03 c0       	rjmp	.+6      	; 0xfba <vfprintf+0x15a>
     fb4:	65 2d       	mov	r22, r5
     fb6:	70 e0       	ldi	r23, 0x00	; 0
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <vfprintf+0x15e>
     fba:	6f ef       	ldi	r22, 0xFF	; 255
     fbc:	7f ef       	ldi	r23, 0xFF	; 255
     fbe:	c5 01       	movw	r24, r10
     fc0:	2c 87       	std	Y+12, r18	; 0x0c
     fc2:	0e 94 02 09 	call	0x1204	; 0x1204 <strnlen_P>
     fc6:	2c 01       	movw	r4, r24
     fc8:	2c 85       	ldd	r18, Y+12	; 0x0c
     fca:	20 68       	ori	r18, 0x80	; 128
     fcc:	22 2e       	mov	r2, r18
     fce:	83 01       	movw	r16, r6
     fd0:	23 fc       	sbrc	r2, 3
     fd2:	1b c0       	rjmp	.+54     	; 0x100a <vfprintf+0x1aa>
     fd4:	83 2d       	mov	r24, r3
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	48 16       	cp	r4, r24
     fda:	59 06       	cpc	r5, r25
     fdc:	b0 f4       	brcc	.+44     	; 0x100a <vfprintf+0x1aa>
     fde:	b7 01       	movw	r22, r14
     fe0:	80 e2       	ldi	r24, 0x20	; 32
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	0e 94 18 09 	call	0x1230	; 0x1230 <fputc>
     fe8:	3a 94       	dec	r3
     fea:	f4 cf       	rjmp	.-24     	; 0xfd4 <vfprintf+0x174>
     fec:	f5 01       	movw	r30, r10
     fee:	27 fc       	sbrc	r2, 7
     ff0:	85 91       	lpm	r24, Z+
     ff2:	27 fe       	sbrs	r2, 7
     ff4:	81 91       	ld	r24, Z+
     ff6:	5f 01       	movw	r10, r30
     ff8:	b7 01       	movw	r22, r14
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	0e 94 18 09 	call	0x1230	; 0x1230 <fputc>
    1000:	31 10       	cpse	r3, r1
    1002:	3a 94       	dec	r3
    1004:	f1 e0       	ldi	r31, 0x01	; 1
    1006:	4f 1a       	sub	r4, r31
    1008:	51 08       	sbc	r5, r1
    100a:	41 14       	cp	r4, r1
    100c:	51 04       	cpc	r5, r1
    100e:	71 f7       	brne	.-36     	; 0xfec <vfprintf+0x18c>
    1010:	e5 c0       	rjmp	.+458    	; 0x11dc <vfprintf+0x37c>
    1012:	84 36       	cpi	r24, 0x64	; 100
    1014:	11 f0       	breq	.+4      	; 0x101a <vfprintf+0x1ba>
    1016:	89 36       	cpi	r24, 0x69	; 105
    1018:	39 f5       	brne	.+78     	; 0x1068 <vfprintf+0x208>
    101a:	f8 01       	movw	r30, r16
    101c:	27 ff       	sbrs	r18, 7
    101e:	07 c0       	rjmp	.+14     	; 0x102e <vfprintf+0x1ce>
    1020:	60 81       	ld	r22, Z
    1022:	71 81       	ldd	r23, Z+1	; 0x01
    1024:	82 81       	ldd	r24, Z+2	; 0x02
    1026:	93 81       	ldd	r25, Z+3	; 0x03
    1028:	0c 5f       	subi	r16, 0xFC	; 252
    102a:	1f 4f       	sbci	r17, 0xFF	; 255
    102c:	08 c0       	rjmp	.+16     	; 0x103e <vfprintf+0x1de>
    102e:	60 81       	ld	r22, Z
    1030:	71 81       	ldd	r23, Z+1	; 0x01
    1032:	88 27       	eor	r24, r24
    1034:	77 fd       	sbrc	r23, 7
    1036:	80 95       	com	r24
    1038:	98 2f       	mov	r25, r24
    103a:	0e 5f       	subi	r16, 0xFE	; 254
    103c:	1f 4f       	sbci	r17, 0xFF	; 255
    103e:	2f 76       	andi	r18, 0x6F	; 111
    1040:	b2 2e       	mov	r11, r18
    1042:	97 ff       	sbrs	r25, 7
    1044:	09 c0       	rjmp	.+18     	; 0x1058 <vfprintf+0x1f8>
    1046:	90 95       	com	r25
    1048:	80 95       	com	r24
    104a:	70 95       	com	r23
    104c:	61 95       	neg	r22
    104e:	7f 4f       	sbci	r23, 0xFF	; 255
    1050:	8f 4f       	sbci	r24, 0xFF	; 255
    1052:	9f 4f       	sbci	r25, 0xFF	; 255
    1054:	20 68       	ori	r18, 0x80	; 128
    1056:	b2 2e       	mov	r11, r18
    1058:	2a e0       	ldi	r18, 0x0A	; 10
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	a4 01       	movw	r20, r8
    105e:	0e 94 4a 09 	call	0x1294	; 0x1294 <__ultoa_invert>
    1062:	a8 2e       	mov	r10, r24
    1064:	a8 18       	sub	r10, r8
    1066:	44 c0       	rjmp	.+136    	; 0x10f0 <vfprintf+0x290>
    1068:	85 37       	cpi	r24, 0x75	; 117
    106a:	29 f4       	brne	.+10     	; 0x1076 <vfprintf+0x216>
    106c:	2f 7e       	andi	r18, 0xEF	; 239
    106e:	b2 2e       	mov	r11, r18
    1070:	2a e0       	ldi	r18, 0x0A	; 10
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	25 c0       	rjmp	.+74     	; 0x10c0 <vfprintf+0x260>
    1076:	f2 2f       	mov	r31, r18
    1078:	f9 7f       	andi	r31, 0xF9	; 249
    107a:	bf 2e       	mov	r11, r31
    107c:	8f 36       	cpi	r24, 0x6F	; 111
    107e:	c1 f0       	breq	.+48     	; 0x10b0 <vfprintf+0x250>
    1080:	18 f4       	brcc	.+6      	; 0x1088 <vfprintf+0x228>
    1082:	88 35       	cpi	r24, 0x58	; 88
    1084:	79 f0       	breq	.+30     	; 0x10a4 <vfprintf+0x244>
    1086:	b4 c0       	rjmp	.+360    	; 0x11f0 <vfprintf+0x390>
    1088:	80 37       	cpi	r24, 0x70	; 112
    108a:	19 f0       	breq	.+6      	; 0x1092 <vfprintf+0x232>
    108c:	88 37       	cpi	r24, 0x78	; 120
    108e:	21 f0       	breq	.+8      	; 0x1098 <vfprintf+0x238>
    1090:	af c0       	rjmp	.+350    	; 0x11f0 <vfprintf+0x390>
    1092:	2f 2f       	mov	r18, r31
    1094:	20 61       	ori	r18, 0x10	; 16
    1096:	b2 2e       	mov	r11, r18
    1098:	b4 fe       	sbrs	r11, 4
    109a:	0d c0       	rjmp	.+26     	; 0x10b6 <vfprintf+0x256>
    109c:	8b 2d       	mov	r24, r11
    109e:	84 60       	ori	r24, 0x04	; 4
    10a0:	b8 2e       	mov	r11, r24
    10a2:	09 c0       	rjmp	.+18     	; 0x10b6 <vfprintf+0x256>
    10a4:	24 ff       	sbrs	r18, 4
    10a6:	0a c0       	rjmp	.+20     	; 0x10bc <vfprintf+0x25c>
    10a8:	9f 2f       	mov	r25, r31
    10aa:	96 60       	ori	r25, 0x06	; 6
    10ac:	b9 2e       	mov	r11, r25
    10ae:	06 c0       	rjmp	.+12     	; 0x10bc <vfprintf+0x25c>
    10b0:	28 e0       	ldi	r18, 0x08	; 8
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	05 c0       	rjmp	.+10     	; 0x10c0 <vfprintf+0x260>
    10b6:	20 e1       	ldi	r18, 0x10	; 16
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	02 c0       	rjmp	.+4      	; 0x10c0 <vfprintf+0x260>
    10bc:	20 e1       	ldi	r18, 0x10	; 16
    10be:	32 e0       	ldi	r19, 0x02	; 2
    10c0:	f8 01       	movw	r30, r16
    10c2:	b7 fe       	sbrs	r11, 7
    10c4:	07 c0       	rjmp	.+14     	; 0x10d4 <vfprintf+0x274>
    10c6:	60 81       	ld	r22, Z
    10c8:	71 81       	ldd	r23, Z+1	; 0x01
    10ca:	82 81       	ldd	r24, Z+2	; 0x02
    10cc:	93 81       	ldd	r25, Z+3	; 0x03
    10ce:	0c 5f       	subi	r16, 0xFC	; 252
    10d0:	1f 4f       	sbci	r17, 0xFF	; 255
    10d2:	06 c0       	rjmp	.+12     	; 0x10e0 <vfprintf+0x280>
    10d4:	60 81       	ld	r22, Z
    10d6:	71 81       	ldd	r23, Z+1	; 0x01
    10d8:	80 e0       	ldi	r24, 0x00	; 0
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	0e 5f       	subi	r16, 0xFE	; 254
    10de:	1f 4f       	sbci	r17, 0xFF	; 255
    10e0:	a4 01       	movw	r20, r8
    10e2:	0e 94 4a 09 	call	0x1294	; 0x1294 <__ultoa_invert>
    10e6:	a8 2e       	mov	r10, r24
    10e8:	a8 18       	sub	r10, r8
    10ea:	fb 2d       	mov	r31, r11
    10ec:	ff 77       	andi	r31, 0x7F	; 127
    10ee:	bf 2e       	mov	r11, r31
    10f0:	b6 fe       	sbrs	r11, 6
    10f2:	0b c0       	rjmp	.+22     	; 0x110a <vfprintf+0x2aa>
    10f4:	2b 2d       	mov	r18, r11
    10f6:	2e 7f       	andi	r18, 0xFE	; 254
    10f8:	a5 14       	cp	r10, r5
    10fa:	50 f4       	brcc	.+20     	; 0x1110 <vfprintf+0x2b0>
    10fc:	b4 fe       	sbrs	r11, 4
    10fe:	0a c0       	rjmp	.+20     	; 0x1114 <vfprintf+0x2b4>
    1100:	b2 fc       	sbrc	r11, 2
    1102:	08 c0       	rjmp	.+16     	; 0x1114 <vfprintf+0x2b4>
    1104:	2b 2d       	mov	r18, r11
    1106:	2e 7e       	andi	r18, 0xEE	; 238
    1108:	05 c0       	rjmp	.+10     	; 0x1114 <vfprintf+0x2b4>
    110a:	7a 2c       	mov	r7, r10
    110c:	2b 2d       	mov	r18, r11
    110e:	03 c0       	rjmp	.+6      	; 0x1116 <vfprintf+0x2b6>
    1110:	7a 2c       	mov	r7, r10
    1112:	01 c0       	rjmp	.+2      	; 0x1116 <vfprintf+0x2b6>
    1114:	75 2c       	mov	r7, r5
    1116:	24 ff       	sbrs	r18, 4
    1118:	0d c0       	rjmp	.+26     	; 0x1134 <vfprintf+0x2d4>
    111a:	fe 01       	movw	r30, r28
    111c:	ea 0d       	add	r30, r10
    111e:	f1 1d       	adc	r31, r1
    1120:	80 81       	ld	r24, Z
    1122:	80 33       	cpi	r24, 0x30	; 48
    1124:	11 f4       	brne	.+4      	; 0x112a <vfprintf+0x2ca>
    1126:	29 7e       	andi	r18, 0xE9	; 233
    1128:	09 c0       	rjmp	.+18     	; 0x113c <vfprintf+0x2dc>
    112a:	22 ff       	sbrs	r18, 2
    112c:	06 c0       	rjmp	.+12     	; 0x113a <vfprintf+0x2da>
    112e:	73 94       	inc	r7
    1130:	73 94       	inc	r7
    1132:	04 c0       	rjmp	.+8      	; 0x113c <vfprintf+0x2dc>
    1134:	82 2f       	mov	r24, r18
    1136:	86 78       	andi	r24, 0x86	; 134
    1138:	09 f0       	breq	.+2      	; 0x113c <vfprintf+0x2dc>
    113a:	73 94       	inc	r7
    113c:	23 fd       	sbrc	r18, 3
    113e:	13 c0       	rjmp	.+38     	; 0x1166 <vfprintf+0x306>
    1140:	20 ff       	sbrs	r18, 0
    1142:	06 c0       	rjmp	.+12     	; 0x1150 <vfprintf+0x2f0>
    1144:	5a 2c       	mov	r5, r10
    1146:	73 14       	cp	r7, r3
    1148:	18 f4       	brcc	.+6      	; 0x1150 <vfprintf+0x2f0>
    114a:	53 0c       	add	r5, r3
    114c:	57 18       	sub	r5, r7
    114e:	73 2c       	mov	r7, r3
    1150:	73 14       	cp	r7, r3
    1152:	68 f4       	brcc	.+26     	; 0x116e <vfprintf+0x30e>
    1154:	b7 01       	movw	r22, r14
    1156:	80 e2       	ldi	r24, 0x20	; 32
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	2c 87       	std	Y+12, r18	; 0x0c
    115c:	0e 94 18 09 	call	0x1230	; 0x1230 <fputc>
    1160:	73 94       	inc	r7
    1162:	2c 85       	ldd	r18, Y+12	; 0x0c
    1164:	f5 cf       	rjmp	.-22     	; 0x1150 <vfprintf+0x2f0>
    1166:	73 14       	cp	r7, r3
    1168:	10 f4       	brcc	.+4      	; 0x116e <vfprintf+0x30e>
    116a:	37 18       	sub	r3, r7
    116c:	01 c0       	rjmp	.+2      	; 0x1170 <vfprintf+0x310>
    116e:	31 2c       	mov	r3, r1
    1170:	24 ff       	sbrs	r18, 4
    1172:	12 c0       	rjmp	.+36     	; 0x1198 <vfprintf+0x338>
    1174:	b7 01       	movw	r22, r14
    1176:	80 e3       	ldi	r24, 0x30	; 48
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	2c 87       	std	Y+12, r18	; 0x0c
    117c:	0e 94 18 09 	call	0x1230	; 0x1230 <fputc>
    1180:	2c 85       	ldd	r18, Y+12	; 0x0c
    1182:	22 ff       	sbrs	r18, 2
    1184:	17 c0       	rjmp	.+46     	; 0x11b4 <vfprintf+0x354>
    1186:	21 ff       	sbrs	r18, 1
    1188:	03 c0       	rjmp	.+6      	; 0x1190 <vfprintf+0x330>
    118a:	88 e5       	ldi	r24, 0x58	; 88
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	02 c0       	rjmp	.+4      	; 0x1194 <vfprintf+0x334>
    1190:	88 e7       	ldi	r24, 0x78	; 120
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	b7 01       	movw	r22, r14
    1196:	0c c0       	rjmp	.+24     	; 0x11b0 <vfprintf+0x350>
    1198:	82 2f       	mov	r24, r18
    119a:	86 78       	andi	r24, 0x86	; 134
    119c:	59 f0       	breq	.+22     	; 0x11b4 <vfprintf+0x354>
    119e:	21 fd       	sbrc	r18, 1
    11a0:	02 c0       	rjmp	.+4      	; 0x11a6 <vfprintf+0x346>
    11a2:	80 e2       	ldi	r24, 0x20	; 32
    11a4:	01 c0       	rjmp	.+2      	; 0x11a8 <vfprintf+0x348>
    11a6:	8b e2       	ldi	r24, 0x2B	; 43
    11a8:	27 fd       	sbrc	r18, 7
    11aa:	8d e2       	ldi	r24, 0x2D	; 45
    11ac:	b7 01       	movw	r22, r14
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	0e 94 18 09 	call	0x1230	; 0x1230 <fputc>
    11b4:	a5 14       	cp	r10, r5
    11b6:	38 f4       	brcc	.+14     	; 0x11c6 <vfprintf+0x366>
    11b8:	b7 01       	movw	r22, r14
    11ba:	80 e3       	ldi	r24, 0x30	; 48
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	0e 94 18 09 	call	0x1230	; 0x1230 <fputc>
    11c2:	5a 94       	dec	r5
    11c4:	f7 cf       	rjmp	.-18     	; 0x11b4 <vfprintf+0x354>
    11c6:	aa 94       	dec	r10
    11c8:	f4 01       	movw	r30, r8
    11ca:	ea 0d       	add	r30, r10
    11cc:	f1 1d       	adc	r31, r1
    11ce:	80 81       	ld	r24, Z
    11d0:	b7 01       	movw	r22, r14
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	0e 94 18 09 	call	0x1230	; 0x1230 <fputc>
    11d8:	a1 10       	cpse	r10, r1
    11da:	f5 cf       	rjmp	.-22     	; 0x11c6 <vfprintf+0x366>
    11dc:	33 20       	and	r3, r3
    11de:	09 f4       	brne	.+2      	; 0x11e2 <vfprintf+0x382>
    11e0:	51 ce       	rjmp	.-862    	; 0xe84 <vfprintf+0x24>
    11e2:	b7 01       	movw	r22, r14
    11e4:	80 e2       	ldi	r24, 0x20	; 32
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	0e 94 18 09 	call	0x1230	; 0x1230 <fputc>
    11ec:	3a 94       	dec	r3
    11ee:	f6 cf       	rjmp	.-20     	; 0x11dc <vfprintf+0x37c>
    11f0:	f7 01       	movw	r30, r14
    11f2:	86 81       	ldd	r24, Z+6	; 0x06
    11f4:	97 81       	ldd	r25, Z+7	; 0x07
    11f6:	02 c0       	rjmp	.+4      	; 0x11fc <vfprintf+0x39c>
    11f8:	8f ef       	ldi	r24, 0xFF	; 255
    11fa:	9f ef       	ldi	r25, 0xFF	; 255
    11fc:	2c 96       	adiw	r28, 0x0c	; 12
    11fe:	e2 e1       	ldi	r30, 0x12	; 18
    1200:	0c 94 f6 09 	jmp	0x13ec	; 0x13ec <__epilogue_restores__>

00001204 <strnlen_P>:
    1204:	fc 01       	movw	r30, r24
    1206:	05 90       	lpm	r0, Z+
    1208:	61 50       	subi	r22, 0x01	; 1
    120a:	70 40       	sbci	r23, 0x00	; 0
    120c:	01 10       	cpse	r0, r1
    120e:	d8 f7       	brcc	.-10     	; 0x1206 <strnlen_P+0x2>
    1210:	80 95       	com	r24
    1212:	90 95       	com	r25
    1214:	8e 0f       	add	r24, r30
    1216:	9f 1f       	adc	r25, r31
    1218:	08 95       	ret

0000121a <strnlen>:
    121a:	fc 01       	movw	r30, r24
    121c:	61 50       	subi	r22, 0x01	; 1
    121e:	70 40       	sbci	r23, 0x00	; 0
    1220:	01 90       	ld	r0, Z+
    1222:	01 10       	cpse	r0, r1
    1224:	d8 f7       	brcc	.-10     	; 0x121c <strnlen+0x2>
    1226:	80 95       	com	r24
    1228:	90 95       	com	r25
    122a:	8e 0f       	add	r24, r30
    122c:	9f 1f       	adc	r25, r31
    122e:	08 95       	ret

00001230 <fputc>:
    1230:	0f 93       	push	r16
    1232:	1f 93       	push	r17
    1234:	cf 93       	push	r28
    1236:	df 93       	push	r29
    1238:	18 2f       	mov	r17, r24
    123a:	09 2f       	mov	r16, r25
    123c:	eb 01       	movw	r28, r22
    123e:	8b 81       	ldd	r24, Y+3	; 0x03
    1240:	81 fd       	sbrc	r24, 1
    1242:	03 c0       	rjmp	.+6      	; 0x124a <fputc+0x1a>
    1244:	8f ef       	ldi	r24, 0xFF	; 255
    1246:	9f ef       	ldi	r25, 0xFF	; 255
    1248:	20 c0       	rjmp	.+64     	; 0x128a <fputc+0x5a>
    124a:	82 ff       	sbrs	r24, 2
    124c:	10 c0       	rjmp	.+32     	; 0x126e <fputc+0x3e>
    124e:	4e 81       	ldd	r20, Y+6	; 0x06
    1250:	5f 81       	ldd	r21, Y+7	; 0x07
    1252:	2c 81       	ldd	r18, Y+4	; 0x04
    1254:	3d 81       	ldd	r19, Y+5	; 0x05
    1256:	42 17       	cp	r20, r18
    1258:	53 07       	cpc	r21, r19
    125a:	7c f4       	brge	.+30     	; 0x127a <fputc+0x4a>
    125c:	e8 81       	ld	r30, Y
    125e:	f9 81       	ldd	r31, Y+1	; 0x01
    1260:	9f 01       	movw	r18, r30
    1262:	2f 5f       	subi	r18, 0xFF	; 255
    1264:	3f 4f       	sbci	r19, 0xFF	; 255
    1266:	39 83       	std	Y+1, r19	; 0x01
    1268:	28 83       	st	Y, r18
    126a:	10 83       	st	Z, r17
    126c:	06 c0       	rjmp	.+12     	; 0x127a <fputc+0x4a>
    126e:	e8 85       	ldd	r30, Y+8	; 0x08
    1270:	f9 85       	ldd	r31, Y+9	; 0x09
    1272:	81 2f       	mov	r24, r17
    1274:	09 95       	icall
    1276:	89 2b       	or	r24, r25
    1278:	29 f7       	brne	.-54     	; 0x1244 <fputc+0x14>
    127a:	2e 81       	ldd	r18, Y+6	; 0x06
    127c:	3f 81       	ldd	r19, Y+7	; 0x07
    127e:	2f 5f       	subi	r18, 0xFF	; 255
    1280:	3f 4f       	sbci	r19, 0xFF	; 255
    1282:	3f 83       	std	Y+7, r19	; 0x07
    1284:	2e 83       	std	Y+6, r18	; 0x06
    1286:	81 2f       	mov	r24, r17
    1288:	90 2f       	mov	r25, r16
    128a:	df 91       	pop	r29
    128c:	cf 91       	pop	r28
    128e:	1f 91       	pop	r17
    1290:	0f 91       	pop	r16
    1292:	08 95       	ret

00001294 <__ultoa_invert>:
    1294:	fa 01       	movw	r30, r20
    1296:	aa 27       	eor	r26, r26
    1298:	28 30       	cpi	r18, 0x08	; 8
    129a:	51 f1       	breq	.+84     	; 0x12f0 <__ultoa_invert+0x5c>
    129c:	20 31       	cpi	r18, 0x10	; 16
    129e:	81 f1       	breq	.+96     	; 0x1300 <__ultoa_invert+0x6c>
    12a0:	e8 94       	clt
    12a2:	6f 93       	push	r22
    12a4:	6e 7f       	andi	r22, 0xFE	; 254
    12a6:	6e 5f       	subi	r22, 0xFE	; 254
    12a8:	7f 4f       	sbci	r23, 0xFF	; 255
    12aa:	8f 4f       	sbci	r24, 0xFF	; 255
    12ac:	9f 4f       	sbci	r25, 0xFF	; 255
    12ae:	af 4f       	sbci	r26, 0xFF	; 255
    12b0:	b1 e0       	ldi	r27, 0x01	; 1
    12b2:	3e d0       	rcall	.+124    	; 0x1330 <__ultoa_invert+0x9c>
    12b4:	b4 e0       	ldi	r27, 0x04	; 4
    12b6:	3c d0       	rcall	.+120    	; 0x1330 <__ultoa_invert+0x9c>
    12b8:	67 0f       	add	r22, r23
    12ba:	78 1f       	adc	r23, r24
    12bc:	89 1f       	adc	r24, r25
    12be:	9a 1f       	adc	r25, r26
    12c0:	a1 1d       	adc	r26, r1
    12c2:	68 0f       	add	r22, r24
    12c4:	79 1f       	adc	r23, r25
    12c6:	8a 1f       	adc	r24, r26
    12c8:	91 1d       	adc	r25, r1
    12ca:	a1 1d       	adc	r26, r1
    12cc:	6a 0f       	add	r22, r26
    12ce:	71 1d       	adc	r23, r1
    12d0:	81 1d       	adc	r24, r1
    12d2:	91 1d       	adc	r25, r1
    12d4:	a1 1d       	adc	r26, r1
    12d6:	20 d0       	rcall	.+64     	; 0x1318 <__ultoa_invert+0x84>
    12d8:	09 f4       	brne	.+2      	; 0x12dc <__ultoa_invert+0x48>
    12da:	68 94       	set
    12dc:	3f 91       	pop	r19
    12de:	2a e0       	ldi	r18, 0x0A	; 10
    12e0:	26 9f       	mul	r18, r22
    12e2:	11 24       	eor	r1, r1
    12e4:	30 19       	sub	r19, r0
    12e6:	30 5d       	subi	r19, 0xD0	; 208
    12e8:	31 93       	st	Z+, r19
    12ea:	de f6       	brtc	.-74     	; 0x12a2 <__ultoa_invert+0xe>
    12ec:	cf 01       	movw	r24, r30
    12ee:	08 95       	ret
    12f0:	46 2f       	mov	r20, r22
    12f2:	47 70       	andi	r20, 0x07	; 7
    12f4:	40 5d       	subi	r20, 0xD0	; 208
    12f6:	41 93       	st	Z+, r20
    12f8:	b3 e0       	ldi	r27, 0x03	; 3
    12fa:	0f d0       	rcall	.+30     	; 0x131a <__ultoa_invert+0x86>
    12fc:	c9 f7       	brne	.-14     	; 0x12f0 <__ultoa_invert+0x5c>
    12fe:	f6 cf       	rjmp	.-20     	; 0x12ec <__ultoa_invert+0x58>
    1300:	46 2f       	mov	r20, r22
    1302:	4f 70       	andi	r20, 0x0F	; 15
    1304:	40 5d       	subi	r20, 0xD0	; 208
    1306:	4a 33       	cpi	r20, 0x3A	; 58
    1308:	18 f0       	brcs	.+6      	; 0x1310 <__ultoa_invert+0x7c>
    130a:	49 5d       	subi	r20, 0xD9	; 217
    130c:	31 fd       	sbrc	r19, 1
    130e:	40 52       	subi	r20, 0x20	; 32
    1310:	41 93       	st	Z+, r20
    1312:	02 d0       	rcall	.+4      	; 0x1318 <__ultoa_invert+0x84>
    1314:	a9 f7       	brne	.-22     	; 0x1300 <__ultoa_invert+0x6c>
    1316:	ea cf       	rjmp	.-44     	; 0x12ec <__ultoa_invert+0x58>
    1318:	b4 e0       	ldi	r27, 0x04	; 4
    131a:	a6 95       	lsr	r26
    131c:	97 95       	ror	r25
    131e:	87 95       	ror	r24
    1320:	77 95       	ror	r23
    1322:	67 95       	ror	r22
    1324:	ba 95       	dec	r27
    1326:	c9 f7       	brne	.-14     	; 0x131a <__ultoa_invert+0x86>
    1328:	00 97       	sbiw	r24, 0x00	; 0
    132a:	61 05       	cpc	r22, r1
    132c:	71 05       	cpc	r23, r1
    132e:	08 95       	ret
    1330:	9b 01       	movw	r18, r22
    1332:	ac 01       	movw	r20, r24
    1334:	0a 2e       	mov	r0, r26
    1336:	06 94       	lsr	r0
    1338:	57 95       	ror	r21
    133a:	47 95       	ror	r20
    133c:	37 95       	ror	r19
    133e:	27 95       	ror	r18
    1340:	ba 95       	dec	r27
    1342:	c9 f7       	brne	.-14     	; 0x1336 <__ultoa_invert+0xa2>
    1344:	62 0f       	add	r22, r18
    1346:	73 1f       	adc	r23, r19
    1348:	84 1f       	adc	r24, r20
    134a:	95 1f       	adc	r25, r21
    134c:	a0 1d       	adc	r26, r0
    134e:	08 95       	ret

00001350 <__divmodsi4>:
    1350:	05 2e       	mov	r0, r21
    1352:	97 fb       	bst	r25, 7
    1354:	1e f4       	brtc	.+6      	; 0x135c <__divmodsi4+0xc>
    1356:	00 94       	com	r0
    1358:	0e 94 bf 09 	call	0x137e	; 0x137e <__negsi2>
    135c:	57 fd       	sbrc	r21, 7
    135e:	07 d0       	rcall	.+14     	; 0x136e <__divmodsi4_neg2>
    1360:	0e 94 11 0a 	call	0x1422	; 0x1422 <__udivmodsi4>
    1364:	07 fc       	sbrc	r0, 7
    1366:	03 d0       	rcall	.+6      	; 0x136e <__divmodsi4_neg2>
    1368:	4e f4       	brtc	.+18     	; 0x137c <__divmodsi4_exit>
    136a:	0c 94 bf 09 	jmp	0x137e	; 0x137e <__negsi2>

0000136e <__divmodsi4_neg2>:
    136e:	50 95       	com	r21
    1370:	40 95       	com	r20
    1372:	30 95       	com	r19
    1374:	21 95       	neg	r18
    1376:	3f 4f       	sbci	r19, 0xFF	; 255
    1378:	4f 4f       	sbci	r20, 0xFF	; 255
    137a:	5f 4f       	sbci	r21, 0xFF	; 255

0000137c <__divmodsi4_exit>:
    137c:	08 95       	ret

0000137e <__negsi2>:
    137e:	90 95       	com	r25
    1380:	80 95       	com	r24
    1382:	70 95       	com	r23
    1384:	61 95       	neg	r22
    1386:	7f 4f       	sbci	r23, 0xFF	; 255
    1388:	8f 4f       	sbci	r24, 0xFF	; 255
    138a:	9f 4f       	sbci	r25, 0xFF	; 255
    138c:	08 95       	ret

0000138e <__muluhisi3>:
    138e:	0e 94 33 0a 	call	0x1466	; 0x1466 <__umulhisi3>
    1392:	a5 9f       	mul	r26, r21
    1394:	90 0d       	add	r25, r0
    1396:	b4 9f       	mul	r27, r20
    1398:	90 0d       	add	r25, r0
    139a:	a4 9f       	mul	r26, r20
    139c:	80 0d       	add	r24, r0
    139e:	91 1d       	adc	r25, r1
    13a0:	11 24       	eor	r1, r1
    13a2:	08 95       	ret

000013a4 <__mulshisi3>:
    13a4:	b7 ff       	sbrs	r27, 7
    13a6:	0c 94 c7 09 	jmp	0x138e	; 0x138e <__muluhisi3>

000013aa <__mulohisi3>:
    13aa:	0e 94 c7 09 	call	0x138e	; 0x138e <__muluhisi3>
    13ae:	82 1b       	sub	r24, r18
    13b0:	93 0b       	sbc	r25, r19
    13b2:	08 95       	ret

000013b4 <__prologue_saves__>:
    13b4:	2f 92       	push	r2
    13b6:	3f 92       	push	r3
    13b8:	4f 92       	push	r4
    13ba:	5f 92       	push	r5
    13bc:	6f 92       	push	r6
    13be:	7f 92       	push	r7
    13c0:	8f 92       	push	r8
    13c2:	9f 92       	push	r9
    13c4:	af 92       	push	r10
    13c6:	bf 92       	push	r11
    13c8:	cf 92       	push	r12
    13ca:	df 92       	push	r13
    13cc:	ef 92       	push	r14
    13ce:	ff 92       	push	r15
    13d0:	0f 93       	push	r16
    13d2:	1f 93       	push	r17
    13d4:	cf 93       	push	r28
    13d6:	df 93       	push	r29
    13d8:	cd b7       	in	r28, 0x3d	; 61
    13da:	de b7       	in	r29, 0x3e	; 62
    13dc:	ca 1b       	sub	r28, r26
    13de:	db 0b       	sbc	r29, r27
    13e0:	0f b6       	in	r0, 0x3f	; 63
    13e2:	f8 94       	cli
    13e4:	de bf       	out	0x3e, r29	; 62
    13e6:	0f be       	out	0x3f, r0	; 63
    13e8:	cd bf       	out	0x3d, r28	; 61
    13ea:	09 94       	ijmp

000013ec <__epilogue_restores__>:
    13ec:	2a 88       	ldd	r2, Y+18	; 0x12
    13ee:	39 88       	ldd	r3, Y+17	; 0x11
    13f0:	48 88       	ldd	r4, Y+16	; 0x10
    13f2:	5f 84       	ldd	r5, Y+15	; 0x0f
    13f4:	6e 84       	ldd	r6, Y+14	; 0x0e
    13f6:	7d 84       	ldd	r7, Y+13	; 0x0d
    13f8:	8c 84       	ldd	r8, Y+12	; 0x0c
    13fa:	9b 84       	ldd	r9, Y+11	; 0x0b
    13fc:	aa 84       	ldd	r10, Y+10	; 0x0a
    13fe:	b9 84       	ldd	r11, Y+9	; 0x09
    1400:	c8 84       	ldd	r12, Y+8	; 0x08
    1402:	df 80       	ldd	r13, Y+7	; 0x07
    1404:	ee 80       	ldd	r14, Y+6	; 0x06
    1406:	fd 80       	ldd	r15, Y+5	; 0x05
    1408:	0c 81       	ldd	r16, Y+4	; 0x04
    140a:	1b 81       	ldd	r17, Y+3	; 0x03
    140c:	aa 81       	ldd	r26, Y+2	; 0x02
    140e:	b9 81       	ldd	r27, Y+1	; 0x01
    1410:	ce 0f       	add	r28, r30
    1412:	d1 1d       	adc	r29, r1
    1414:	0f b6       	in	r0, 0x3f	; 63
    1416:	f8 94       	cli
    1418:	de bf       	out	0x3e, r29	; 62
    141a:	0f be       	out	0x3f, r0	; 63
    141c:	cd bf       	out	0x3d, r28	; 61
    141e:	ed 01       	movw	r28, r26
    1420:	08 95       	ret

00001422 <__udivmodsi4>:
    1422:	a1 e2       	ldi	r26, 0x21	; 33
    1424:	1a 2e       	mov	r1, r26
    1426:	aa 1b       	sub	r26, r26
    1428:	bb 1b       	sub	r27, r27
    142a:	fd 01       	movw	r30, r26
    142c:	0d c0       	rjmp	.+26     	; 0x1448 <__udivmodsi4_ep>

0000142e <__udivmodsi4_loop>:
    142e:	aa 1f       	adc	r26, r26
    1430:	bb 1f       	adc	r27, r27
    1432:	ee 1f       	adc	r30, r30
    1434:	ff 1f       	adc	r31, r31
    1436:	a2 17       	cp	r26, r18
    1438:	b3 07       	cpc	r27, r19
    143a:	e4 07       	cpc	r30, r20
    143c:	f5 07       	cpc	r31, r21
    143e:	20 f0       	brcs	.+8      	; 0x1448 <__udivmodsi4_ep>
    1440:	a2 1b       	sub	r26, r18
    1442:	b3 0b       	sbc	r27, r19
    1444:	e4 0b       	sbc	r30, r20
    1446:	f5 0b       	sbc	r31, r21

00001448 <__udivmodsi4_ep>:
    1448:	66 1f       	adc	r22, r22
    144a:	77 1f       	adc	r23, r23
    144c:	88 1f       	adc	r24, r24
    144e:	99 1f       	adc	r25, r25
    1450:	1a 94       	dec	r1
    1452:	69 f7       	brne	.-38     	; 0x142e <__udivmodsi4_loop>
    1454:	60 95       	com	r22
    1456:	70 95       	com	r23
    1458:	80 95       	com	r24
    145a:	90 95       	com	r25
    145c:	9b 01       	movw	r18, r22
    145e:	ac 01       	movw	r20, r24
    1460:	bd 01       	movw	r22, r26
    1462:	cf 01       	movw	r24, r30
    1464:	08 95       	ret

00001466 <__umulhisi3>:
    1466:	a2 9f       	mul	r26, r18
    1468:	b0 01       	movw	r22, r0
    146a:	b3 9f       	mul	r27, r19
    146c:	c0 01       	movw	r24, r0
    146e:	a3 9f       	mul	r26, r19
    1470:	70 0d       	add	r23, r0
    1472:	81 1d       	adc	r24, r1
    1474:	11 24       	eor	r1, r1
    1476:	91 1d       	adc	r25, r1
    1478:	b2 9f       	mul	r27, r18
    147a:	70 0d       	add	r23, r0
    147c:	81 1d       	adc	r24, r1
    147e:	11 24       	eor	r1, r1
    1480:	91 1d       	adc	r25, r1
    1482:	08 95       	ret

00001484 <_exit>:
    1484:	f8 94       	cli

00001486 <__stop_program>:
    1486:	ff cf       	rjmp	.-2      	; 0x1486 <__stop_program>
