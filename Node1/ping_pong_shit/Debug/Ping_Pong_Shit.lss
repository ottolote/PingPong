
Ping_Pong_Shit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000024e  00800100  00001524  000015b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001524  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000025  0080034e  0080034e  00001806  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001806  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000318  00000000  00000000  00001862  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002e8b  00000000  00000000  00001b7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001272  00000000  00000000  00004a05  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000134f  00000000  00000000  00005c77  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000080c  00000000  00000000  00006fc8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008d2  00000000  00000000  000077d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000164e  00000000  00000000  000080a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002b0  00000000  00000000  000096f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 b0 06 	jmp	0xd60	; 0xd60 <__vector_7>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <SRAM_test+0xa2>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	13 e0       	ldi	r17, 0x03	; 3
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e4 e2       	ldi	r30, 0x24	; 36
     37c:	f5 e1       	ldi	r31, 0x15	; 21
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	ae 34       	cpi	r26, 0x4E	; 78
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	23 e0       	ldi	r18, 0x03	; 3
     38c:	ae e4       	ldi	r26, 0x4E	; 78
     38e:	b3 e0       	ldi	r27, 0x03	; 3
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a3 37       	cpi	r26, 0x73	; 115
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 45 06 	call	0xc8a	; 0xc8a <main>
     39e:	0c 94 90 0a 	jmp	0x1520	; 0x1520 <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <button_init>:
 */ 

#include <avr/io.h>

void button_init() {
	DDRB &= ~((1<<PINB1) | (1<<PINB2) | (1<<PINB3));
     3a6:	87 b3       	in	r24, 0x17	; 23
     3a8:	81 7f       	andi	r24, 0xF1	; 241
     3aa:	87 bb       	out	0x17, r24	; 23
     3ac:	08 95       	ret

000003ae <button_read>:
}

uint8_t button_read(uint8_t channel) {
	return (PINB&(1<<channel)) >> channel;
     3ae:	26 b3       	in	r18, 0x16	; 22
     3b0:	41 e0       	ldi	r20, 0x01	; 1
     3b2:	50 e0       	ldi	r21, 0x00	; 0
     3b4:	08 2e       	mov	r0, r24
     3b6:	02 c0       	rjmp	.+4      	; 0x3bc <button_read+0xe>
     3b8:	44 0f       	add	r20, r20
     3ba:	55 1f       	adc	r21, r21
     3bc:	0a 94       	dec	r0
     3be:	e2 f7       	brpl	.-8      	; 0x3b8 <button_read+0xa>
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	24 23       	and	r18, r20
     3c4:	35 23       	and	r19, r21
     3c6:	a9 01       	movw	r20, r18
     3c8:	02 c0       	rjmp	.+4      	; 0x3ce <button_read+0x20>
     3ca:	55 95       	asr	r21
     3cc:	47 95       	ror	r20
     3ce:	8a 95       	dec	r24
     3d0:	e2 f7       	brpl	.-8      	; 0x3ca <button_read+0x1c>
     3d2:	ca 01       	movw	r24, r20
}
     3d4:	08 95       	ret

000003d6 <button_rising_edge_detect>:

uint8_t button_rising_edge_detect(uint8_t channel){
	static last;
	static uint8_t current;
	current = button_read(channel);
     3d6:	0e 94 d7 01 	call	0x3ae	; 0x3ae <button_read>
     3da:	80 93 50 03 	sts	0x0350, r24
	if (last != current){
     3de:	28 2f       	mov	r18, r24
     3e0:	30 e0       	ldi	r19, 0x00	; 0
     3e2:	40 91 4e 03 	lds	r20, 0x034E
     3e6:	50 91 4f 03 	lds	r21, 0x034F
     3ea:	24 17       	cp	r18, r20
     3ec:	35 07       	cpc	r19, r21
     3ee:	49 f0       	breq	.+18     	; 0x402 <button_rising_edge_detect+0x2c>
		last = current;
     3f0:	30 93 4f 03 	sts	0x034F, r19
     3f4:	20 93 4e 03 	sts	0x034E, r18
		if(current == 1){
     3f8:	91 e0       	ldi	r25, 0x01	; 1
     3fa:	81 30       	cpi	r24, 0x01	; 1
     3fc:	19 f0       	breq	.+6      	; 0x404 <button_rising_edge_detect+0x2e>
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	01 c0       	rjmp	.+2      	; 0x404 <button_rising_edge_detect+0x2e>
			return 1;
		}
	}
	return 0;
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	89 2f       	mov	r24, r25
     406:	08 95       	ret

00000408 <can_init>:
can_message_t joy_message;*/


void can_init(){
	//Enter config mode
	mcp2515_init();
     408:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <mcp2515_init>
	printf("CANCTRL (expect 0x87): 0x%02x\n", mcp2515_read(MCP_CANCTRL));
     40c:	8f e0       	ldi	r24, 0x0F	; 15
     40e:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <mcp2515_read>
     412:	1f 92       	push	r1
     414:	8f 93       	push	r24
     416:	84 e2       	ldi	r24, 0x24	; 36
     418:	91 e0       	ldi	r25, 0x01	; 1
     41a:	9f 93       	push	r25
     41c:	8f 93       	push	r24
     41e:	0e 94 3d 07 	call	0xe7a	; 0xe7a <printf>

	//RX0 - Turn mask/filter off
	mcp2515_bit_modify(MCP_RXB0CTRL, 0b01100000, 0xFF);
     422:	4f ef       	ldi	r20, 0xFF	; 255
     424:	60 e6       	ldi	r22, 0x60	; 96
     426:	80 e6       	ldi	r24, 0x60	; 96
     428:	0e 94 be 03 	call	0x77c	; 0x77c <mcp2515_bit_modify>
	//RX0 - Disable rollover
	mcp2515_bit_modify(MCP_RXB0CTRL, 0b00000100, 0);
     42c:	40 e0       	ldi	r20, 0x00	; 0
     42e:	64 e0       	ldi	r22, 0x04	; 4
     430:	80 e6       	ldi	r24, 0x60	; 96
     432:	0e 94 be 03 	call	0x77c	; 0x77c <mcp2515_bit_modify>

	mcp2515_bit_modify(MCP_CANINTE, MCP_RX0IF, 0xff);
     436:	4f ef       	ldi	r20, 0xFF	; 255
     438:	61 e0       	ldi	r22, 0x01	; 1
     43a:	8b e2       	ldi	r24, 0x2B	; 43
     43c:	0e 94 be 03 	call	0x77c	; 0x77c <mcp2515_bit_modify>
	
	//Enable normal mode
	mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
     440:	40 e0       	ldi	r20, 0x00	; 0
     442:	60 ee       	ldi	r22, 0xE0	; 224
     444:	8f e0       	ldi	r24, 0x0F	; 15
     446:	0e 94 be 03 	call	0x77c	; 0x77c <mcp2515_bit_modify>
     44a:	0f 90       	pop	r0
     44c:	0f 90       	pop	r0
     44e:	0f 90       	pop	r0
     450:	0f 90       	pop	r0
     452:	08 95       	ret

00000454 <can_transmit_complete>:
	return 1;
}

int can_transmit_complete(){
	//Check if TX buffer is not pending
	return (!test_bit(mcp2515_read(MCP_TXB0CTRL), 3));
     454:	80 e3       	ldi	r24, 0x30	; 48
     456:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <mcp2515_read>
     45a:	86 95       	lsr	r24
     45c:	86 95       	lsr	r24
     45e:	86 95       	lsr	r24
     460:	91 e0       	ldi	r25, 0x01	; 1
     462:	89 27       	eor	r24, r25
}
     464:	81 70       	andi	r24, 0x01	; 1
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	08 95       	ret

0000046a <can_message_send>:
	//Enable normal mode
	mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);

}

void can_message_send(can_message_t* message){
     46a:	1f 93       	push	r17
     46c:	cf 93       	push	r28
     46e:	df 93       	push	r29
     470:	ec 01       	movw	r28, r24
	while (!can_transmit_complete()) {}
     472:	0e 94 2a 02 	call	0x454	; 0x454 <can_transmit_complete>
     476:	89 2b       	or	r24, r25
     478:	e1 f3       	breq	.-8      	; 0x472 <can_message_send+0x8>
	//Use standard ID to set the message
	mcp2515_write(MCP_TXB0SIDH, (int8_t)(message->id >> 3));
     47a:	68 81       	ld	r22, Y
     47c:	79 81       	ldd	r23, Y+1	; 0x01
     47e:	75 95       	asr	r23
     480:	67 95       	ror	r22
     482:	75 95       	asr	r23
     484:	67 95       	ror	r22
     486:	75 95       	asr	r23
     488:	67 95       	ror	r22
     48a:	81 e3       	ldi	r24, 0x31	; 49
     48c:	0e 94 9a 03 	call	0x734	; 0x734 <mcp2515_write>
	mcp2515_write(MCP_TXB0SIDL, (int8_t)(message->id << 5));
     490:	68 81       	ld	r22, Y
     492:	79 81       	ldd	r23, Y+1	; 0x01
     494:	66 0f       	add	r22, r22
     496:	77 1f       	adc	r23, r23
     498:	62 95       	swap	r22
     49a:	72 95       	swap	r23
     49c:	70 7f       	andi	r23, 0xF0	; 240
     49e:	76 27       	eor	r23, r22
     4a0:	60 7f       	andi	r22, 0xF0	; 240
     4a2:	76 27       	eor	r23, r22
     4a4:	82 e3       	ldi	r24, 0x32	; 50
     4a6:	0e 94 9a 03 	call	0x734	; 0x734 <mcp2515_write>

	//Set correct data lenght and use data frame, max 8 bytes
	mcp2515_write(MCP_TXB0DLC, (0x0F) & (message->length));
     4aa:	6a 81       	ldd	r22, Y+2	; 0x02
     4ac:	6f 70       	andi	r22, 0x0F	; 15
     4ae:	85 e3       	ldi	r24, 0x35	; 53
     4b0:	0e 94 9a 03 	call	0x734	; 0x734 <mcp2515_write>

	//For loop to set data bytes
	for (uint8_t i = 0; i < message->length; i++) {
     4b4:	8a 81       	ldd	r24, Y+2	; 0x02
     4b6:	88 23       	and	r24, r24
     4b8:	69 f0       	breq	.+26     	; 0x4d4 <can_message_send+0x6a>
     4ba:	10 e0       	ldi	r17, 0x00	; 0
		mcp2515_write(MCP_TXB0D0 + i, message->data[i]);
     4bc:	fe 01       	movw	r30, r28
     4be:	e1 0f       	add	r30, r17
     4c0:	f1 1d       	adc	r31, r1
     4c2:	63 81       	ldd	r22, Z+3	; 0x03
     4c4:	86 e3       	ldi	r24, 0x36	; 54
     4c6:	81 0f       	add	r24, r17
     4c8:	0e 94 9a 03 	call	0x734	; 0x734 <mcp2515_write>

	//Set correct data lenght and use data frame, max 8 bytes
	mcp2515_write(MCP_TXB0DLC, (0x0F) & (message->length));

	//For loop to set data bytes
	for (uint8_t i = 0; i < message->length; i++) {
     4cc:	1f 5f       	subi	r17, 0xFF	; 255
     4ce:	8a 81       	ldd	r24, Y+2	; 0x02
     4d0:	18 17       	cp	r17, r24
     4d2:	a0 f3       	brcs	.-24     	; 0x4bc <can_message_send+0x52>
		mcp2515_write(MCP_TXB0D0 + i, message->data[i]);
	}

	mcp2515_request_to_send(1);
     4d4:	81 e0       	ldi	r24, 0x01	; 1
     4d6:	0e 94 ae 03 	call	0x75c	; 0x75c <mcp2515_request_to_send>
}
     4da:	df 91       	pop	r29
     4dc:	cf 91       	pop	r28
     4de:	1f 91       	pop	r17
     4e0:	08 95       	ret

000004e2 <can_data_receive>:
void can_interrupt_vector(){
	//Clear interrupt flag
	rx_flag = 1;
}*/

can_message_t can_data_receive(){
     4e2:	9f 92       	push	r9
     4e4:	af 92       	push	r10
     4e6:	bf 92       	push	r11
     4e8:	cf 92       	push	r12
     4ea:	df 92       	push	r13
     4ec:	ef 92       	push	r14
     4ee:	ff 92       	push	r15
     4f0:	0f 93       	push	r16
     4f2:	1f 93       	push	r17
     4f4:	cf 93       	push	r28
     4f6:	df 93       	push	r29
     4f8:	cd b7       	in	r28, 0x3d	; 61
     4fa:	de b7       	in	r29, 0x3e	; 62
     4fc:	2b 97       	sbiw	r28, 0x0b	; 11
     4fe:	0f b6       	in	r0, 0x3f	; 63
     500:	f8 94       	cli
     502:	de bf       	out	0x3e, r29	; 62
     504:	0f be       	out	0x3f, r0	; 63
     506:	cd bf       	out	0x3d, r28	; 61
     508:	7c 01       	movw	r14, r24
	can_message_t message;
	
	//Check if RX buffer have message
	//if (rx_flag == 1) {
	if (mcp2515_read(MCP_CANINTF) & MCP_RX0IF) {
     50a:	8c e2       	ldi	r24, 0x2C	; 44
     50c:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <mcp2515_read>
     510:	80 ff       	sbrs	r24, 0
     512:	33 c0       	rjmp	.+102    	; 0x57a <__stack+0x7b>
		//Get ID if message
		message.id = (mcp2515_read(MCP_RXB0SIDH) << 3) | (mcp2515_read(MCP_RXB0SIDL) >> 5);
     514:	81 e6       	ldi	r24, 0x61	; 97
     516:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <mcp2515_read>
     51a:	c8 2e       	mov	r12, r24
     51c:	82 e6       	ldi	r24, 0x62	; 98
     51e:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <mcp2515_read>
     522:	82 95       	swap	r24
     524:	86 95       	lsr	r24
     526:	87 70       	andi	r24, 0x07	; 7
     528:	d1 2c       	mov	r13, r1
     52a:	cc 0c       	add	r12, r12
     52c:	dd 1c       	adc	r13, r13
     52e:	cc 0c       	add	r12, r12
     530:	dd 1c       	adc	r13, r13
     532:	cc 0c       	add	r12, r12
     534:	dd 1c       	adc	r13, r13
     536:	c8 2a       	or	r12, r24

		//Get lenght of message
		message.length = (0x0F) & (mcp2515_read(MCP_RXB0DLC));
     538:	85 e6       	ldi	r24, 0x65	; 101
     53a:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <mcp2515_read>
     53e:	8f 70       	andi	r24, 0x0F	; 15
     540:	98 2e       	mov	r9, r24

		//Get message data
		for(uint8_t i = 0; i < message.length; i++){
     542:	a9 f0       	breq	.+42     	; 0x56e <__stack+0x6f>
     544:	8e 01       	movw	r16, r28
     546:	0c 5f       	subi	r16, 0xFC	; 252
     548:	1f 4f       	sbci	r17, 0xFF	; 255
     54a:	0f 2e       	mov	r0, r31
     54c:	f6 e6       	ldi	r31, 0x66	; 102
     54e:	af 2e       	mov	r10, r31
     550:	f0 2d       	mov	r31, r0
     552:	a8 0e       	add	r10, r24
     554:	0f 2e       	mov	r0, r31
     556:	f6 e6       	ldi	r31, 0x66	; 102
     558:	bf 2e       	mov	r11, r31
     55a:	f0 2d       	mov	r31, r0
			message.data[i] = mcp2515_read(MCP_RXB0D0 + i);
     55c:	8b 2d       	mov	r24, r11
     55e:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <mcp2515_read>
     562:	f8 01       	movw	r30, r16
     564:	81 93       	st	Z+, r24
     566:	8f 01       	movw	r16, r30
     568:	b3 94       	inc	r11

		//Get lenght of message
		message.length = (0x0F) & (mcp2515_read(MCP_RXB0DLC));

		//Get message data
		for(uint8_t i = 0; i < message.length; i++){
     56a:	ba 10       	cpse	r11, r10
     56c:	f7 cf       	rjmp	.-18     	; 0x55c <__stack+0x5d>
			message.data[i] = mcp2515_read(MCP_RXB0D0 + i);
		}

		//Clear flag
		mcp2515_bit_modify(MCP_CANINTF, MCP_RX0IF, 0);
     56e:	40 e0       	ldi	r20, 0x00	; 0
     570:	61 e0       	ldi	r22, 0x01	; 1
     572:	8c e2       	ldi	r24, 0x2C	; 44
     574:	0e 94 be 03 	call	0x77c	; 0x77c <mcp2515_bit_modify>
     578:	03 c0       	rjmp	.+6      	; 0x580 <__stack+0x81>
	} else {
		message.id = -1;
     57a:	cc 24       	eor	r12, r12
     57c:	ca 94       	dec	r12
     57e:	dc 2c       	mov	r13, r12
	}

	return message;
     580:	da 82       	std	Y+2, r13	; 0x02
     582:	c9 82       	std	Y+1, r12	; 0x01
     584:	9b 82       	std	Y+3, r9	; 0x03
     586:	8b e0       	ldi	r24, 0x0B	; 11
     588:	fe 01       	movw	r30, r28
     58a:	31 96       	adiw	r30, 0x01	; 1
     58c:	d7 01       	movw	r26, r14
     58e:	01 90       	ld	r0, Z+
     590:	0d 92       	st	X+, r0
     592:	8a 95       	dec	r24
     594:	e1 f7       	brne	.-8      	; 0x58e <__stack+0x8f>
}
     596:	c7 01       	movw	r24, r14
     598:	2b 96       	adiw	r28, 0x0b	; 11
     59a:	0f b6       	in	r0, 0x3f	; 63
     59c:	f8 94       	cli
     59e:	de bf       	out	0x3e, r29	; 62
     5a0:	0f be       	out	0x3f, r0	; 63
     5a2:	cd bf       	out	0x3d, r28	; 61
     5a4:	df 91       	pop	r29
     5a6:	cf 91       	pop	r28
     5a8:	1f 91       	pop	r17
     5aa:	0f 91       	pop	r16
     5ac:	ff 90       	pop	r15
     5ae:	ef 90       	pop	r14
     5b0:	df 90       	pop	r13
     5b2:	cf 90       	pop	r12
     5b4:	bf 90       	pop	r11
     5b6:	af 90       	pop	r10
     5b8:	9f 90       	pop	r9
     5ba:	08 95       	ret

000005bc <can_print_message>:
		flash_diode();
		_delay_ms(1000);
	}
}

void can_print_message(const can_message_t *message) {
     5bc:	ff 92       	push	r15
     5be:	0f 93       	push	r16
     5c0:	1f 93       	push	r17
     5c2:	cf 93       	push	r28
     5c4:	df 93       	push	r29
     5c6:	ec 01       	movw	r28, r24
	if (message->id == -1) {
     5c8:	88 81       	ld	r24, Y
     5ca:	99 81       	ldd	r25, Y+1	; 0x01
     5cc:	8f 3f       	cpi	r24, 0xFF	; 255
     5ce:	2f ef       	ldi	r18, 0xFF	; 255
     5d0:	92 07       	cpc	r25, r18
     5d2:	29 f4       	brne	.+10     	; 0x5de <can_print_message+0x22>
		printf("No message in buffer\n\n");
     5d4:	83 e4       	ldi	r24, 0x43	; 67
     5d6:	91 e0       	ldi	r25, 0x01	; 1
     5d8:	0e 94 51 07 	call	0xea2	; 0xea2 <puts>
     5dc:	41 c0       	rjmp	.+130    	; 0x660 <can_print_message+0xa4>
		} else {
		printf("Message id: %d\nMessage length %d\n", message->id, message->length);
     5de:	2a 81       	ldd	r18, Y+2	; 0x02
     5e0:	1f 92       	push	r1
     5e2:	2f 93       	push	r18
     5e4:	9f 93       	push	r25
     5e6:	8f 93       	push	r24
     5e8:	89 e5       	ldi	r24, 0x59	; 89
     5ea:	91 e0       	ldi	r25, 0x01	; 1
     5ec:	9f 93       	push	r25
     5ee:	8f 93       	push	r24
     5f0:	0e 94 3d 07 	call	0xe7a	; 0xe7a <printf>
		printf("Message data: [ %d", message->data[0]);
     5f4:	2b 81       	ldd	r18, Y+3	; 0x03
     5f6:	82 2f       	mov	r24, r18
     5f8:	99 27       	eor	r25, r25
     5fa:	87 fd       	sbrc	r24, 7
     5fc:	90 95       	com	r25
     5fe:	9f 93       	push	r25
     600:	2f 93       	push	r18
     602:	8b e7       	ldi	r24, 0x7B	; 123
     604:	91 e0       	ldi	r25, 0x01	; 1
     606:	9f 93       	push	r25
     608:	8f 93       	push	r24
     60a:	0e 94 3d 07 	call	0xe7a	; 0xe7a <printf>
		for(uint8_t i = 1; i < message->length; i++) {
     60e:	8d b7       	in	r24, 0x3d	; 61
     610:	9e b7       	in	r25, 0x3e	; 62
     612:	0a 96       	adiw	r24, 0x0a	; 10
     614:	0f b6       	in	r0, 0x3f	; 63
     616:	f8 94       	cli
     618:	9e bf       	out	0x3e, r25	; 62
     61a:	0f be       	out	0x3f, r0	; 63
     61c:	8d bf       	out	0x3d, r24	; 61
     61e:	8a 81       	ldd	r24, Y+2	; 0x02
     620:	82 30       	cpi	r24, 0x02	; 2
     622:	d0 f0       	brcs	.+52     	; 0x658 <can_print_message+0x9c>
     624:	ff 24       	eor	r15, r15
     626:	f3 94       	inc	r15
			printf(", %d",message->data[i]);
     628:	0e e8       	ldi	r16, 0x8E	; 142
     62a:	11 e0       	ldi	r17, 0x01	; 1
     62c:	fe 01       	movw	r30, r28
     62e:	ef 0d       	add	r30, r15
     630:	f1 1d       	adc	r31, r1
     632:	23 81       	ldd	r18, Z+3	; 0x03
     634:	82 2f       	mov	r24, r18
     636:	99 27       	eor	r25, r25
     638:	87 fd       	sbrc	r24, 7
     63a:	90 95       	com	r25
     63c:	9f 93       	push	r25
     63e:	2f 93       	push	r18
     640:	1f 93       	push	r17
     642:	0f 93       	push	r16
     644:	0e 94 3d 07 	call	0xe7a	; 0xe7a <printf>
	if (message->id == -1) {
		printf("No message in buffer\n\n");
		} else {
		printf("Message id: %d\nMessage length %d\n", message->id, message->length);
		printf("Message data: [ %d", message->data[0]);
		for(uint8_t i = 1; i < message->length; i++) {
     648:	f3 94       	inc	r15
     64a:	0f 90       	pop	r0
     64c:	0f 90       	pop	r0
     64e:	0f 90       	pop	r0
     650:	0f 90       	pop	r0
     652:	8a 81       	ldd	r24, Y+2	; 0x02
     654:	f8 16       	cp	r15, r24
     656:	50 f3       	brcs	.-44     	; 0x62c <can_print_message+0x70>
			printf(", %d",message->data[i]);
		}
		printf(" ]\n\n");
     658:	83 e9       	ldi	r24, 0x93	; 147
     65a:	91 e0       	ldi	r25, 0x01	; 1
     65c:	0e 94 51 07 	call	0xea2	; 0xea2 <puts>
	}
}
     660:	df 91       	pop	r29
     662:	cf 91       	pop	r28
     664:	1f 91       	pop	r17
     666:	0f 91       	pop	r16
     668:	ff 90       	pop	r15
     66a:	08 95       	ret

0000066c <can_joystick_transmit>:
	}
}

void can_joystick_transmit(){
	static can_message_t joy_message;
	joy_message.id = JOY_CAN_ID; 
     66c:	81 e0       	ldi	r24, 0x01	; 1
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	90 93 5d 03 	sts	0x035D, r25
     674:	80 93 5c 03 	sts	0x035C, r24
	joy_message.length = 2;
     678:	82 e0       	ldi	r24, 0x02	; 2
     67a:	80 93 5e 03 	sts	0x035E, r24
	
	joy_message.data[0] = read_converted(JOYSTICK_X);
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	0e 94 78 03 	call	0x6f0	; 0x6f0 <read_converted>
     684:	80 93 5f 03 	sts	0x035F, r24
	joy_message.data[1] = read_converted(JOYSTICK_Y);
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	0e 94 78 03 	call	0x6f0	; 0x6f0 <read_converted>
     68e:	80 93 60 03 	sts	0x0360, r24

	//can_print_message(&joy_message);

	can_message_send(&joy_message);
     692:	8c e5       	ldi	r24, 0x5C	; 92
     694:	93 e0       	ldi	r25, 0x03	; 3
     696:	0e 94 35 02 	call	0x46a	; 0x46a <can_message_send>
     69a:	08 95       	ret

0000069c <can_button_transmit>:
}

void can_button_transmit(uint8_t button_channel) {
		static can_message_t button_message;
		button_message.id = BUTTON_CAN_ID;
     69c:	23 e0       	ldi	r18, 0x03	; 3
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	30 93 52 03 	sts	0x0352, r19
     6a4:	20 93 51 03 	sts	0x0351, r18
		button_message.length = 2;
     6a8:	92 e0       	ldi	r25, 0x02	; 2
     6aa:	90 93 53 03 	sts	0x0353, r25
		
		button_message.data[0] = button_channel;
     6ae:	80 93 54 03 	sts	0x0354, r24



		can_message_send(&button_message);
     6b2:	81 e5       	ldi	r24, 0x51	; 81
     6b4:	93 e0       	ldi	r25, 0x03	; 3
     6b6:	0e 94 35 02 	call	0x46a	; 0x46a <can_message_send>
     6ba:	08 95       	ret

000006bc <joystick_read>:
			 v;
}

unsigned int joystick_read(joy_channel channel){
	volatile char* ext_ram = (char*) 0x1400;
	ext_ram[0] = 0x4 + channel;
     6bc:	8c 5f       	subi	r24, 0xFC	; 252
     6be:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6c2:	81 e4       	ldi	r24, 0x41	; 65
     6c4:	8a 95       	dec	r24
     6c6:	f1 f7       	brne	.-4      	; 0x6c4 <joystick_read+0x8>
     6c8:	00 c0       	rjmp	.+0      	; 0x6ca <joystick_read+0xe>
	_delay_us(40);
	return (uint8_t) ext_ram[0];
     6ca:	80 91 00 14 	lds	r24, 0x1400
}
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	08 95       	ret

000006d2 <joystick_init>:
int center_val_X;
int center_val_Y;


void joystick_init(){ 
	center_val_X = joystick_read(JOYSTICK_X);
     6d2:	80 e0       	ldi	r24, 0x00	; 0
     6d4:	0e 94 5e 03 	call	0x6bc	; 0x6bc <joystick_read>
     6d8:	90 93 68 03 	sts	0x0368, r25
     6dc:	80 93 67 03 	sts	0x0367, r24
	center_val_Y = joystick_read(JOYSTICK_Y);
     6e0:	81 e0       	ldi	r24, 0x01	; 1
     6e2:	0e 94 5e 03 	call	0x6bc	; 0x6bc <joystick_read>
     6e6:	90 93 6a 03 	sts	0x036A, r25
     6ea:	80 93 69 03 	sts	0x0369, r24
     6ee:	08 95       	ret

000006f0 <read_converted>:
}

signed int read_converted(joy_channel channel){
     6f0:	cf 93       	push	r28
     6f2:	c8 2f       	mov	r28, r24

	int v = (joystick_read(channel));
     6f4:	0e 94 5e 03 	call	0x6bc	; 0x6bc <joystick_read>

	if      (channel == JOYSTICK_X)  {v -= center_val_X;}
     6f8:	c1 11       	cpse	r28, r1
     6fa:	07 c0       	rjmp	.+14     	; 0x70a <read_converted+0x1a>
     6fc:	20 91 67 03 	lds	r18, 0x0367
     700:	30 91 68 03 	lds	r19, 0x0368
     704:	82 1b       	sub	r24, r18
     706:	93 0b       	sbc	r25, r19
     708:	08 c0       	rjmp	.+16     	; 0x71a <read_converted+0x2a>
	else if (channel == JOYSTICK_Y)  {v -= center_val_Y;}
     70a:	c1 30       	cpi	r28, 0x01	; 1
     70c:	31 f4       	brne	.+12     	; 0x71a <read_converted+0x2a>
     70e:	20 91 69 03 	lds	r18, 0x0369
     712:	30 91 6a 03 	lds	r19, 0x036A
     716:	82 1b       	sub	r24, r18
     718:	93 0b       	sbc	r25, r19

	return  (v > 127)	? 127 :
     71a:	80 38       	cpi	r24, 0x80	; 128
     71c:	2f ef       	ldi	r18, 0xFF	; 255
     71e:	92 07       	cpc	r25, r18
     720:	14 f4       	brge	.+4      	; 0x726 <read_converted+0x36>
     722:	80 e8       	ldi	r24, 0x80	; 128
     724:	9f ef       	ldi	r25, 0xFF	; 255
     726:	80 38       	cpi	r24, 0x80	; 128
     728:	91 05       	cpc	r25, r1
     72a:	14 f0       	brlt	.+4      	; 0x730 <read_converted+0x40>
     72c:	8f e7       	ldi	r24, 0x7F	; 127
     72e:	90 e0       	ldi	r25, 0x00	; 0
			(v < -128)	? -128 :
			 v;
}
     730:	cf 91       	pop	r28
     732:	08 95       	ret

00000734 <mcp2515_write>:
	} else {
		;//printf("MCP2515 is in config mode after reset\n");
	}
}

void mcp2515_write(uint8_t address, uint8_t data){
     734:	cf 93       	push	r28
     736:	df 93       	push	r29
     738:	d8 2f       	mov	r29, r24
     73a:	c6 2f       	mov	r28, r22
	spi_select();
     73c:	0e 94 4c 05 	call	0xa98	; 0xa98 <spi_select>

	spi_send(MCP_WRITE);
     740:	82 e0       	ldi	r24, 0x02	; 2
     742:	0e 94 41 05 	call	0xa82	; 0xa82 <spi_send>
	spi_send(address);
     746:	8d 2f       	mov	r24, r29
     748:	0e 94 41 05 	call	0xa82	; 0xa82 <spi_send>
	spi_send(data);
     74c:	8c 2f       	mov	r24, r28
     74e:	0e 94 41 05 	call	0xa82	; 0xa82 <spi_send>

	spi_deselect();
     752:	0e 94 4e 05 	call	0xa9c	; 0xa9c <spi_deselect>
}
     756:	df 91       	pop	r29
     758:	cf 91       	pop	r28
     75a:	08 95       	ret

0000075c <mcp2515_request_to_send>:

void mcp2515_request_to_send(uint8_t command){
     75c:	cf 93       	push	r28
	//Check last 3 bits of given command
	if (command <= 7) {
     75e:	88 30       	cpi	r24, 0x08	; 8
     760:	18 f4       	brcc	.+6      	; 0x768 <mcp2515_request_to_send+0xc>
		command = MCP_RTS | command;
     762:	c8 2f       	mov	r28, r24
     764:	c0 68       	ori	r28, 0x80	; 128
     766:	01 c0       	rjmp	.+2      	; 0x76a <mcp2515_request_to_send+0xe>
	} else {
		command = MCP_RTS;
     768:	c0 e8       	ldi	r28, 0x80	; 128
	}

	//Select, send RTS command, then deselect
	spi_select();
     76a:	0e 94 4c 05 	call	0xa98	; 0xa98 <spi_select>
	spi_send(command);
     76e:	8c 2f       	mov	r24, r28
     770:	0e 94 41 05 	call	0xa82	; 0xa82 <spi_send>
	spi_deselect();
     774:	0e 94 4e 05 	call	0xa9c	; 0xa9c <spi_deselect>
}
     778:	cf 91       	pop	r28
     77a:	08 95       	ret

0000077c <mcp2515_bit_modify>:

void mcp2515_bit_modify(uint8_t address, uint8_t mask, uint8_t data){
     77c:	1f 93       	push	r17
     77e:	cf 93       	push	r28
     780:	df 93       	push	r29
     782:	18 2f       	mov	r17, r24
     784:	d6 2f       	mov	r29, r22
     786:	c4 2f       	mov	r28, r20
	spi_select();
     788:	0e 94 4c 05 	call	0xa98	; 0xa98 <spi_select>

	spi_send(MCP_BITMOD);
     78c:	85 e0       	ldi	r24, 0x05	; 5
     78e:	0e 94 41 05 	call	0xa82	; 0xa82 <spi_send>
	spi_send(address);
     792:	81 2f       	mov	r24, r17
     794:	0e 94 41 05 	call	0xa82	; 0xa82 <spi_send>
	spi_send(mask);
     798:	8d 2f       	mov	r24, r29
     79a:	0e 94 41 05 	call	0xa82	; 0xa82 <spi_send>
	spi_send(data);
     79e:	8c 2f       	mov	r24, r28
     7a0:	0e 94 41 05 	call	0xa82	; 0xa82 <spi_send>

	spi_deselect();
     7a4:	0e 94 4e 05 	call	0xa9c	; 0xa9c <spi_deselect>
}
     7a8:	df 91       	pop	r29
     7aa:	cf 91       	pop	r28
     7ac:	1f 91       	pop	r17
     7ae:	08 95       	ret

000007b0 <mcp2515_reset>:

void mcp2515_reset(){
	spi_select();
     7b0:	0e 94 4c 05 	call	0xa98	; 0xa98 <spi_select>
	spi_send(MCP_RESET);	
     7b4:	80 ec       	ldi	r24, 0xC0	; 192
     7b6:	0e 94 41 05 	call	0xa82	; 0xa82 <spi_send>
	spi_deselect();
     7ba:	0e 94 4e 05 	call	0xa9c	; 0xa9c <spi_deselect>
     7be:	08 95       	ret

000007c0 <mcp2515_read>:
}


uint8_t mcp2515_read(uint8_t address){
     7c0:	cf 93       	push	r28
     7c2:	c8 2f       	mov	r28, r24
	uint8_t result;

	spi_select();
     7c4:	0e 94 4c 05 	call	0xa98	; 0xa98 <spi_select>
	
	//Send command and address, then read result
	spi_send(MCP_READ);
     7c8:	83 e0       	ldi	r24, 0x03	; 3
     7ca:	0e 94 41 05 	call	0xa82	; 0xa82 <spi_send>
	spi_send(address);
     7ce:	8c 2f       	mov	r24, r28
     7d0:	0e 94 41 05 	call	0xa82	; 0xa82 <spi_send>

	result = spi_read();
     7d4:	0e 94 45 05 	call	0xa8a	; 0xa8a <spi_read>
     7d8:	c8 2f       	mov	r28, r24
	spi_deselect();
     7da:	0e 94 4e 05 	call	0xa9c	; 0xa9c <spi_deselect>

	return result;	
}
     7de:	8c 2f       	mov	r24, r28
     7e0:	cf 91       	pop	r28
     7e2:	08 95       	ret

000007e4 <mcp2515_init>:
#include <util/delay.h>
#include "uart_driver.h"
#include "spi_driver.h"
#include "mcp2515_driver.h"

void mcp2515_init() {
     7e4:	cf 93       	push	r28
     7e6:	df 93       	push	r29
     7e8:	1f 92       	push	r1
     7ea:	cd b7       	in	r28, 0x3d	; 61
     7ec:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t value_check;

	//Start SPI driver
	spi_init();
     7ee:	0e 94 39 05 	call	0xa72	; 0xa72 <spi_init>

	mcp2515_reset();
     7f2:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <mcp2515_reset>
	
	//Testing for correct initialization
	value_check = mcp2515_read(MCP_CANSTAT);
     7f6:	8e e0       	ldi	r24, 0x0E	; 14
     7f8:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <mcp2515_read>
     7fc:	89 83       	std	Y+1, r24	; 0x01
	
	if ((value_check & MODE_MASK) != MODE_CONFIG) {
     7fe:	89 81       	ldd	r24, Y+1	; 0x01
     800:	80 7e       	andi	r24, 0xE0	; 224
     802:	80 38       	cpi	r24, 0x80	; 128
     804:	21 f0       	breq	.+8      	; 0x80e <mcp2515_init+0x2a>
		printf("MCP2515 is not in config mode after reset\n");
     806:	86 ea       	ldi	r24, 0xA6	; 166
     808:	91 e0       	ldi	r25, 0x01	; 1
     80a:	0e 94 51 07 	call	0xea2	; 0xea2 <puts>
	} else {
		;//printf("MCP2515 is in config mode after reset\n");
	}
}
     80e:	0f 90       	pop	r0
     810:	df 91       	pop	r29
     812:	cf 91       	pop	r28
     814:	08 95       	ret

00000816 <oled_print_char>:
		//Set higher column address                                                                                                                                                                                                                                                                                                                                                                     
		*oled_command_addr = 0x10 + (column * (FONTWIDTH)>>4);
	}
}

void oled_print_char(char ch){
     816:	28 e0       	ldi	r18, 0x08	; 8
     818:	82 9f       	mul	r24, r18
     81a:	c0 01       	movw	r24, r0
     81c:	11 24       	eor	r1, r1
     81e:	fc 01       	movw	r30, r24
     820:	e0 59       	subi	r30, 0x90	; 144
     822:	f0 40       	sbci	r31, 0x00	; 0
	for (uint8_t i = 0; i<FONTWIDTH; i++) {
     824:	80 e0       	ldi	r24, 0x00	; 0
		oled_write_data(pgm_read_byte(&font[ch - FONTOFFSET][i]));
     826:	94 91       	lpm	r25, Z
void oled_write_command(uint8_t command){
	*oled_command_addr = command;
}

void oled_write_data(uint8_t data){
	*oled_data_addr = data;
     828:	a0 91 04 01 	lds	r26, 0x0104
     82c:	b0 91 05 01 	lds	r27, 0x0105
     830:	9c 93       	st	X, r25
		*oled_command_addr = 0x10 + (column * (FONTWIDTH)>>4);
	}
}

void oled_print_char(char ch){
	for (uint8_t i = 0; i<FONTWIDTH; i++) {
     832:	8f 5f       	subi	r24, 0xFF	; 255
     834:	31 96       	adiw	r30, 0x01	; 1
     836:	88 30       	cpi	r24, 0x08	; 8
     838:	b1 f7       	brne	.-20     	; 0x826 <oled_print_char+0x10>
		oled_write_data(pgm_read_byte(&font[ch - FONTOFFSET][i]));
	}
}
     83a:	08 95       	ret

0000083c <oled_goto_page>:
void oled_back(){
	
}

void oled_goto_page(unsigned int page) {
	oled_write_command(0xB0 + page);
     83c:	90 eb       	ldi	r25, 0xB0	; 176
     83e:	98 0f       	add	r25, r24
	_delay_ms(800);
	oled_clear_screen();
}

void oled_write_command(uint8_t command){
	*oled_command_addr = command;
     840:	e0 91 06 01 	lds	r30, 0x0106
     844:	f0 91 07 01 	lds	r31, 0x0107
     848:	90 83       	st	Z, r25
	
}

void oled_goto_page(unsigned int page) {
	oled_write_command(0xB0 + page);
	global_page = page;
     84a:	80 93 6b 03 	sts	0x036B, r24
     84e:	82 e5       	ldi	r24, 0x52	; 82
     850:	8a 95       	dec	r24
     852:	f1 f7       	brne	.-4      	; 0x850 <oled_goto_page+0x14>
     854:	08 95       	ret

00000856 <oled_clear_line>:
	_delay_us(50);
}

void oled_clear_line(){
     856:	80 e8       	ldi	r24, 0x80	; 128
     858:	90 e0       	ldi	r25, 0x00	; 0
void oled_write_command(uint8_t command){
	*oled_command_addr = command;
}

void oled_write_data(uint8_t data){
	*oled_data_addr = data;
     85a:	e0 91 04 01 	lds	r30, 0x0104
     85e:	f0 91 05 01 	lds	r31, 0x0105
     862:	10 82       	st	Z, r1
     864:	01 97       	sbiw	r24, 0x01	; 1
	global_page = page;
	_delay_us(50);
}

void oled_clear_line(){
	for (int i = 0; i<128; i++) {
     866:	00 97       	sbiw	r24, 0x00	; 0
     868:	c1 f7       	brne	.-16     	; 0x85a <oled_clear_line+0x4>
		oled_write_data(0b00000000);
	}
}
     86a:	08 95       	ret

0000086c <oled_clear_screen>:

void oled_clear_screen() {
     86c:	cf 93       	push	r28
     86e:	df 93       	push	r29
     870:	c0 e0       	ldi	r28, 0x00	; 0
     872:	d0 e0       	ldi	r29, 0x00	; 0
	for (uint8_t i = 0; i<8; i++) {
		oled_goto_page(i);
     874:	ce 01       	movw	r24, r28
     876:	0e 94 1e 04 	call	0x83c	; 0x83c <oled_goto_page>
		oled_clear_line();
     87a:	0e 94 2b 04 	call	0x856	; 0x856 <oled_clear_line>
     87e:	21 96       	adiw	r28, 0x01	; 1
		oled_write_data(0b00000000);
	}
}

void oled_clear_screen() {
	for (uint8_t i = 0; i<8; i++) {
     880:	c8 30       	cpi	r28, 0x08	; 8
     882:	d1 05       	cpc	r29, r1
     884:	b9 f7       	brne	.-18     	; 0x874 <oled_clear_screen+0x8>
		oled_goto_page(i);
		oled_clear_line();
		//_delay_ms(50);
	}
}
     886:	df 91       	pop	r29
     888:	cf 91       	pop	r28
     88a:	08 95       	ret

0000088c <oled_pos>:

void oled_pos(unsigned int row, unsigned int column){
     88c:	cf 93       	push	r28
     88e:	df 93       	push	r29
     890:	eb 01       	movw	r28, r22
	oled_goto_page(row);
     892:	0e 94 1e 04 	call	0x83c	; 0x83c <oled_goto_page>
	if(column < (128/FONTWIDTH)){
     896:	c0 31       	cpi	r28, 0x10	; 16
     898:	d1 05       	cpc	r29, r1
     89a:	e8 f4       	brcc	.+58     	; 0x8d6 <oled_pos+0x4a>
		//Save column program goes to
		global_col = column * FONTWIDTH;
     89c:	8c 2f       	mov	r24, r28
     89e:	88 0f       	add	r24, r24
     8a0:	88 0f       	add	r24, r24
     8a2:	88 0f       	add	r24, r24
     8a4:	80 93 6c 03 	sts	0x036C, r24
		//Set lower column address
		*oled_command_addr = 0x00 + (column * (FONTWIDTH)>>4);
     8a8:	e0 91 06 01 	lds	r30, 0x0106
     8ac:	f0 91 07 01 	lds	r31, 0x0107
     8b0:	cc 0f       	add	r28, r28
     8b2:	dd 1f       	adc	r29, r29
     8b4:	cc 0f       	add	r28, r28
     8b6:	dd 1f       	adc	r29, r29
     8b8:	cc 0f       	add	r28, r28
     8ba:	dd 1f       	adc	r29, r29
     8bc:	d2 95       	swap	r29
     8be:	c2 95       	swap	r28
     8c0:	cf 70       	andi	r28, 0x0F	; 15
     8c2:	cd 27       	eor	r28, r29
     8c4:	df 70       	andi	r29, 0x0F	; 15
     8c6:	cd 27       	eor	r28, r29
     8c8:	c0 83       	st	Z, r28
		//Set higher column address                                                                                                                                                                                                                                                                                                                                                                     
		*oled_command_addr = 0x10 + (column * (FONTWIDTH)>>4);
     8ca:	e0 91 06 01 	lds	r30, 0x0106
     8ce:	f0 91 07 01 	lds	r31, 0x0107
     8d2:	c0 5f       	subi	r28, 0xF0	; 240
     8d4:	c0 83       	st	Z, r28
	}
}
     8d6:	df 91       	pop	r29
     8d8:	cf 91       	pop	r28
     8da:	08 95       	ret

000008dc <oled_printf>:
	for (uint8_t i = 0; i<FONTWIDTH; i++) {
		oled_write_data(pgm_read_byte(&font[ch - FONTOFFSET][i]));
	}
}

void oled_printf(char* fmt, ...){
     8dc:	cf 93       	push	r28
     8de:	df 93       	push	r29
     8e0:	cd b7       	in	r28, 0x3d	; 61
     8e2:	de b7       	in	r29, 0x3e	; 62
     8e4:	fe 01       	movw	r30, r28
     8e6:	35 96       	adiw	r30, 0x05	; 5
     8e8:	61 91       	ld	r22, Z+
     8ea:	71 91       	ld	r23, Z+
	va_list v;
	va_start(v, fmt);
	vfprintf(&oled_stdout, fmt, v);
     8ec:	af 01       	movw	r20, r30
     8ee:	88 e0       	ldi	r24, 0x08	; 8
     8f0:	91 e0       	ldi	r25, 0x01	; 1
     8f2:	0e 94 7e 07 	call	0xefc	; 0xefc <vfprintf>
	va_end(v);
}
     8f6:	df 91       	pop	r29
     8f8:	cf 91       	pop	r28
     8fa:	08 95       	ret

000008fc <oled_init>:
	_delay_ms(800);
	oled_clear_screen();
}

void oled_write_command(uint8_t command){
	*oled_command_addr = command;
     8fc:	e0 91 06 01 	lds	r30, 0x0106
     900:	f0 91 07 01 	lds	r31, 0x0107
     904:	8e ea       	ldi	r24, 0xAE	; 174
     906:	80 83       	st	Z, r24
     908:	e0 91 06 01 	lds	r30, 0x0106
     90c:	f0 91 07 01 	lds	r31, 0x0107
     910:	81 ea       	ldi	r24, 0xA1	; 161
     912:	80 83       	st	Z, r24
     914:	e0 91 06 01 	lds	r30, 0x0106
     918:	f0 91 07 01 	lds	r31, 0x0107
     91c:	8a ed       	ldi	r24, 0xDA	; 218
     91e:	80 83       	st	Z, r24
     920:	e0 91 06 01 	lds	r30, 0x0106
     924:	f0 91 07 01 	lds	r31, 0x0107
     928:	82 e1       	ldi	r24, 0x12	; 18
     92a:	80 83       	st	Z, r24
     92c:	e0 91 06 01 	lds	r30, 0x0106
     930:	f0 91 07 01 	lds	r31, 0x0107
     934:	88 ec       	ldi	r24, 0xC8	; 200
     936:	80 83       	st	Z, r24
     938:	e0 91 06 01 	lds	r30, 0x0106
     93c:	f0 91 07 01 	lds	r31, 0x0107
     940:	88 ea       	ldi	r24, 0xA8	; 168
     942:	80 83       	st	Z, r24
     944:	e0 91 06 01 	lds	r30, 0x0106
     948:	f0 91 07 01 	lds	r31, 0x0107
     94c:	8f e3       	ldi	r24, 0x3F	; 63
     94e:	80 83       	st	Z, r24
     950:	e0 91 06 01 	lds	r30, 0x0106
     954:	f0 91 07 01 	lds	r31, 0x0107
     958:	85 ed       	ldi	r24, 0xD5	; 213
     95a:	80 83       	st	Z, r24
     95c:	e0 91 06 01 	lds	r30, 0x0106
     960:	f0 91 07 01 	lds	r31, 0x0107
     964:	80 e8       	ldi	r24, 0x80	; 128
     966:	80 83       	st	Z, r24
     968:	e0 91 06 01 	lds	r30, 0x0106
     96c:	f0 91 07 01 	lds	r31, 0x0107
     970:	81 e8       	ldi	r24, 0x81	; 129
     972:	80 83       	st	Z, r24
     974:	e0 91 06 01 	lds	r30, 0x0106
     978:	f0 91 07 01 	lds	r31, 0x0107
     97c:	80 e5       	ldi	r24, 0x50	; 80
     97e:	80 83       	st	Z, r24
     980:	e0 91 06 01 	lds	r30, 0x0106
     984:	f0 91 07 01 	lds	r31, 0x0107
     988:	89 ed       	ldi	r24, 0xD9	; 217
     98a:	80 83       	st	Z, r24
     98c:	e0 91 06 01 	lds	r30, 0x0106
     990:	f0 91 07 01 	lds	r31, 0x0107
     994:	81 e2       	ldi	r24, 0x21	; 33
     996:	80 83       	st	Z, r24
     998:	e0 91 06 01 	lds	r30, 0x0106
     99c:	f0 91 07 01 	lds	r31, 0x0107
     9a0:	80 e2       	ldi	r24, 0x20	; 32
     9a2:	80 83       	st	Z, r24
     9a4:	e0 91 06 01 	lds	r30, 0x0106
     9a8:	f0 91 07 01 	lds	r31, 0x0107
     9ac:	82 e0       	ldi	r24, 0x02	; 2
     9ae:	80 83       	st	Z, r24
     9b0:	e0 91 06 01 	lds	r30, 0x0106
     9b4:	f0 91 07 01 	lds	r31, 0x0107
     9b8:	8b ed       	ldi	r24, 0xDB	; 219
     9ba:	80 83       	st	Z, r24
     9bc:	e0 91 06 01 	lds	r30, 0x0106
     9c0:	f0 91 07 01 	lds	r31, 0x0107
     9c4:	80 e3       	ldi	r24, 0x30	; 48
     9c6:	80 83       	st	Z, r24
     9c8:	e0 91 06 01 	lds	r30, 0x0106
     9cc:	f0 91 07 01 	lds	r31, 0x0107
     9d0:	8d ea       	ldi	r24, 0xAD	; 173
     9d2:	80 83       	st	Z, r24
     9d4:	e0 91 06 01 	lds	r30, 0x0106
     9d8:	f0 91 07 01 	lds	r31, 0x0107
     9dc:	10 82       	st	Z, r1
     9de:	e0 91 06 01 	lds	r30, 0x0106
     9e2:	f0 91 07 01 	lds	r31, 0x0107
     9e6:	84 ea       	ldi	r24, 0xA4	; 164
     9e8:	80 83       	st	Z, r24
     9ea:	e0 91 06 01 	lds	r30, 0x0106
     9ee:	f0 91 07 01 	lds	r31, 0x0107
     9f2:	86 ea       	ldi	r24, 0xA6	; 166
     9f4:	80 83       	st	Z, r24
     9f6:	e0 91 06 01 	lds	r30, 0x0106
     9fa:	f0 91 07 01 	lds	r31, 0x0107
     9fe:	8f ea       	ldi	r24, 0xAF	; 175
     a00:	80 83       	st	Z, r24
	oled_write_command(0x00);
	oled_write_command(0xa4);    //out follows RAM content
	oled_write_command(0xa6);    //set normal display
	oled_write_command(0xaf);    // display on
	
	oled_clear_screen();
     a02:	0e 94 36 04 	call	0x86c	; 0x86c <oled_clear_screen>
	oled_pos(2,3);
     a06:	63 e0       	ldi	r22, 0x03	; 3
     a08:	70 e0       	ldi	r23, 0x00	; 0
     a0a:	82 e0       	ldi	r24, 0x02	; 2
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	0e 94 46 04 	call	0x88c	; 0x88c <oled_pos>
	oled_printf(" #SWAG");
     a12:	87 e0       	ldi	r24, 0x07	; 7
     a14:	92 e0       	ldi	r25, 0x02	; 2
     a16:	9f 93       	push	r25
     a18:	8f 93       	push	r24
     a1a:	0e 94 6e 04 	call	0x8dc	; 0x8dc <oled_printf>
	oled_pos(3,7);
     a1e:	67 e0       	ldi	r22, 0x07	; 7
     a20:	70 e0       	ldi	r23, 0x00	; 0
     a22:	83 e0       	ldi	r24, 0x03	; 3
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	0e 94 46 04 	call	0x88c	; 0x88c <oled_pos>
	oled_printf("  4");
     a2a:	8e e0       	ldi	r24, 0x0E	; 14
     a2c:	92 e0       	ldi	r25, 0x02	; 2
     a2e:	9f 93       	push	r25
     a30:	8f 93       	push	r24
     a32:	0e 94 6e 04 	call	0x8dc	; 0x8dc <oled_printf>
	oled_pos(4,9);
     a36:	69 e0       	ldi	r22, 0x09	; 9
     a38:	70 e0       	ldi	r23, 0x00	; 0
     a3a:	84 e0       	ldi	r24, 0x04	; 4
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	0e 94 46 04 	call	0x88c	; 0x88c <oled_pos>
	oled_printf(" LYFE");
     a42:	82 e1       	ldi	r24, 0x12	; 18
     a44:	92 e0       	ldi	r25, 0x02	; 2
     a46:	9f 93       	push	r25
     a48:	8f 93       	push	r24
     a4a:	0e 94 6e 04 	call	0x8dc	; 0x8dc <oled_printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a4e:	2f ef       	ldi	r18, 0xFF	; 255
     a50:	8f ef       	ldi	r24, 0xFF	; 255
     a52:	9b e0       	ldi	r25, 0x0B	; 11
     a54:	21 50       	subi	r18, 0x01	; 1
     a56:	80 40       	sbci	r24, 0x00	; 0
     a58:	90 40       	sbci	r25, 0x00	; 0
     a5a:	e1 f7       	brne	.-8      	; 0xa54 <oled_init+0x158>
     a5c:	00 c0       	rjmp	.+0      	; 0xa5e <oled_init+0x162>
     a5e:	00 c0       	rjmp	.+0      	; 0xa60 <oled_init+0x164>
	_delay_ms(800);
	oled_clear_screen();
     a60:	0e 94 36 04 	call	0x86c	; 0x86c <oled_clear_screen>
     a64:	0f 90       	pop	r0
     a66:	0f 90       	pop	r0
     a68:	0f 90       	pop	r0
     a6a:	0f 90       	pop	r0
     a6c:	0f 90       	pop	r0
     a6e:	0f 90       	pop	r0
     a70:	08 95       	ret

00000a72 <spi_init>:
#define SPI_MISO PB6
#define SPI_SCK PB7 

void spi_init(){
	//Set MOSI, SCK and SS as output pins 	
	DDRB |= (1 << SPI_MOSI) | (1 << SPI_SCK) | (1 << SPI_SS);
     a72:	87 b3       	in	r24, 0x17	; 23
     a74:	80 6b       	ori	r24, 0xB0	; 176
     a76:	87 bb       	out	0x17, r24	; 23
	
	//Set MISO as input pin
	DDRB &= ~(1 << SPI_MISO);
     a78:	be 98       	cbi	0x17, 6	; 23
	
	//Enable SPI in master mode and set clock rate fosc/16
	SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0);
     a7a:	8d b1       	in	r24, 0x0d	; 13
     a7c:	81 65       	ori	r24, 0x51	; 81
     a7e:	8d b9       	out	0x0d, r24	; 13
     a80:	08 95       	ret

00000a82 <spi_send>:
	return SPDR;
}

void spi_send(char data){
	//Start transmission
	SPDR = data;
     a82:	8f b9       	out	0x0f, r24	; 15
	
	//Wait for transmission, checks if register is empty 
	while(!(SPSR & (1 << SPIF)));
     a84:	77 9b       	sbis	0x0e, 7	; 14
     a86:	fe cf       	rjmp	.-4      	; 0xa84 <spi_send+0x2>
}
     a88:	08 95       	ret

00000a8a <spi_read>:
}


uint8_t spi_read(){
	//Dummy send in order to read from slave
	spi_send(0xaa);
     a8a:	8a ea       	ldi	r24, 0xAA	; 170
     a8c:	0e 94 41 05 	call	0xa82	; 0xa82 <spi_send>
	
	while(!(SPSR & (1 << SPIF)));
     a90:	77 9b       	sbis	0x0e, 7	; 14
     a92:	fe cf       	rjmp	.-4      	; 0xa90 <spi_read+0x6>

	return SPDR;
     a94:	8f b1       	in	r24, 0x0f	; 15
}
     a96:	08 95       	ret

00000a98 <spi_select>:
	while(!(SPSR & (1 << SPIF)));
}

void spi_select(){
	//Set !SS to 0 for selection of slave
	PORTB &= ~(1 << SPI_SS);
     a98:	c4 98       	cbi	0x18, 4	; 24
     a9a:	08 95       	ret

00000a9c <spi_deselect>:
}

void spi_deselect(){
	//Set !SS to 1 for deselection of slave
	PORTB |= (1 << SPI_SS);
     a9c:	c4 9a       	sbi	0x18, 4	; 24
     a9e:	08 95       	ret

00000aa0 <SRAM_test>:
	if (address_offset > 0x100) { return 0; }
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	return ext_ram[address_offset];
}

void SRAM_test(void) {
     aa0:	cf 92       	push	r12
     aa2:	df 92       	push	r13
     aa4:	ef 92       	push	r14
     aa6:	ff 92       	push	r15
     aa8:	0f 93       	push	r16
     aaa:	1f 93       	push	r17
     aac:	cf 93       	push	r28
     aae:	df 93       	push	r29
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size       = 0x800;
	uint16_t write_errors       = 0;
	uint16_t retrieval_errors   = 0;

	oled_clear_screen();
     ab0:	0e 94 36 04 	call	0x86c	; 0x86c <oled_clear_screen>
	oled_pos(3,2);
     ab4:	62 e0       	ldi	r22, 0x02	; 2
     ab6:	70 e0       	ldi	r23, 0x00	; 0
     ab8:	83 e0       	ldi	r24, 0x03	; 3
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	0e 94 46 04 	call	0x88c	; 0x88c <oled_pos>
	oled_printf("TESTING SRAM");
     ac0:	88 e1       	ldi	r24, 0x18	; 24
     ac2:	92 e0       	ldi	r25, 0x02	; 2
     ac4:	9f 93       	push	r25
     ac6:	8f 93       	push	r24
     ac8:	0e 94 6e 04 	call	0x8dc	; 0x8dc <oled_printf>
	printf("\nStarting SRAM test...\n");
     acc:	85 e2       	ldi	r24, 0x25	; 37
     ace:	92 e0       	ldi	r25, 0x02	; 2
     ad0:	0e 94 51 07 	call	0xea2	; 0xea2 <puts>

	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
     ad4:	0e 94 2d 07 	call	0xe5a	; 0xe5a <rand>
     ad8:	6c 01       	movw	r12, r24

	// Write phase: Immediately check that the correct value was stored
	srand(seed);
     ada:	0e 94 32 07 	call	0xe64	; 0xe64 <srand>
     ade:	0f 90       	pop	r0
     ae0:	0f 90       	pop	r0
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     ae2:	c0 e0       	ldi	r28, 0x00	; 0
     ae4:	d0 e0       	ldi	r29, 0x00	; 0
}

void SRAM_test(void) {
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size       = 0x800;
	uint16_t write_errors       = 0;
     ae6:	00 e0       	ldi	r16, 0x00	; 0
     ae8:	10 e0       	ldi	r17, 0x00	; 0
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		ext_ram[i] = some_value;
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
     aea:	0f 2e       	mov	r0, r31
     aec:	fc e3       	ldi	r31, 0x3C	; 60
     aee:	ef 2e       	mov	r14, r31
     af0:	f2 e0       	ldi	r31, 0x02	; 2
     af2:	ff 2e       	mov	r15, r31
     af4:	f0 2d       	mov	r31, r0
	uint16_t seed = rand();

	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     af6:	0e 94 2d 07 	call	0xe5a	; 0xe5a <rand>
     afa:	fe 01       	movw	r30, r28
     afc:	f8 5e       	subi	r31, 0xE8	; 232
		ext_ram[i] = some_value;
     afe:	80 83       	st	Z, r24
		uint8_t retreived_value = ext_ram[i];
     b00:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     b02:	28 17       	cp	r18, r24
     b04:	a9 f0       	breq	.+42     	; 0xb30 <SRAM_test+0x90>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
     b06:	99 27       	eor	r25, r25
     b08:	9f 93       	push	r25
     b0a:	8f 93       	push	r24
     b0c:	1f 92       	push	r1
     b0e:	2f 93       	push	r18
     b10:	df 93       	push	r29
     b12:	cf 93       	push	r28
     b14:	ff 92       	push	r15
     b16:	ef 92       	push	r14
     b18:	0e 94 3d 07 	call	0xe7a	; 0xe7a <printf>
			write_errors++;
     b1c:	0f 5f       	subi	r16, 0xFF	; 255
     b1e:	1f 4f       	sbci	r17, 0xFF	; 255
     b20:	8d b7       	in	r24, 0x3d	; 61
     b22:	9e b7       	in	r25, 0x3e	; 62
     b24:	08 96       	adiw	r24, 0x08	; 8
     b26:	0f b6       	in	r0, 0x3f	; 63
     b28:	f8 94       	cli
     b2a:	9e bf       	out	0x3e, r25	; 62
     b2c:	0f be       	out	0x3f, r0	; 63
     b2e:	8d bf       	out	0x3d, r24	; 61
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();

	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     b30:	21 96       	adiw	r28, 0x01	; 1
     b32:	c1 15       	cp	r28, r1
     b34:	98 e0       	ldi	r25, 0x08	; 8
     b36:	d9 07       	cpc	r29, r25
     b38:	f1 f6       	brne	.-68     	; 0xaf6 <SRAM_test+0x56>
			write_errors++;
		}
	}

	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);    // reset the PRNG to the state it had before the write phase
     b3a:	c6 01       	movw	r24, r12
     b3c:	0e 94 32 07 	call	0xe64	; 0xe64 <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     b40:	c0 e0       	ldi	r28, 0x00	; 0
     b42:	d0 e0       	ldi	r29, 0x00	; 0

void SRAM_test(void) {
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size       = 0x800;
	uint16_t write_errors       = 0;
	uint16_t retrieval_errors   = 0;
     b44:	e1 2c       	mov	r14, r1
     b46:	f1 2c       	mov	r15, r1
	srand(seed);    // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
     b48:	0f 2e       	mov	r0, r31
     b4a:	f5 e7       	ldi	r31, 0x75	; 117
     b4c:	cf 2e       	mov	r12, r31
     b4e:	f2 e0       	ldi	r31, 0x02	; 2
     b50:	df 2e       	mov	r13, r31
     b52:	f0 2d       	mov	r31, r0
	}

	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);    // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     b54:	0e 94 2d 07 	call	0xe5a	; 0xe5a <rand>
     b58:	fe 01       	movw	r30, r28
     b5a:	f8 5e       	subi	r31, 0xE8	; 232
		uint8_t retreived_value = ext_ram[i];
     b5c:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     b5e:	28 17       	cp	r18, r24
     b60:	b1 f0       	breq	.+44     	; 0xb8e <SRAM_test+0xee>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
     b62:	99 27       	eor	r25, r25
     b64:	9f 93       	push	r25
     b66:	8f 93       	push	r24
     b68:	1f 92       	push	r1
     b6a:	2f 93       	push	r18
     b6c:	df 93       	push	r29
     b6e:	cf 93       	push	r28
     b70:	df 92       	push	r13
     b72:	cf 92       	push	r12
     b74:	0e 94 3d 07 	call	0xe7a	; 0xe7a <printf>
			retrieval_errors++;
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	e9 1a       	sub	r14, r25
     b7c:	f9 0a       	sbc	r15, r25
     b7e:	8d b7       	in	r24, 0x3d	; 61
     b80:	9e b7       	in	r25, 0x3e	; 62
     b82:	08 96       	adiw	r24, 0x08	; 8
     b84:	0f b6       	in	r0, 0x3f	; 63
     b86:	f8 94       	cli
     b88:	9e bf       	out	0x3e, r25	; 62
     b8a:	0f be       	out	0x3f, r0	; 63
     b8c:	8d bf       	out	0x3d, r24	; 61
		}
	}

	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);    // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     b8e:	21 96       	adiw	r28, 0x01	; 1
     b90:	c1 15       	cp	r28, r1
     b92:	98 e0       	ldi	r25, 0x08	; 8
     b94:	d9 07       	cpc	r29, r25
     b96:	f1 f6       	brne	.-68     	; 0xb54 <SRAM_test+0xb4>
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	if (retrieval_errors != 0 || write_errors != 0) { 
     b98:	e1 14       	cp	r14, r1
     b9a:	f1 04       	cpc	r15, r1
     b9c:	19 f4       	brne	.+6      	; 0xba4 <SRAM_test+0x104>
     b9e:	01 15       	cp	r16, r1
     ba0:	11 05       	cpc	r17, r1
     ba2:	71 f1       	breq	.+92     	; 0xc00 <SRAM_test+0x160>
		oled_pos(5,0);
     ba4:	60 e0       	ldi	r22, 0x00	; 0
     ba6:	70 e0       	ldi	r23, 0x00	; 0
     ba8:	85 e0       	ldi	r24, 0x05	; 5
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	0e 94 46 04 	call	0x88c	; 0x88c <oled_pos>
		oled_printf("R ERRORS:  %4d",retrieval_errors);
     bb0:	ff 92       	push	r15
     bb2:	ef 92       	push	r14
     bb4:	82 eb       	ldi	r24, 0xB2	; 178
     bb6:	92 e0       	ldi	r25, 0x02	; 2
     bb8:	9f 93       	push	r25
     bba:	8f 93       	push	r24
     bbc:	0e 94 6e 04 	call	0x8dc	; 0x8dc <oled_printf>
		oled_pos(6,0);
     bc0:	60 e0       	ldi	r22, 0x00	; 0
     bc2:	70 e0       	ldi	r23, 0x00	; 0
     bc4:	86 e0       	ldi	r24, 0x06	; 6
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	0e 94 46 04 	call	0x88c	; 0x88c <oled_pos>
		oled_printf("W ERRORS:  %4d",write_errors);
     bcc:	1f 93       	push	r17
     bce:	0f 93       	push	r16
     bd0:	81 ec       	ldi	r24, 0xC1	; 193
     bd2:	92 e0       	ldi	r25, 0x02	; 2
     bd4:	9f 93       	push	r25
     bd6:	8f 93       	push	r24
     bd8:	0e 94 6e 04 	call	0x8dc	; 0x8dc <oled_printf>
     bdc:	2f ef       	ldi	r18, 0xFF	; 255
     bde:	8f ef       	ldi	r24, 0xFF	; 255
     be0:	9b e3       	ldi	r25, 0x3B	; 59
     be2:	21 50       	subi	r18, 0x01	; 1
     be4:	80 40       	sbci	r24, 0x00	; 0
     be6:	90 40       	sbci	r25, 0x00	; 0
     be8:	e1 f7       	brne	.-8      	; 0xbe2 <SRAM_test+0x142>
     bea:	00 c0       	rjmp	.+0      	; 0xbec <SRAM_test+0x14c>
     bec:	00 00       	nop
     bee:	8d b7       	in	r24, 0x3d	; 61
     bf0:	9e b7       	in	r25, 0x3e	; 62
     bf2:	08 96       	adiw	r24, 0x08	; 8
     bf4:	0f b6       	in	r0, 0x3f	; 63
     bf6:	f8 94       	cli
     bf8:	9e bf       	out	0x3e, r25	; 62
     bfa:	0f be       	out	0x3f, r0	; 63
     bfc:	8d bf       	out	0x3d, r24	; 61
     bfe:	0e c0       	rjmp	.+28     	; 0xc1c <SRAM_test+0x17c>
		_delay_ms(4000);
	} else {
		oled_pos(6,4);
     c00:	64 e0       	ldi	r22, 0x04	; 4
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	86 e0       	ldi	r24, 0x06	; 6
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	0e 94 46 04 	call	0x88c	; 0x88c <oled_pos>
		oled_printf("NO ERRORS");
     c0c:	80 ed       	ldi	r24, 0xD0	; 208
     c0e:	92 e0       	ldi	r25, 0x02	; 2
     c10:	9f 93       	push	r25
     c12:	8f 93       	push	r24
     c14:	0e 94 6e 04 	call	0x8dc	; 0x8dc <oled_printf>
     c18:	0f 90       	pop	r0
     c1a:	0f 90       	pop	r0
	}
	printf("SRAM test completed with \n%4d errors in write phase and \n%4d errors in retrieval phase\n\n", write_errors, retrieval_errors);
     c1c:	ff 92       	push	r15
     c1e:	ef 92       	push	r14
     c20:	1f 93       	push	r17
     c22:	0f 93       	push	r16
     c24:	8a ed       	ldi	r24, 0xDA	; 218
     c26:	92 e0       	ldi	r25, 0x02	; 2
     c28:	9f 93       	push	r25
     c2a:	8f 93       	push	r24
     c2c:	0e 94 3d 07 	call	0xe7a	; 0xe7a <printf>
     c30:	0f 90       	pop	r0
     c32:	0f 90       	pop	r0
     c34:	0f 90       	pop	r0
     c36:	0f 90       	pop	r0
     c38:	0f 90       	pop	r0
     c3a:	0f 90       	pop	r0
     c3c:	df 91       	pop	r29
     c3e:	cf 91       	pop	r28
     c40:	1f 91       	pop	r17
     c42:	0f 91       	pop	r16
     c44:	ff 90       	pop	r15
     c46:	ef 90       	pop	r14
     c48:	df 90       	pop	r13
     c4a:	cf 90       	pop	r12
     c4c:	08 95       	ret

00000c4e <SRAM_init>:
#include "SRAM_driver.h"
#include "oled_driver.h"

//Simple setup for SRAM, also tests for correctness
void SRAM_init(){
	MCUCR = 0x80;
     c4e:	80 e8       	ldi	r24, 0x80	; 128
     c50:	85 bf       	out	0x35, r24	; 53
	DDRA = 0xFF;
     c52:	8f ef       	ldi	r24, 0xFF	; 255
     c54:	8a bb       	out	0x1a, r24	; 26
	SRAM_test();
     c56:	0e 94 50 05 	call	0xaa0	; 0xaa0 <SRAM_test>
     c5a:	08 95       	ret

00000c5c <uart_sendChar>:

}

void uart_sendChar(unsigned char data){
	//Wait for empty transmitter buffer
	while(!(UCSR0A & (1<<UDRE0)));
     c5c:	5d 9b       	sbis	0x0b, 5	; 11
     c5e:	fe cf       	rjmp	.-4      	; 0xc5c <uart_sendChar>
		
	//Put data into buffer, then send the data
	UDR0 = data;
     c60:	8c b9       	out	0x0c, r24	; 12
     c62:	08 95       	ret

00000c64 <uart_getChar>:
}


unsigned int uart_getChar(){
	//Wait for the data to be received 
	while(!(UCSR0A & (1<<RXC0))){}
     c64:	5f 9b       	sbis	0x0b, 7	; 11
     c66:	fe cf       	rjmp	.-4      	; 0xc64 <uart_getChar>
	
	//Get status and the 9th bit, then data from buffer
	return UDR0;
     c68:	8c b1       	in	r24, 0x0c	; 12
}
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	08 95       	ret

00000c6e <uart_init>:

static FILE uart_io = FDEV_SETUP_STREAM(uart_sendChar, uart_getChar, _FDEV_SETUP_RW);

void uart_init(unsigned int ubrr){
	//Set baud rate
	UBRR0L = (unsigned int) ubrr;
     c6e:	89 b9       	out	0x09, r24	; 9
	
	//Enable receiver and transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
     c70:	88 e1       	ldi	r24, 0x18	; 24
     c72:	8a b9       	out	0x0a, r24	; 10
	
	stdout = &uart_io;
     c74:	86 e1       	ldi	r24, 0x16	; 22
     c76:	91 e0       	ldi	r25, 0x01	; 1
     c78:	90 93 70 03 	sts	0x0370, r25
     c7c:	80 93 6f 03 	sts	0x036F, r24
	stdin = &uart_io;
     c80:	90 93 6e 03 	sts	0x036E, r25
     c84:	80 93 6d 03 	sts	0x036D, r24
     c88:	08 95       	ret

00000c8a <main>:
#include "Drivers/uart_driver.h"
#include "Drivers/mcp2515_driver.h"
#include "Drivers/can_driver.h"
#include "timer.h"

int main(void) {
     c8a:	cf 93       	push	r28
     c8c:	df 93       	push	r29
     c8e:	cd b7       	in	r28, 0x3d	; 61
     c90:	de b7       	in	r29, 0x3e	; 62
     c92:	66 97       	sbiw	r28, 0x16	; 22
     c94:	0f b6       	in	r0, 0x3f	; 63
     c96:	f8 94       	cli
     c98:	de bf       	out	0x3e, r29	; 62
     c9a:	0f be       	out	0x3f, r0	; 63
     c9c:	cd bf       	out	0x3d, r28	; 61
    uart_init(MYUBRR);
     c9e:	8f e1       	ldi	r24, 0x1F	; 31
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	0e 94 37 06 	call	0xc6e	; 0xc6e <uart_init>
	printf("\nREBOOTED\n");
     ca6:	83 e3       	ldi	r24, 0x33	; 51
     ca8:	93 e0       	ldi	r25, 0x03	; 3
     caa:	0e 94 51 07 	call	0xea2	; 0xea2 <puts>
	SRAM_init();
     cae:	0e 94 27 06 	call	0xc4e	; 0xc4e <SRAM_init>
	joystick_init();
     cb2:	0e 94 69 03 	call	0x6d2	; 0x6d2 <joystick_init>
	button_init();
     cb6:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <button_init>
	oled_init();
     cba:	0e 94 7e 04 	call	0x8fc	; 0x8fc <oled_init>
	//mcp2515_init();
	can_init();	
     cbe:	0e 94 04 02 	call	0x408	; 0x408 <can_init>
	timer_init();
     cc2:	0e 94 8a 06 	call	0xd14	; 0xd14 <timer_init>

	DDRB |= (1<<DDB0);
     cc6:	b8 9a       	sbi	0x17, 0	; 23

	printf("\nAll init done\n\n");
     cc8:	8d e3       	ldi	r24, 0x3D	; 61
     cca:	93 e0       	ldi	r25, 0x03	; 3
     ccc:	0e 94 51 07 	call	0xea2	; 0xea2 <puts>
		//shell();
		//spi_test();

// 		menuitem* test_menu = MENU_create_menu();
// 		MENU_navigate(test_menu);
		rcv = can_data_receive();
     cd0:	1b e0       	ldi	r17, 0x0B	; 11
     cd2:	ce 01       	movw	r24, r28
     cd4:	0c 96       	adiw	r24, 0x0c	; 12
     cd6:	0e 94 71 02 	call	0x4e2	; 0x4e2 <can_data_receive>
     cda:	fe 01       	movw	r30, r28
     cdc:	3c 96       	adiw	r30, 0x0c	; 12
     cde:	de 01       	movw	r26, r28
     ce0:	11 96       	adiw	r26, 0x01	; 1
     ce2:	81 2f       	mov	r24, r17
     ce4:	01 90       	ld	r0, Z+
     ce6:	0d 92       	st	X+, r0
     ce8:	8a 95       	dec	r24
     cea:	e1 f7       	brne	.-8      	; 0xce4 <main+0x5a>
		if (rcv.id != -1){
     cec:	89 81       	ldd	r24, Y+1	; 0x01
     cee:	9a 81       	ldd	r25, Y+2	; 0x02
     cf0:	01 96       	adiw	r24, 0x01	; 1
     cf2:	79 f3       	breq	.-34     	; 0xcd2 <main+0x48>
			can_print_message(&rcv);
     cf4:	ce 01       	movw	r24, r28
     cf6:	01 96       	adiw	r24, 0x01	; 1
     cf8:	0e 94 de 02 	call	0x5bc	; 0x5bc <can_print_message>
			flash_diode();
     cfc:	0e 94 81 06 	call	0xd02	; 0xd02 <flash_diode>
     d00:	e8 cf       	rjmp	.-48     	; 0xcd2 <main+0x48>

00000d02 <flash_diode>:
#include "Drivers/oled_driver.h"


//Simple test, Ex 1, task 6
void flash_diode(){
	PORTB |= (1<<PINB0);
     d02:	c0 9a       	sbi	0x18, 0	; 24
     d04:	8f ef       	ldi	r24, 0xFF	; 255
     d06:	9f e2       	ldi	r25, 0x2F	; 47
     d08:	01 97       	sbiw	r24, 0x01	; 1
     d0a:	f1 f7       	brne	.-4      	; 0xd08 <flash_diode+0x6>
     d0c:	00 c0       	rjmp	.+0      	; 0xd0e <flash_diode+0xc>
     d0e:	00 00       	nop
	_delay_ms(10);
	PORTB &= ~(1<<PINB0);
     d10:	c0 98       	cbi	0x18, 0	; 24
     d12:	08 95       	ret

00000d14 <timer_init>:
#include "Drivers/button_driver.h"
#include "test_code.h"

void timer_init() {
		//CS3{2:0}   = 101  prescaler set to 1024
		TCCR3B |=  (1<<CS32) | (1<<CS30);
     d14:	ea e8       	ldi	r30, 0x8A	; 138
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	85 60       	ori	r24, 0x05	; 5
     d1c:	80 83       	st	Z, r24
		TCCR3B &= ~(1<<CS31);
     d1e:	80 81       	ld	r24, Z
     d20:	8d 7f       	andi	r24, 0xFD	; 253
     d22:	80 83       	st	Z, r24
		
		TCCR3A &= ~(1<<WGM30);
     d24:	ab e8       	ldi	r26, 0x8B	; 139
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	8c 91       	ld	r24, X
     d2a:	8e 7f       	andi	r24, 0xFE	; 254
     d2c:	8c 93       	st	X, r24
		TCCR3A &= ~(1<<WGM31);
     d2e:	8c 91       	ld	r24, X
     d30:	8d 7f       	andi	r24, 0xFD	; 253
     d32:	8c 93       	st	X, r24
		TCCR3B |=  (1<<WGM32);
     d34:	80 81       	ld	r24, Z
     d36:	88 60       	ori	r24, 0x08	; 8
     d38:	80 83       	st	Z, r24
		TCCR3B &= ~(1<<WGM33);
     d3a:	80 81       	ld	r24, Z
     d3c:	8f 7e       	andi	r24, 0xEF	; 239
     d3e:	80 83       	st	Z, r24
		//TCCR3A |=  (1<<COM3A1) | (1<<COM3A0);
		
		OCR3A = 68; //ca 70Hz 
     d40:	84 e4       	ldi	r24, 0x44	; 68
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	90 93 87 00 	sts	0x0087, r25
     d48:	80 93 86 00 	sts	0x0086, r24
		
		//enable interrupt on OCR3A compare

		ETIMSK |= (1<<OCIE3A);
     d4c:	ed e7       	ldi	r30, 0x7D	; 125
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	80 61       	ori	r24, 0x10	; 16
     d54:	80 83       	st	Z, r24
		TIFR |= (1<<ICF1);
     d56:	88 b7       	in	r24, 0x38	; 56
     d58:	88 60       	ori	r24, 0x08	; 8
     d5a:	88 bf       	out	0x38, r24	; 56
		
		
		sei();
     d5c:	78 94       	sei
     d5e:	08 95       	ret

00000d60 <__vector_7>:
		
}

ISR(TIMER3_COMPA_vect){
     d60:	1f 92       	push	r1
     d62:	0f 92       	push	r0
     d64:	0f b6       	in	r0, 0x3f	; 63
     d66:	0f 92       	push	r0
     d68:	11 24       	eor	r1, r1
     d6a:	2f 93       	push	r18
     d6c:	3f 93       	push	r19
     d6e:	4f 93       	push	r20
     d70:	5f 93       	push	r21
     d72:	6f 93       	push	r22
     d74:	7f 93       	push	r23
     d76:	8f 93       	push	r24
     d78:	9f 93       	push	r25
     d7a:	af 93       	push	r26
     d7c:	bf 93       	push	r27
     d7e:	ef 93       	push	r30
     d80:	ff 93       	push	r31
	can_joystick_transmit();
     d82:	0e 94 36 03 	call	0x66c	; 0x66c <can_joystick_transmit>
	if(button_rising_edge_detect(2)){
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <button_rising_edge_detect>
     d8c:	88 23       	and	r24, r24
     d8e:	31 f0       	breq	.+12     	; 0xd9c <__vector_7+0x3c>
		can_button_transmit(2);
     d90:	82 e0       	ldi	r24, 0x02	; 2
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	0e 94 4e 03 	call	0x69c	; 0x69c <can_button_transmit>
		flash_diode();
     d98:	0e 94 81 06 	call	0xd02	; 0xd02 <flash_diode>
	}
     d9c:	ff 91       	pop	r31
     d9e:	ef 91       	pop	r30
     da0:	bf 91       	pop	r27
     da2:	af 91       	pop	r26
     da4:	9f 91       	pop	r25
     da6:	8f 91       	pop	r24
     da8:	7f 91       	pop	r23
     daa:	6f 91       	pop	r22
     dac:	5f 91       	pop	r21
     dae:	4f 91       	pop	r20
     db0:	3f 91       	pop	r19
     db2:	2f 91       	pop	r18
     db4:	0f 90       	pop	r0
     db6:	0f be       	out	0x3f, r0	; 63
     db8:	0f 90       	pop	r0
     dba:	1f 90       	pop	r1
     dbc:	18 95       	reti

00000dbe <do_rand>:
     dbe:	8f 92       	push	r8
     dc0:	9f 92       	push	r9
     dc2:	af 92       	push	r10
     dc4:	bf 92       	push	r11
     dc6:	cf 92       	push	r12
     dc8:	df 92       	push	r13
     dca:	ef 92       	push	r14
     dcc:	ff 92       	push	r15
     dce:	cf 93       	push	r28
     dd0:	df 93       	push	r29
     dd2:	ec 01       	movw	r28, r24
     dd4:	68 81       	ld	r22, Y
     dd6:	79 81       	ldd	r23, Y+1	; 0x01
     dd8:	8a 81       	ldd	r24, Y+2	; 0x02
     dda:	9b 81       	ldd	r25, Y+3	; 0x03
     ddc:	61 15       	cp	r22, r1
     dde:	71 05       	cpc	r23, r1
     de0:	81 05       	cpc	r24, r1
     de2:	91 05       	cpc	r25, r1
     de4:	21 f4       	brne	.+8      	; 0xdee <do_rand+0x30>
     de6:	64 e2       	ldi	r22, 0x24	; 36
     de8:	79 ed       	ldi	r23, 0xD9	; 217
     dea:	8b e5       	ldi	r24, 0x5B	; 91
     dec:	97 e0       	ldi	r25, 0x07	; 7
     dee:	2d e1       	ldi	r18, 0x1D	; 29
     df0:	33 ef       	ldi	r19, 0xF3	; 243
     df2:	41 e0       	ldi	r20, 0x01	; 1
     df4:	50 e0       	ldi	r21, 0x00	; 0
     df6:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__divmodsi4>
     dfa:	49 01       	movw	r8, r18
     dfc:	5a 01       	movw	r10, r20
     dfe:	9b 01       	movw	r18, r22
     e00:	ac 01       	movw	r20, r24
     e02:	a7 ea       	ldi	r26, 0xA7	; 167
     e04:	b1 e4       	ldi	r27, 0x41	; 65
     e06:	0e 94 15 0a 	call	0x142a	; 0x142a <__muluhisi3>
     e0a:	6b 01       	movw	r12, r22
     e0c:	7c 01       	movw	r14, r24
     e0e:	ac ee       	ldi	r26, 0xEC	; 236
     e10:	b4 ef       	ldi	r27, 0xF4	; 244
     e12:	a5 01       	movw	r20, r10
     e14:	94 01       	movw	r18, r8
     e16:	0e 94 23 0a 	call	0x1446	; 0x1446 <__mulohisi3>
     e1a:	c6 0e       	add	r12, r22
     e1c:	d7 1e       	adc	r13, r23
     e1e:	e8 1e       	adc	r14, r24
     e20:	f9 1e       	adc	r15, r25
     e22:	f7 fe       	sbrs	r15, 7
     e24:	06 c0       	rjmp	.+12     	; 0xe32 <do_rand+0x74>
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	c8 1a       	sub	r12, r24
     e2a:	d1 08       	sbc	r13, r1
     e2c:	e1 08       	sbc	r14, r1
     e2e:	80 e8       	ldi	r24, 0x80	; 128
     e30:	f8 0a       	sbc	r15, r24
     e32:	c8 82       	st	Y, r12
     e34:	d9 82       	std	Y+1, r13	; 0x01
     e36:	ea 82       	std	Y+2, r14	; 0x02
     e38:	fb 82       	std	Y+3, r15	; 0x03
     e3a:	c6 01       	movw	r24, r12
     e3c:	9f 77       	andi	r25, 0x7F	; 127
     e3e:	df 91       	pop	r29
     e40:	cf 91       	pop	r28
     e42:	ff 90       	pop	r15
     e44:	ef 90       	pop	r14
     e46:	df 90       	pop	r13
     e48:	cf 90       	pop	r12
     e4a:	bf 90       	pop	r11
     e4c:	af 90       	pop	r10
     e4e:	9f 90       	pop	r9
     e50:	8f 90       	pop	r8
     e52:	08 95       	ret

00000e54 <rand_r>:
     e54:	0e 94 df 06 	call	0xdbe	; 0xdbe <do_rand>
     e58:	08 95       	ret

00000e5a <rand>:
     e5a:	80 e0       	ldi	r24, 0x00	; 0
     e5c:	91 e0       	ldi	r25, 0x01	; 1
     e5e:	0e 94 df 06 	call	0xdbe	; 0xdbe <do_rand>
     e62:	08 95       	ret

00000e64 <srand>:
     e64:	a0 e0       	ldi	r26, 0x00	; 0
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	80 93 00 01 	sts	0x0100, r24
     e6c:	90 93 01 01 	sts	0x0101, r25
     e70:	a0 93 02 01 	sts	0x0102, r26
     e74:	b0 93 03 01 	sts	0x0103, r27
     e78:	08 95       	ret

00000e7a <printf>:
     e7a:	a0 e0       	ldi	r26, 0x00	; 0
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	e3 e4       	ldi	r30, 0x43	; 67
     e80:	f7 e0       	ldi	r31, 0x07	; 7
     e82:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__prologue_saves__+0x20>
     e86:	fe 01       	movw	r30, r28
     e88:	35 96       	adiw	r30, 0x05	; 5
     e8a:	61 91       	ld	r22, Z+
     e8c:	71 91       	ld	r23, Z+
     e8e:	af 01       	movw	r20, r30
     e90:	80 91 6f 03 	lds	r24, 0x036F
     e94:	90 91 70 03 	lds	r25, 0x0370
     e98:	0e 94 7e 07 	call	0xefc	; 0xefc <vfprintf>
     e9c:	e2 e0       	ldi	r30, 0x02	; 2
     e9e:	0c 94 54 0a 	jmp	0x14a8	; 0x14a8 <__epilogue_restores__+0x20>

00000ea2 <puts>:
     ea2:	0f 93       	push	r16
     ea4:	1f 93       	push	r17
     ea6:	cf 93       	push	r28
     ea8:	df 93       	push	r29
     eaa:	e0 91 6f 03 	lds	r30, 0x036F
     eae:	f0 91 70 03 	lds	r31, 0x0370
     eb2:	23 81       	ldd	r18, Z+3	; 0x03
     eb4:	21 ff       	sbrs	r18, 1
     eb6:	1b c0       	rjmp	.+54     	; 0xeee <puts+0x4c>
     eb8:	ec 01       	movw	r28, r24
     eba:	00 e0       	ldi	r16, 0x00	; 0
     ebc:	10 e0       	ldi	r17, 0x00	; 0
     ebe:	89 91       	ld	r24, Y+
     ec0:	60 91 6f 03 	lds	r22, 0x036F
     ec4:	70 91 70 03 	lds	r23, 0x0370
     ec8:	db 01       	movw	r26, r22
     eca:	18 96       	adiw	r26, 0x08	; 8
     ecc:	ed 91       	ld	r30, X+
     ece:	fc 91       	ld	r31, X
     ed0:	19 97       	sbiw	r26, 0x09	; 9
     ed2:	88 23       	and	r24, r24
     ed4:	31 f0       	breq	.+12     	; 0xee2 <puts+0x40>
     ed6:	09 95       	icall
     ed8:	89 2b       	or	r24, r25
     eda:	89 f3       	breq	.-30     	; 0xebe <puts+0x1c>
     edc:	0f ef       	ldi	r16, 0xFF	; 255
     ede:	1f ef       	ldi	r17, 0xFF	; 255
     ee0:	ee cf       	rjmp	.-36     	; 0xebe <puts+0x1c>
     ee2:	8a e0       	ldi	r24, 0x0A	; 10
     ee4:	09 95       	icall
     ee6:	89 2b       	or	r24, r25
     ee8:	11 f4       	brne	.+4      	; 0xeee <puts+0x4c>
     eea:	c8 01       	movw	r24, r16
     eec:	02 c0       	rjmp	.+4      	; 0xef2 <puts+0x50>
     eee:	8f ef       	ldi	r24, 0xFF	; 255
     ef0:	9f ef       	ldi	r25, 0xFF	; 255
     ef2:	df 91       	pop	r29
     ef4:	cf 91       	pop	r28
     ef6:	1f 91       	pop	r17
     ef8:	0f 91       	pop	r16
     efa:	08 95       	ret

00000efc <vfprintf>:
     efc:	ac e0       	ldi	r26, 0x0C	; 12
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	e4 e8       	ldi	r30, 0x84	; 132
     f02:	f7 e0       	ldi	r31, 0x07	; 7
     f04:	0c 94 28 0a 	jmp	0x1450	; 0x1450 <__prologue_saves__>
     f08:	7c 01       	movw	r14, r24
     f0a:	6b 01       	movw	r12, r22
     f0c:	8a 01       	movw	r16, r20
     f0e:	fc 01       	movw	r30, r24
     f10:	17 82       	std	Z+7, r1	; 0x07
     f12:	16 82       	std	Z+6, r1	; 0x06
     f14:	83 81       	ldd	r24, Z+3	; 0x03
     f16:	81 ff       	sbrs	r24, 1
     f18:	bd c1       	rjmp	.+890    	; 0x1294 <vfprintf+0x398>
     f1a:	ce 01       	movw	r24, r28
     f1c:	01 96       	adiw	r24, 0x01	; 1
     f1e:	4c 01       	movw	r8, r24
     f20:	f7 01       	movw	r30, r14
     f22:	93 81       	ldd	r25, Z+3	; 0x03
     f24:	f6 01       	movw	r30, r12
     f26:	93 fd       	sbrc	r25, 3
     f28:	85 91       	lpm	r24, Z+
     f2a:	93 ff       	sbrs	r25, 3
     f2c:	81 91       	ld	r24, Z+
     f2e:	6f 01       	movw	r12, r30
     f30:	88 23       	and	r24, r24
     f32:	09 f4       	brne	.+2      	; 0xf36 <vfprintf+0x3a>
     f34:	ab c1       	rjmp	.+854    	; 0x128c <vfprintf+0x390>
     f36:	85 32       	cpi	r24, 0x25	; 37
     f38:	39 f4       	brne	.+14     	; 0xf48 <vfprintf+0x4c>
     f3a:	93 fd       	sbrc	r25, 3
     f3c:	85 91       	lpm	r24, Z+
     f3e:	93 ff       	sbrs	r25, 3
     f40:	81 91       	ld	r24, Z+
     f42:	6f 01       	movw	r12, r30
     f44:	85 32       	cpi	r24, 0x25	; 37
     f46:	29 f4       	brne	.+10     	; 0xf52 <vfprintf+0x56>
     f48:	b7 01       	movw	r22, r14
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	0e 94 66 09 	call	0x12cc	; 0x12cc <fputc>
     f50:	e7 cf       	rjmp	.-50     	; 0xf20 <vfprintf+0x24>
     f52:	51 2c       	mov	r5, r1
     f54:	31 2c       	mov	r3, r1
     f56:	20 e0       	ldi	r18, 0x00	; 0
     f58:	20 32       	cpi	r18, 0x20	; 32
     f5a:	a0 f4       	brcc	.+40     	; 0xf84 <vfprintf+0x88>
     f5c:	8b 32       	cpi	r24, 0x2B	; 43
     f5e:	69 f0       	breq	.+26     	; 0xf7a <vfprintf+0x7e>
     f60:	30 f4       	brcc	.+12     	; 0xf6e <vfprintf+0x72>
     f62:	80 32       	cpi	r24, 0x20	; 32
     f64:	59 f0       	breq	.+22     	; 0xf7c <vfprintf+0x80>
     f66:	83 32       	cpi	r24, 0x23	; 35
     f68:	69 f4       	brne	.+26     	; 0xf84 <vfprintf+0x88>
     f6a:	20 61       	ori	r18, 0x10	; 16
     f6c:	2c c0       	rjmp	.+88     	; 0xfc6 <vfprintf+0xca>
     f6e:	8d 32       	cpi	r24, 0x2D	; 45
     f70:	39 f0       	breq	.+14     	; 0xf80 <vfprintf+0x84>
     f72:	80 33       	cpi	r24, 0x30	; 48
     f74:	39 f4       	brne	.+14     	; 0xf84 <vfprintf+0x88>
     f76:	21 60       	ori	r18, 0x01	; 1
     f78:	26 c0       	rjmp	.+76     	; 0xfc6 <vfprintf+0xca>
     f7a:	22 60       	ori	r18, 0x02	; 2
     f7c:	24 60       	ori	r18, 0x04	; 4
     f7e:	23 c0       	rjmp	.+70     	; 0xfc6 <vfprintf+0xca>
     f80:	28 60       	ori	r18, 0x08	; 8
     f82:	21 c0       	rjmp	.+66     	; 0xfc6 <vfprintf+0xca>
     f84:	27 fd       	sbrc	r18, 7
     f86:	27 c0       	rjmp	.+78     	; 0xfd6 <vfprintf+0xda>
     f88:	30 ed       	ldi	r19, 0xD0	; 208
     f8a:	38 0f       	add	r19, r24
     f8c:	3a 30       	cpi	r19, 0x0A	; 10
     f8e:	78 f4       	brcc	.+30     	; 0xfae <vfprintf+0xb2>
     f90:	26 ff       	sbrs	r18, 6
     f92:	06 c0       	rjmp	.+12     	; 0xfa0 <vfprintf+0xa4>
     f94:	fa e0       	ldi	r31, 0x0A	; 10
     f96:	5f 9e       	mul	r5, r31
     f98:	30 0d       	add	r19, r0
     f9a:	11 24       	eor	r1, r1
     f9c:	53 2e       	mov	r5, r19
     f9e:	13 c0       	rjmp	.+38     	; 0xfc6 <vfprintf+0xca>
     fa0:	8a e0       	ldi	r24, 0x0A	; 10
     fa2:	38 9e       	mul	r3, r24
     fa4:	30 0d       	add	r19, r0
     fa6:	11 24       	eor	r1, r1
     fa8:	33 2e       	mov	r3, r19
     faa:	20 62       	ori	r18, 0x20	; 32
     fac:	0c c0       	rjmp	.+24     	; 0xfc6 <vfprintf+0xca>
     fae:	8e 32       	cpi	r24, 0x2E	; 46
     fb0:	21 f4       	brne	.+8      	; 0xfba <vfprintf+0xbe>
     fb2:	26 fd       	sbrc	r18, 6
     fb4:	6b c1       	rjmp	.+726    	; 0x128c <vfprintf+0x390>
     fb6:	20 64       	ori	r18, 0x40	; 64
     fb8:	06 c0       	rjmp	.+12     	; 0xfc6 <vfprintf+0xca>
     fba:	8c 36       	cpi	r24, 0x6C	; 108
     fbc:	11 f4       	brne	.+4      	; 0xfc2 <vfprintf+0xc6>
     fbe:	20 68       	ori	r18, 0x80	; 128
     fc0:	02 c0       	rjmp	.+4      	; 0xfc6 <vfprintf+0xca>
     fc2:	88 36       	cpi	r24, 0x68	; 104
     fc4:	41 f4       	brne	.+16     	; 0xfd6 <vfprintf+0xda>
     fc6:	f6 01       	movw	r30, r12
     fc8:	93 fd       	sbrc	r25, 3
     fca:	85 91       	lpm	r24, Z+
     fcc:	93 ff       	sbrs	r25, 3
     fce:	81 91       	ld	r24, Z+
     fd0:	6f 01       	movw	r12, r30
     fd2:	81 11       	cpse	r24, r1
     fd4:	c1 cf       	rjmp	.-126    	; 0xf58 <vfprintf+0x5c>
     fd6:	98 2f       	mov	r25, r24
     fd8:	9f 7d       	andi	r25, 0xDF	; 223
     fda:	95 54       	subi	r25, 0x45	; 69
     fdc:	93 30       	cpi	r25, 0x03	; 3
     fde:	28 f4       	brcc	.+10     	; 0xfea <vfprintf+0xee>
     fe0:	0c 5f       	subi	r16, 0xFC	; 252
     fe2:	1f 4f       	sbci	r17, 0xFF	; 255
     fe4:	ff e3       	ldi	r31, 0x3F	; 63
     fe6:	f9 83       	std	Y+1, r31	; 0x01
     fe8:	0d c0       	rjmp	.+26     	; 0x1004 <vfprintf+0x108>
     fea:	83 36       	cpi	r24, 0x63	; 99
     fec:	31 f0       	breq	.+12     	; 0xffa <vfprintf+0xfe>
     fee:	83 37       	cpi	r24, 0x73	; 115
     ff0:	71 f0       	breq	.+28     	; 0x100e <vfprintf+0x112>
     ff2:	83 35       	cpi	r24, 0x53	; 83
     ff4:	09 f0       	breq	.+2      	; 0xff8 <vfprintf+0xfc>
     ff6:	5b c0       	rjmp	.+182    	; 0x10ae <vfprintf+0x1b2>
     ff8:	22 c0       	rjmp	.+68     	; 0x103e <vfprintf+0x142>
     ffa:	f8 01       	movw	r30, r16
     ffc:	80 81       	ld	r24, Z
     ffe:	89 83       	std	Y+1, r24	; 0x01
    1000:	0e 5f       	subi	r16, 0xFE	; 254
    1002:	1f 4f       	sbci	r17, 0xFF	; 255
    1004:	44 24       	eor	r4, r4
    1006:	43 94       	inc	r4
    1008:	51 2c       	mov	r5, r1
    100a:	54 01       	movw	r10, r8
    100c:	15 c0       	rjmp	.+42     	; 0x1038 <vfprintf+0x13c>
    100e:	38 01       	movw	r6, r16
    1010:	f2 e0       	ldi	r31, 0x02	; 2
    1012:	6f 0e       	add	r6, r31
    1014:	71 1c       	adc	r7, r1
    1016:	f8 01       	movw	r30, r16
    1018:	a0 80       	ld	r10, Z
    101a:	b1 80       	ldd	r11, Z+1	; 0x01
    101c:	26 ff       	sbrs	r18, 6
    101e:	03 c0       	rjmp	.+6      	; 0x1026 <vfprintf+0x12a>
    1020:	65 2d       	mov	r22, r5
    1022:	70 e0       	ldi	r23, 0x00	; 0
    1024:	02 c0       	rjmp	.+4      	; 0x102a <vfprintf+0x12e>
    1026:	6f ef       	ldi	r22, 0xFF	; 255
    1028:	7f ef       	ldi	r23, 0xFF	; 255
    102a:	c5 01       	movw	r24, r10
    102c:	2c 87       	std	Y+12, r18	; 0x0c
    102e:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <strnlen>
    1032:	2c 01       	movw	r4, r24
    1034:	83 01       	movw	r16, r6
    1036:	2c 85       	ldd	r18, Y+12	; 0x0c
    1038:	2f 77       	andi	r18, 0x7F	; 127
    103a:	22 2e       	mov	r2, r18
    103c:	17 c0       	rjmp	.+46     	; 0x106c <vfprintf+0x170>
    103e:	38 01       	movw	r6, r16
    1040:	f2 e0       	ldi	r31, 0x02	; 2
    1042:	6f 0e       	add	r6, r31
    1044:	71 1c       	adc	r7, r1
    1046:	f8 01       	movw	r30, r16
    1048:	a0 80       	ld	r10, Z
    104a:	b1 80       	ldd	r11, Z+1	; 0x01
    104c:	26 ff       	sbrs	r18, 6
    104e:	03 c0       	rjmp	.+6      	; 0x1056 <vfprintf+0x15a>
    1050:	65 2d       	mov	r22, r5
    1052:	70 e0       	ldi	r23, 0x00	; 0
    1054:	02 c0       	rjmp	.+4      	; 0x105a <vfprintf+0x15e>
    1056:	6f ef       	ldi	r22, 0xFF	; 255
    1058:	7f ef       	ldi	r23, 0xFF	; 255
    105a:	c5 01       	movw	r24, r10
    105c:	2c 87       	std	Y+12, r18	; 0x0c
    105e:	0e 94 50 09 	call	0x12a0	; 0x12a0 <strnlen_P>
    1062:	2c 01       	movw	r4, r24
    1064:	2c 85       	ldd	r18, Y+12	; 0x0c
    1066:	20 68       	ori	r18, 0x80	; 128
    1068:	22 2e       	mov	r2, r18
    106a:	83 01       	movw	r16, r6
    106c:	23 fc       	sbrc	r2, 3
    106e:	1b c0       	rjmp	.+54     	; 0x10a6 <vfprintf+0x1aa>
    1070:	83 2d       	mov	r24, r3
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	48 16       	cp	r4, r24
    1076:	59 06       	cpc	r5, r25
    1078:	b0 f4       	brcc	.+44     	; 0x10a6 <vfprintf+0x1aa>
    107a:	b7 01       	movw	r22, r14
    107c:	80 e2       	ldi	r24, 0x20	; 32
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	0e 94 66 09 	call	0x12cc	; 0x12cc <fputc>
    1084:	3a 94       	dec	r3
    1086:	f4 cf       	rjmp	.-24     	; 0x1070 <vfprintf+0x174>
    1088:	f5 01       	movw	r30, r10
    108a:	27 fc       	sbrc	r2, 7
    108c:	85 91       	lpm	r24, Z+
    108e:	27 fe       	sbrs	r2, 7
    1090:	81 91       	ld	r24, Z+
    1092:	5f 01       	movw	r10, r30
    1094:	b7 01       	movw	r22, r14
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	0e 94 66 09 	call	0x12cc	; 0x12cc <fputc>
    109c:	31 10       	cpse	r3, r1
    109e:	3a 94       	dec	r3
    10a0:	f1 e0       	ldi	r31, 0x01	; 1
    10a2:	4f 1a       	sub	r4, r31
    10a4:	51 08       	sbc	r5, r1
    10a6:	41 14       	cp	r4, r1
    10a8:	51 04       	cpc	r5, r1
    10aa:	71 f7       	brne	.-36     	; 0x1088 <vfprintf+0x18c>
    10ac:	e5 c0       	rjmp	.+458    	; 0x1278 <vfprintf+0x37c>
    10ae:	84 36       	cpi	r24, 0x64	; 100
    10b0:	11 f0       	breq	.+4      	; 0x10b6 <vfprintf+0x1ba>
    10b2:	89 36       	cpi	r24, 0x69	; 105
    10b4:	39 f5       	brne	.+78     	; 0x1104 <vfprintf+0x208>
    10b6:	f8 01       	movw	r30, r16
    10b8:	27 ff       	sbrs	r18, 7
    10ba:	07 c0       	rjmp	.+14     	; 0x10ca <vfprintf+0x1ce>
    10bc:	60 81       	ld	r22, Z
    10be:	71 81       	ldd	r23, Z+1	; 0x01
    10c0:	82 81       	ldd	r24, Z+2	; 0x02
    10c2:	93 81       	ldd	r25, Z+3	; 0x03
    10c4:	0c 5f       	subi	r16, 0xFC	; 252
    10c6:	1f 4f       	sbci	r17, 0xFF	; 255
    10c8:	08 c0       	rjmp	.+16     	; 0x10da <vfprintf+0x1de>
    10ca:	60 81       	ld	r22, Z
    10cc:	71 81       	ldd	r23, Z+1	; 0x01
    10ce:	88 27       	eor	r24, r24
    10d0:	77 fd       	sbrc	r23, 7
    10d2:	80 95       	com	r24
    10d4:	98 2f       	mov	r25, r24
    10d6:	0e 5f       	subi	r16, 0xFE	; 254
    10d8:	1f 4f       	sbci	r17, 0xFF	; 255
    10da:	2f 76       	andi	r18, 0x6F	; 111
    10dc:	b2 2e       	mov	r11, r18
    10de:	97 ff       	sbrs	r25, 7
    10e0:	09 c0       	rjmp	.+18     	; 0x10f4 <vfprintf+0x1f8>
    10e2:	90 95       	com	r25
    10e4:	80 95       	com	r24
    10e6:	70 95       	com	r23
    10e8:	61 95       	neg	r22
    10ea:	7f 4f       	sbci	r23, 0xFF	; 255
    10ec:	8f 4f       	sbci	r24, 0xFF	; 255
    10ee:	9f 4f       	sbci	r25, 0xFF	; 255
    10f0:	20 68       	ori	r18, 0x80	; 128
    10f2:	b2 2e       	mov	r11, r18
    10f4:	2a e0       	ldi	r18, 0x0A	; 10
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	a4 01       	movw	r20, r8
    10fa:	0e 94 98 09 	call	0x1330	; 0x1330 <__ultoa_invert>
    10fe:	a8 2e       	mov	r10, r24
    1100:	a8 18       	sub	r10, r8
    1102:	44 c0       	rjmp	.+136    	; 0x118c <vfprintf+0x290>
    1104:	85 37       	cpi	r24, 0x75	; 117
    1106:	29 f4       	brne	.+10     	; 0x1112 <vfprintf+0x216>
    1108:	2f 7e       	andi	r18, 0xEF	; 239
    110a:	b2 2e       	mov	r11, r18
    110c:	2a e0       	ldi	r18, 0x0A	; 10
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	25 c0       	rjmp	.+74     	; 0x115c <vfprintf+0x260>
    1112:	f2 2f       	mov	r31, r18
    1114:	f9 7f       	andi	r31, 0xF9	; 249
    1116:	bf 2e       	mov	r11, r31
    1118:	8f 36       	cpi	r24, 0x6F	; 111
    111a:	c1 f0       	breq	.+48     	; 0x114c <vfprintf+0x250>
    111c:	18 f4       	brcc	.+6      	; 0x1124 <vfprintf+0x228>
    111e:	88 35       	cpi	r24, 0x58	; 88
    1120:	79 f0       	breq	.+30     	; 0x1140 <vfprintf+0x244>
    1122:	b4 c0       	rjmp	.+360    	; 0x128c <vfprintf+0x390>
    1124:	80 37       	cpi	r24, 0x70	; 112
    1126:	19 f0       	breq	.+6      	; 0x112e <vfprintf+0x232>
    1128:	88 37       	cpi	r24, 0x78	; 120
    112a:	21 f0       	breq	.+8      	; 0x1134 <vfprintf+0x238>
    112c:	af c0       	rjmp	.+350    	; 0x128c <vfprintf+0x390>
    112e:	2f 2f       	mov	r18, r31
    1130:	20 61       	ori	r18, 0x10	; 16
    1132:	b2 2e       	mov	r11, r18
    1134:	b4 fe       	sbrs	r11, 4
    1136:	0d c0       	rjmp	.+26     	; 0x1152 <vfprintf+0x256>
    1138:	8b 2d       	mov	r24, r11
    113a:	84 60       	ori	r24, 0x04	; 4
    113c:	b8 2e       	mov	r11, r24
    113e:	09 c0       	rjmp	.+18     	; 0x1152 <vfprintf+0x256>
    1140:	24 ff       	sbrs	r18, 4
    1142:	0a c0       	rjmp	.+20     	; 0x1158 <vfprintf+0x25c>
    1144:	9f 2f       	mov	r25, r31
    1146:	96 60       	ori	r25, 0x06	; 6
    1148:	b9 2e       	mov	r11, r25
    114a:	06 c0       	rjmp	.+12     	; 0x1158 <vfprintf+0x25c>
    114c:	28 e0       	ldi	r18, 0x08	; 8
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	05 c0       	rjmp	.+10     	; 0x115c <vfprintf+0x260>
    1152:	20 e1       	ldi	r18, 0x10	; 16
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	02 c0       	rjmp	.+4      	; 0x115c <vfprintf+0x260>
    1158:	20 e1       	ldi	r18, 0x10	; 16
    115a:	32 e0       	ldi	r19, 0x02	; 2
    115c:	f8 01       	movw	r30, r16
    115e:	b7 fe       	sbrs	r11, 7
    1160:	07 c0       	rjmp	.+14     	; 0x1170 <vfprintf+0x274>
    1162:	60 81       	ld	r22, Z
    1164:	71 81       	ldd	r23, Z+1	; 0x01
    1166:	82 81       	ldd	r24, Z+2	; 0x02
    1168:	93 81       	ldd	r25, Z+3	; 0x03
    116a:	0c 5f       	subi	r16, 0xFC	; 252
    116c:	1f 4f       	sbci	r17, 0xFF	; 255
    116e:	06 c0       	rjmp	.+12     	; 0x117c <vfprintf+0x280>
    1170:	60 81       	ld	r22, Z
    1172:	71 81       	ldd	r23, Z+1	; 0x01
    1174:	80 e0       	ldi	r24, 0x00	; 0
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	0e 5f       	subi	r16, 0xFE	; 254
    117a:	1f 4f       	sbci	r17, 0xFF	; 255
    117c:	a4 01       	movw	r20, r8
    117e:	0e 94 98 09 	call	0x1330	; 0x1330 <__ultoa_invert>
    1182:	a8 2e       	mov	r10, r24
    1184:	a8 18       	sub	r10, r8
    1186:	fb 2d       	mov	r31, r11
    1188:	ff 77       	andi	r31, 0x7F	; 127
    118a:	bf 2e       	mov	r11, r31
    118c:	b6 fe       	sbrs	r11, 6
    118e:	0b c0       	rjmp	.+22     	; 0x11a6 <vfprintf+0x2aa>
    1190:	2b 2d       	mov	r18, r11
    1192:	2e 7f       	andi	r18, 0xFE	; 254
    1194:	a5 14       	cp	r10, r5
    1196:	50 f4       	brcc	.+20     	; 0x11ac <vfprintf+0x2b0>
    1198:	b4 fe       	sbrs	r11, 4
    119a:	0a c0       	rjmp	.+20     	; 0x11b0 <vfprintf+0x2b4>
    119c:	b2 fc       	sbrc	r11, 2
    119e:	08 c0       	rjmp	.+16     	; 0x11b0 <vfprintf+0x2b4>
    11a0:	2b 2d       	mov	r18, r11
    11a2:	2e 7e       	andi	r18, 0xEE	; 238
    11a4:	05 c0       	rjmp	.+10     	; 0x11b0 <vfprintf+0x2b4>
    11a6:	7a 2c       	mov	r7, r10
    11a8:	2b 2d       	mov	r18, r11
    11aa:	03 c0       	rjmp	.+6      	; 0x11b2 <vfprintf+0x2b6>
    11ac:	7a 2c       	mov	r7, r10
    11ae:	01 c0       	rjmp	.+2      	; 0x11b2 <vfprintf+0x2b6>
    11b0:	75 2c       	mov	r7, r5
    11b2:	24 ff       	sbrs	r18, 4
    11b4:	0d c0       	rjmp	.+26     	; 0x11d0 <vfprintf+0x2d4>
    11b6:	fe 01       	movw	r30, r28
    11b8:	ea 0d       	add	r30, r10
    11ba:	f1 1d       	adc	r31, r1
    11bc:	80 81       	ld	r24, Z
    11be:	80 33       	cpi	r24, 0x30	; 48
    11c0:	11 f4       	brne	.+4      	; 0x11c6 <vfprintf+0x2ca>
    11c2:	29 7e       	andi	r18, 0xE9	; 233
    11c4:	09 c0       	rjmp	.+18     	; 0x11d8 <vfprintf+0x2dc>
    11c6:	22 ff       	sbrs	r18, 2
    11c8:	06 c0       	rjmp	.+12     	; 0x11d6 <vfprintf+0x2da>
    11ca:	73 94       	inc	r7
    11cc:	73 94       	inc	r7
    11ce:	04 c0       	rjmp	.+8      	; 0x11d8 <vfprintf+0x2dc>
    11d0:	82 2f       	mov	r24, r18
    11d2:	86 78       	andi	r24, 0x86	; 134
    11d4:	09 f0       	breq	.+2      	; 0x11d8 <vfprintf+0x2dc>
    11d6:	73 94       	inc	r7
    11d8:	23 fd       	sbrc	r18, 3
    11da:	13 c0       	rjmp	.+38     	; 0x1202 <vfprintf+0x306>
    11dc:	20 ff       	sbrs	r18, 0
    11de:	06 c0       	rjmp	.+12     	; 0x11ec <vfprintf+0x2f0>
    11e0:	5a 2c       	mov	r5, r10
    11e2:	73 14       	cp	r7, r3
    11e4:	18 f4       	brcc	.+6      	; 0x11ec <vfprintf+0x2f0>
    11e6:	53 0c       	add	r5, r3
    11e8:	57 18       	sub	r5, r7
    11ea:	73 2c       	mov	r7, r3
    11ec:	73 14       	cp	r7, r3
    11ee:	68 f4       	brcc	.+26     	; 0x120a <vfprintf+0x30e>
    11f0:	b7 01       	movw	r22, r14
    11f2:	80 e2       	ldi	r24, 0x20	; 32
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	2c 87       	std	Y+12, r18	; 0x0c
    11f8:	0e 94 66 09 	call	0x12cc	; 0x12cc <fputc>
    11fc:	73 94       	inc	r7
    11fe:	2c 85       	ldd	r18, Y+12	; 0x0c
    1200:	f5 cf       	rjmp	.-22     	; 0x11ec <vfprintf+0x2f0>
    1202:	73 14       	cp	r7, r3
    1204:	10 f4       	brcc	.+4      	; 0x120a <vfprintf+0x30e>
    1206:	37 18       	sub	r3, r7
    1208:	01 c0       	rjmp	.+2      	; 0x120c <vfprintf+0x310>
    120a:	31 2c       	mov	r3, r1
    120c:	24 ff       	sbrs	r18, 4
    120e:	12 c0       	rjmp	.+36     	; 0x1234 <vfprintf+0x338>
    1210:	b7 01       	movw	r22, r14
    1212:	80 e3       	ldi	r24, 0x30	; 48
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	2c 87       	std	Y+12, r18	; 0x0c
    1218:	0e 94 66 09 	call	0x12cc	; 0x12cc <fputc>
    121c:	2c 85       	ldd	r18, Y+12	; 0x0c
    121e:	22 ff       	sbrs	r18, 2
    1220:	17 c0       	rjmp	.+46     	; 0x1250 <vfprintf+0x354>
    1222:	21 ff       	sbrs	r18, 1
    1224:	03 c0       	rjmp	.+6      	; 0x122c <vfprintf+0x330>
    1226:	88 e5       	ldi	r24, 0x58	; 88
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	02 c0       	rjmp	.+4      	; 0x1230 <vfprintf+0x334>
    122c:	88 e7       	ldi	r24, 0x78	; 120
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	b7 01       	movw	r22, r14
    1232:	0c c0       	rjmp	.+24     	; 0x124c <vfprintf+0x350>
    1234:	82 2f       	mov	r24, r18
    1236:	86 78       	andi	r24, 0x86	; 134
    1238:	59 f0       	breq	.+22     	; 0x1250 <vfprintf+0x354>
    123a:	21 fd       	sbrc	r18, 1
    123c:	02 c0       	rjmp	.+4      	; 0x1242 <vfprintf+0x346>
    123e:	80 e2       	ldi	r24, 0x20	; 32
    1240:	01 c0       	rjmp	.+2      	; 0x1244 <vfprintf+0x348>
    1242:	8b e2       	ldi	r24, 0x2B	; 43
    1244:	27 fd       	sbrc	r18, 7
    1246:	8d e2       	ldi	r24, 0x2D	; 45
    1248:	b7 01       	movw	r22, r14
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	0e 94 66 09 	call	0x12cc	; 0x12cc <fputc>
    1250:	a5 14       	cp	r10, r5
    1252:	38 f4       	brcc	.+14     	; 0x1262 <vfprintf+0x366>
    1254:	b7 01       	movw	r22, r14
    1256:	80 e3       	ldi	r24, 0x30	; 48
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	0e 94 66 09 	call	0x12cc	; 0x12cc <fputc>
    125e:	5a 94       	dec	r5
    1260:	f7 cf       	rjmp	.-18     	; 0x1250 <vfprintf+0x354>
    1262:	aa 94       	dec	r10
    1264:	f4 01       	movw	r30, r8
    1266:	ea 0d       	add	r30, r10
    1268:	f1 1d       	adc	r31, r1
    126a:	80 81       	ld	r24, Z
    126c:	b7 01       	movw	r22, r14
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	0e 94 66 09 	call	0x12cc	; 0x12cc <fputc>
    1274:	a1 10       	cpse	r10, r1
    1276:	f5 cf       	rjmp	.-22     	; 0x1262 <vfprintf+0x366>
    1278:	33 20       	and	r3, r3
    127a:	09 f4       	brne	.+2      	; 0x127e <vfprintf+0x382>
    127c:	51 ce       	rjmp	.-862    	; 0xf20 <vfprintf+0x24>
    127e:	b7 01       	movw	r22, r14
    1280:	80 e2       	ldi	r24, 0x20	; 32
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	0e 94 66 09 	call	0x12cc	; 0x12cc <fputc>
    1288:	3a 94       	dec	r3
    128a:	f6 cf       	rjmp	.-20     	; 0x1278 <vfprintf+0x37c>
    128c:	f7 01       	movw	r30, r14
    128e:	86 81       	ldd	r24, Z+6	; 0x06
    1290:	97 81       	ldd	r25, Z+7	; 0x07
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <vfprintf+0x39c>
    1294:	8f ef       	ldi	r24, 0xFF	; 255
    1296:	9f ef       	ldi	r25, 0xFF	; 255
    1298:	2c 96       	adiw	r28, 0x0c	; 12
    129a:	e2 e1       	ldi	r30, 0x12	; 18
    129c:	0c 94 44 0a 	jmp	0x1488	; 0x1488 <__epilogue_restores__>

000012a0 <strnlen_P>:
    12a0:	fc 01       	movw	r30, r24
    12a2:	05 90       	lpm	r0, Z+
    12a4:	61 50       	subi	r22, 0x01	; 1
    12a6:	70 40       	sbci	r23, 0x00	; 0
    12a8:	01 10       	cpse	r0, r1
    12aa:	d8 f7       	brcc	.-10     	; 0x12a2 <strnlen_P+0x2>
    12ac:	80 95       	com	r24
    12ae:	90 95       	com	r25
    12b0:	8e 0f       	add	r24, r30
    12b2:	9f 1f       	adc	r25, r31
    12b4:	08 95       	ret

000012b6 <strnlen>:
    12b6:	fc 01       	movw	r30, r24
    12b8:	61 50       	subi	r22, 0x01	; 1
    12ba:	70 40       	sbci	r23, 0x00	; 0
    12bc:	01 90       	ld	r0, Z+
    12be:	01 10       	cpse	r0, r1
    12c0:	d8 f7       	brcc	.-10     	; 0x12b8 <strnlen+0x2>
    12c2:	80 95       	com	r24
    12c4:	90 95       	com	r25
    12c6:	8e 0f       	add	r24, r30
    12c8:	9f 1f       	adc	r25, r31
    12ca:	08 95       	ret

000012cc <fputc>:
    12cc:	0f 93       	push	r16
    12ce:	1f 93       	push	r17
    12d0:	cf 93       	push	r28
    12d2:	df 93       	push	r29
    12d4:	18 2f       	mov	r17, r24
    12d6:	09 2f       	mov	r16, r25
    12d8:	eb 01       	movw	r28, r22
    12da:	8b 81       	ldd	r24, Y+3	; 0x03
    12dc:	81 fd       	sbrc	r24, 1
    12de:	03 c0       	rjmp	.+6      	; 0x12e6 <fputc+0x1a>
    12e0:	8f ef       	ldi	r24, 0xFF	; 255
    12e2:	9f ef       	ldi	r25, 0xFF	; 255
    12e4:	20 c0       	rjmp	.+64     	; 0x1326 <fputc+0x5a>
    12e6:	82 ff       	sbrs	r24, 2
    12e8:	10 c0       	rjmp	.+32     	; 0x130a <fputc+0x3e>
    12ea:	4e 81       	ldd	r20, Y+6	; 0x06
    12ec:	5f 81       	ldd	r21, Y+7	; 0x07
    12ee:	2c 81       	ldd	r18, Y+4	; 0x04
    12f0:	3d 81       	ldd	r19, Y+5	; 0x05
    12f2:	42 17       	cp	r20, r18
    12f4:	53 07       	cpc	r21, r19
    12f6:	7c f4       	brge	.+30     	; 0x1316 <fputc+0x4a>
    12f8:	e8 81       	ld	r30, Y
    12fa:	f9 81       	ldd	r31, Y+1	; 0x01
    12fc:	9f 01       	movw	r18, r30
    12fe:	2f 5f       	subi	r18, 0xFF	; 255
    1300:	3f 4f       	sbci	r19, 0xFF	; 255
    1302:	39 83       	std	Y+1, r19	; 0x01
    1304:	28 83       	st	Y, r18
    1306:	10 83       	st	Z, r17
    1308:	06 c0       	rjmp	.+12     	; 0x1316 <fputc+0x4a>
    130a:	e8 85       	ldd	r30, Y+8	; 0x08
    130c:	f9 85       	ldd	r31, Y+9	; 0x09
    130e:	81 2f       	mov	r24, r17
    1310:	09 95       	icall
    1312:	89 2b       	or	r24, r25
    1314:	29 f7       	brne	.-54     	; 0x12e0 <fputc+0x14>
    1316:	2e 81       	ldd	r18, Y+6	; 0x06
    1318:	3f 81       	ldd	r19, Y+7	; 0x07
    131a:	2f 5f       	subi	r18, 0xFF	; 255
    131c:	3f 4f       	sbci	r19, 0xFF	; 255
    131e:	3f 83       	std	Y+7, r19	; 0x07
    1320:	2e 83       	std	Y+6, r18	; 0x06
    1322:	81 2f       	mov	r24, r17
    1324:	90 2f       	mov	r25, r16
    1326:	df 91       	pop	r29
    1328:	cf 91       	pop	r28
    132a:	1f 91       	pop	r17
    132c:	0f 91       	pop	r16
    132e:	08 95       	ret

00001330 <__ultoa_invert>:
    1330:	fa 01       	movw	r30, r20
    1332:	aa 27       	eor	r26, r26
    1334:	28 30       	cpi	r18, 0x08	; 8
    1336:	51 f1       	breq	.+84     	; 0x138c <__ultoa_invert+0x5c>
    1338:	20 31       	cpi	r18, 0x10	; 16
    133a:	81 f1       	breq	.+96     	; 0x139c <__ultoa_invert+0x6c>
    133c:	e8 94       	clt
    133e:	6f 93       	push	r22
    1340:	6e 7f       	andi	r22, 0xFE	; 254
    1342:	6e 5f       	subi	r22, 0xFE	; 254
    1344:	7f 4f       	sbci	r23, 0xFF	; 255
    1346:	8f 4f       	sbci	r24, 0xFF	; 255
    1348:	9f 4f       	sbci	r25, 0xFF	; 255
    134a:	af 4f       	sbci	r26, 0xFF	; 255
    134c:	b1 e0       	ldi	r27, 0x01	; 1
    134e:	3e d0       	rcall	.+124    	; 0x13cc <__ultoa_invert+0x9c>
    1350:	b4 e0       	ldi	r27, 0x04	; 4
    1352:	3c d0       	rcall	.+120    	; 0x13cc <__ultoa_invert+0x9c>
    1354:	67 0f       	add	r22, r23
    1356:	78 1f       	adc	r23, r24
    1358:	89 1f       	adc	r24, r25
    135a:	9a 1f       	adc	r25, r26
    135c:	a1 1d       	adc	r26, r1
    135e:	68 0f       	add	r22, r24
    1360:	79 1f       	adc	r23, r25
    1362:	8a 1f       	adc	r24, r26
    1364:	91 1d       	adc	r25, r1
    1366:	a1 1d       	adc	r26, r1
    1368:	6a 0f       	add	r22, r26
    136a:	71 1d       	adc	r23, r1
    136c:	81 1d       	adc	r24, r1
    136e:	91 1d       	adc	r25, r1
    1370:	a1 1d       	adc	r26, r1
    1372:	20 d0       	rcall	.+64     	; 0x13b4 <__ultoa_invert+0x84>
    1374:	09 f4       	brne	.+2      	; 0x1378 <__ultoa_invert+0x48>
    1376:	68 94       	set
    1378:	3f 91       	pop	r19
    137a:	2a e0       	ldi	r18, 0x0A	; 10
    137c:	26 9f       	mul	r18, r22
    137e:	11 24       	eor	r1, r1
    1380:	30 19       	sub	r19, r0
    1382:	30 5d       	subi	r19, 0xD0	; 208
    1384:	31 93       	st	Z+, r19
    1386:	de f6       	brtc	.-74     	; 0x133e <__ultoa_invert+0xe>
    1388:	cf 01       	movw	r24, r30
    138a:	08 95       	ret
    138c:	46 2f       	mov	r20, r22
    138e:	47 70       	andi	r20, 0x07	; 7
    1390:	40 5d       	subi	r20, 0xD0	; 208
    1392:	41 93       	st	Z+, r20
    1394:	b3 e0       	ldi	r27, 0x03	; 3
    1396:	0f d0       	rcall	.+30     	; 0x13b6 <__ultoa_invert+0x86>
    1398:	c9 f7       	brne	.-14     	; 0x138c <__ultoa_invert+0x5c>
    139a:	f6 cf       	rjmp	.-20     	; 0x1388 <__ultoa_invert+0x58>
    139c:	46 2f       	mov	r20, r22
    139e:	4f 70       	andi	r20, 0x0F	; 15
    13a0:	40 5d       	subi	r20, 0xD0	; 208
    13a2:	4a 33       	cpi	r20, 0x3A	; 58
    13a4:	18 f0       	brcs	.+6      	; 0x13ac <__ultoa_invert+0x7c>
    13a6:	49 5d       	subi	r20, 0xD9	; 217
    13a8:	31 fd       	sbrc	r19, 1
    13aa:	40 52       	subi	r20, 0x20	; 32
    13ac:	41 93       	st	Z+, r20
    13ae:	02 d0       	rcall	.+4      	; 0x13b4 <__ultoa_invert+0x84>
    13b0:	a9 f7       	brne	.-22     	; 0x139c <__ultoa_invert+0x6c>
    13b2:	ea cf       	rjmp	.-44     	; 0x1388 <__ultoa_invert+0x58>
    13b4:	b4 e0       	ldi	r27, 0x04	; 4
    13b6:	a6 95       	lsr	r26
    13b8:	97 95       	ror	r25
    13ba:	87 95       	ror	r24
    13bc:	77 95       	ror	r23
    13be:	67 95       	ror	r22
    13c0:	ba 95       	dec	r27
    13c2:	c9 f7       	brne	.-14     	; 0x13b6 <__ultoa_invert+0x86>
    13c4:	00 97       	sbiw	r24, 0x00	; 0
    13c6:	61 05       	cpc	r22, r1
    13c8:	71 05       	cpc	r23, r1
    13ca:	08 95       	ret
    13cc:	9b 01       	movw	r18, r22
    13ce:	ac 01       	movw	r20, r24
    13d0:	0a 2e       	mov	r0, r26
    13d2:	06 94       	lsr	r0
    13d4:	57 95       	ror	r21
    13d6:	47 95       	ror	r20
    13d8:	37 95       	ror	r19
    13da:	27 95       	ror	r18
    13dc:	ba 95       	dec	r27
    13de:	c9 f7       	brne	.-14     	; 0x13d2 <__ultoa_invert+0xa2>
    13e0:	62 0f       	add	r22, r18
    13e2:	73 1f       	adc	r23, r19
    13e4:	84 1f       	adc	r24, r20
    13e6:	95 1f       	adc	r25, r21
    13e8:	a0 1d       	adc	r26, r0
    13ea:	08 95       	ret

000013ec <__divmodsi4>:
    13ec:	05 2e       	mov	r0, r21
    13ee:	97 fb       	bst	r25, 7
    13f0:	1e f4       	brtc	.+6      	; 0x13f8 <__divmodsi4+0xc>
    13f2:	00 94       	com	r0
    13f4:	0e 94 0d 0a 	call	0x141a	; 0x141a <__negsi2>
    13f8:	57 fd       	sbrc	r21, 7
    13fa:	07 d0       	rcall	.+14     	; 0x140a <__divmodsi4_neg2>
    13fc:	0e 94 5f 0a 	call	0x14be	; 0x14be <__udivmodsi4>
    1400:	07 fc       	sbrc	r0, 7
    1402:	03 d0       	rcall	.+6      	; 0x140a <__divmodsi4_neg2>
    1404:	4e f4       	brtc	.+18     	; 0x1418 <__divmodsi4_exit>
    1406:	0c 94 0d 0a 	jmp	0x141a	; 0x141a <__negsi2>

0000140a <__divmodsi4_neg2>:
    140a:	50 95       	com	r21
    140c:	40 95       	com	r20
    140e:	30 95       	com	r19
    1410:	21 95       	neg	r18
    1412:	3f 4f       	sbci	r19, 0xFF	; 255
    1414:	4f 4f       	sbci	r20, 0xFF	; 255
    1416:	5f 4f       	sbci	r21, 0xFF	; 255

00001418 <__divmodsi4_exit>:
    1418:	08 95       	ret

0000141a <__negsi2>:
    141a:	90 95       	com	r25
    141c:	80 95       	com	r24
    141e:	70 95       	com	r23
    1420:	61 95       	neg	r22
    1422:	7f 4f       	sbci	r23, 0xFF	; 255
    1424:	8f 4f       	sbci	r24, 0xFF	; 255
    1426:	9f 4f       	sbci	r25, 0xFF	; 255
    1428:	08 95       	ret

0000142a <__muluhisi3>:
    142a:	0e 94 81 0a 	call	0x1502	; 0x1502 <__umulhisi3>
    142e:	a5 9f       	mul	r26, r21
    1430:	90 0d       	add	r25, r0
    1432:	b4 9f       	mul	r27, r20
    1434:	90 0d       	add	r25, r0
    1436:	a4 9f       	mul	r26, r20
    1438:	80 0d       	add	r24, r0
    143a:	91 1d       	adc	r25, r1
    143c:	11 24       	eor	r1, r1
    143e:	08 95       	ret

00001440 <__mulshisi3>:
    1440:	b7 ff       	sbrs	r27, 7
    1442:	0c 94 15 0a 	jmp	0x142a	; 0x142a <__muluhisi3>

00001446 <__mulohisi3>:
    1446:	0e 94 15 0a 	call	0x142a	; 0x142a <__muluhisi3>
    144a:	82 1b       	sub	r24, r18
    144c:	93 0b       	sbc	r25, r19
    144e:	08 95       	ret

00001450 <__prologue_saves__>:
    1450:	2f 92       	push	r2
    1452:	3f 92       	push	r3
    1454:	4f 92       	push	r4
    1456:	5f 92       	push	r5
    1458:	6f 92       	push	r6
    145a:	7f 92       	push	r7
    145c:	8f 92       	push	r8
    145e:	9f 92       	push	r9
    1460:	af 92       	push	r10
    1462:	bf 92       	push	r11
    1464:	cf 92       	push	r12
    1466:	df 92       	push	r13
    1468:	ef 92       	push	r14
    146a:	ff 92       	push	r15
    146c:	0f 93       	push	r16
    146e:	1f 93       	push	r17
    1470:	cf 93       	push	r28
    1472:	df 93       	push	r29
    1474:	cd b7       	in	r28, 0x3d	; 61
    1476:	de b7       	in	r29, 0x3e	; 62
    1478:	ca 1b       	sub	r28, r26
    147a:	db 0b       	sbc	r29, r27
    147c:	0f b6       	in	r0, 0x3f	; 63
    147e:	f8 94       	cli
    1480:	de bf       	out	0x3e, r29	; 62
    1482:	0f be       	out	0x3f, r0	; 63
    1484:	cd bf       	out	0x3d, r28	; 61
    1486:	09 94       	ijmp

00001488 <__epilogue_restores__>:
    1488:	2a 88       	ldd	r2, Y+18	; 0x12
    148a:	39 88       	ldd	r3, Y+17	; 0x11
    148c:	48 88       	ldd	r4, Y+16	; 0x10
    148e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1490:	6e 84       	ldd	r6, Y+14	; 0x0e
    1492:	7d 84       	ldd	r7, Y+13	; 0x0d
    1494:	8c 84       	ldd	r8, Y+12	; 0x0c
    1496:	9b 84       	ldd	r9, Y+11	; 0x0b
    1498:	aa 84       	ldd	r10, Y+10	; 0x0a
    149a:	b9 84       	ldd	r11, Y+9	; 0x09
    149c:	c8 84       	ldd	r12, Y+8	; 0x08
    149e:	df 80       	ldd	r13, Y+7	; 0x07
    14a0:	ee 80       	ldd	r14, Y+6	; 0x06
    14a2:	fd 80       	ldd	r15, Y+5	; 0x05
    14a4:	0c 81       	ldd	r16, Y+4	; 0x04
    14a6:	1b 81       	ldd	r17, Y+3	; 0x03
    14a8:	aa 81       	ldd	r26, Y+2	; 0x02
    14aa:	b9 81       	ldd	r27, Y+1	; 0x01
    14ac:	ce 0f       	add	r28, r30
    14ae:	d1 1d       	adc	r29, r1
    14b0:	0f b6       	in	r0, 0x3f	; 63
    14b2:	f8 94       	cli
    14b4:	de bf       	out	0x3e, r29	; 62
    14b6:	0f be       	out	0x3f, r0	; 63
    14b8:	cd bf       	out	0x3d, r28	; 61
    14ba:	ed 01       	movw	r28, r26
    14bc:	08 95       	ret

000014be <__udivmodsi4>:
    14be:	a1 e2       	ldi	r26, 0x21	; 33
    14c0:	1a 2e       	mov	r1, r26
    14c2:	aa 1b       	sub	r26, r26
    14c4:	bb 1b       	sub	r27, r27
    14c6:	fd 01       	movw	r30, r26
    14c8:	0d c0       	rjmp	.+26     	; 0x14e4 <__udivmodsi4_ep>

000014ca <__udivmodsi4_loop>:
    14ca:	aa 1f       	adc	r26, r26
    14cc:	bb 1f       	adc	r27, r27
    14ce:	ee 1f       	adc	r30, r30
    14d0:	ff 1f       	adc	r31, r31
    14d2:	a2 17       	cp	r26, r18
    14d4:	b3 07       	cpc	r27, r19
    14d6:	e4 07       	cpc	r30, r20
    14d8:	f5 07       	cpc	r31, r21
    14da:	20 f0       	brcs	.+8      	; 0x14e4 <__udivmodsi4_ep>
    14dc:	a2 1b       	sub	r26, r18
    14de:	b3 0b       	sbc	r27, r19
    14e0:	e4 0b       	sbc	r30, r20
    14e2:	f5 0b       	sbc	r31, r21

000014e4 <__udivmodsi4_ep>:
    14e4:	66 1f       	adc	r22, r22
    14e6:	77 1f       	adc	r23, r23
    14e8:	88 1f       	adc	r24, r24
    14ea:	99 1f       	adc	r25, r25
    14ec:	1a 94       	dec	r1
    14ee:	69 f7       	brne	.-38     	; 0x14ca <__udivmodsi4_loop>
    14f0:	60 95       	com	r22
    14f2:	70 95       	com	r23
    14f4:	80 95       	com	r24
    14f6:	90 95       	com	r25
    14f8:	9b 01       	movw	r18, r22
    14fa:	ac 01       	movw	r20, r24
    14fc:	bd 01       	movw	r22, r26
    14fe:	cf 01       	movw	r24, r30
    1500:	08 95       	ret

00001502 <__umulhisi3>:
    1502:	a2 9f       	mul	r26, r18
    1504:	b0 01       	movw	r22, r0
    1506:	b3 9f       	mul	r27, r19
    1508:	c0 01       	movw	r24, r0
    150a:	a3 9f       	mul	r26, r19
    150c:	70 0d       	add	r23, r0
    150e:	81 1d       	adc	r24, r1
    1510:	11 24       	eor	r1, r1
    1512:	91 1d       	adc	r25, r1
    1514:	b2 9f       	mul	r27, r18
    1516:	70 0d       	add	r23, r0
    1518:	81 1d       	adc	r24, r1
    151a:	11 24       	eor	r1, r1
    151c:	91 1d       	adc	r25, r1
    151e:	08 95       	ret

00001520 <_exit>:
    1520:	f8 94       	cli

00001522 <__stop_program>:
    1522:	ff cf       	rjmp	.-2      	; 0x1522 <__stop_program>
