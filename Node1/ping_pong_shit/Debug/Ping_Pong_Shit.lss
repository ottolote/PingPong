
Ping_Pong_Shit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002a4  00800100  00001bee  00001c82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001bee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000037  008003a4  008003a4  00001f26  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001f26  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000378  00000000  00000000  00001f82  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000035dd  00000000  00000000  000022fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000151d  00000000  00000000  000058d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000016a2  00000000  00000000  00006df4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000934  00000000  00000000  00008498  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000009c3  00000000  00000000  00008dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001a59  00000000  00000000  0000978f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000300  00000000  00000000  0000b1e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 ed 08 	jmp	0x11da	; 0x11da <__vector_7>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <oled_print_arrow+0x44>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	13 e0       	ldi	r17, 0x03	; 3
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	ee ee       	ldi	r30, 0xEE	; 238
     37c:	fb e1       	ldi	r31, 0x1B	; 27
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a4 3a       	cpi	r26, 0xA4	; 164
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	23 e0       	ldi	r18, 0x03	; 3
     38c:	a4 ea       	ldi	r26, 0xA4	; 164
     38e:	b3 e0       	ldi	r27, 0x03	; 3
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	ab 3d       	cpi	r26, 0xDB	; 219
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 06 07 	call	0xe0c	; 0xe0c <main>
     39e:	0c 94 f5 0d 	jmp	0x1bea	; 0x1bea <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <button_init>:
 */ 

#include <avr/io.h>

void button_init() {
	DDRB &= ~((1<<PINB1) | (1<<PINB2) | (1<<PINB3));
     3a6:	87 b3       	in	r24, 0x17	; 23
     3a8:	81 7f       	andi	r24, 0xF1	; 241
     3aa:	87 bb       	out	0x17, r24	; 23
     3ac:	08 95       	ret

000003ae <button_read>:
}

uint8_t button_read(uint8_t channel) {
	return (PINB&(1<<channel)) >> channel;
     3ae:	26 b3       	in	r18, 0x16	; 22
     3b0:	41 e0       	ldi	r20, 0x01	; 1
     3b2:	50 e0       	ldi	r21, 0x00	; 0
     3b4:	08 2e       	mov	r0, r24
     3b6:	02 c0       	rjmp	.+4      	; 0x3bc <button_read+0xe>
     3b8:	44 0f       	add	r20, r20
     3ba:	55 1f       	adc	r21, r21
     3bc:	0a 94       	dec	r0
     3be:	e2 f7       	brpl	.-8      	; 0x3b8 <button_read+0xa>
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	24 23       	and	r18, r20
     3c4:	35 23       	and	r19, r21
     3c6:	a9 01       	movw	r20, r18
     3c8:	02 c0       	rjmp	.+4      	; 0x3ce <button_read+0x20>
     3ca:	55 95       	asr	r21
     3cc:	47 95       	ror	r20
     3ce:	8a 95       	dec	r24
     3d0:	e2 f7       	brpl	.-8      	; 0x3ca <button_read+0x1c>
     3d2:	ca 01       	movw	r24, r20
}
     3d4:	08 95       	ret

000003d6 <button_rising_edge_detect>:

uint8_t button_rising_edge_detect(uint8_t channel){
	static last;
	static uint8_t current;
	current = button_read(channel);
     3d6:	0e 94 d7 01 	call	0x3ae	; 0x3ae <button_read>
     3da:	80 93 a6 03 	sts	0x03A6, r24
	if (last != current){
     3de:	28 2f       	mov	r18, r24
     3e0:	30 e0       	ldi	r19, 0x00	; 0
     3e2:	40 91 a4 03 	lds	r20, 0x03A4
     3e6:	50 91 a5 03 	lds	r21, 0x03A5
     3ea:	24 17       	cp	r18, r20
     3ec:	35 07       	cpc	r19, r21
     3ee:	49 f0       	breq	.+18     	; 0x402 <button_rising_edge_detect+0x2c>
		last = current;
     3f0:	30 93 a5 03 	sts	0x03A5, r19
     3f4:	20 93 a4 03 	sts	0x03A4, r18
		if(current == 1){
     3f8:	91 e0       	ldi	r25, 0x01	; 1
     3fa:	81 30       	cpi	r24, 0x01	; 1
     3fc:	19 f0       	breq	.+6      	; 0x404 <button_rising_edge_detect+0x2e>
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	01 c0       	rjmp	.+2      	; 0x404 <button_rising_edge_detect+0x2e>
			return 1;
		}
	}
	return 0;
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	89 2f       	mov	r24, r25
     406:	08 95       	ret

00000408 <can_init>:
can_message_t joy_message;*/


void can_init(){
	//Enter config mode
	mcp2515_init();
     408:	0e 94 35 04 	call	0x86a	; 0x86a <mcp2515_init>
	printf("CANCTRL (expect 0x87): 0x%02x\n", mcp2515_read(MCP_CANCTRL));
     40c:	8f e0       	ldi	r24, 0x0F	; 15
     40e:	0e 94 23 04 	call	0x846	; 0x846 <mcp2515_read>
     412:	1f 92       	push	r1
     414:	8f 93       	push	r24
     416:	8a e2       	ldi	r24, 0x2A	; 42
     418:	91 e0       	ldi	r25, 0x01	; 1
     41a:	9f 93       	push	r25
     41c:	8f 93       	push	r24
     41e:	0e 94 a2 0a 	call	0x1544	; 0x1544 <printf>

	//RX0 - Turn mask/filter off
	mcp2515_bit_modify(MCP_RXB0CTRL, 0b01100000, 0xFF);
     422:	4f ef       	ldi	r20, 0xFF	; 255
     424:	60 e6       	ldi	r22, 0x60	; 96
     426:	80 e6       	ldi	r24, 0x60	; 96
     428:	0e 94 01 04 	call	0x802	; 0x802 <mcp2515_bit_modify>
	//RX0 - Disable rollover
	mcp2515_bit_modify(MCP_RXB0CTRL, 0b00000100, 0);
     42c:	40 e0       	ldi	r20, 0x00	; 0
     42e:	64 e0       	ldi	r22, 0x04	; 4
     430:	80 e6       	ldi	r24, 0x60	; 96
     432:	0e 94 01 04 	call	0x802	; 0x802 <mcp2515_bit_modify>

	mcp2515_bit_modify(MCP_CANINTE, MCP_RX0IF, 0xff);
     436:	4f ef       	ldi	r20, 0xFF	; 255
     438:	61 e0       	ldi	r22, 0x01	; 1
     43a:	8b e2       	ldi	r24, 0x2B	; 43
     43c:	0e 94 01 04 	call	0x802	; 0x802 <mcp2515_bit_modify>
	
	//Enable normal mode
	mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
     440:	40 e0       	ldi	r20, 0x00	; 0
     442:	60 ee       	ldi	r22, 0xE0	; 224
     444:	8f e0       	ldi	r24, 0x0F	; 15
     446:	0e 94 01 04 	call	0x802	; 0x802 <mcp2515_bit_modify>
     44a:	0f 90       	pop	r0
     44c:	0f 90       	pop	r0
     44e:	0f 90       	pop	r0
     450:	0f 90       	pop	r0
     452:	08 95       	ret

00000454 <can_transmit_complete>:
	return 1;
}

int can_transmit_complete(){
	//Check if TX buffer is not pending
	return (!test_bit(mcp2515_read(MCP_TXB0CTRL), 3));
     454:	80 e3       	ldi	r24, 0x30	; 48
     456:	0e 94 23 04 	call	0x846	; 0x846 <mcp2515_read>
     45a:	86 95       	lsr	r24
     45c:	86 95       	lsr	r24
     45e:	86 95       	lsr	r24
     460:	91 e0       	ldi	r25, 0x01	; 1
     462:	89 27       	eor	r24, r25
}
     464:	81 70       	andi	r24, 0x01	; 1
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	08 95       	ret

0000046a <can_message_send>:
	//Enable normal mode
	mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);

}

void can_message_send(can_message_t* message){
     46a:	1f 93       	push	r17
     46c:	cf 93       	push	r28
     46e:	df 93       	push	r29
     470:	ec 01       	movw	r28, r24
	while (!can_transmit_complete()) {}
     472:	0e 94 2a 02 	call	0x454	; 0x454 <can_transmit_complete>
     476:	89 2b       	or	r24, r25
     478:	e1 f3       	breq	.-8      	; 0x472 <can_message_send+0x8>
	//Use standard ID to set the message
	mcp2515_write(MCP_TXB0SIDH, (int8_t)(message->id >> 3));
     47a:	68 81       	ld	r22, Y
     47c:	79 81       	ldd	r23, Y+1	; 0x01
     47e:	75 95       	asr	r23
     480:	67 95       	ror	r22
     482:	75 95       	asr	r23
     484:	67 95       	ror	r22
     486:	75 95       	asr	r23
     488:	67 95       	ror	r22
     48a:	81 e3       	ldi	r24, 0x31	; 49
     48c:	0e 94 dd 03 	call	0x7ba	; 0x7ba <mcp2515_write>
	mcp2515_write(MCP_TXB0SIDL, (int8_t)(message->id << 5));
     490:	68 81       	ld	r22, Y
     492:	79 81       	ldd	r23, Y+1	; 0x01
     494:	66 0f       	add	r22, r22
     496:	77 1f       	adc	r23, r23
     498:	62 95       	swap	r22
     49a:	72 95       	swap	r23
     49c:	70 7f       	andi	r23, 0xF0	; 240
     49e:	76 27       	eor	r23, r22
     4a0:	60 7f       	andi	r22, 0xF0	; 240
     4a2:	76 27       	eor	r23, r22
     4a4:	82 e3       	ldi	r24, 0x32	; 50
     4a6:	0e 94 dd 03 	call	0x7ba	; 0x7ba <mcp2515_write>

	//Set correct data lenght and use data frame, max 8 bytes
	mcp2515_write(MCP_TXB0DLC, (0x0F) & (message->length));
     4aa:	6a 81       	ldd	r22, Y+2	; 0x02
     4ac:	6f 70       	andi	r22, 0x0F	; 15
     4ae:	85 e3       	ldi	r24, 0x35	; 53
     4b0:	0e 94 dd 03 	call	0x7ba	; 0x7ba <mcp2515_write>

	//For loop to set data bytes
	for (uint8_t i = 0; i < message->length; i++) {
     4b4:	8a 81       	ldd	r24, Y+2	; 0x02
     4b6:	88 23       	and	r24, r24
     4b8:	69 f0       	breq	.+26     	; 0x4d4 <can_message_send+0x6a>
     4ba:	10 e0       	ldi	r17, 0x00	; 0
		mcp2515_write(MCP_TXB0D0 + i, message->data[i]);
     4bc:	fe 01       	movw	r30, r28
     4be:	e1 0f       	add	r30, r17
     4c0:	f1 1d       	adc	r31, r1
     4c2:	63 81       	ldd	r22, Z+3	; 0x03
     4c4:	86 e3       	ldi	r24, 0x36	; 54
     4c6:	81 0f       	add	r24, r17
     4c8:	0e 94 dd 03 	call	0x7ba	; 0x7ba <mcp2515_write>

	//Set correct data lenght and use data frame, max 8 bytes
	mcp2515_write(MCP_TXB0DLC, (0x0F) & (message->length));

	//For loop to set data bytes
	for (uint8_t i = 0; i < message->length; i++) {
     4cc:	1f 5f       	subi	r17, 0xFF	; 255
     4ce:	8a 81       	ldd	r24, Y+2	; 0x02
     4d0:	18 17       	cp	r17, r24
     4d2:	a0 f3       	brcs	.-24     	; 0x4bc <can_message_send+0x52>
		mcp2515_write(MCP_TXB0D0 + i, message->data[i]);
	}

	mcp2515_request_to_send(1);
     4d4:	81 e0       	ldi	r24, 0x01	; 1
     4d6:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <mcp2515_request_to_send>
}
     4da:	df 91       	pop	r29
     4dc:	cf 91       	pop	r28
     4de:	1f 91       	pop	r17
     4e0:	08 95       	ret

000004e2 <can_data_receive>:
void can_interrupt_vector(){
	//Clear interrupt flag
	rx_flag = 1;
}*/

can_message_t can_data_receive(){
     4e2:	9f 92       	push	r9
     4e4:	af 92       	push	r10
     4e6:	bf 92       	push	r11
     4e8:	cf 92       	push	r12
     4ea:	df 92       	push	r13
     4ec:	ef 92       	push	r14
     4ee:	ff 92       	push	r15
     4f0:	0f 93       	push	r16
     4f2:	1f 93       	push	r17
     4f4:	cf 93       	push	r28
     4f6:	df 93       	push	r29
     4f8:	cd b7       	in	r28, 0x3d	; 61
     4fa:	de b7       	in	r29, 0x3e	; 62
     4fc:	2b 97       	sbiw	r28, 0x0b	; 11
     4fe:	0f b6       	in	r0, 0x3f	; 63
     500:	f8 94       	cli
     502:	de bf       	out	0x3e, r29	; 62
     504:	0f be       	out	0x3f, r0	; 63
     506:	cd bf       	out	0x3d, r28	; 61
     508:	7c 01       	movw	r14, r24
	can_message_t message;
	
	//Check if RX buffer have message
	//if (rx_flag == 1) {
	if (mcp2515_read(MCP_CANINTF) & MCP_RX0IF) {
     50a:	8c e2       	ldi	r24, 0x2C	; 44
     50c:	0e 94 23 04 	call	0x846	; 0x846 <mcp2515_read>
     510:	80 ff       	sbrs	r24, 0
     512:	33 c0       	rjmp	.+102    	; 0x57a <__stack+0x7b>
		//Get ID if message
		message.id = (mcp2515_read(MCP_RXB0SIDH) << 3) | (mcp2515_read(MCP_RXB0SIDL) >> 5);
     514:	81 e6       	ldi	r24, 0x61	; 97
     516:	0e 94 23 04 	call	0x846	; 0x846 <mcp2515_read>
     51a:	c8 2e       	mov	r12, r24
     51c:	82 e6       	ldi	r24, 0x62	; 98
     51e:	0e 94 23 04 	call	0x846	; 0x846 <mcp2515_read>
     522:	82 95       	swap	r24
     524:	86 95       	lsr	r24
     526:	87 70       	andi	r24, 0x07	; 7
     528:	d1 2c       	mov	r13, r1
     52a:	cc 0c       	add	r12, r12
     52c:	dd 1c       	adc	r13, r13
     52e:	cc 0c       	add	r12, r12
     530:	dd 1c       	adc	r13, r13
     532:	cc 0c       	add	r12, r12
     534:	dd 1c       	adc	r13, r13
     536:	c8 2a       	or	r12, r24

		//Get lenght of message
		message.length = (0x0F) & (mcp2515_read(MCP_RXB0DLC));
     538:	85 e6       	ldi	r24, 0x65	; 101
     53a:	0e 94 23 04 	call	0x846	; 0x846 <mcp2515_read>
     53e:	8f 70       	andi	r24, 0x0F	; 15
     540:	98 2e       	mov	r9, r24

		//Get message data
		for(uint8_t i = 0; i < message.length; i++){
     542:	a9 f0       	breq	.+42     	; 0x56e <__stack+0x6f>
     544:	8e 01       	movw	r16, r28
     546:	0c 5f       	subi	r16, 0xFC	; 252
     548:	1f 4f       	sbci	r17, 0xFF	; 255
     54a:	0f 2e       	mov	r0, r31
     54c:	f6 e6       	ldi	r31, 0x66	; 102
     54e:	af 2e       	mov	r10, r31
     550:	f0 2d       	mov	r31, r0
     552:	a8 0e       	add	r10, r24
     554:	0f 2e       	mov	r0, r31
     556:	f6 e6       	ldi	r31, 0x66	; 102
     558:	bf 2e       	mov	r11, r31
     55a:	f0 2d       	mov	r31, r0
			message.data[i] = mcp2515_read(MCP_RXB0D0 + i);
     55c:	8b 2d       	mov	r24, r11
     55e:	0e 94 23 04 	call	0x846	; 0x846 <mcp2515_read>
     562:	f8 01       	movw	r30, r16
     564:	81 93       	st	Z+, r24
     566:	8f 01       	movw	r16, r30
     568:	b3 94       	inc	r11

		//Get lenght of message
		message.length = (0x0F) & (mcp2515_read(MCP_RXB0DLC));

		//Get message data
		for(uint8_t i = 0; i < message.length; i++){
     56a:	ba 10       	cpse	r11, r10
     56c:	f7 cf       	rjmp	.-18     	; 0x55c <__stack+0x5d>
			message.data[i] = mcp2515_read(MCP_RXB0D0 + i);
		}

		//Clear flag
		mcp2515_bit_modify(MCP_CANINTF, MCP_RX0IF, 0);
     56e:	40 e0       	ldi	r20, 0x00	; 0
     570:	61 e0       	ldi	r22, 0x01	; 1
     572:	8c e2       	ldi	r24, 0x2C	; 44
     574:	0e 94 01 04 	call	0x802	; 0x802 <mcp2515_bit_modify>
     578:	03 c0       	rjmp	.+6      	; 0x580 <__stack+0x81>
	} else {
		message.id = -1;
     57a:	cc 24       	eor	r12, r12
     57c:	ca 94       	dec	r12
     57e:	dc 2c       	mov	r13, r12
	}

	return message;
     580:	da 82       	std	Y+2, r13	; 0x02
     582:	c9 82       	std	Y+1, r12	; 0x01
     584:	9b 82       	std	Y+3, r9	; 0x03
     586:	8b e0       	ldi	r24, 0x0B	; 11
     588:	fe 01       	movw	r30, r28
     58a:	31 96       	adiw	r30, 0x01	; 1
     58c:	d7 01       	movw	r26, r14
     58e:	01 90       	ld	r0, Z+
     590:	0d 92       	st	X+, r0
     592:	8a 95       	dec	r24
     594:	e1 f7       	brne	.-8      	; 0x58e <__stack+0x8f>
}
     596:	c7 01       	movw	r24, r14
     598:	2b 96       	adiw	r28, 0x0b	; 11
     59a:	0f b6       	in	r0, 0x3f	; 63
     59c:	f8 94       	cli
     59e:	de bf       	out	0x3e, r29	; 62
     5a0:	0f be       	out	0x3f, r0	; 63
     5a2:	cd bf       	out	0x3d, r28	; 61
     5a4:	df 91       	pop	r29
     5a6:	cf 91       	pop	r28
     5a8:	1f 91       	pop	r17
     5aa:	0f 91       	pop	r16
     5ac:	ff 90       	pop	r15
     5ae:	ef 90       	pop	r14
     5b0:	df 90       	pop	r13
     5b2:	cf 90       	pop	r12
     5b4:	bf 90       	pop	r11
     5b6:	af 90       	pop	r10
     5b8:	9f 90       	pop	r9
     5ba:	08 95       	ret

000005bc <can_joystick_transmit>:
		//_delay_ms(1000);
		flash_diode();
	}
}

void can_joystick_transmit(){
     5bc:	cf 93       	push	r28
     5be:	df 93       	push	r29
	static can_message_t joy_message;
	static uint8_t prevX;
	static uint8_t prevY;
	
	joy_message.id = JOY_CAN_ID; 
     5c0:	81 e0       	ldi	r24, 0x01	; 1
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	90 93 c0 03 	sts	0x03C0, r25
     5c8:	80 93 bf 03 	sts	0x03BF, r24
	joy_message.length = 2;
     5cc:	82 e0       	ldi	r24, 0x02	; 2
     5ce:	80 93 c1 03 	sts	0x03C1, r24
	
	
	
	joy_message.data[0] = read_converted(JOYSTICK_X);
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	0e 94 91 03 	call	0x722	; 0x722 <read_converted>
     5d8:	c2 ec       	ldi	r28, 0xC2	; 194
     5da:	d3 e0       	ldi	r29, 0x03	; 3
     5dc:	88 83       	st	Y, r24
	joy_message.data[1] = read_converted(JOYSTICK_Y);
     5de:	81 e0       	ldi	r24, 0x01	; 1
     5e0:	0e 94 91 03 	call	0x722	; 0x722 <read_converted>
     5e4:	80 93 c3 03 	sts	0x03C3, r24
	

	//reduce sent messages when joystick is not changing. 
	if(		abs((int)(prevX - joy_message.data[0])) > JOYSTICK_ERROR_MARGIN || 
     5e8:	40 91 be 03 	lds	r20, 0x03BE
     5ec:	50 e0       	ldi	r21, 0x00	; 0
     5ee:	98 81       	ld	r25, Y
     5f0:	49 1b       	sub	r20, r25
     5f2:	51 09       	sbc	r21, r1
     5f4:	97 fd       	sbrc	r25, 7
     5f6:	53 95       	inc	r21
     5f8:	9a 01       	movw	r18, r20
     5fa:	55 23       	and	r21, r21
     5fc:	24 f4       	brge	.+8      	; 0x606 <can_joystick_transmit+0x4a>
     5fe:	22 27       	eor	r18, r18
     600:	33 27       	eor	r19, r19
     602:	24 1b       	sub	r18, r20
     604:	35 0b       	sbc	r19, r21
     606:	22 30       	cpi	r18, 0x02	; 2
     608:	31 05       	cpc	r19, r1
     60a:	84 f4       	brge	.+32     	; 0x62c <can_joystick_transmit+0x70>
			abs((int)(prevY - joy_message.data[1])) > JOYSTICK_ERROR_MARGIN ) {
     60c:	20 91 bd 03 	lds	r18, 0x03BD
     610:	30 e0       	ldi	r19, 0x00	; 0
     612:	28 1b       	sub	r18, r24
     614:	31 09       	sbc	r19, r1
     616:	87 fd       	sbrc	r24, 7
     618:	33 95       	inc	r19
     61a:	c9 01       	movw	r24, r18
     61c:	99 23       	and	r25, r25
     61e:	24 f4       	brge	.+8      	; 0x628 <can_joystick_transmit+0x6c>
     620:	88 27       	eor	r24, r24
     622:	99 27       	eor	r25, r25
     624:	82 1b       	sub	r24, r18
     626:	93 0b       	sbc	r25, r19
	joy_message.data[0] = read_converted(JOYSTICK_X);
	joy_message.data[1] = read_converted(JOYSTICK_Y);
	

	//reduce sent messages when joystick is not changing. 
	if(		abs((int)(prevX - joy_message.data[0])) > JOYSTICK_ERROR_MARGIN || 
     628:	02 97       	sbiw	r24, 0x02	; 2
     62a:	34 f0       	brlt	.+12     	; 0x638 <can_joystick_transmit+0x7c>
			abs((int)(prevY - joy_message.data[1])) > JOYSTICK_ERROR_MARGIN ) {
		can_message_send(&joy_message);
     62c:	8f eb       	ldi	r24, 0xBF	; 191
     62e:	93 e0       	ldi	r25, 0x03	; 3
     630:	0e 94 35 02 	call	0x46a	; 0x46a <can_message_send>
		flash_diode();
     634:	0e 94 ab 08 	call	0x1156	; 0x1156 <flash_diode>
	}
	
	prevX = joy_message.data[0];
     638:	80 91 c2 03 	lds	r24, 0x03C2
     63c:	80 93 be 03 	sts	0x03BE, r24
	prevY = joy_message.data[1];
     640:	80 91 c3 03 	lds	r24, 0x03C3
     644:	80 93 bd 03 	sts	0x03BD, r24
}
     648:	df 91       	pop	r29
     64a:	cf 91       	pop	r28
     64c:	08 95       	ret

0000064e <can_button_transmit>:

void can_button_transmit(uint8_t button_channel) {
		static can_message_t button_message;
		button_message.id = BUTTON_CAN_ID;
     64e:	23 e0       	ldi	r18, 0x03	; 3
     650:	30 e0       	ldi	r19, 0x00	; 0
     652:	30 93 b3 03 	sts	0x03B3, r19
     656:	20 93 b2 03 	sts	0x03B2, r18
		button_message.length = 1;
     65a:	91 e0       	ldi	r25, 0x01	; 1
     65c:	90 93 b4 03 	sts	0x03B4, r25
		
		button_message.data[0] = button_channel;
     660:	80 93 b5 03 	sts	0x03B5, r24



		can_message_send(&button_message);
     664:	82 eb       	ldi	r24, 0xB2	; 178
     666:	93 e0       	ldi	r25, 0x03	; 3
     668:	0e 94 35 02 	call	0x46a	; 0x46a <can_message_send>
     66c:	08 95       	ret

0000066e <can_handle_message>:
}

void can_handle_message(){
     66e:	cf 93       	push	r28
     670:	df 93       	push	r29
     672:	cd b7       	in	r28, 0x3d	; 61
     674:	de b7       	in	r29, 0x3e	; 62
     676:	2b 97       	sbiw	r28, 0x0b	; 11
     678:	0f b6       	in	r0, 0x3f	; 63
     67a:	f8 94       	cli
     67c:	de bf       	out	0x3e, r29	; 62
     67e:	0f be       	out	0x3f, r0	; 63
     680:	cd bf       	out	0x3d, r28	; 61
	static can_message_t message;
	message = can_data_receive();
     682:	ce 01       	movw	r24, r28
     684:	01 96       	adiw	r24, 0x01	; 1
     686:	0e 94 71 02 	call	0x4e2	; 0x4e2 <can_data_receive>
     68a:	8b e0       	ldi	r24, 0x0B	; 11
     68c:	fe 01       	movw	r30, r28
     68e:	31 96       	adiw	r30, 0x01	; 1
     690:	a7 ea       	ldi	r26, 0xA7	; 167
     692:	b3 e0       	ldi	r27, 0x03	; 3
     694:	01 90       	ld	r0, Z+
     696:	0d 92       	st	X+, r0
     698:	8a 95       	dec	r24
     69a:	e1 f7       	brne	.-8      	; 0x694 <can_handle_message+0x26>
	if(message.id != -1){
     69c:	80 91 a7 03 	lds	r24, 0x03A7
     6a0:	90 91 a8 03 	lds	r25, 0x03A8
     6a4:	01 96       	adiw	r24, 0x01	; 1
     6a6:	d1 f0       	breq	.+52     	; 0x6dc <can_handle_message+0x6e>
		flash_diode();
     6a8:	0e 94 ab 08 	call	0x1156	; 0x1156 <flash_diode>
	}
	switch(message.id){
     6ac:	80 91 a7 03 	lds	r24, 0x03A7
     6b0:	90 91 a8 03 	lds	r25, 0x03A8
     6b4:	02 97       	sbiw	r24, 0x02	; 2
     6b6:	91 f4       	brne	.+36     	; 0x6dc <can_handle_message+0x6e>
		case IR_CAN_ID:
			printf("ir edge detect: %d\n",message.data[0]);
     6b8:	20 91 aa 03 	lds	r18, 0x03AA
     6bc:	82 2f       	mov	r24, r18
     6be:	99 27       	eor	r25, r25
     6c0:	87 fd       	sbrc	r24, 7
     6c2:	90 95       	com	r25
     6c4:	9f 93       	push	r25
     6c6:	2f 93       	push	r18
     6c8:	8c ea       	ldi	r24, 0xAC	; 172
     6ca:	91 e0       	ldi	r25, 0x01	; 1
     6cc:	9f 93       	push	r25
     6ce:	8f 93       	push	r24
     6d0:	0e 94 a2 0a 	call	0x1544	; 0x1544 <printf>
			return;
     6d4:	0f 90       	pop	r0
     6d6:	0f 90       	pop	r0
     6d8:	0f 90       	pop	r0
     6da:	0f 90       	pop	r0
		default:
			return;
	}
     6dc:	2b 96       	adiw	r28, 0x0b	; 11
     6de:	0f b6       	in	r0, 0x3f	; 63
     6e0:	f8 94       	cli
     6e2:	de bf       	out	0x3e, r29	; 62
     6e4:	0f be       	out	0x3f, r0	; 63
     6e6:	cd bf       	out	0x3d, r28	; 61
     6e8:	df 91       	pop	r29
     6ea:	cf 91       	pop	r28
     6ec:	08 95       	ret

000006ee <joystick_read>:
			 v;
}

unsigned int joystick_read(joy_channel channel){
	volatile char* ext_ram = (char*) 0x1400;
	ext_ram[0] = 0x4 + channel;
     6ee:	8c 5f       	subi	r24, 0xFC	; 252
     6f0:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6f4:	81 e4       	ldi	r24, 0x41	; 65
     6f6:	8a 95       	dec	r24
     6f8:	f1 f7       	brne	.-4      	; 0x6f6 <joystick_read+0x8>
     6fa:	00 c0       	rjmp	.+0      	; 0x6fc <joystick_read+0xe>
	_delay_us(40);
	return (uint8_t) ext_ram[0];
     6fc:	80 91 00 14 	lds	r24, 0x1400
}
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	08 95       	ret

00000704 <joystick_init>:
int center_val_X;
int center_val_Y;


void joystick_init(){ 
	center_val_X = joystick_read(JOYSTICK_X);
     704:	80 e0       	ldi	r24, 0x00	; 0
     706:	0e 94 77 03 	call	0x6ee	; 0x6ee <joystick_read>
     70a:	90 93 cc 03 	sts	0x03CC, r25
     70e:	80 93 cb 03 	sts	0x03CB, r24
	center_val_Y = joystick_read(JOYSTICK_Y);
     712:	81 e0       	ldi	r24, 0x01	; 1
     714:	0e 94 77 03 	call	0x6ee	; 0x6ee <joystick_read>
     718:	90 93 ce 03 	sts	0x03CE, r25
     71c:	80 93 cd 03 	sts	0x03CD, r24
     720:	08 95       	ret

00000722 <read_converted>:
}

signed int read_converted(joy_channel channel){
     722:	cf 93       	push	r28
     724:	c8 2f       	mov	r28, r24

	int v = (joystick_read(channel));
     726:	0e 94 77 03 	call	0x6ee	; 0x6ee <joystick_read>

	if      (channel == JOYSTICK_X)  {v -= center_val_X;}
     72a:	c1 11       	cpse	r28, r1
     72c:	07 c0       	rjmp	.+14     	; 0x73c <read_converted+0x1a>
     72e:	20 91 cb 03 	lds	r18, 0x03CB
     732:	30 91 cc 03 	lds	r19, 0x03CC
     736:	82 1b       	sub	r24, r18
     738:	93 0b       	sbc	r25, r19
     73a:	08 c0       	rjmp	.+16     	; 0x74c <read_converted+0x2a>
	else if (channel == JOYSTICK_Y)  {v -= center_val_Y;}
     73c:	c1 30       	cpi	r28, 0x01	; 1
     73e:	31 f4       	brne	.+12     	; 0x74c <read_converted+0x2a>
     740:	20 91 cd 03 	lds	r18, 0x03CD
     744:	30 91 ce 03 	lds	r19, 0x03CE
     748:	82 1b       	sub	r24, r18
     74a:	93 0b       	sbc	r25, r19

	return  (v > 127)	? 127 :
     74c:	80 38       	cpi	r24, 0x80	; 128
     74e:	2f ef       	ldi	r18, 0xFF	; 255
     750:	92 07       	cpc	r25, r18
     752:	14 f4       	brge	.+4      	; 0x758 <read_converted+0x36>
     754:	80 e8       	ldi	r24, 0x80	; 128
     756:	9f ef       	ldi	r25, 0xFF	; 255
     758:	80 38       	cpi	r24, 0x80	; 128
     75a:	91 05       	cpc	r25, r1
     75c:	14 f0       	brlt	.+4      	; 0x762 <read_converted+0x40>
     75e:	8f e7       	ldi	r24, 0x7F	; 127
     760:	90 e0       	ldi	r25, 0x00	; 0
			(v < -128)	? -128 :
			 v;
}
     762:	cf 91       	pop	r28
     764:	08 95       	ret

00000766 <joystick_direction_Y>:
	_delay_us(40);
	return (uint8_t) ext_ram[0];
}

signed int joystick_direction_Y(){
	signed int joy_Y = read_converted(JOYSTICK_Y);
     766:	81 e0       	ldi	r24, 0x01	; 1
     768:	0e 94 91 03 	call	0x722	; 0x722 <read_converted>
	if(joy_Y >= 100){
     76c:	84 36       	cpi	r24, 0x64	; 100
     76e:	91 05       	cpc	r25, r1
     770:	64 f4       	brge	.+24     	; 0x78a <joystick_direction_Y+0x24>
		return 1;
	} else if (joy_Y <= -100) {
     772:	21 e0       	ldi	r18, 0x01	; 1
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	8d 39       	cpi	r24, 0x9D	; 157
     778:	9f 4f       	sbci	r25, 0xFF	; 255
     77a:	14 f0       	brlt	.+4      	; 0x780 <joystick_direction_Y+0x1a>
     77c:	20 e0       	ldi	r18, 0x00	; 0
     77e:	30 e0       	ldi	r19, 0x00	; 0
     780:	88 27       	eor	r24, r24
     782:	99 27       	eor	r25, r25
     784:	82 1b       	sub	r24, r18
     786:	93 0b       	sbc	r25, r19
     788:	08 95       	ret
}

signed int joystick_direction_Y(){
	signed int joy_Y = read_converted(JOYSTICK_Y);
	if(joy_Y >= 100){
		return 1;
     78a:	81 e0       	ldi	r24, 0x01	; 1
     78c:	90 e0       	ldi	r25, 0x00	; 0
	} else if (joy_Y <= -100) {
		return -1;
	} 
	return 0;
}
     78e:	08 95       	ret

00000790 <joystick_direction_X>:

signed int joystick_direction_X(){
	signed int joy_X = read_converted(JOYSTICK_X);
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	0e 94 91 03 	call	0x722	; 0x722 <read_converted>
	if(joy_X >= 100){
     796:	84 36       	cpi	r24, 0x64	; 100
     798:	91 05       	cpc	r25, r1
     79a:	64 f4       	brge	.+24     	; 0x7b4 <joystick_direction_X+0x24>
		return 1;
	} else if (joy_X <= -100) {
     79c:	21 e0       	ldi	r18, 0x01	; 1
     79e:	30 e0       	ldi	r19, 0x00	; 0
     7a0:	8d 39       	cpi	r24, 0x9D	; 157
     7a2:	9f 4f       	sbci	r25, 0xFF	; 255
     7a4:	14 f0       	brlt	.+4      	; 0x7aa <joystick_direction_X+0x1a>
     7a6:	20 e0       	ldi	r18, 0x00	; 0
     7a8:	30 e0       	ldi	r19, 0x00	; 0
     7aa:	88 27       	eor	r24, r24
     7ac:	99 27       	eor	r25, r25
     7ae:	82 1b       	sub	r24, r18
     7b0:	93 0b       	sbc	r25, r19
     7b2:	08 95       	ret
}

signed int joystick_direction_X(){
	signed int joy_X = read_converted(JOYSTICK_X);
	if(joy_X >= 100){
		return 1;
     7b4:	81 e0       	ldi	r24, 0x01	; 1
     7b6:	90 e0       	ldi	r25, 0x00	; 0
	} else if (joy_X <= -100) {
		return -1;
	}
	return 0;
}
     7b8:	08 95       	ret

000007ba <mcp2515_write>:
	} else {
		;//printf("MCP2515 is in config mode after reset\n");
	}
}

void mcp2515_write(uint8_t address, uint8_t data){
     7ba:	cf 93       	push	r28
     7bc:	df 93       	push	r29
     7be:	d8 2f       	mov	r29, r24
     7c0:	c6 2f       	mov	r28, r22
	spi_select();
     7c2:	0e 94 0d 06 	call	0xc1a	; 0xc1a <spi_select>

	spi_send(MCP_WRITE);
     7c6:	82 e0       	ldi	r24, 0x02	; 2
     7c8:	0e 94 02 06 	call	0xc04	; 0xc04 <spi_send>
	spi_send(address);
     7cc:	8d 2f       	mov	r24, r29
     7ce:	0e 94 02 06 	call	0xc04	; 0xc04 <spi_send>
	spi_send(data);
     7d2:	8c 2f       	mov	r24, r28
     7d4:	0e 94 02 06 	call	0xc04	; 0xc04 <spi_send>

	spi_deselect();
     7d8:	0e 94 0f 06 	call	0xc1e	; 0xc1e <spi_deselect>
}
     7dc:	df 91       	pop	r29
     7de:	cf 91       	pop	r28
     7e0:	08 95       	ret

000007e2 <mcp2515_request_to_send>:

void mcp2515_request_to_send(uint8_t command){
     7e2:	cf 93       	push	r28
	//Check last 3 bits of given command
	if (command <= 7) {
     7e4:	88 30       	cpi	r24, 0x08	; 8
     7e6:	18 f4       	brcc	.+6      	; 0x7ee <mcp2515_request_to_send+0xc>
		command = MCP_RTS | command;
     7e8:	c8 2f       	mov	r28, r24
     7ea:	c0 68       	ori	r28, 0x80	; 128
     7ec:	01 c0       	rjmp	.+2      	; 0x7f0 <mcp2515_request_to_send+0xe>
	} else {
		command = MCP_RTS;
     7ee:	c0 e8       	ldi	r28, 0x80	; 128
	}

	//Select, send RTS command, then deselect
	spi_select();
     7f0:	0e 94 0d 06 	call	0xc1a	; 0xc1a <spi_select>
	spi_send(command);
     7f4:	8c 2f       	mov	r24, r28
     7f6:	0e 94 02 06 	call	0xc04	; 0xc04 <spi_send>
	spi_deselect();
     7fa:	0e 94 0f 06 	call	0xc1e	; 0xc1e <spi_deselect>
}
     7fe:	cf 91       	pop	r28
     800:	08 95       	ret

00000802 <mcp2515_bit_modify>:

void mcp2515_bit_modify(uint8_t address, uint8_t mask, uint8_t data){
     802:	1f 93       	push	r17
     804:	cf 93       	push	r28
     806:	df 93       	push	r29
     808:	18 2f       	mov	r17, r24
     80a:	d6 2f       	mov	r29, r22
     80c:	c4 2f       	mov	r28, r20
	spi_select();
     80e:	0e 94 0d 06 	call	0xc1a	; 0xc1a <spi_select>

	spi_send(MCP_BITMOD);
     812:	85 e0       	ldi	r24, 0x05	; 5
     814:	0e 94 02 06 	call	0xc04	; 0xc04 <spi_send>
	spi_send(address);
     818:	81 2f       	mov	r24, r17
     81a:	0e 94 02 06 	call	0xc04	; 0xc04 <spi_send>
	spi_send(mask);
     81e:	8d 2f       	mov	r24, r29
     820:	0e 94 02 06 	call	0xc04	; 0xc04 <spi_send>
	spi_send(data);
     824:	8c 2f       	mov	r24, r28
     826:	0e 94 02 06 	call	0xc04	; 0xc04 <spi_send>

	spi_deselect();
     82a:	0e 94 0f 06 	call	0xc1e	; 0xc1e <spi_deselect>
}
     82e:	df 91       	pop	r29
     830:	cf 91       	pop	r28
     832:	1f 91       	pop	r17
     834:	08 95       	ret

00000836 <mcp2515_reset>:

void mcp2515_reset(){
	spi_select();
     836:	0e 94 0d 06 	call	0xc1a	; 0xc1a <spi_select>
	spi_send(MCP_RESET);	
     83a:	80 ec       	ldi	r24, 0xC0	; 192
     83c:	0e 94 02 06 	call	0xc04	; 0xc04 <spi_send>
	spi_deselect();
     840:	0e 94 0f 06 	call	0xc1e	; 0xc1e <spi_deselect>
     844:	08 95       	ret

00000846 <mcp2515_read>:
}


uint8_t mcp2515_read(uint8_t address){
     846:	cf 93       	push	r28
     848:	c8 2f       	mov	r28, r24
	uint8_t result;

	spi_select();
     84a:	0e 94 0d 06 	call	0xc1a	; 0xc1a <spi_select>
	
	//Send command and address, then read result
	spi_send(MCP_READ);
     84e:	83 e0       	ldi	r24, 0x03	; 3
     850:	0e 94 02 06 	call	0xc04	; 0xc04 <spi_send>
	spi_send(address);
     854:	8c 2f       	mov	r24, r28
     856:	0e 94 02 06 	call	0xc04	; 0xc04 <spi_send>

	result = spi_read();
     85a:	0e 94 06 06 	call	0xc0c	; 0xc0c <spi_read>
     85e:	c8 2f       	mov	r28, r24
	spi_deselect();
     860:	0e 94 0f 06 	call	0xc1e	; 0xc1e <spi_deselect>

	return result;	
}
     864:	8c 2f       	mov	r24, r28
     866:	cf 91       	pop	r28
     868:	08 95       	ret

0000086a <mcp2515_init>:
#include <util/delay.h>
#include "uart_driver.h"
#include "spi_driver.h"
#include "mcp2515_driver.h"

void mcp2515_init() {
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	1f 92       	push	r1
     870:	cd b7       	in	r28, 0x3d	; 61
     872:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t value_check;

	//Start SPI driver
	spi_init();
     874:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <spi_init>

	mcp2515_reset();
     878:	0e 94 1b 04 	call	0x836	; 0x836 <mcp2515_reset>
	
	//Testing for correct initialization
	value_check = mcp2515_read(MCP_CANSTAT);
     87c:	8e e0       	ldi	r24, 0x0E	; 14
     87e:	0e 94 23 04 	call	0x846	; 0x846 <mcp2515_read>
     882:	89 83       	std	Y+1, r24	; 0x01
	
	if ((value_check & MODE_MASK) != MODE_CONFIG) {
     884:	89 81       	ldd	r24, Y+1	; 0x01
     886:	80 7e       	andi	r24, 0xE0	; 224
     888:	80 38       	cpi	r24, 0x80	; 128
     88a:	21 f0       	breq	.+8      	; 0x894 <mcp2515_init+0x2a>
		printf("MCP2515 is not in config mode after reset\n");
     88c:	80 ec       	ldi	r24, 0xC0	; 192
     88e:	91 e0       	ldi	r25, 0x01	; 1
     890:	0e 94 b6 0a 	call	0x156c	; 0x156c <puts>
	} else {
		;//printf("MCP2515 is in config mode after reset\n");
	}
}
     894:	0f 90       	pop	r0
     896:	df 91       	pop	r29
     898:	cf 91       	pop	r28
     89a:	08 95       	ret

0000089c <oled_print_char>:
		//Set higher column address                                                                                                                                                                                                                                                                                                                                                                     
		*oled_command_addr = 0x10 + (column * (FONTWIDTH)>>4);
	}
}

void oled_print_char(char ch){
     89c:	28 e0       	ldi	r18, 0x08	; 8
     89e:	82 9f       	mul	r24, r18
     8a0:	c0 01       	movw	r24, r0
     8a2:	11 24       	eor	r1, r1
     8a4:	fc 01       	movw	r30, r24
     8a6:	e0 59       	subi	r30, 0x90	; 144
     8a8:	f0 40       	sbci	r31, 0x00	; 0
	for (uint8_t i = 0; i<FONTWIDTH; i++) {
     8aa:	80 e0       	ldi	r24, 0x00	; 0
		oled_write_data(pgm_read_byte(&font[ch - FONTOFFSET][i]));
     8ac:	94 91       	lpm	r25, Z
void oled_write_command(uint8_t command){
	*oled_command_addr = command;
}

void oled_write_data(uint8_t data){
	*oled_data_addr = data;
     8ae:	a0 91 0a 01 	lds	r26, 0x010A
     8b2:	b0 91 0b 01 	lds	r27, 0x010B
     8b6:	9c 93       	st	X, r25
		*oled_command_addr = 0x10 + (column * (FONTWIDTH)>>4);
	}
}

void oled_print_char(char ch){
	for (uint8_t i = 0; i<FONTWIDTH; i++) {
     8b8:	8f 5f       	subi	r24, 0xFF	; 255
     8ba:	31 96       	adiw	r30, 0x01	; 1
     8bc:	88 30       	cpi	r24, 0x08	; 8
     8be:	b1 f7       	brne	.-20     	; 0x8ac <oled_print_char+0x10>
		oled_write_data(pgm_read_byte(&font[ch - FONTOFFSET][i]));
	}
}
     8c0:	08 95       	ret

000008c2 <oled_goto_page>:
void oled_back(){
	
}

void oled_goto_page(unsigned int page) {
	oled_write_command(0xB0 + page);
     8c2:	90 eb       	ldi	r25, 0xB0	; 176
     8c4:	98 0f       	add	r25, r24
	_delay_ms(800);
	oled_clear_screen();
}

void oled_write_command(uint8_t command){
	*oled_command_addr = command;
     8c6:	e0 91 0c 01 	lds	r30, 0x010C
     8ca:	f0 91 0d 01 	lds	r31, 0x010D
     8ce:	90 83       	st	Z, r25
	
}

void oled_goto_page(unsigned int page) {
	oled_write_command(0xB0 + page);
	global_page = page;
     8d0:	80 93 cf 03 	sts	0x03CF, r24
     8d4:	82 e5       	ldi	r24, 0x52	; 82
     8d6:	8a 95       	dec	r24
     8d8:	f1 f7       	brne	.-4      	; 0x8d6 <oled_goto_page+0x14>
     8da:	08 95       	ret

000008dc <oled_clear_line>:
	_delay_us(50);
}

void oled_clear_line(){
     8dc:	80 e8       	ldi	r24, 0x80	; 128
     8de:	90 e0       	ldi	r25, 0x00	; 0
void oled_write_command(uint8_t command){
	*oled_command_addr = command;
}

void oled_write_data(uint8_t data){
	*oled_data_addr = data;
     8e0:	e0 91 0a 01 	lds	r30, 0x010A
     8e4:	f0 91 0b 01 	lds	r31, 0x010B
     8e8:	10 82       	st	Z, r1
     8ea:	01 97       	sbiw	r24, 0x01	; 1
	global_page = page;
	_delay_us(50);
}

void oled_clear_line(){
	for (int i = 0; i<128; i++) {
     8ec:	00 97       	sbiw	r24, 0x00	; 0
     8ee:	c1 f7       	brne	.-16     	; 0x8e0 <oled_clear_line+0x4>
		oled_write_data(0b00000000);
	}
}
     8f0:	08 95       	ret

000008f2 <oled_clear_screen>:

void oled_clear_screen() {
     8f2:	cf 93       	push	r28
     8f4:	df 93       	push	r29
     8f6:	c0 e0       	ldi	r28, 0x00	; 0
     8f8:	d0 e0       	ldi	r29, 0x00	; 0
	for (uint8_t i = 0; i<8; i++) {
		oled_goto_page(i);
     8fa:	ce 01       	movw	r24, r28
     8fc:	0e 94 61 04 	call	0x8c2	; 0x8c2 <oled_goto_page>
		oled_clear_line();
     900:	0e 94 6e 04 	call	0x8dc	; 0x8dc <oled_clear_line>
     904:	21 96       	adiw	r28, 0x01	; 1
		oled_write_data(0b00000000);
	}
}

void oled_clear_screen() {
	for (uint8_t i = 0; i<8; i++) {
     906:	c8 30       	cpi	r28, 0x08	; 8
     908:	d1 05       	cpc	r29, r1
     90a:	b9 f7       	brne	.-18     	; 0x8fa <oled_clear_screen+0x8>
		oled_goto_page(i);
		oled_clear_line();
		//_delay_ms(50);
	}
}
     90c:	df 91       	pop	r29
     90e:	cf 91       	pop	r28
     910:	08 95       	ret

00000912 <oled_pos>:

void oled_pos(unsigned int row, unsigned int column){
     912:	cf 93       	push	r28
     914:	df 93       	push	r29
     916:	eb 01       	movw	r28, r22
	oled_goto_page(row);
     918:	0e 94 61 04 	call	0x8c2	; 0x8c2 <oled_goto_page>
	if(column < (128/FONTWIDTH)){
     91c:	c0 31       	cpi	r28, 0x10	; 16
     91e:	d1 05       	cpc	r29, r1
     920:	e8 f4       	brcc	.+58     	; 0x95c <oled_pos+0x4a>
		//Save column program goes to
		global_col = column * FONTWIDTH;
     922:	8c 2f       	mov	r24, r28
     924:	88 0f       	add	r24, r24
     926:	88 0f       	add	r24, r24
     928:	88 0f       	add	r24, r24
     92a:	80 93 d0 03 	sts	0x03D0, r24
		//Set lower column address
		*oled_command_addr = 0x00 + (column * (FONTWIDTH)>>4);
     92e:	e0 91 0c 01 	lds	r30, 0x010C
     932:	f0 91 0d 01 	lds	r31, 0x010D
     936:	cc 0f       	add	r28, r28
     938:	dd 1f       	adc	r29, r29
     93a:	cc 0f       	add	r28, r28
     93c:	dd 1f       	adc	r29, r29
     93e:	cc 0f       	add	r28, r28
     940:	dd 1f       	adc	r29, r29
     942:	d2 95       	swap	r29
     944:	c2 95       	swap	r28
     946:	cf 70       	andi	r28, 0x0F	; 15
     948:	cd 27       	eor	r28, r29
     94a:	df 70       	andi	r29, 0x0F	; 15
     94c:	cd 27       	eor	r28, r29
     94e:	c0 83       	st	Z, r28
		//Set higher column address                                                                                                                                                                                                                                                                                                                                                                     
		*oled_command_addr = 0x10 + (column * (FONTWIDTH)>>4);
     950:	e0 91 0c 01 	lds	r30, 0x010C
     954:	f0 91 0d 01 	lds	r31, 0x010D
     958:	c0 5f       	subi	r28, 0xF0	; 240
     95a:	c0 83       	st	Z, r28
	}
}
     95c:	df 91       	pop	r29
     95e:	cf 91       	pop	r28
     960:	08 95       	ret

00000962 <oled_printf>:
	for (uint8_t i = 0; i<FONTWIDTH; i++) {
		oled_write_data(pgm_read_byte(&font[ch - FONTOFFSET][i]));
	}
}

void oled_printf(char* fmt, ...){
     962:	cf 93       	push	r28
     964:	df 93       	push	r29
     966:	cd b7       	in	r28, 0x3d	; 61
     968:	de b7       	in	r29, 0x3e	; 62
     96a:	fe 01       	movw	r30, r28
     96c:	35 96       	adiw	r30, 0x05	; 5
     96e:	61 91       	ld	r22, Z+
     970:	71 91       	ld	r23, Z+
	va_list v;
	va_start(v, fmt);
	vfprintf(&oled_stdout, fmt, v);
     972:	af 01       	movw	r20, r30
     974:	8e e0       	ldi	r24, 0x0E	; 14
     976:	91 e0       	ldi	r25, 0x01	; 1
     978:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <vfprintf>
	va_end(v);
}
     97c:	df 91       	pop	r29
     97e:	cf 91       	pop	r28
     980:	08 95       	ret

00000982 <oled_init>:
	_delay_ms(800);
	oled_clear_screen();
}

void oled_write_command(uint8_t command){
	*oled_command_addr = command;
     982:	e0 91 0c 01 	lds	r30, 0x010C
     986:	f0 91 0d 01 	lds	r31, 0x010D
     98a:	8e ea       	ldi	r24, 0xAE	; 174
     98c:	80 83       	st	Z, r24
     98e:	e0 91 0c 01 	lds	r30, 0x010C
     992:	f0 91 0d 01 	lds	r31, 0x010D
     996:	81 ea       	ldi	r24, 0xA1	; 161
     998:	80 83       	st	Z, r24
     99a:	e0 91 0c 01 	lds	r30, 0x010C
     99e:	f0 91 0d 01 	lds	r31, 0x010D
     9a2:	8a ed       	ldi	r24, 0xDA	; 218
     9a4:	80 83       	st	Z, r24
     9a6:	e0 91 0c 01 	lds	r30, 0x010C
     9aa:	f0 91 0d 01 	lds	r31, 0x010D
     9ae:	82 e1       	ldi	r24, 0x12	; 18
     9b0:	80 83       	st	Z, r24
     9b2:	e0 91 0c 01 	lds	r30, 0x010C
     9b6:	f0 91 0d 01 	lds	r31, 0x010D
     9ba:	88 ec       	ldi	r24, 0xC8	; 200
     9bc:	80 83       	st	Z, r24
     9be:	e0 91 0c 01 	lds	r30, 0x010C
     9c2:	f0 91 0d 01 	lds	r31, 0x010D
     9c6:	88 ea       	ldi	r24, 0xA8	; 168
     9c8:	80 83       	st	Z, r24
     9ca:	e0 91 0c 01 	lds	r30, 0x010C
     9ce:	f0 91 0d 01 	lds	r31, 0x010D
     9d2:	8f e3       	ldi	r24, 0x3F	; 63
     9d4:	80 83       	st	Z, r24
     9d6:	e0 91 0c 01 	lds	r30, 0x010C
     9da:	f0 91 0d 01 	lds	r31, 0x010D
     9de:	85 ed       	ldi	r24, 0xD5	; 213
     9e0:	80 83       	st	Z, r24
     9e2:	e0 91 0c 01 	lds	r30, 0x010C
     9e6:	f0 91 0d 01 	lds	r31, 0x010D
     9ea:	80 e8       	ldi	r24, 0x80	; 128
     9ec:	80 83       	st	Z, r24
     9ee:	e0 91 0c 01 	lds	r30, 0x010C
     9f2:	f0 91 0d 01 	lds	r31, 0x010D
     9f6:	81 e8       	ldi	r24, 0x81	; 129
     9f8:	80 83       	st	Z, r24
     9fa:	e0 91 0c 01 	lds	r30, 0x010C
     9fe:	f0 91 0d 01 	lds	r31, 0x010D
     a02:	80 e5       	ldi	r24, 0x50	; 80
     a04:	80 83       	st	Z, r24
     a06:	e0 91 0c 01 	lds	r30, 0x010C
     a0a:	f0 91 0d 01 	lds	r31, 0x010D
     a0e:	89 ed       	ldi	r24, 0xD9	; 217
     a10:	80 83       	st	Z, r24
     a12:	e0 91 0c 01 	lds	r30, 0x010C
     a16:	f0 91 0d 01 	lds	r31, 0x010D
     a1a:	81 e2       	ldi	r24, 0x21	; 33
     a1c:	80 83       	st	Z, r24
     a1e:	e0 91 0c 01 	lds	r30, 0x010C
     a22:	f0 91 0d 01 	lds	r31, 0x010D
     a26:	80 e2       	ldi	r24, 0x20	; 32
     a28:	80 83       	st	Z, r24
     a2a:	e0 91 0c 01 	lds	r30, 0x010C
     a2e:	f0 91 0d 01 	lds	r31, 0x010D
     a32:	82 e0       	ldi	r24, 0x02	; 2
     a34:	80 83       	st	Z, r24
     a36:	e0 91 0c 01 	lds	r30, 0x010C
     a3a:	f0 91 0d 01 	lds	r31, 0x010D
     a3e:	8b ed       	ldi	r24, 0xDB	; 219
     a40:	80 83       	st	Z, r24
     a42:	e0 91 0c 01 	lds	r30, 0x010C
     a46:	f0 91 0d 01 	lds	r31, 0x010D
     a4a:	80 e3       	ldi	r24, 0x30	; 48
     a4c:	80 83       	st	Z, r24
     a4e:	e0 91 0c 01 	lds	r30, 0x010C
     a52:	f0 91 0d 01 	lds	r31, 0x010D
     a56:	8d ea       	ldi	r24, 0xAD	; 173
     a58:	80 83       	st	Z, r24
     a5a:	e0 91 0c 01 	lds	r30, 0x010C
     a5e:	f0 91 0d 01 	lds	r31, 0x010D
     a62:	10 82       	st	Z, r1
     a64:	e0 91 0c 01 	lds	r30, 0x010C
     a68:	f0 91 0d 01 	lds	r31, 0x010D
     a6c:	84 ea       	ldi	r24, 0xA4	; 164
     a6e:	80 83       	st	Z, r24
     a70:	e0 91 0c 01 	lds	r30, 0x010C
     a74:	f0 91 0d 01 	lds	r31, 0x010D
     a78:	86 ea       	ldi	r24, 0xA6	; 166
     a7a:	80 83       	st	Z, r24
     a7c:	e0 91 0c 01 	lds	r30, 0x010C
     a80:	f0 91 0d 01 	lds	r31, 0x010D
     a84:	8f ea       	ldi	r24, 0xAF	; 175
     a86:	80 83       	st	Z, r24
	oled_write_command(0x00);
	oled_write_command(0xa4);    //out follows RAM content
	oled_write_command(0xa6);    //set normal display
	oled_write_command(0xaf);    // display on
	
	oled_clear_screen();
     a88:	0e 94 79 04 	call	0x8f2	; 0x8f2 <oled_clear_screen>
	oled_pos(2,3);
     a8c:	63 e0       	ldi	r22, 0x03	; 3
     a8e:	70 e0       	ldi	r23, 0x00	; 0
     a90:	82 e0       	ldi	r24, 0x02	; 2
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	0e 94 89 04 	call	0x912	; 0x912 <oled_pos>
	oled_printf(" #SWAG");
     a98:	81 e2       	ldi	r24, 0x21	; 33
     a9a:	92 e0       	ldi	r25, 0x02	; 2
     a9c:	9f 93       	push	r25
     a9e:	8f 93       	push	r24
     aa0:	0e 94 b1 04 	call	0x962	; 0x962 <oled_printf>
	oled_pos(3,7);
     aa4:	67 e0       	ldi	r22, 0x07	; 7
     aa6:	70 e0       	ldi	r23, 0x00	; 0
     aa8:	83 e0       	ldi	r24, 0x03	; 3
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	0e 94 89 04 	call	0x912	; 0x912 <oled_pos>
	oled_printf("  4");
     ab0:	88 e2       	ldi	r24, 0x28	; 40
     ab2:	92 e0       	ldi	r25, 0x02	; 2
     ab4:	9f 93       	push	r25
     ab6:	8f 93       	push	r24
     ab8:	0e 94 b1 04 	call	0x962	; 0x962 <oled_printf>
	oled_pos(4,9);
     abc:	69 e0       	ldi	r22, 0x09	; 9
     abe:	70 e0       	ldi	r23, 0x00	; 0
     ac0:	84 e0       	ldi	r24, 0x04	; 4
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	0e 94 89 04 	call	0x912	; 0x912 <oled_pos>
	oled_printf(" LYFE");
     ac8:	8c e2       	ldi	r24, 0x2C	; 44
     aca:	92 e0       	ldi	r25, 0x02	; 2
     acc:	9f 93       	push	r25
     ace:	8f 93       	push	r24
     ad0:	0e 94 b1 04 	call	0x962	; 0x962 <oled_printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ad4:	2f ef       	ldi	r18, 0xFF	; 255
     ad6:	8f ef       	ldi	r24, 0xFF	; 255
     ad8:	9b e0       	ldi	r25, 0x0B	; 11
     ada:	21 50       	subi	r18, 0x01	; 1
     adc:	80 40       	sbci	r24, 0x00	; 0
     ade:	90 40       	sbci	r25, 0x00	; 0
     ae0:	e1 f7       	brne	.-8      	; 0xada <oled_init+0x158>
     ae2:	00 c0       	rjmp	.+0      	; 0xae4 <oled_init+0x162>
     ae4:	00 c0       	rjmp	.+0      	; 0xae6 <oled_init+0x164>
	_delay_ms(800);
	oled_clear_screen();
     ae6:	0e 94 79 04 	call	0x8f2	; 0x8f2 <oled_clear_screen>
     aea:	0f 90       	pop	r0
     aec:	0f 90       	pop	r0
     aee:	0f 90       	pop	r0
     af0:	0f 90       	pop	r0
     af2:	0f 90       	pop	r0
     af4:	0f 90       	pop	r0
     af6:	08 95       	ret

00000af8 <oled_get_arrow_page>:

//Arrow functions

uint8_t oled_get_arrow_page(){
	return arrow_global;
}
     af8:	80 91 ca 03 	lds	r24, 0x03CA
     afc:	08 95       	ret

00000afe <oled_print_arrow>:

void oled_print_arrow(uint8_t row, uint8_t col){
	arrow_global = row;
     afe:	80 93 ca 03 	sts	0x03CA, r24
	oled_pos(row, col);
     b02:	70 e0       	ldi	r23, 0x00	; 0
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	0e 94 89 04 	call	0x912	; 0x912 <oled_pos>
void oled_write_command(uint8_t command){
	*oled_command_addr = command;
}

void oled_write_data(uint8_t data){
	*oled_data_addr = data;
     b0a:	e0 91 0a 01 	lds	r30, 0x010A
     b0e:	f0 91 0b 01 	lds	r31, 0x010B
     b12:	88 e1       	ldi	r24, 0x18	; 24
     b14:	80 83       	st	Z, r24
     b16:	e0 91 0a 01 	lds	r30, 0x010A
     b1a:	f0 91 0b 01 	lds	r31, 0x010B
     b1e:	80 83       	st	Z, r24
     b20:	e0 91 0a 01 	lds	r30, 0x010A
     b24:	f0 91 0b 01 	lds	r31, 0x010B
     b28:	9e e7       	ldi	r25, 0x7E	; 126
     b2a:	90 83       	st	Z, r25
     b2c:	e0 91 0a 01 	lds	r30, 0x010A
     b30:	f0 91 0b 01 	lds	r31, 0x010B
     b34:	9c e3       	ldi	r25, 0x3C	; 60
     b36:	90 83       	st	Z, r25
     b38:	e0 91 0a 01 	lds	r30, 0x010A
     b3c:	f0 91 0b 01 	lds	r31, 0x010B
     b40:	80 83       	st	Z, r24
     b42:	08 95       	ret

00000b44 <oled_clear_arrow>:
	oled_write_data(0b00111100);
	oled_write_data(0b00011000);
}

void oled_clear_arrow(uint8_t row, uint8_t col){
	oled_pos(row, col);
     b44:	70 e0       	ldi	r23, 0x00	; 0
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	0e 94 89 04 	call	0x912	; 0x912 <oled_pos>
void oled_write_command(uint8_t command){
	*oled_command_addr = command;
}

void oled_write_data(uint8_t data){
	*oled_data_addr = data;
     b4c:	e0 91 0a 01 	lds	r30, 0x010A
     b50:	f0 91 0b 01 	lds	r31, 0x010B
     b54:	10 82       	st	Z, r1
     b56:	e0 91 0a 01 	lds	r30, 0x010A
     b5a:	f0 91 0b 01 	lds	r31, 0x010B
     b5e:	10 82       	st	Z, r1
     b60:	e0 91 0a 01 	lds	r30, 0x010A
     b64:	f0 91 0b 01 	lds	r31, 0x010B
     b68:	10 82       	st	Z, r1
     b6a:	e0 91 0a 01 	lds	r30, 0x010A
     b6e:	f0 91 0b 01 	lds	r31, 0x010B
     b72:	10 82       	st	Z, r1
     b74:	e0 91 0a 01 	lds	r30, 0x010A
     b78:	f0 91 0b 01 	lds	r31, 0x010B
     b7c:	10 82       	st	Z, r1
     b7e:	08 95       	ret

00000b80 <oled_move_arrow>:
	oled_write_data(0b00000000);
	oled_write_data(0b00000000);
}

void oled_move_arrow(signed int joystick_Y, unsigned int menu_min, unsigned int menu_max){
	if(joystick_Y < 0 && arrow_global < menu_max) {
     b80:	99 23       	and	r25, r25
     b82:	a4 f4       	brge	.+40     	; 0xbac <oled_move_arrow+0x2c>
     b84:	e0 91 ca 03 	lds	r30, 0x03CA
     b88:	2e 2f       	mov	r18, r30
     b8a:	30 e0       	ldi	r19, 0x00	; 0
     b8c:	24 17       	cp	r18, r20
     b8e:	35 07       	cpc	r19, r21
     b90:	68 f4       	brcc	.+26     	; 0xbac <oled_move_arrow+0x2c>
		oled_clear_arrow(arrow_global, 0);
     b92:	60 e0       	ldi	r22, 0x00	; 0
     b94:	8e 2f       	mov	r24, r30
     b96:	0e 94 a2 05 	call	0xb44	; 0xb44 <oled_clear_arrow>
		arrow_global++;
     b9a:	80 91 ca 03 	lds	r24, 0x03CA
     b9e:	8f 5f       	subi	r24, 0xFF	; 255
     ba0:	80 93 ca 03 	sts	0x03CA, r24
		oled_print_arrow(arrow_global, 0);
     ba4:	60 e0       	ldi	r22, 0x00	; 0
     ba6:	0e 94 7f 05 	call	0xafe	; 0xafe <oled_print_arrow>
     baa:	08 95       	ret
	} else if (joystick_Y > 0 && arrow_global > menu_min) {
     bac:	18 16       	cp	r1, r24
     bae:	19 06       	cpc	r1, r25
     bb0:	94 f4       	brge	.+36     	; 0xbd6 <oled_move_arrow+0x56>
     bb2:	80 91 ca 03 	lds	r24, 0x03CA
     bb6:	28 2f       	mov	r18, r24
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	62 17       	cp	r22, r18
     bbc:	73 07       	cpc	r23, r19
     bbe:	58 f4       	brcc	.+22     	; 0xbd6 <oled_move_arrow+0x56>
		oled_clear_arrow(arrow_global, 0);
     bc0:	60 e0       	ldi	r22, 0x00	; 0
     bc2:	0e 94 a2 05 	call	0xb44	; 0xb44 <oled_clear_arrow>
		arrow_global--;
     bc6:	80 91 ca 03 	lds	r24, 0x03CA
     bca:	81 50       	subi	r24, 0x01	; 1
     bcc:	80 93 ca 03 	sts	0x03CA, r24
		oled_print_arrow(arrow_global, 0);
     bd0:	60 e0       	ldi	r22, 0x00	; 0
     bd2:	0e 94 7f 05 	call	0xafe	; 0xafe <oled_print_arrow>
     bd6:	08 95       	ret

00000bd8 <oled_arrow_handler>:
	}
}

unsigned int oled_arrow_handler(signed int joystick_Y, unsigned int menu_min, unsigned int menu_max){
	oled_move_arrow(joystick_Y, menu_min, menu_max);
     bd8:	0e 94 c0 05 	call	0xb80	; 0xb80 <oled_move_arrow>
     bdc:	2c ec       	ldi	r18, 0xCC	; 204
     bde:	8c e0       	ldi	r24, 0x0C	; 12
     be0:	91 e0       	ldi	r25, 0x01	; 1
     be2:	21 50       	subi	r18, 0x01	; 1
     be4:	80 40       	sbci	r24, 0x00	; 0
     be6:	90 40       	sbci	r25, 0x00	; 0
     be8:	e1 f7       	brne	.-8      	; 0xbe2 <oled_arrow_handler+0xa>
     bea:	00 c0       	rjmp	.+0      	; 0xbec <oled_arrow_handler+0x14>
	_delay_ms(70);
	return arrow_global;
     bec:	80 91 ca 03 	lds	r24, 0x03CA
}
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	08 95       	ret

00000bf4 <spi_init>:
#define SPI_MISO PB6
#define SPI_SCK PB7 

void spi_init(){
	//Set MOSI, SCK and SS as output pins 	
	DDRB |= (1 << SPI_MOSI) | (1 << SPI_SCK) | (1 << SPI_SS);
     bf4:	87 b3       	in	r24, 0x17	; 23
     bf6:	80 6b       	ori	r24, 0xB0	; 176
     bf8:	87 bb       	out	0x17, r24	; 23
	
	//Set MISO as input pin
	DDRB &= ~(1 << SPI_MISO);
     bfa:	be 98       	cbi	0x17, 6	; 23
	
	//Enable SPI in master mode and set clock rate fosc/16
	SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0);
     bfc:	8d b1       	in	r24, 0x0d	; 13
     bfe:	81 65       	ori	r24, 0x51	; 81
     c00:	8d b9       	out	0x0d, r24	; 13
     c02:	08 95       	ret

00000c04 <spi_send>:
	return SPDR;
}

void spi_send(char data){
	//Start transmission
	SPDR = data;
     c04:	8f b9       	out	0x0f, r24	; 15
	
	//Wait for transmission, checks if register is empty 
	while(!(SPSR & (1 << SPIF)));
     c06:	77 9b       	sbis	0x0e, 7	; 14
     c08:	fe cf       	rjmp	.-4      	; 0xc06 <spi_send+0x2>
}
     c0a:	08 95       	ret

00000c0c <spi_read>:
}


uint8_t spi_read(){
	//Dummy send in order to read from slave
	spi_send(0xaa);
     c0c:	8a ea       	ldi	r24, 0xAA	; 170
     c0e:	0e 94 02 06 	call	0xc04	; 0xc04 <spi_send>
	
	while(!(SPSR & (1 << SPIF)));
     c12:	77 9b       	sbis	0x0e, 7	; 14
     c14:	fe cf       	rjmp	.-4      	; 0xc12 <spi_read+0x6>

	return SPDR;
     c16:	8f b1       	in	r24, 0x0f	; 15
}
     c18:	08 95       	ret

00000c1a <spi_select>:
	while(!(SPSR & (1 << SPIF)));
}

void spi_select(){
	//Set !SS to 0 for selection of slave
	PORTB &= ~(1 << SPI_SS);
     c1a:	c4 98       	cbi	0x18, 4	; 24
     c1c:	08 95       	ret

00000c1e <spi_deselect>:
}

void spi_deselect(){
	//Set !SS to 1 for deselection of slave
	PORTB |= (1 << SPI_SS);
     c1e:	c4 9a       	sbi	0x18, 4	; 24
     c20:	08 95       	ret

00000c22 <SRAM_test>:
	if (address_offset > 0x100) { return 0; }
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	return ext_ram[address_offset];
}

void SRAM_test(void) {
     c22:	cf 92       	push	r12
     c24:	df 92       	push	r13
     c26:	ef 92       	push	r14
     c28:	ff 92       	push	r15
     c2a:	0f 93       	push	r16
     c2c:	1f 93       	push	r17
     c2e:	cf 93       	push	r28
     c30:	df 93       	push	r29
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size       = 0x800;
	uint16_t write_errors       = 0;
	uint16_t retrieval_errors   = 0;

	oled_clear_screen();
     c32:	0e 94 79 04 	call	0x8f2	; 0x8f2 <oled_clear_screen>
	oled_pos(3,2);
     c36:	62 e0       	ldi	r22, 0x02	; 2
     c38:	70 e0       	ldi	r23, 0x00	; 0
     c3a:	83 e0       	ldi	r24, 0x03	; 3
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	0e 94 89 04 	call	0x912	; 0x912 <oled_pos>
	oled_printf("TESTING SRAM");
     c42:	82 e3       	ldi	r24, 0x32	; 50
     c44:	92 e0       	ldi	r25, 0x02	; 2
     c46:	9f 93       	push	r25
     c48:	8f 93       	push	r24
     c4a:	0e 94 b1 04 	call	0x962	; 0x962 <oled_printf>
	printf("\nStarting SRAM test...\n");
     c4e:	8f e3       	ldi	r24, 0x3F	; 63
     c50:	92 e0       	ldi	r25, 0x02	; 2
     c52:	0e 94 b6 0a 	call	0x156c	; 0x156c <puts>

	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
     c56:	0e 94 92 0a 	call	0x1524	; 0x1524 <rand>
     c5a:	6c 01       	movw	r12, r24

	// Write phase: Immediately check that the correct value was stored
	srand(seed);
     c5c:	0e 94 97 0a 	call	0x152e	; 0x152e <srand>
     c60:	0f 90       	pop	r0
     c62:	0f 90       	pop	r0
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     c64:	c0 e0       	ldi	r28, 0x00	; 0
     c66:	d0 e0       	ldi	r29, 0x00	; 0
}

void SRAM_test(void) {
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size       = 0x800;
	uint16_t write_errors       = 0;
     c68:	00 e0       	ldi	r16, 0x00	; 0
     c6a:	10 e0       	ldi	r17, 0x00	; 0
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		ext_ram[i] = some_value;
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
     c6c:	0f 2e       	mov	r0, r31
     c6e:	f6 e5       	ldi	r31, 0x56	; 86
     c70:	ef 2e       	mov	r14, r31
     c72:	f2 e0       	ldi	r31, 0x02	; 2
     c74:	ff 2e       	mov	r15, r31
     c76:	f0 2d       	mov	r31, r0
	uint16_t seed = rand();

	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     c78:	0e 94 92 0a 	call	0x1524	; 0x1524 <rand>
     c7c:	fe 01       	movw	r30, r28
     c7e:	f8 5e       	subi	r31, 0xE8	; 232
		ext_ram[i] = some_value;
     c80:	80 83       	st	Z, r24
		uint8_t retreived_value = ext_ram[i];
     c82:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     c84:	28 17       	cp	r18, r24
     c86:	a9 f0       	breq	.+42     	; 0xcb2 <SRAM_test+0x90>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
     c88:	99 27       	eor	r25, r25
     c8a:	9f 93       	push	r25
     c8c:	8f 93       	push	r24
     c8e:	1f 92       	push	r1
     c90:	2f 93       	push	r18
     c92:	df 93       	push	r29
     c94:	cf 93       	push	r28
     c96:	ff 92       	push	r15
     c98:	ef 92       	push	r14
     c9a:	0e 94 a2 0a 	call	0x1544	; 0x1544 <printf>
			write_errors++;
     c9e:	0f 5f       	subi	r16, 0xFF	; 255
     ca0:	1f 4f       	sbci	r17, 0xFF	; 255
     ca2:	8d b7       	in	r24, 0x3d	; 61
     ca4:	9e b7       	in	r25, 0x3e	; 62
     ca6:	08 96       	adiw	r24, 0x08	; 8
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	9e bf       	out	0x3e, r25	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	8d bf       	out	0x3d, r24	; 61
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();

	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     cb2:	21 96       	adiw	r28, 0x01	; 1
     cb4:	c1 15       	cp	r28, r1
     cb6:	98 e0       	ldi	r25, 0x08	; 8
     cb8:	d9 07       	cpc	r29, r25
     cba:	f1 f6       	brne	.-68     	; 0xc78 <SRAM_test+0x56>
			write_errors++;
		}
	}

	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);    // reset the PRNG to the state it had before the write phase
     cbc:	c6 01       	movw	r24, r12
     cbe:	0e 94 97 0a 	call	0x152e	; 0x152e <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     cc2:	c0 e0       	ldi	r28, 0x00	; 0
     cc4:	d0 e0       	ldi	r29, 0x00	; 0

void SRAM_test(void) {
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size       = 0x800;
	uint16_t write_errors       = 0;
	uint16_t retrieval_errors   = 0;
     cc6:	e1 2c       	mov	r14, r1
     cc8:	f1 2c       	mov	r15, r1
	srand(seed);    // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
     cca:	0f 2e       	mov	r0, r31
     ccc:	ff e8       	ldi	r31, 0x8F	; 143
     cce:	cf 2e       	mov	r12, r31
     cd0:	f2 e0       	ldi	r31, 0x02	; 2
     cd2:	df 2e       	mov	r13, r31
     cd4:	f0 2d       	mov	r31, r0
	}

	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);    // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     cd6:	0e 94 92 0a 	call	0x1524	; 0x1524 <rand>
     cda:	fe 01       	movw	r30, r28
     cdc:	f8 5e       	subi	r31, 0xE8	; 232
		uint8_t retreived_value = ext_ram[i];
     cde:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     ce0:	28 17       	cp	r18, r24
     ce2:	b1 f0       	breq	.+44     	; 0xd10 <SRAM_test+0xee>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
     ce4:	99 27       	eor	r25, r25
     ce6:	9f 93       	push	r25
     ce8:	8f 93       	push	r24
     cea:	1f 92       	push	r1
     cec:	2f 93       	push	r18
     cee:	df 93       	push	r29
     cf0:	cf 93       	push	r28
     cf2:	df 92       	push	r13
     cf4:	cf 92       	push	r12
     cf6:	0e 94 a2 0a 	call	0x1544	; 0x1544 <printf>
			retrieval_errors++;
     cfa:	9f ef       	ldi	r25, 0xFF	; 255
     cfc:	e9 1a       	sub	r14, r25
     cfe:	f9 0a       	sbc	r15, r25
     d00:	8d b7       	in	r24, 0x3d	; 61
     d02:	9e b7       	in	r25, 0x3e	; 62
     d04:	08 96       	adiw	r24, 0x08	; 8
     d06:	0f b6       	in	r0, 0x3f	; 63
     d08:	f8 94       	cli
     d0a:	9e bf       	out	0x3e, r25	; 62
     d0c:	0f be       	out	0x3f, r0	; 63
     d0e:	8d bf       	out	0x3d, r24	; 61
		}
	}

	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);    // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     d10:	21 96       	adiw	r28, 0x01	; 1
     d12:	c1 15       	cp	r28, r1
     d14:	98 e0       	ldi	r25, 0x08	; 8
     d16:	d9 07       	cpc	r29, r25
     d18:	f1 f6       	brne	.-68     	; 0xcd6 <SRAM_test+0xb4>
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	if (retrieval_errors != 0 || write_errors != 0) { 
     d1a:	e1 14       	cp	r14, r1
     d1c:	f1 04       	cpc	r15, r1
     d1e:	19 f4       	brne	.+6      	; 0xd26 <SRAM_test+0x104>
     d20:	01 15       	cp	r16, r1
     d22:	11 05       	cpc	r17, r1
     d24:	71 f1       	breq	.+92     	; 0xd82 <SRAM_test+0x160>
		oled_pos(5,0);
     d26:	60 e0       	ldi	r22, 0x00	; 0
     d28:	70 e0       	ldi	r23, 0x00	; 0
     d2a:	85 e0       	ldi	r24, 0x05	; 5
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	0e 94 89 04 	call	0x912	; 0x912 <oled_pos>
		oled_printf("R ERRORS:  %4d",retrieval_errors);
     d32:	ff 92       	push	r15
     d34:	ef 92       	push	r14
     d36:	8c ec       	ldi	r24, 0xCC	; 204
     d38:	92 e0       	ldi	r25, 0x02	; 2
     d3a:	9f 93       	push	r25
     d3c:	8f 93       	push	r24
     d3e:	0e 94 b1 04 	call	0x962	; 0x962 <oled_printf>
		oled_pos(6,0);
     d42:	60 e0       	ldi	r22, 0x00	; 0
     d44:	70 e0       	ldi	r23, 0x00	; 0
     d46:	86 e0       	ldi	r24, 0x06	; 6
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	0e 94 89 04 	call	0x912	; 0x912 <oled_pos>
		oled_printf("W ERRORS:  %4d",write_errors);
     d4e:	1f 93       	push	r17
     d50:	0f 93       	push	r16
     d52:	8b ed       	ldi	r24, 0xDB	; 219
     d54:	92 e0       	ldi	r25, 0x02	; 2
     d56:	9f 93       	push	r25
     d58:	8f 93       	push	r24
     d5a:	0e 94 b1 04 	call	0x962	; 0x962 <oled_printf>
     d5e:	2f ef       	ldi	r18, 0xFF	; 255
     d60:	8f ef       	ldi	r24, 0xFF	; 255
     d62:	9b e3       	ldi	r25, 0x3B	; 59
     d64:	21 50       	subi	r18, 0x01	; 1
     d66:	80 40       	sbci	r24, 0x00	; 0
     d68:	90 40       	sbci	r25, 0x00	; 0
     d6a:	e1 f7       	brne	.-8      	; 0xd64 <SRAM_test+0x142>
     d6c:	00 c0       	rjmp	.+0      	; 0xd6e <SRAM_test+0x14c>
     d6e:	00 00       	nop
     d70:	8d b7       	in	r24, 0x3d	; 61
     d72:	9e b7       	in	r25, 0x3e	; 62
     d74:	08 96       	adiw	r24, 0x08	; 8
     d76:	0f b6       	in	r0, 0x3f	; 63
     d78:	f8 94       	cli
     d7a:	9e bf       	out	0x3e, r25	; 62
     d7c:	0f be       	out	0x3f, r0	; 63
     d7e:	8d bf       	out	0x3d, r24	; 61
     d80:	0e c0       	rjmp	.+28     	; 0xd9e <SRAM_test+0x17c>
		_delay_ms(4000);
	} else {
		oled_pos(6,4);
     d82:	64 e0       	ldi	r22, 0x04	; 4
     d84:	70 e0       	ldi	r23, 0x00	; 0
     d86:	86 e0       	ldi	r24, 0x06	; 6
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	0e 94 89 04 	call	0x912	; 0x912 <oled_pos>
		oled_printf("NO ERRORS");
     d8e:	8a ee       	ldi	r24, 0xEA	; 234
     d90:	92 e0       	ldi	r25, 0x02	; 2
     d92:	9f 93       	push	r25
     d94:	8f 93       	push	r24
     d96:	0e 94 b1 04 	call	0x962	; 0x962 <oled_printf>
     d9a:	0f 90       	pop	r0
     d9c:	0f 90       	pop	r0
	}
	printf("SRAM test completed with \n%4d errors in write phase and \n%4d errors in retrieval phase\n\n", write_errors, retrieval_errors);
     d9e:	ff 92       	push	r15
     da0:	ef 92       	push	r14
     da2:	1f 93       	push	r17
     da4:	0f 93       	push	r16
     da6:	84 ef       	ldi	r24, 0xF4	; 244
     da8:	92 e0       	ldi	r25, 0x02	; 2
     daa:	9f 93       	push	r25
     dac:	8f 93       	push	r24
     dae:	0e 94 a2 0a 	call	0x1544	; 0x1544 <printf>
     db2:	0f 90       	pop	r0
     db4:	0f 90       	pop	r0
     db6:	0f 90       	pop	r0
     db8:	0f 90       	pop	r0
     dba:	0f 90       	pop	r0
     dbc:	0f 90       	pop	r0
     dbe:	df 91       	pop	r29
     dc0:	cf 91       	pop	r28
     dc2:	1f 91       	pop	r17
     dc4:	0f 91       	pop	r16
     dc6:	ff 90       	pop	r15
     dc8:	ef 90       	pop	r14
     dca:	df 90       	pop	r13
     dcc:	cf 90       	pop	r12
     dce:	08 95       	ret

00000dd0 <SRAM_init>:
#include "SRAM_driver.h"
#include "oled_driver.h"

//Simple setup for SRAM, also tests for correctness
void SRAM_init(){
	MCUCR = 0x80;
     dd0:	80 e8       	ldi	r24, 0x80	; 128
     dd2:	85 bf       	out	0x35, r24	; 53
	DDRA = 0xFF;
     dd4:	8f ef       	ldi	r24, 0xFF	; 255
     dd6:	8a bb       	out	0x1a, r24	; 26
	SRAM_test();
     dd8:	0e 94 11 06 	call	0xc22	; 0xc22 <SRAM_test>
     ddc:	08 95       	ret

00000dde <uart_sendChar>:

}

void uart_sendChar(unsigned char data){
	//Wait for empty transmitter buffer
	while(!(UCSR0A & (1<<UDRE0)));
     dde:	5d 9b       	sbis	0x0b, 5	; 11
     de0:	fe cf       	rjmp	.-4      	; 0xdde <uart_sendChar>
		
	//Put data into buffer, then send the data
	UDR0 = data;
     de2:	8c b9       	out	0x0c, r24	; 12
     de4:	08 95       	ret

00000de6 <uart_getChar>:
}


unsigned int uart_getChar(){
	//Wait for the data to be received 
	while(!(UCSR0A & (1<<RXC0))){}
     de6:	5f 9b       	sbis	0x0b, 7	; 11
     de8:	fe cf       	rjmp	.-4      	; 0xde6 <uart_getChar>
	
	//Get status and the 9th bit, then data from buffer
	return UDR0;
     dea:	8c b1       	in	r24, 0x0c	; 12
}
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	08 95       	ret

00000df0 <uart_init>:

static FILE uart_io = FDEV_SETUP_STREAM(uart_sendChar, uart_getChar, _FDEV_SETUP_RW);

void uart_init(unsigned int ubrr){
	//Set baud rate
	UBRR0L = (unsigned int) ubrr;
     df0:	89 b9       	out	0x09, r24	; 9
	
	//Enable receiver and transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
     df2:	88 e1       	ldi	r24, 0x18	; 24
     df4:	8a b9       	out	0x0a, r24	; 10
	
	stdout = &uart_io;
     df6:	8c e1       	ldi	r24, 0x1C	; 28
     df8:	91 e0       	ldi	r25, 0x01	; 1
     dfa:	90 93 d8 03 	sts	0x03D8, r25
     dfe:	80 93 d7 03 	sts	0x03D7, r24
	stdin = &uart_io;
     e02:	90 93 d6 03 	sts	0x03D6, r25
     e06:	80 93 d5 03 	sts	0x03D5, r24
     e0a:	08 95       	ret

00000e0c <main>:
#include "Drivers/mcp2515_driver.h"
#include "Drivers/can_driver.h"
#include "timer.h"

int main(void) {
    uart_init(MYUBRR);
     e0c:	8f e1       	ldi	r24, 0x1F	; 31
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <uart_init>
	printf("\nREBOOTED\n");
     e14:	8d e4       	ldi	r24, 0x4D	; 77
     e16:	93 e0       	ldi	r25, 0x03	; 3
     e18:	0e 94 b6 0a 	call	0x156c	; 0x156c <puts>
	SRAM_init();
     e1c:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <SRAM_init>
	joystick_init();
     e20:	0e 94 82 03 	call	0x704	; 0x704 <joystick_init>
	button_init();
     e24:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <button_init>
	oled_init();
     e28:	0e 94 c1 04 	call	0x982	; 0x982 <oled_init>
	//mcp2515_init();
	can_init();	
     e2c:	0e 94 04 02 	call	0x408	; 0x408 <can_init>
	timer_init();
     e30:	0e 94 b4 08 	call	0x1168	; 0x1168 <timer_init>

	DDRB |= (1<<DDB0);
     e34:	b8 9a       	sbi	0x17, 0	; 23

	printf("\nAll init done\n\n");
     e36:	87 e5       	ldi	r24, 0x57	; 87
     e38:	93 e0       	ldi	r25, 0x03	; 3
     e3a:	0e 94 b6 0a 	call	0x156c	; 0x156c <puts>
	//can_joy_test();
	while(1) { 
		//shell();
		//spi_test();

		menuitem* test_menu = MENU_create_menu();
     e3e:	0e 94 84 07 	call	0xf08	; 0xf08 <MENU_create_menu>
		MENU_navigate(test_menu);
     e42:	0e 94 2f 08 	call	0x105e	; 0x105e <MENU_navigate>
     e46:	2f ef       	ldi	r18, 0xFF	; 255
     e48:	8f ef       	ldi	r24, 0xFF	; 255
     e4a:	95 e9       	ldi	r25, 0x95	; 149
     e4c:	21 50       	subi	r18, 0x01	; 1
     e4e:	80 40       	sbci	r24, 0x00	; 0
     e50:	90 40       	sbci	r25, 0x00	; 0
     e52:	e1 f7       	brne	.-8      	; 0xe4c <main+0x40>
     e54:	00 c0       	rjmp	.+0      	; 0xe56 <main+0x4a>
     e56:	00 00       	nop
     e58:	f2 cf       	rjmp	.-28     	; 0xe3e <main+0x32>

00000e5a <MENU_new_item>:
#include "Drivers/mcp2515_driver.h"
#include "Drivers/can_driver.h"

#define MENU_INDENT 2

menuitem* MENU_new_item(char *name, void (*handlerFunc)(void), uint8_t number_of_submenus) {
     e5a:	df 92       	push	r13
     e5c:	ef 92       	push	r14
     e5e:	ff 92       	push	r15
     e60:	0f 93       	push	r16
     e62:	1f 93       	push	r17
     e64:	cf 93       	push	r28
     e66:	df 93       	push	r29
     e68:	7c 01       	movw	r14, r24
     e6a:	8b 01       	movw	r16, r22
     e6c:	d4 2e       	mov	r13, r20
	menuitem* new_item = malloc(sizeof(menuitem));
     e6e:	89 e0       	ldi	r24, 0x09	; 9
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	0e 94 1d 09 	call	0x123a	; 0x123a <malloc>
     e76:	ec 01       	movw	r28, r24
	
	new_item->name = name;
     e78:	fe 82       	std	Y+6, r15	; 0x06
     e7a:	ed 82       	std	Y+5, r14	; 0x05
	new_item->handlerFunc = handlerFunc;
     e7c:	18 87       	std	Y+8, r17	; 0x08
     e7e:	0f 83       	std	Y+7, r16	; 0x07
	new_item->number_of_submenus = number_of_submenus;
     e80:	d8 82       	st	Y, r13
	new_item->submenus = malloc(number_of_submenus * sizeof(menuitem));
     e82:	4d 2d       	mov	r20, r13
     e84:	50 e0       	ldi	r21, 0x00	; 0
     e86:	ca 01       	movw	r24, r20
     e88:	88 0f       	add	r24, r24
     e8a:	99 1f       	adc	r25, r25
     e8c:	88 0f       	add	r24, r24
     e8e:	99 1f       	adc	r25, r25
     e90:	88 0f       	add	r24, r24
     e92:	99 1f       	adc	r25, r25
     e94:	84 0f       	add	r24, r20
     e96:	95 1f       	adc	r25, r21
     e98:	0e 94 1d 09 	call	0x123a	; 0x123a <malloc>
     e9c:	9a 83       	std	Y+2, r25	; 0x02
     e9e:	89 83       	std	Y+1, r24	; 0x01
	
	return new_item;
}
     ea0:	ce 01       	movw	r24, r28
     ea2:	df 91       	pop	r29
     ea4:	cf 91       	pop	r28
     ea6:	1f 91       	pop	r17
     ea8:	0f 91       	pop	r16
     eaa:	ff 90       	pop	r15
     eac:	ef 90       	pop	r14
     eae:	df 90       	pop	r13
     eb0:	08 95       	ret

00000eb2 <MENU_assign_parents>:

void MENU_assign_parents(menuitem *current_menu){
     eb2:	1f 93       	push	r17
     eb4:	cf 93       	push	r28
     eb6:	df 93       	push	r29
     eb8:	ec 01       	movw	r28, r24
	for (uint8_t n = 0; n < current_menu->number_of_submenus; n++) {
     eba:	88 81       	ld	r24, Y
     ebc:	88 23       	and	r24, r24
     ebe:	01 f1       	breq	.+64     	; 0xf00 <MENU_assign_parents+0x4e>
     ec0:	10 e0       	ldi	r17, 0x00	; 0
		current_menu->submenus[n]->parent = current_menu;
     ec2:	81 2f       	mov	r24, r17
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	88 0f       	add	r24, r24
     ec8:	99 1f       	adc	r25, r25
     eca:	e9 81       	ldd	r30, Y+1	; 0x01
     ecc:	fa 81       	ldd	r31, Y+2	; 0x02
     ece:	e8 0f       	add	r30, r24
     ed0:	f9 1f       	adc	r31, r25
     ed2:	01 90       	ld	r0, Z+
     ed4:	f0 81       	ld	r31, Z
     ed6:	e0 2d       	mov	r30, r0
     ed8:	d4 83       	std	Z+4, r29	; 0x04
     eda:	c3 83       	std	Z+3, r28	; 0x03
		if (current_menu->submenus[n]->number_of_submenus > 0) {
     edc:	29 81       	ldd	r18, Y+1	; 0x01
     ede:	3a 81       	ldd	r19, Y+2	; 0x02
     ee0:	f9 01       	movw	r30, r18
     ee2:	e8 0f       	add	r30, r24
     ee4:	f9 1f       	adc	r31, r25
     ee6:	01 90       	ld	r0, Z+
     ee8:	f0 81       	ld	r31, Z
     eea:	e0 2d       	mov	r30, r0
     eec:	80 81       	ld	r24, Z
     eee:	88 23       	and	r24, r24
     ef0:	19 f0       	breq	.+6      	; 0xef8 <MENU_assign_parents+0x46>
			MENU_assign_parents(current_menu->submenus[n]);
     ef2:	cf 01       	movw	r24, r30
     ef4:	0e 94 59 07 	call	0xeb2	; 0xeb2 <MENU_assign_parents>
	
	return new_item;
}

void MENU_assign_parents(menuitem *current_menu){
	for (uint8_t n = 0; n < current_menu->number_of_submenus; n++) {
     ef8:	1f 5f       	subi	r17, 0xFF	; 255
     efa:	88 81       	ld	r24, Y
     efc:	18 17       	cp	r17, r24
     efe:	08 f3       	brcs	.-62     	; 0xec2 <MENU_assign_parents+0x10>
		current_menu->submenus[n]->parent = current_menu;
		if (current_menu->submenus[n]->number_of_submenus > 0) {
			MENU_assign_parents(current_menu->submenus[n]);
		}
	}
}
     f00:	df 91       	pop	r29
     f02:	cf 91       	pop	r28
     f04:	1f 91       	pop	r17
     f06:	08 95       	ret

00000f08 <MENU_create_menu>:


menuitem* MENU_create_menu(){
     f08:	0f 93       	push	r16
     f0a:	1f 93       	push	r17
     f0c:	cf 93       	push	r28
     f0e:	df 93       	push	r29
	menuitem* root_menu = MENU_new_item("Main", NULL, 3);
     f10:	43 e0       	ldi	r20, 0x03	; 3
     f12:	60 e0       	ldi	r22, 0x00	; 0
     f14:	70 e0       	ldi	r23, 0x00	; 0
     f16:	87 e6       	ldi	r24, 0x67	; 103
     f18:	93 e0       	ldi	r25, 0x03	; 3
     f1a:	0e 94 2d 07 	call	0xe5a	; 0xe5a <MENU_new_item>
     f1e:	ec 01       	movw	r28, r24
	root_menu->parent = NULL;
     f20:	1c 82       	std	Y+4, r1	; 0x04
     f22:	1b 82       	std	Y+3, r1	; 0x03
	root_menu->submenus[0] = MENU_new_item("Play game", timer_toggle, 0);
     f24:	09 81       	ldd	r16, Y+1	; 0x01
     f26:	1a 81       	ldd	r17, Y+2	; 0x02
     f28:	40 e0       	ldi	r20, 0x00	; 0
     f2a:	63 ee       	ldi	r22, 0xE3	; 227
     f2c:	78 e0       	ldi	r23, 0x08	; 8
     f2e:	8c e6       	ldi	r24, 0x6C	; 108
     f30:	93 e0       	ldi	r25, 0x03	; 3
     f32:	0e 94 2d 07 	call	0xe5a	; 0xe5a <MENU_new_item>
     f36:	f8 01       	movw	r30, r16
     f38:	91 83       	std	Z+1, r25	; 0x01
     f3a:	80 83       	st	Z, r24
	root_menu->submenus[1] = MENU_new_item("Snake", SRAM_test, 0);
     f3c:	09 81       	ldd	r16, Y+1	; 0x01
     f3e:	1a 81       	ldd	r17, Y+2	; 0x02
     f40:	40 e0       	ldi	r20, 0x00	; 0
     f42:	61 e1       	ldi	r22, 0x11	; 17
     f44:	76 e0       	ldi	r23, 0x06	; 6
     f46:	86 e7       	ldi	r24, 0x76	; 118
     f48:	93 e0       	ldi	r25, 0x03	; 3
     f4a:	0e 94 2d 07 	call	0xe5a	; 0xe5a <MENU_new_item>
     f4e:	f8 01       	movw	r30, r16
     f50:	93 83       	std	Z+3, r25	; 0x03
     f52:	82 83       	std	Z+2, r24	; 0x02
	root_menu->submenus[2] = MENU_new_item("Test functions", NULL, 2);
     f54:	09 81       	ldd	r16, Y+1	; 0x01
     f56:	1a 81       	ldd	r17, Y+2	; 0x02
     f58:	42 e0       	ldi	r20, 0x02	; 2
     f5a:	60 e0       	ldi	r22, 0x00	; 0
     f5c:	70 e0       	ldi	r23, 0x00	; 0
     f5e:	8c e7       	ldi	r24, 0x7C	; 124
     f60:	93 e0       	ldi	r25, 0x03	; 3
     f62:	0e 94 2d 07 	call	0xe5a	; 0xe5a <MENU_new_item>
     f66:	f8 01       	movw	r30, r16
     f68:	95 83       	std	Z+5, r25	; 0x05
     f6a:	84 83       	std	Z+4, r24	; 0x04
	root_menu->submenus[2]->submenus[0] = MENU_new_item("Flash diode", flash_diode, 0);
     f6c:	e9 81       	ldd	r30, Y+1	; 0x01
     f6e:	fa 81       	ldd	r31, Y+2	; 0x02
     f70:	04 80       	ldd	r0, Z+4	; 0x04
     f72:	f5 81       	ldd	r31, Z+5	; 0x05
     f74:	e0 2d       	mov	r30, r0
     f76:	01 81       	ldd	r16, Z+1	; 0x01
     f78:	12 81       	ldd	r17, Z+2	; 0x02
     f7a:	40 e0       	ldi	r20, 0x00	; 0
     f7c:	6b ea       	ldi	r22, 0xAB	; 171
     f7e:	78 e0       	ldi	r23, 0x08	; 8
     f80:	8b e8       	ldi	r24, 0x8B	; 139
     f82:	93 e0       	ldi	r25, 0x03	; 3
     f84:	0e 94 2d 07 	call	0xe5a	; 0xe5a <MENU_new_item>
     f88:	f8 01       	movw	r30, r16
     f8a:	91 83       	std	Z+1, r25	; 0x01
     f8c:	80 83       	st	Z, r24
	root_menu->submenus[2]->submenus[1] = MENU_new_item("CAN loopback", SRAM_test, 0);
     f8e:	e9 81       	ldd	r30, Y+1	; 0x01
     f90:	fa 81       	ldd	r31, Y+2	; 0x02
     f92:	04 80       	ldd	r0, Z+4	; 0x04
     f94:	f5 81       	ldd	r31, Z+5	; 0x05
     f96:	e0 2d       	mov	r30, r0
     f98:	01 81       	ldd	r16, Z+1	; 0x01
     f9a:	12 81       	ldd	r17, Z+2	; 0x02
     f9c:	40 e0       	ldi	r20, 0x00	; 0
     f9e:	61 e1       	ldi	r22, 0x11	; 17
     fa0:	76 e0       	ldi	r23, 0x06	; 6
     fa2:	87 e9       	ldi	r24, 0x97	; 151
     fa4:	93 e0       	ldi	r25, 0x03	; 3
     fa6:	0e 94 2d 07 	call	0xe5a	; 0xe5a <MENU_new_item>
     faa:	f8 01       	movw	r30, r16
     fac:	93 83       	std	Z+3, r25	; 0x03
     fae:	82 83       	std	Z+2, r24	; 0x02

	
	MENU_assign_parents(root_menu);
     fb0:	ce 01       	movw	r24, r28
     fb2:	0e 94 59 07 	call	0xeb2	; 0xeb2 <MENU_assign_parents>
		
	return root_menu;
}
     fb6:	ce 01       	movw	r24, r28
     fb8:	df 91       	pop	r29
     fba:	cf 91       	pop	r28
     fbc:	1f 91       	pop	r17
     fbe:	0f 91       	pop	r16
     fc0:	08 95       	ret

00000fc2 <MENU_print>:

//fixed
void MENU_print(menuitem *current_menu_item){
     fc2:	ef 92       	push	r14
     fc4:	ff 92       	push	r15
     fc6:	0f 93       	push	r16
     fc8:	1f 93       	push	r17
     fca:	cf 93       	push	r28
     fcc:	df 93       	push	r29
     fce:	7c 01       	movw	r14, r24
	oled_clear_screen();
     fd0:	0e 94 79 04 	call	0x8f2	; 0x8f2 <oled_clear_screen>
	oled_print_arrow(1, 0);
     fd4:	60 e0       	ldi	r22, 0x00	; 0
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	0e 94 7f 05 	call	0xafe	; 0xafe <oled_print_arrow>
	oled_pos(0,0);
     fdc:	60 e0       	ldi	r22, 0x00	; 0
     fde:	70 e0       	ldi	r23, 0x00	; 0
     fe0:	80 e0       	ldi	r24, 0x00	; 0
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	0e 94 89 04 	call	0x912	; 0x912 <oled_pos>
	oled_printf(current_menu_item->name);
     fe8:	d7 01       	movw	r26, r14
     fea:	16 96       	adiw	r26, 0x06	; 6
     fec:	8c 91       	ld	r24, X
     fee:	16 97       	sbiw	r26, 0x06	; 6
     ff0:	8f 93       	push	r24
     ff2:	15 96       	adiw	r26, 0x05	; 5
     ff4:	8c 91       	ld	r24, X
     ff6:	8f 93       	push	r24
     ff8:	0e 94 b1 04 	call	0x962	; 0x962 <oled_printf>
	//printf("%s\n", current_menu_item->name);
	
	for (unsigned int i = 0; i < current_menu_item->number_of_submenus; i++) {
     ffc:	0f 90       	pop	r0
     ffe:	0f 90       	pop	r0
    1000:	f7 01       	movw	r30, r14
    1002:	80 81       	ld	r24, Z
    1004:	88 23       	and	r24, r24
    1006:	21 f1       	breq	.+72     	; 0x1050 <MENU_print+0x8e>
    1008:	00 e0       	ldi	r16, 0x00	; 0
    100a:	10 e0       	ldi	r17, 0x00	; 0
    100c:	c0 e0       	ldi	r28, 0x00	; 0
    100e:	d0 e0       	ldi	r29, 0x00	; 0
		oled_pos(i + 1, MENU_INDENT);
    1010:	21 96       	adiw	r28, 0x01	; 1
    1012:	62 e0       	ldi	r22, 0x02	; 2
    1014:	70 e0       	ldi	r23, 0x00	; 0
    1016:	ce 01       	movw	r24, r28
    1018:	0e 94 89 04 	call	0x912	; 0x912 <oled_pos>
		oled_printf(current_menu_item->submenus[i]->name);
    101c:	d7 01       	movw	r26, r14
    101e:	11 96       	adiw	r26, 0x01	; 1
    1020:	ed 91       	ld	r30, X+
    1022:	fc 91       	ld	r31, X
    1024:	12 97       	sbiw	r26, 0x02	; 2
    1026:	e0 0f       	add	r30, r16
    1028:	f1 1f       	adc	r31, r17
    102a:	01 90       	ld	r0, Z+
    102c:	f0 81       	ld	r31, Z
    102e:	e0 2d       	mov	r30, r0
    1030:	86 81       	ldd	r24, Z+6	; 0x06
    1032:	8f 93       	push	r24
    1034:	85 81       	ldd	r24, Z+5	; 0x05
    1036:	8f 93       	push	r24
    1038:	0e 94 b1 04 	call	0x962	; 0x962 <oled_printf>
    103c:	0e 5f       	subi	r16, 0xFE	; 254
    103e:	1f 4f       	sbci	r17, 0xFF	; 255
	oled_print_arrow(1, 0);
	oled_pos(0,0);
	oled_printf(current_menu_item->name);
	//printf("%s\n", current_menu_item->name);
	
	for (unsigned int i = 0; i < current_menu_item->number_of_submenus; i++) {
    1040:	f7 01       	movw	r30, r14
    1042:	80 81       	ld	r24, Z
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	0f 90       	pop	r0
    1048:	0f 90       	pop	r0
    104a:	c8 17       	cp	r28, r24
    104c:	d9 07       	cpc	r29, r25
    104e:	00 f3       	brcs	.-64     	; 0x1010 <MENU_print+0x4e>
		oled_pos(i + 1, MENU_INDENT);
		oled_printf(current_menu_item->submenus[i]->name);
		//printf("%s\n",current_menu_item->submenus[i]->name);
	}
}
    1050:	df 91       	pop	r29
    1052:	cf 91       	pop	r28
    1054:	1f 91       	pop	r17
    1056:	0f 91       	pop	r16
    1058:	ff 90       	pop	r15
    105a:	ef 90       	pop	r14
    105c:	08 95       	ret

0000105e <MENU_navigate>:

void MENU_navigate(menuitem *current_menu){
    105e:	8c 01       	movw	r16, r24
	MENU_print(current_menu);
    1060:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <MENU_print>
	while(1){
		if(joystick_direction_Y() != 0){
    1064:	0e 94 b3 03 	call	0x766	; 0x766 <joystick_direction_Y>
    1068:	89 2b       	or	r24, r25
    106a:	51 f0       	breq	.+20     	; 0x1080 <MENU_navigate+0x22>
			oled_arrow_handler(joystick_direction_Y(), 1, current_menu->number_of_submenus);
    106c:	f8 01       	movw	r30, r16
    106e:	c0 81       	ld	r28, Z
    1070:	d0 e0       	ldi	r29, 0x00	; 0
    1072:	0e 94 b3 03 	call	0x766	; 0x766 <joystick_direction_Y>
    1076:	ae 01       	movw	r20, r28
    1078:	61 e0       	ldi	r22, 0x01	; 1
    107a:	70 e0       	ldi	r23, 0x00	; 0
    107c:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <oled_arrow_handler>
		}
		
		if(joystick_direction_X() != 0){
    1080:	0e 94 c8 03 	call	0x790	; 0x790 <joystick_direction_X>
    1084:	89 2b       	or	r24, r25
    1086:	71 f3       	breq	.-36     	; 0x1064 <MENU_navigate+0x6>
			if (joystick_direction_X() == 1) {
    1088:	0e 94 c8 03 	call	0x790	; 0x790 <joystick_direction_X>
    108c:	01 97       	sbiw	r24, 0x01	; 1
    108e:	09 f0       	breq	.+2      	; 0x1092 <MENU_navigate+0x34>
    1090:	4b c0       	rjmp	.+150    	; 0x1128 <MENU_navigate+0xca>
				if (current_menu->submenus[oled_get_arrow_page() - 1]->number_of_submenus > 0) {
    1092:	f8 01       	movw	r30, r16
    1094:	c1 81       	ldd	r28, Z+1	; 0x01
    1096:	d2 81       	ldd	r29, Z+2	; 0x02
    1098:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <oled_get_arrow_page>
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	81 50       	subi	r24, 0x01	; 1
    10a0:	90 48       	sbci	r25, 0x80	; 128
    10a2:	88 0f       	add	r24, r24
    10a4:	99 1f       	adc	r25, r25
    10a6:	c8 0f       	add	r28, r24
    10a8:	d9 1f       	adc	r29, r25
    10aa:	e8 81       	ld	r30, Y
    10ac:	f9 81       	ldd	r31, Y+1	; 0x01
    10ae:	80 81       	ld	r24, Z
    10b0:	88 23       	and	r24, r24
    10b2:	91 f0       	breq	.+36     	; 0x10d8 <MENU_navigate+0x7a>
					current_menu = current_menu->submenus[oled_get_arrow_page() - 1];
    10b4:	f8 01       	movw	r30, r16
    10b6:	c1 81       	ldd	r28, Z+1	; 0x01
    10b8:	d2 81       	ldd	r29, Z+2	; 0x02
    10ba:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <oled_get_arrow_page>
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	81 50       	subi	r24, 0x01	; 1
    10c2:	90 48       	sbci	r25, 0x80	; 128
    10c4:	88 0f       	add	r24, r24
    10c6:	99 1f       	adc	r25, r25
    10c8:	c8 0f       	add	r28, r24
    10ca:	d9 1f       	adc	r29, r25
    10cc:	08 81       	ld	r16, Y
    10ce:	19 81       	ldd	r17, Y+1	; 0x01
					//printf(current_menu->submenus[0]->name);
					//last_arrow_pos = 1;
					MENU_print(current_menu);
    10d0:	c8 01       	movw	r24, r16
    10d2:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <MENU_print>
    10d6:	35 c0       	rjmp	.+106    	; 0x1142 <MENU_navigate+0xe4>
				} else  if (current_menu->submenus[oled_get_arrow_page() - 1]->handlerFunc != NULL) {
    10d8:	f8 01       	movw	r30, r16
    10da:	c1 81       	ldd	r28, Z+1	; 0x01
    10dc:	d2 81       	ldd	r29, Z+2	; 0x02
    10de:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <oled_get_arrow_page>
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	81 50       	subi	r24, 0x01	; 1
    10e6:	90 48       	sbci	r25, 0x80	; 128
    10e8:	88 0f       	add	r24, r24
    10ea:	99 1f       	adc	r25, r25
    10ec:	c8 0f       	add	r28, r24
    10ee:	d9 1f       	adc	r29, r25
    10f0:	e8 81       	ld	r30, Y
    10f2:	f9 81       	ldd	r31, Y+1	; 0x01
    10f4:	87 81       	ldd	r24, Z+7	; 0x07
    10f6:	90 85       	ldd	r25, Z+8	; 0x08
    10f8:	89 2b       	or	r24, r25
    10fa:	19 f1       	breq	.+70     	; 0x1142 <MENU_navigate+0xe4>
					current_menu->submenus[oled_get_arrow_page() - 1]->handlerFunc();
    10fc:	f8 01       	movw	r30, r16
    10fe:	c1 81       	ldd	r28, Z+1	; 0x01
    1100:	d2 81       	ldd	r29, Z+2	; 0x02
    1102:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <oled_get_arrow_page>
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	81 50       	subi	r24, 0x01	; 1
    110a:	90 48       	sbci	r25, 0x80	; 128
    110c:	88 0f       	add	r24, r24
    110e:	99 1f       	adc	r25, r25
    1110:	c8 0f       	add	r28, r24
    1112:	d9 1f       	adc	r29, r25
    1114:	e8 81       	ld	r30, Y
    1116:	f9 81       	ldd	r31, Y+1	; 0x01
    1118:	07 80       	ldd	r0, Z+7	; 0x07
    111a:	f0 85       	ldd	r31, Z+8	; 0x08
    111c:	e0 2d       	mov	r30, r0
    111e:	09 95       	icall
					//last_arrow_pos = 1;
					MENU_print(current_menu);
    1120:	c8 01       	movw	r24, r16
    1122:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <MENU_print>
    1126:	0d c0       	rjmp	.+26     	; 0x1142 <MENU_navigate+0xe4>
				}
			} else if (joystick_direction_X() == -1 && current_menu->parent != NULL) {
    1128:	0e 94 c8 03 	call	0x790	; 0x790 <joystick_direction_X>
    112c:	01 96       	adiw	r24, 0x01	; 1
    112e:	49 f4       	brne	.+18     	; 0x1142 <MENU_navigate+0xe4>
    1130:	f8 01       	movw	r30, r16
    1132:	c3 81       	ldd	r28, Z+3	; 0x03
    1134:	d4 81       	ldd	r29, Z+4	; 0x04
    1136:	20 97       	sbiw	r28, 0x00	; 0
    1138:	21 f0       	breq	.+8      	; 0x1142 <MENU_navigate+0xe4>
				current_menu = current_menu->parent;
				//last_arrow_pos = 1;
				MENU_print(current_menu);
    113a:	ce 01       	movw	r24, r28
    113c:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <MENU_print>
					current_menu->submenus[oled_get_arrow_page() - 1]->handlerFunc();
					//last_arrow_pos = 1;
					MENU_print(current_menu);
				}
			} else if (joystick_direction_X() == -1 && current_menu->parent != NULL) {
				current_menu = current_menu->parent;
    1140:	8e 01       	movw	r16, r28
    1142:	ff ef       	ldi	r31, 0xFF	; 255
    1144:	2f e7       	ldi	r18, 0x7F	; 127
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	f1 50       	subi	r31, 0x01	; 1
    114a:	20 40       	sbci	r18, 0x00	; 0
    114c:	80 40       	sbci	r24, 0x00	; 0
    114e:	e1 f7       	brne	.-8      	; 0x1148 <MENU_navigate+0xea>
    1150:	00 c0       	rjmp	.+0      	; 0x1152 <MENU_navigate+0xf4>
    1152:	00 c0       	rjmp	.+0      	; 0x1154 <MENU_navigate+0xf6>
    1154:	87 cf       	rjmp	.-242    	; 0x1064 <MENU_navigate+0x6>

00001156 <flash_diode>:
#include "Drivers/oled_driver.h"


//Simple test, Ex 1, task 6
void flash_diode(){
	PORTB |= (1<<PINB0);
    1156:	c0 9a       	sbi	0x18, 0	; 24
    1158:	8f ef       	ldi	r24, 0xFF	; 255
    115a:	9f e2       	ldi	r25, 0x2F	; 47
    115c:	01 97       	sbiw	r24, 0x01	; 1
    115e:	f1 f7       	brne	.-4      	; 0x115c <flash_diode+0x6>
    1160:	00 c0       	rjmp	.+0      	; 0x1162 <flash_diode+0xc>
    1162:	00 00       	nop
	_delay_ms(10);
	PORTB &= ~(1<<PINB0);
    1164:	c0 98       	cbi	0x18, 0	; 24
    1166:	08 95       	ret

00001168 <timer_init>:

void timer_init() {
	
		//timer_enable();
		
		TCCR3A &= ~(1<<WGM30);
    1168:	eb e8       	ldi	r30, 0x8B	; 139
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	8e 7f       	andi	r24, 0xFE	; 254
    1170:	80 83       	st	Z, r24
		TCCR3A &= ~(1<<WGM31);
    1172:	80 81       	ld	r24, Z
    1174:	8d 7f       	andi	r24, 0xFD	; 253
    1176:	80 83       	st	Z, r24
		TCCR3B |=  (1<<WGM32);
    1178:	ea e8       	ldi	r30, 0x8A	; 138
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	88 60       	ori	r24, 0x08	; 8
    1180:	80 83       	st	Z, r24
		TCCR3B &= ~(1<<WGM33);
    1182:	80 81       	ld	r24, Z
    1184:	8f 7e       	andi	r24, 0xEF	; 239
    1186:	80 83       	st	Z, r24
		//TCCR3A |=  (1<<COM3A1) | (1<<COM3A0);
		
		OCR3A = 68; //68 for 70Hz, 4760 for 1Hz
    1188:	84 e4       	ldi	r24, 0x44	; 68
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	90 93 87 00 	sts	0x0087, r25
    1190:	80 93 86 00 	sts	0x0086, r24
		
		//enable interrupt on OCR3A compare

		ETIMSK |= (1<<OCIE3A);
    1194:	ed e7       	ldi	r30, 0x7D	; 125
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	80 61       	ori	r24, 0x10	; 16
    119c:	80 83       	st	Z, r24
		TIFR |= (1<<ICF1);
    119e:	88 b7       	in	r24, 0x38	; 56
    11a0:	88 60       	ori	r24, 0x08	; 8
    11a2:	88 bf       	out	0x38, r24	; 56
		
		
		sei();
    11a4:	78 94       	sei
    11a6:	08 95       	ret

000011a8 <timer_enable>:
		
}

void timer_enable(){
	//CS3{2:0}   = 101  prescaler set to 1024
	TCCR3B |=  (1<<CS32) | (1<<CS30);
    11a8:	ea e8       	ldi	r30, 0x8A	; 138
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	85 60       	ori	r24, 0x05	; 5
    11b0:	80 83       	st	Z, r24
	TCCR3B &= ~(1<<CS31);
    11b2:	80 81       	ld	r24, Z
    11b4:	8d 7f       	andi	r24, 0xFD	; 253
    11b6:	80 83       	st	Z, r24
    11b8:	08 95       	ret

000011ba <timer_disable>:
}

void timer_disable(){
	TCCR3B &= ~((1<<CS30) | (1<<CS31) | (1<<CS32));
    11ba:	ea e8       	ldi	r30, 0x8A	; 138
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	88 7f       	andi	r24, 0xF8	; 248
    11c2:	80 83       	st	Z, r24
    11c4:	08 95       	ret

000011c6 <timer_toggle>:
}

void timer_toggle(){
	if((TCCR3B & 0x07) == 0x00){
    11c6:	80 91 8a 00 	lds	r24, 0x008A
    11ca:	87 70       	andi	r24, 0x07	; 7
    11cc:	19 f4       	brne	.+6      	; 0x11d4 <timer_toggle+0xe>
		timer_enable();
    11ce:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <timer_enable>
    11d2:	08 95       	ret
	} else {
		timer_disable();
    11d4:	0e 94 dd 08 	call	0x11ba	; 0x11ba <timer_disable>
    11d8:	08 95       	ret

000011da <__vector_7>:
	}
}

ISR(TIMER3_COMPA_vect){
    11da:	1f 92       	push	r1
    11dc:	0f 92       	push	r0
    11de:	0f b6       	in	r0, 0x3f	; 63
    11e0:	0f 92       	push	r0
    11e2:	11 24       	eor	r1, r1
    11e4:	2f 93       	push	r18
    11e6:	3f 93       	push	r19
    11e8:	4f 93       	push	r20
    11ea:	5f 93       	push	r21
    11ec:	6f 93       	push	r22
    11ee:	7f 93       	push	r23
    11f0:	8f 93       	push	r24
    11f2:	9f 93       	push	r25
    11f4:	af 93       	push	r26
    11f6:	bf 93       	push	r27
    11f8:	ef 93       	push	r30
    11fa:	ff 93       	push	r31
	can_joystick_transmit();
    11fc:	0e 94 de 02 	call	0x5bc	; 0x5bc <can_joystick_transmit>
	
	if(button_rising_edge_detect(2)){
    1200:	82 e0       	ldi	r24, 0x02	; 2
    1202:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <button_rising_edge_detect>
    1206:	88 23       	and	r24, r24
    1208:	29 f0       	breq	.+10     	; 0x1214 <__vector_7+0x3a>
		can_button_transmit(2);
    120a:	82 e0       	ldi	r24, 0x02	; 2
    120c:	0e 94 27 03 	call	0x64e	; 0x64e <can_button_transmit>
		flash_diode();
    1210:	0e 94 ab 08 	call	0x1156	; 0x1156 <flash_diode>
	}
	
	can_handle_message();
    1214:	0e 94 37 03 	call	0x66e	; 0x66e <can_handle_message>
    1218:	ff 91       	pop	r31
    121a:	ef 91       	pop	r30
    121c:	bf 91       	pop	r27
    121e:	af 91       	pop	r26
    1220:	9f 91       	pop	r25
    1222:	8f 91       	pop	r24
    1224:	7f 91       	pop	r23
    1226:	6f 91       	pop	r22
    1228:	5f 91       	pop	r21
    122a:	4f 91       	pop	r20
    122c:	3f 91       	pop	r19
    122e:	2f 91       	pop	r18
    1230:	0f 90       	pop	r0
    1232:	0f be       	out	0x3f, r0	; 63
    1234:	0f 90       	pop	r0
    1236:	1f 90       	pop	r1
    1238:	18 95       	reti

0000123a <malloc>:
    123a:	cf 93       	push	r28
    123c:	df 93       	push	r29
    123e:	82 30       	cpi	r24, 0x02	; 2
    1240:	91 05       	cpc	r25, r1
    1242:	10 f4       	brcc	.+4      	; 0x1248 <malloc+0xe>
    1244:	82 e0       	ldi	r24, 0x02	; 2
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	e0 91 d3 03 	lds	r30, 0x03D3
    124c:	f0 91 d4 03 	lds	r31, 0x03D4
    1250:	20 e0       	ldi	r18, 0x00	; 0
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	a0 e0       	ldi	r26, 0x00	; 0
    1256:	b0 e0       	ldi	r27, 0x00	; 0
    1258:	30 97       	sbiw	r30, 0x00	; 0
    125a:	39 f1       	breq	.+78     	; 0x12aa <malloc+0x70>
    125c:	40 81       	ld	r20, Z
    125e:	51 81       	ldd	r21, Z+1	; 0x01
    1260:	48 17       	cp	r20, r24
    1262:	59 07       	cpc	r21, r25
    1264:	b8 f0       	brcs	.+46     	; 0x1294 <malloc+0x5a>
    1266:	48 17       	cp	r20, r24
    1268:	59 07       	cpc	r21, r25
    126a:	71 f4       	brne	.+28     	; 0x1288 <malloc+0x4e>
    126c:	82 81       	ldd	r24, Z+2	; 0x02
    126e:	93 81       	ldd	r25, Z+3	; 0x03
    1270:	10 97       	sbiw	r26, 0x00	; 0
    1272:	29 f0       	breq	.+10     	; 0x127e <malloc+0x44>
    1274:	13 96       	adiw	r26, 0x03	; 3
    1276:	9c 93       	st	X, r25
    1278:	8e 93       	st	-X, r24
    127a:	12 97       	sbiw	r26, 0x02	; 2
    127c:	2c c0       	rjmp	.+88     	; 0x12d6 <malloc+0x9c>
    127e:	90 93 d4 03 	sts	0x03D4, r25
    1282:	80 93 d3 03 	sts	0x03D3, r24
    1286:	27 c0       	rjmp	.+78     	; 0x12d6 <malloc+0x9c>
    1288:	21 15       	cp	r18, r1
    128a:	31 05       	cpc	r19, r1
    128c:	31 f0       	breq	.+12     	; 0x129a <malloc+0x60>
    128e:	42 17       	cp	r20, r18
    1290:	53 07       	cpc	r21, r19
    1292:	18 f0       	brcs	.+6      	; 0x129a <malloc+0x60>
    1294:	a9 01       	movw	r20, r18
    1296:	db 01       	movw	r26, r22
    1298:	01 c0       	rjmp	.+2      	; 0x129c <malloc+0x62>
    129a:	ef 01       	movw	r28, r30
    129c:	9a 01       	movw	r18, r20
    129e:	bd 01       	movw	r22, r26
    12a0:	df 01       	movw	r26, r30
    12a2:	02 80       	ldd	r0, Z+2	; 0x02
    12a4:	f3 81       	ldd	r31, Z+3	; 0x03
    12a6:	e0 2d       	mov	r30, r0
    12a8:	d7 cf       	rjmp	.-82     	; 0x1258 <malloc+0x1e>
    12aa:	21 15       	cp	r18, r1
    12ac:	31 05       	cpc	r19, r1
    12ae:	f9 f0       	breq	.+62     	; 0x12ee <malloc+0xb4>
    12b0:	28 1b       	sub	r18, r24
    12b2:	39 0b       	sbc	r19, r25
    12b4:	24 30       	cpi	r18, 0x04	; 4
    12b6:	31 05       	cpc	r19, r1
    12b8:	80 f4       	brcc	.+32     	; 0x12da <malloc+0xa0>
    12ba:	8a 81       	ldd	r24, Y+2	; 0x02
    12bc:	9b 81       	ldd	r25, Y+3	; 0x03
    12be:	61 15       	cp	r22, r1
    12c0:	71 05       	cpc	r23, r1
    12c2:	21 f0       	breq	.+8      	; 0x12cc <malloc+0x92>
    12c4:	fb 01       	movw	r30, r22
    12c6:	93 83       	std	Z+3, r25	; 0x03
    12c8:	82 83       	std	Z+2, r24	; 0x02
    12ca:	04 c0       	rjmp	.+8      	; 0x12d4 <malloc+0x9a>
    12cc:	90 93 d4 03 	sts	0x03D4, r25
    12d0:	80 93 d3 03 	sts	0x03D3, r24
    12d4:	fe 01       	movw	r30, r28
    12d6:	32 96       	adiw	r30, 0x02	; 2
    12d8:	44 c0       	rjmp	.+136    	; 0x1362 <malloc+0x128>
    12da:	fe 01       	movw	r30, r28
    12dc:	e2 0f       	add	r30, r18
    12de:	f3 1f       	adc	r31, r19
    12e0:	81 93       	st	Z+, r24
    12e2:	91 93       	st	Z+, r25
    12e4:	22 50       	subi	r18, 0x02	; 2
    12e6:	31 09       	sbc	r19, r1
    12e8:	39 83       	std	Y+1, r19	; 0x01
    12ea:	28 83       	st	Y, r18
    12ec:	3a c0       	rjmp	.+116    	; 0x1362 <malloc+0x128>
    12ee:	20 91 d1 03 	lds	r18, 0x03D1
    12f2:	30 91 d2 03 	lds	r19, 0x03D2
    12f6:	23 2b       	or	r18, r19
    12f8:	41 f4       	brne	.+16     	; 0x130a <malloc+0xd0>
    12fa:	20 91 02 01 	lds	r18, 0x0102
    12fe:	30 91 03 01 	lds	r19, 0x0103
    1302:	30 93 d2 03 	sts	0x03D2, r19
    1306:	20 93 d1 03 	sts	0x03D1, r18
    130a:	20 91 00 01 	lds	r18, 0x0100
    130e:	30 91 01 01 	lds	r19, 0x0101
    1312:	21 15       	cp	r18, r1
    1314:	31 05       	cpc	r19, r1
    1316:	41 f4       	brne	.+16     	; 0x1328 <malloc+0xee>
    1318:	2d b7       	in	r18, 0x3d	; 61
    131a:	3e b7       	in	r19, 0x3e	; 62
    131c:	40 91 04 01 	lds	r20, 0x0104
    1320:	50 91 05 01 	lds	r21, 0x0105
    1324:	24 1b       	sub	r18, r20
    1326:	35 0b       	sbc	r19, r21
    1328:	e0 91 d1 03 	lds	r30, 0x03D1
    132c:	f0 91 d2 03 	lds	r31, 0x03D2
    1330:	e2 17       	cp	r30, r18
    1332:	f3 07       	cpc	r31, r19
    1334:	a0 f4       	brcc	.+40     	; 0x135e <malloc+0x124>
    1336:	2e 1b       	sub	r18, r30
    1338:	3f 0b       	sbc	r19, r31
    133a:	28 17       	cp	r18, r24
    133c:	39 07       	cpc	r19, r25
    133e:	78 f0       	brcs	.+30     	; 0x135e <malloc+0x124>
    1340:	ac 01       	movw	r20, r24
    1342:	4e 5f       	subi	r20, 0xFE	; 254
    1344:	5f 4f       	sbci	r21, 0xFF	; 255
    1346:	24 17       	cp	r18, r20
    1348:	35 07       	cpc	r19, r21
    134a:	48 f0       	brcs	.+18     	; 0x135e <malloc+0x124>
    134c:	4e 0f       	add	r20, r30
    134e:	5f 1f       	adc	r21, r31
    1350:	50 93 d2 03 	sts	0x03D2, r21
    1354:	40 93 d1 03 	sts	0x03D1, r20
    1358:	81 93       	st	Z+, r24
    135a:	91 93       	st	Z+, r25
    135c:	02 c0       	rjmp	.+4      	; 0x1362 <malloc+0x128>
    135e:	e0 e0       	ldi	r30, 0x00	; 0
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	cf 01       	movw	r24, r30
    1364:	df 91       	pop	r29
    1366:	cf 91       	pop	r28
    1368:	08 95       	ret

0000136a <free>:
    136a:	cf 93       	push	r28
    136c:	df 93       	push	r29
    136e:	00 97       	sbiw	r24, 0x00	; 0
    1370:	09 f4       	brne	.+2      	; 0x1374 <free+0xa>
    1372:	87 c0       	rjmp	.+270    	; 0x1482 <free+0x118>
    1374:	fc 01       	movw	r30, r24
    1376:	32 97       	sbiw	r30, 0x02	; 2
    1378:	13 82       	std	Z+3, r1	; 0x03
    137a:	12 82       	std	Z+2, r1	; 0x02
    137c:	c0 91 d3 03 	lds	r28, 0x03D3
    1380:	d0 91 d4 03 	lds	r29, 0x03D4
    1384:	20 97       	sbiw	r28, 0x00	; 0
    1386:	81 f4       	brne	.+32     	; 0x13a8 <free+0x3e>
    1388:	20 81       	ld	r18, Z
    138a:	31 81       	ldd	r19, Z+1	; 0x01
    138c:	28 0f       	add	r18, r24
    138e:	39 1f       	adc	r19, r25
    1390:	80 91 d1 03 	lds	r24, 0x03D1
    1394:	90 91 d2 03 	lds	r25, 0x03D2
    1398:	82 17       	cp	r24, r18
    139a:	93 07       	cpc	r25, r19
    139c:	79 f5       	brne	.+94     	; 0x13fc <free+0x92>
    139e:	f0 93 d2 03 	sts	0x03D2, r31
    13a2:	e0 93 d1 03 	sts	0x03D1, r30
    13a6:	6d c0       	rjmp	.+218    	; 0x1482 <free+0x118>
    13a8:	de 01       	movw	r26, r28
    13aa:	20 e0       	ldi	r18, 0x00	; 0
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	ae 17       	cp	r26, r30
    13b0:	bf 07       	cpc	r27, r31
    13b2:	50 f4       	brcc	.+20     	; 0x13c8 <free+0x5e>
    13b4:	12 96       	adiw	r26, 0x02	; 2
    13b6:	4d 91       	ld	r20, X+
    13b8:	5c 91       	ld	r21, X
    13ba:	13 97       	sbiw	r26, 0x03	; 3
    13bc:	9d 01       	movw	r18, r26
    13be:	41 15       	cp	r20, r1
    13c0:	51 05       	cpc	r21, r1
    13c2:	09 f1       	breq	.+66     	; 0x1406 <free+0x9c>
    13c4:	da 01       	movw	r26, r20
    13c6:	f3 cf       	rjmp	.-26     	; 0x13ae <free+0x44>
    13c8:	b3 83       	std	Z+3, r27	; 0x03
    13ca:	a2 83       	std	Z+2, r26	; 0x02
    13cc:	40 81       	ld	r20, Z
    13ce:	51 81       	ldd	r21, Z+1	; 0x01
    13d0:	84 0f       	add	r24, r20
    13d2:	95 1f       	adc	r25, r21
    13d4:	8a 17       	cp	r24, r26
    13d6:	9b 07       	cpc	r25, r27
    13d8:	71 f4       	brne	.+28     	; 0x13f6 <free+0x8c>
    13da:	8d 91       	ld	r24, X+
    13dc:	9c 91       	ld	r25, X
    13de:	11 97       	sbiw	r26, 0x01	; 1
    13e0:	84 0f       	add	r24, r20
    13e2:	95 1f       	adc	r25, r21
    13e4:	02 96       	adiw	r24, 0x02	; 2
    13e6:	91 83       	std	Z+1, r25	; 0x01
    13e8:	80 83       	st	Z, r24
    13ea:	12 96       	adiw	r26, 0x02	; 2
    13ec:	8d 91       	ld	r24, X+
    13ee:	9c 91       	ld	r25, X
    13f0:	13 97       	sbiw	r26, 0x03	; 3
    13f2:	93 83       	std	Z+3, r25	; 0x03
    13f4:	82 83       	std	Z+2, r24	; 0x02
    13f6:	21 15       	cp	r18, r1
    13f8:	31 05       	cpc	r19, r1
    13fa:	29 f4       	brne	.+10     	; 0x1406 <free+0x9c>
    13fc:	f0 93 d4 03 	sts	0x03D4, r31
    1400:	e0 93 d3 03 	sts	0x03D3, r30
    1404:	3e c0       	rjmp	.+124    	; 0x1482 <free+0x118>
    1406:	d9 01       	movw	r26, r18
    1408:	13 96       	adiw	r26, 0x03	; 3
    140a:	fc 93       	st	X, r31
    140c:	ee 93       	st	-X, r30
    140e:	12 97       	sbiw	r26, 0x02	; 2
    1410:	4d 91       	ld	r20, X+
    1412:	5d 91       	ld	r21, X+
    1414:	a4 0f       	add	r26, r20
    1416:	b5 1f       	adc	r27, r21
    1418:	ea 17       	cp	r30, r26
    141a:	fb 07       	cpc	r31, r27
    141c:	79 f4       	brne	.+30     	; 0x143c <free+0xd2>
    141e:	80 81       	ld	r24, Z
    1420:	91 81       	ldd	r25, Z+1	; 0x01
    1422:	84 0f       	add	r24, r20
    1424:	95 1f       	adc	r25, r21
    1426:	02 96       	adiw	r24, 0x02	; 2
    1428:	d9 01       	movw	r26, r18
    142a:	11 96       	adiw	r26, 0x01	; 1
    142c:	9c 93       	st	X, r25
    142e:	8e 93       	st	-X, r24
    1430:	82 81       	ldd	r24, Z+2	; 0x02
    1432:	93 81       	ldd	r25, Z+3	; 0x03
    1434:	13 96       	adiw	r26, 0x03	; 3
    1436:	9c 93       	st	X, r25
    1438:	8e 93       	st	-X, r24
    143a:	12 97       	sbiw	r26, 0x02	; 2
    143c:	e0 e0       	ldi	r30, 0x00	; 0
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	9b 81       	ldd	r25, Y+3	; 0x03
    1444:	00 97       	sbiw	r24, 0x00	; 0
    1446:	19 f0       	breq	.+6      	; 0x144e <free+0xe4>
    1448:	fe 01       	movw	r30, r28
    144a:	ec 01       	movw	r28, r24
    144c:	f9 cf       	rjmp	.-14     	; 0x1440 <free+0xd6>
    144e:	ce 01       	movw	r24, r28
    1450:	02 96       	adiw	r24, 0x02	; 2
    1452:	28 81       	ld	r18, Y
    1454:	39 81       	ldd	r19, Y+1	; 0x01
    1456:	82 0f       	add	r24, r18
    1458:	93 1f       	adc	r25, r19
    145a:	20 91 d1 03 	lds	r18, 0x03D1
    145e:	30 91 d2 03 	lds	r19, 0x03D2
    1462:	28 17       	cp	r18, r24
    1464:	39 07       	cpc	r19, r25
    1466:	69 f4       	brne	.+26     	; 0x1482 <free+0x118>
    1468:	30 97       	sbiw	r30, 0x00	; 0
    146a:	29 f4       	brne	.+10     	; 0x1476 <free+0x10c>
    146c:	10 92 d4 03 	sts	0x03D4, r1
    1470:	10 92 d3 03 	sts	0x03D3, r1
    1474:	02 c0       	rjmp	.+4      	; 0x147a <free+0x110>
    1476:	13 82       	std	Z+3, r1	; 0x03
    1478:	12 82       	std	Z+2, r1	; 0x02
    147a:	d0 93 d2 03 	sts	0x03D2, r29
    147e:	c0 93 d1 03 	sts	0x03D1, r28
    1482:	df 91       	pop	r29
    1484:	cf 91       	pop	r28
    1486:	08 95       	ret

00001488 <do_rand>:
    1488:	8f 92       	push	r8
    148a:	9f 92       	push	r9
    148c:	af 92       	push	r10
    148e:	bf 92       	push	r11
    1490:	cf 92       	push	r12
    1492:	df 92       	push	r13
    1494:	ef 92       	push	r14
    1496:	ff 92       	push	r15
    1498:	cf 93       	push	r28
    149a:	df 93       	push	r29
    149c:	ec 01       	movw	r28, r24
    149e:	68 81       	ld	r22, Y
    14a0:	79 81       	ldd	r23, Y+1	; 0x01
    14a2:	8a 81       	ldd	r24, Y+2	; 0x02
    14a4:	9b 81       	ldd	r25, Y+3	; 0x03
    14a6:	61 15       	cp	r22, r1
    14a8:	71 05       	cpc	r23, r1
    14aa:	81 05       	cpc	r24, r1
    14ac:	91 05       	cpc	r25, r1
    14ae:	21 f4       	brne	.+8      	; 0x14b8 <do_rand+0x30>
    14b0:	64 e2       	ldi	r22, 0x24	; 36
    14b2:	79 ed       	ldi	r23, 0xD9	; 217
    14b4:	8b e5       	ldi	r24, 0x5B	; 91
    14b6:	97 e0       	ldi	r25, 0x07	; 7
    14b8:	2d e1       	ldi	r18, 0x1D	; 29
    14ba:	33 ef       	ldi	r19, 0xF3	; 243
    14bc:	41 e0       	ldi	r20, 0x01	; 1
    14be:	50 e0       	ldi	r21, 0x00	; 0
    14c0:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <__divmodsi4>
    14c4:	49 01       	movw	r8, r18
    14c6:	5a 01       	movw	r10, r20
    14c8:	9b 01       	movw	r18, r22
    14ca:	ac 01       	movw	r20, r24
    14cc:	a7 ea       	ldi	r26, 0xA7	; 167
    14ce:	b1 e4       	ldi	r27, 0x41	; 65
    14d0:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <__muluhisi3>
    14d4:	6b 01       	movw	r12, r22
    14d6:	7c 01       	movw	r14, r24
    14d8:	ac ee       	ldi	r26, 0xEC	; 236
    14da:	b4 ef       	ldi	r27, 0xF4	; 244
    14dc:	a5 01       	movw	r20, r10
    14de:	94 01       	movw	r18, r8
    14e0:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <__mulohisi3>
    14e4:	c6 0e       	add	r12, r22
    14e6:	d7 1e       	adc	r13, r23
    14e8:	e8 1e       	adc	r14, r24
    14ea:	f9 1e       	adc	r15, r25
    14ec:	f7 fe       	sbrs	r15, 7
    14ee:	06 c0       	rjmp	.+12     	; 0x14fc <do_rand+0x74>
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	c8 1a       	sub	r12, r24
    14f4:	d1 08       	sbc	r13, r1
    14f6:	e1 08       	sbc	r14, r1
    14f8:	80 e8       	ldi	r24, 0x80	; 128
    14fa:	f8 0a       	sbc	r15, r24
    14fc:	c8 82       	st	Y, r12
    14fe:	d9 82       	std	Y+1, r13	; 0x01
    1500:	ea 82       	std	Y+2, r14	; 0x02
    1502:	fb 82       	std	Y+3, r15	; 0x03
    1504:	c6 01       	movw	r24, r12
    1506:	9f 77       	andi	r25, 0x7F	; 127
    1508:	df 91       	pop	r29
    150a:	cf 91       	pop	r28
    150c:	ff 90       	pop	r15
    150e:	ef 90       	pop	r14
    1510:	df 90       	pop	r13
    1512:	cf 90       	pop	r12
    1514:	bf 90       	pop	r11
    1516:	af 90       	pop	r10
    1518:	9f 90       	pop	r9
    151a:	8f 90       	pop	r8
    151c:	08 95       	ret

0000151e <rand_r>:
    151e:	0e 94 44 0a 	call	0x1488	; 0x1488 <do_rand>
    1522:	08 95       	ret

00001524 <rand>:
    1524:	86 e0       	ldi	r24, 0x06	; 6
    1526:	91 e0       	ldi	r25, 0x01	; 1
    1528:	0e 94 44 0a 	call	0x1488	; 0x1488 <do_rand>
    152c:	08 95       	ret

0000152e <srand>:
    152e:	a0 e0       	ldi	r26, 0x00	; 0
    1530:	b0 e0       	ldi	r27, 0x00	; 0
    1532:	80 93 06 01 	sts	0x0106, r24
    1536:	90 93 07 01 	sts	0x0107, r25
    153a:	a0 93 08 01 	sts	0x0108, r26
    153e:	b0 93 09 01 	sts	0x0109, r27
    1542:	08 95       	ret

00001544 <printf>:
    1544:	a0 e0       	ldi	r26, 0x00	; 0
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	e8 ea       	ldi	r30, 0xA8	; 168
    154a:	fa e0       	ldi	r31, 0x0A	; 10
    154c:	0c 94 9d 0d 	jmp	0x1b3a	; 0x1b3a <__prologue_saves__+0x20>
    1550:	fe 01       	movw	r30, r28
    1552:	35 96       	adiw	r30, 0x05	; 5
    1554:	61 91       	ld	r22, Z+
    1556:	71 91       	ld	r23, Z+
    1558:	af 01       	movw	r20, r30
    155a:	80 91 d7 03 	lds	r24, 0x03D7
    155e:	90 91 d8 03 	lds	r25, 0x03D8
    1562:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <vfprintf>
    1566:	e2 e0       	ldi	r30, 0x02	; 2
    1568:	0c 94 b9 0d 	jmp	0x1b72	; 0x1b72 <__epilogue_restores__+0x20>

0000156c <puts>:
    156c:	0f 93       	push	r16
    156e:	1f 93       	push	r17
    1570:	cf 93       	push	r28
    1572:	df 93       	push	r29
    1574:	e0 91 d7 03 	lds	r30, 0x03D7
    1578:	f0 91 d8 03 	lds	r31, 0x03D8
    157c:	23 81       	ldd	r18, Z+3	; 0x03
    157e:	21 ff       	sbrs	r18, 1
    1580:	1b c0       	rjmp	.+54     	; 0x15b8 <puts+0x4c>
    1582:	ec 01       	movw	r28, r24
    1584:	00 e0       	ldi	r16, 0x00	; 0
    1586:	10 e0       	ldi	r17, 0x00	; 0
    1588:	89 91       	ld	r24, Y+
    158a:	60 91 d7 03 	lds	r22, 0x03D7
    158e:	70 91 d8 03 	lds	r23, 0x03D8
    1592:	db 01       	movw	r26, r22
    1594:	18 96       	adiw	r26, 0x08	; 8
    1596:	ed 91       	ld	r30, X+
    1598:	fc 91       	ld	r31, X
    159a:	19 97       	sbiw	r26, 0x09	; 9
    159c:	88 23       	and	r24, r24
    159e:	31 f0       	breq	.+12     	; 0x15ac <puts+0x40>
    15a0:	09 95       	icall
    15a2:	89 2b       	or	r24, r25
    15a4:	89 f3       	breq	.-30     	; 0x1588 <puts+0x1c>
    15a6:	0f ef       	ldi	r16, 0xFF	; 255
    15a8:	1f ef       	ldi	r17, 0xFF	; 255
    15aa:	ee cf       	rjmp	.-36     	; 0x1588 <puts+0x1c>
    15ac:	8a e0       	ldi	r24, 0x0A	; 10
    15ae:	09 95       	icall
    15b0:	89 2b       	or	r24, r25
    15b2:	11 f4       	brne	.+4      	; 0x15b8 <puts+0x4c>
    15b4:	c8 01       	movw	r24, r16
    15b6:	02 c0       	rjmp	.+4      	; 0x15bc <puts+0x50>
    15b8:	8f ef       	ldi	r24, 0xFF	; 255
    15ba:	9f ef       	ldi	r25, 0xFF	; 255
    15bc:	df 91       	pop	r29
    15be:	cf 91       	pop	r28
    15c0:	1f 91       	pop	r17
    15c2:	0f 91       	pop	r16
    15c4:	08 95       	ret

000015c6 <vfprintf>:
    15c6:	ac e0       	ldi	r26, 0x0C	; 12
    15c8:	b0 e0       	ldi	r27, 0x00	; 0
    15ca:	e9 ee       	ldi	r30, 0xE9	; 233
    15cc:	fa e0       	ldi	r31, 0x0A	; 10
    15ce:	0c 94 8d 0d 	jmp	0x1b1a	; 0x1b1a <__prologue_saves__>
    15d2:	7c 01       	movw	r14, r24
    15d4:	6b 01       	movw	r12, r22
    15d6:	8a 01       	movw	r16, r20
    15d8:	fc 01       	movw	r30, r24
    15da:	17 82       	std	Z+7, r1	; 0x07
    15dc:	16 82       	std	Z+6, r1	; 0x06
    15de:	83 81       	ldd	r24, Z+3	; 0x03
    15e0:	81 ff       	sbrs	r24, 1
    15e2:	bd c1       	rjmp	.+890    	; 0x195e <vfprintf+0x398>
    15e4:	ce 01       	movw	r24, r28
    15e6:	01 96       	adiw	r24, 0x01	; 1
    15e8:	4c 01       	movw	r8, r24
    15ea:	f7 01       	movw	r30, r14
    15ec:	93 81       	ldd	r25, Z+3	; 0x03
    15ee:	f6 01       	movw	r30, r12
    15f0:	93 fd       	sbrc	r25, 3
    15f2:	85 91       	lpm	r24, Z+
    15f4:	93 ff       	sbrs	r25, 3
    15f6:	81 91       	ld	r24, Z+
    15f8:	6f 01       	movw	r12, r30
    15fa:	88 23       	and	r24, r24
    15fc:	09 f4       	brne	.+2      	; 0x1600 <vfprintf+0x3a>
    15fe:	ab c1       	rjmp	.+854    	; 0x1956 <vfprintf+0x390>
    1600:	85 32       	cpi	r24, 0x25	; 37
    1602:	39 f4       	brne	.+14     	; 0x1612 <vfprintf+0x4c>
    1604:	93 fd       	sbrc	r25, 3
    1606:	85 91       	lpm	r24, Z+
    1608:	93 ff       	sbrs	r25, 3
    160a:	81 91       	ld	r24, Z+
    160c:	6f 01       	movw	r12, r30
    160e:	85 32       	cpi	r24, 0x25	; 37
    1610:	29 f4       	brne	.+10     	; 0x161c <vfprintf+0x56>
    1612:	b7 01       	movw	r22, r14
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	0e 94 cb 0c 	call	0x1996	; 0x1996 <fputc>
    161a:	e7 cf       	rjmp	.-50     	; 0x15ea <vfprintf+0x24>
    161c:	51 2c       	mov	r5, r1
    161e:	31 2c       	mov	r3, r1
    1620:	20 e0       	ldi	r18, 0x00	; 0
    1622:	20 32       	cpi	r18, 0x20	; 32
    1624:	a0 f4       	brcc	.+40     	; 0x164e <vfprintf+0x88>
    1626:	8b 32       	cpi	r24, 0x2B	; 43
    1628:	69 f0       	breq	.+26     	; 0x1644 <vfprintf+0x7e>
    162a:	30 f4       	brcc	.+12     	; 0x1638 <vfprintf+0x72>
    162c:	80 32       	cpi	r24, 0x20	; 32
    162e:	59 f0       	breq	.+22     	; 0x1646 <vfprintf+0x80>
    1630:	83 32       	cpi	r24, 0x23	; 35
    1632:	69 f4       	brne	.+26     	; 0x164e <vfprintf+0x88>
    1634:	20 61       	ori	r18, 0x10	; 16
    1636:	2c c0       	rjmp	.+88     	; 0x1690 <vfprintf+0xca>
    1638:	8d 32       	cpi	r24, 0x2D	; 45
    163a:	39 f0       	breq	.+14     	; 0x164a <vfprintf+0x84>
    163c:	80 33       	cpi	r24, 0x30	; 48
    163e:	39 f4       	brne	.+14     	; 0x164e <vfprintf+0x88>
    1640:	21 60       	ori	r18, 0x01	; 1
    1642:	26 c0       	rjmp	.+76     	; 0x1690 <vfprintf+0xca>
    1644:	22 60       	ori	r18, 0x02	; 2
    1646:	24 60       	ori	r18, 0x04	; 4
    1648:	23 c0       	rjmp	.+70     	; 0x1690 <vfprintf+0xca>
    164a:	28 60       	ori	r18, 0x08	; 8
    164c:	21 c0       	rjmp	.+66     	; 0x1690 <vfprintf+0xca>
    164e:	27 fd       	sbrc	r18, 7
    1650:	27 c0       	rjmp	.+78     	; 0x16a0 <vfprintf+0xda>
    1652:	30 ed       	ldi	r19, 0xD0	; 208
    1654:	38 0f       	add	r19, r24
    1656:	3a 30       	cpi	r19, 0x0A	; 10
    1658:	78 f4       	brcc	.+30     	; 0x1678 <vfprintf+0xb2>
    165a:	26 ff       	sbrs	r18, 6
    165c:	06 c0       	rjmp	.+12     	; 0x166a <vfprintf+0xa4>
    165e:	fa e0       	ldi	r31, 0x0A	; 10
    1660:	5f 9e       	mul	r5, r31
    1662:	30 0d       	add	r19, r0
    1664:	11 24       	eor	r1, r1
    1666:	53 2e       	mov	r5, r19
    1668:	13 c0       	rjmp	.+38     	; 0x1690 <vfprintf+0xca>
    166a:	8a e0       	ldi	r24, 0x0A	; 10
    166c:	38 9e       	mul	r3, r24
    166e:	30 0d       	add	r19, r0
    1670:	11 24       	eor	r1, r1
    1672:	33 2e       	mov	r3, r19
    1674:	20 62       	ori	r18, 0x20	; 32
    1676:	0c c0       	rjmp	.+24     	; 0x1690 <vfprintf+0xca>
    1678:	8e 32       	cpi	r24, 0x2E	; 46
    167a:	21 f4       	brne	.+8      	; 0x1684 <vfprintf+0xbe>
    167c:	26 fd       	sbrc	r18, 6
    167e:	6b c1       	rjmp	.+726    	; 0x1956 <vfprintf+0x390>
    1680:	20 64       	ori	r18, 0x40	; 64
    1682:	06 c0       	rjmp	.+12     	; 0x1690 <vfprintf+0xca>
    1684:	8c 36       	cpi	r24, 0x6C	; 108
    1686:	11 f4       	brne	.+4      	; 0x168c <vfprintf+0xc6>
    1688:	20 68       	ori	r18, 0x80	; 128
    168a:	02 c0       	rjmp	.+4      	; 0x1690 <vfprintf+0xca>
    168c:	88 36       	cpi	r24, 0x68	; 104
    168e:	41 f4       	brne	.+16     	; 0x16a0 <vfprintf+0xda>
    1690:	f6 01       	movw	r30, r12
    1692:	93 fd       	sbrc	r25, 3
    1694:	85 91       	lpm	r24, Z+
    1696:	93 ff       	sbrs	r25, 3
    1698:	81 91       	ld	r24, Z+
    169a:	6f 01       	movw	r12, r30
    169c:	81 11       	cpse	r24, r1
    169e:	c1 cf       	rjmp	.-126    	; 0x1622 <vfprintf+0x5c>
    16a0:	98 2f       	mov	r25, r24
    16a2:	9f 7d       	andi	r25, 0xDF	; 223
    16a4:	95 54       	subi	r25, 0x45	; 69
    16a6:	93 30       	cpi	r25, 0x03	; 3
    16a8:	28 f4       	brcc	.+10     	; 0x16b4 <vfprintf+0xee>
    16aa:	0c 5f       	subi	r16, 0xFC	; 252
    16ac:	1f 4f       	sbci	r17, 0xFF	; 255
    16ae:	ff e3       	ldi	r31, 0x3F	; 63
    16b0:	f9 83       	std	Y+1, r31	; 0x01
    16b2:	0d c0       	rjmp	.+26     	; 0x16ce <vfprintf+0x108>
    16b4:	83 36       	cpi	r24, 0x63	; 99
    16b6:	31 f0       	breq	.+12     	; 0x16c4 <vfprintf+0xfe>
    16b8:	83 37       	cpi	r24, 0x73	; 115
    16ba:	71 f0       	breq	.+28     	; 0x16d8 <vfprintf+0x112>
    16bc:	83 35       	cpi	r24, 0x53	; 83
    16be:	09 f0       	breq	.+2      	; 0x16c2 <vfprintf+0xfc>
    16c0:	5b c0       	rjmp	.+182    	; 0x1778 <vfprintf+0x1b2>
    16c2:	22 c0       	rjmp	.+68     	; 0x1708 <vfprintf+0x142>
    16c4:	f8 01       	movw	r30, r16
    16c6:	80 81       	ld	r24, Z
    16c8:	89 83       	std	Y+1, r24	; 0x01
    16ca:	0e 5f       	subi	r16, 0xFE	; 254
    16cc:	1f 4f       	sbci	r17, 0xFF	; 255
    16ce:	44 24       	eor	r4, r4
    16d0:	43 94       	inc	r4
    16d2:	51 2c       	mov	r5, r1
    16d4:	54 01       	movw	r10, r8
    16d6:	15 c0       	rjmp	.+42     	; 0x1702 <vfprintf+0x13c>
    16d8:	38 01       	movw	r6, r16
    16da:	f2 e0       	ldi	r31, 0x02	; 2
    16dc:	6f 0e       	add	r6, r31
    16de:	71 1c       	adc	r7, r1
    16e0:	f8 01       	movw	r30, r16
    16e2:	a0 80       	ld	r10, Z
    16e4:	b1 80       	ldd	r11, Z+1	; 0x01
    16e6:	26 ff       	sbrs	r18, 6
    16e8:	03 c0       	rjmp	.+6      	; 0x16f0 <vfprintf+0x12a>
    16ea:	65 2d       	mov	r22, r5
    16ec:	70 e0       	ldi	r23, 0x00	; 0
    16ee:	02 c0       	rjmp	.+4      	; 0x16f4 <vfprintf+0x12e>
    16f0:	6f ef       	ldi	r22, 0xFF	; 255
    16f2:	7f ef       	ldi	r23, 0xFF	; 255
    16f4:	c5 01       	movw	r24, r10
    16f6:	2c 87       	std	Y+12, r18	; 0x0c
    16f8:	0e 94 c0 0c 	call	0x1980	; 0x1980 <strnlen>
    16fc:	2c 01       	movw	r4, r24
    16fe:	83 01       	movw	r16, r6
    1700:	2c 85       	ldd	r18, Y+12	; 0x0c
    1702:	2f 77       	andi	r18, 0x7F	; 127
    1704:	22 2e       	mov	r2, r18
    1706:	17 c0       	rjmp	.+46     	; 0x1736 <vfprintf+0x170>
    1708:	38 01       	movw	r6, r16
    170a:	f2 e0       	ldi	r31, 0x02	; 2
    170c:	6f 0e       	add	r6, r31
    170e:	71 1c       	adc	r7, r1
    1710:	f8 01       	movw	r30, r16
    1712:	a0 80       	ld	r10, Z
    1714:	b1 80       	ldd	r11, Z+1	; 0x01
    1716:	26 ff       	sbrs	r18, 6
    1718:	03 c0       	rjmp	.+6      	; 0x1720 <vfprintf+0x15a>
    171a:	65 2d       	mov	r22, r5
    171c:	70 e0       	ldi	r23, 0x00	; 0
    171e:	02 c0       	rjmp	.+4      	; 0x1724 <vfprintf+0x15e>
    1720:	6f ef       	ldi	r22, 0xFF	; 255
    1722:	7f ef       	ldi	r23, 0xFF	; 255
    1724:	c5 01       	movw	r24, r10
    1726:	2c 87       	std	Y+12, r18	; 0x0c
    1728:	0e 94 b5 0c 	call	0x196a	; 0x196a <strnlen_P>
    172c:	2c 01       	movw	r4, r24
    172e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1730:	20 68       	ori	r18, 0x80	; 128
    1732:	22 2e       	mov	r2, r18
    1734:	83 01       	movw	r16, r6
    1736:	23 fc       	sbrc	r2, 3
    1738:	1b c0       	rjmp	.+54     	; 0x1770 <vfprintf+0x1aa>
    173a:	83 2d       	mov	r24, r3
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	48 16       	cp	r4, r24
    1740:	59 06       	cpc	r5, r25
    1742:	b0 f4       	brcc	.+44     	; 0x1770 <vfprintf+0x1aa>
    1744:	b7 01       	movw	r22, r14
    1746:	80 e2       	ldi	r24, 0x20	; 32
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	0e 94 cb 0c 	call	0x1996	; 0x1996 <fputc>
    174e:	3a 94       	dec	r3
    1750:	f4 cf       	rjmp	.-24     	; 0x173a <vfprintf+0x174>
    1752:	f5 01       	movw	r30, r10
    1754:	27 fc       	sbrc	r2, 7
    1756:	85 91       	lpm	r24, Z+
    1758:	27 fe       	sbrs	r2, 7
    175a:	81 91       	ld	r24, Z+
    175c:	5f 01       	movw	r10, r30
    175e:	b7 01       	movw	r22, r14
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	0e 94 cb 0c 	call	0x1996	; 0x1996 <fputc>
    1766:	31 10       	cpse	r3, r1
    1768:	3a 94       	dec	r3
    176a:	f1 e0       	ldi	r31, 0x01	; 1
    176c:	4f 1a       	sub	r4, r31
    176e:	51 08       	sbc	r5, r1
    1770:	41 14       	cp	r4, r1
    1772:	51 04       	cpc	r5, r1
    1774:	71 f7       	brne	.-36     	; 0x1752 <vfprintf+0x18c>
    1776:	e5 c0       	rjmp	.+458    	; 0x1942 <vfprintf+0x37c>
    1778:	84 36       	cpi	r24, 0x64	; 100
    177a:	11 f0       	breq	.+4      	; 0x1780 <vfprintf+0x1ba>
    177c:	89 36       	cpi	r24, 0x69	; 105
    177e:	39 f5       	brne	.+78     	; 0x17ce <vfprintf+0x208>
    1780:	f8 01       	movw	r30, r16
    1782:	27 ff       	sbrs	r18, 7
    1784:	07 c0       	rjmp	.+14     	; 0x1794 <vfprintf+0x1ce>
    1786:	60 81       	ld	r22, Z
    1788:	71 81       	ldd	r23, Z+1	; 0x01
    178a:	82 81       	ldd	r24, Z+2	; 0x02
    178c:	93 81       	ldd	r25, Z+3	; 0x03
    178e:	0c 5f       	subi	r16, 0xFC	; 252
    1790:	1f 4f       	sbci	r17, 0xFF	; 255
    1792:	08 c0       	rjmp	.+16     	; 0x17a4 <vfprintf+0x1de>
    1794:	60 81       	ld	r22, Z
    1796:	71 81       	ldd	r23, Z+1	; 0x01
    1798:	88 27       	eor	r24, r24
    179a:	77 fd       	sbrc	r23, 7
    179c:	80 95       	com	r24
    179e:	98 2f       	mov	r25, r24
    17a0:	0e 5f       	subi	r16, 0xFE	; 254
    17a2:	1f 4f       	sbci	r17, 0xFF	; 255
    17a4:	2f 76       	andi	r18, 0x6F	; 111
    17a6:	b2 2e       	mov	r11, r18
    17a8:	97 ff       	sbrs	r25, 7
    17aa:	09 c0       	rjmp	.+18     	; 0x17be <vfprintf+0x1f8>
    17ac:	90 95       	com	r25
    17ae:	80 95       	com	r24
    17b0:	70 95       	com	r23
    17b2:	61 95       	neg	r22
    17b4:	7f 4f       	sbci	r23, 0xFF	; 255
    17b6:	8f 4f       	sbci	r24, 0xFF	; 255
    17b8:	9f 4f       	sbci	r25, 0xFF	; 255
    17ba:	20 68       	ori	r18, 0x80	; 128
    17bc:	b2 2e       	mov	r11, r18
    17be:	2a e0       	ldi	r18, 0x0A	; 10
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	a4 01       	movw	r20, r8
    17c4:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <__ultoa_invert>
    17c8:	a8 2e       	mov	r10, r24
    17ca:	a8 18       	sub	r10, r8
    17cc:	44 c0       	rjmp	.+136    	; 0x1856 <vfprintf+0x290>
    17ce:	85 37       	cpi	r24, 0x75	; 117
    17d0:	29 f4       	brne	.+10     	; 0x17dc <vfprintf+0x216>
    17d2:	2f 7e       	andi	r18, 0xEF	; 239
    17d4:	b2 2e       	mov	r11, r18
    17d6:	2a e0       	ldi	r18, 0x0A	; 10
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	25 c0       	rjmp	.+74     	; 0x1826 <vfprintf+0x260>
    17dc:	f2 2f       	mov	r31, r18
    17de:	f9 7f       	andi	r31, 0xF9	; 249
    17e0:	bf 2e       	mov	r11, r31
    17e2:	8f 36       	cpi	r24, 0x6F	; 111
    17e4:	c1 f0       	breq	.+48     	; 0x1816 <vfprintf+0x250>
    17e6:	18 f4       	brcc	.+6      	; 0x17ee <vfprintf+0x228>
    17e8:	88 35       	cpi	r24, 0x58	; 88
    17ea:	79 f0       	breq	.+30     	; 0x180a <vfprintf+0x244>
    17ec:	b4 c0       	rjmp	.+360    	; 0x1956 <vfprintf+0x390>
    17ee:	80 37       	cpi	r24, 0x70	; 112
    17f0:	19 f0       	breq	.+6      	; 0x17f8 <vfprintf+0x232>
    17f2:	88 37       	cpi	r24, 0x78	; 120
    17f4:	21 f0       	breq	.+8      	; 0x17fe <vfprintf+0x238>
    17f6:	af c0       	rjmp	.+350    	; 0x1956 <vfprintf+0x390>
    17f8:	2f 2f       	mov	r18, r31
    17fa:	20 61       	ori	r18, 0x10	; 16
    17fc:	b2 2e       	mov	r11, r18
    17fe:	b4 fe       	sbrs	r11, 4
    1800:	0d c0       	rjmp	.+26     	; 0x181c <vfprintf+0x256>
    1802:	8b 2d       	mov	r24, r11
    1804:	84 60       	ori	r24, 0x04	; 4
    1806:	b8 2e       	mov	r11, r24
    1808:	09 c0       	rjmp	.+18     	; 0x181c <vfprintf+0x256>
    180a:	24 ff       	sbrs	r18, 4
    180c:	0a c0       	rjmp	.+20     	; 0x1822 <vfprintf+0x25c>
    180e:	9f 2f       	mov	r25, r31
    1810:	96 60       	ori	r25, 0x06	; 6
    1812:	b9 2e       	mov	r11, r25
    1814:	06 c0       	rjmp	.+12     	; 0x1822 <vfprintf+0x25c>
    1816:	28 e0       	ldi	r18, 0x08	; 8
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	05 c0       	rjmp	.+10     	; 0x1826 <vfprintf+0x260>
    181c:	20 e1       	ldi	r18, 0x10	; 16
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	02 c0       	rjmp	.+4      	; 0x1826 <vfprintf+0x260>
    1822:	20 e1       	ldi	r18, 0x10	; 16
    1824:	32 e0       	ldi	r19, 0x02	; 2
    1826:	f8 01       	movw	r30, r16
    1828:	b7 fe       	sbrs	r11, 7
    182a:	07 c0       	rjmp	.+14     	; 0x183a <vfprintf+0x274>
    182c:	60 81       	ld	r22, Z
    182e:	71 81       	ldd	r23, Z+1	; 0x01
    1830:	82 81       	ldd	r24, Z+2	; 0x02
    1832:	93 81       	ldd	r25, Z+3	; 0x03
    1834:	0c 5f       	subi	r16, 0xFC	; 252
    1836:	1f 4f       	sbci	r17, 0xFF	; 255
    1838:	06 c0       	rjmp	.+12     	; 0x1846 <vfprintf+0x280>
    183a:	60 81       	ld	r22, Z
    183c:	71 81       	ldd	r23, Z+1	; 0x01
    183e:	80 e0       	ldi	r24, 0x00	; 0
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	0e 5f       	subi	r16, 0xFE	; 254
    1844:	1f 4f       	sbci	r17, 0xFF	; 255
    1846:	a4 01       	movw	r20, r8
    1848:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <__ultoa_invert>
    184c:	a8 2e       	mov	r10, r24
    184e:	a8 18       	sub	r10, r8
    1850:	fb 2d       	mov	r31, r11
    1852:	ff 77       	andi	r31, 0x7F	; 127
    1854:	bf 2e       	mov	r11, r31
    1856:	b6 fe       	sbrs	r11, 6
    1858:	0b c0       	rjmp	.+22     	; 0x1870 <vfprintf+0x2aa>
    185a:	2b 2d       	mov	r18, r11
    185c:	2e 7f       	andi	r18, 0xFE	; 254
    185e:	a5 14       	cp	r10, r5
    1860:	50 f4       	brcc	.+20     	; 0x1876 <vfprintf+0x2b0>
    1862:	b4 fe       	sbrs	r11, 4
    1864:	0a c0       	rjmp	.+20     	; 0x187a <vfprintf+0x2b4>
    1866:	b2 fc       	sbrc	r11, 2
    1868:	08 c0       	rjmp	.+16     	; 0x187a <vfprintf+0x2b4>
    186a:	2b 2d       	mov	r18, r11
    186c:	2e 7e       	andi	r18, 0xEE	; 238
    186e:	05 c0       	rjmp	.+10     	; 0x187a <vfprintf+0x2b4>
    1870:	7a 2c       	mov	r7, r10
    1872:	2b 2d       	mov	r18, r11
    1874:	03 c0       	rjmp	.+6      	; 0x187c <vfprintf+0x2b6>
    1876:	7a 2c       	mov	r7, r10
    1878:	01 c0       	rjmp	.+2      	; 0x187c <vfprintf+0x2b6>
    187a:	75 2c       	mov	r7, r5
    187c:	24 ff       	sbrs	r18, 4
    187e:	0d c0       	rjmp	.+26     	; 0x189a <vfprintf+0x2d4>
    1880:	fe 01       	movw	r30, r28
    1882:	ea 0d       	add	r30, r10
    1884:	f1 1d       	adc	r31, r1
    1886:	80 81       	ld	r24, Z
    1888:	80 33       	cpi	r24, 0x30	; 48
    188a:	11 f4       	brne	.+4      	; 0x1890 <vfprintf+0x2ca>
    188c:	29 7e       	andi	r18, 0xE9	; 233
    188e:	09 c0       	rjmp	.+18     	; 0x18a2 <vfprintf+0x2dc>
    1890:	22 ff       	sbrs	r18, 2
    1892:	06 c0       	rjmp	.+12     	; 0x18a0 <vfprintf+0x2da>
    1894:	73 94       	inc	r7
    1896:	73 94       	inc	r7
    1898:	04 c0       	rjmp	.+8      	; 0x18a2 <vfprintf+0x2dc>
    189a:	82 2f       	mov	r24, r18
    189c:	86 78       	andi	r24, 0x86	; 134
    189e:	09 f0       	breq	.+2      	; 0x18a2 <vfprintf+0x2dc>
    18a0:	73 94       	inc	r7
    18a2:	23 fd       	sbrc	r18, 3
    18a4:	13 c0       	rjmp	.+38     	; 0x18cc <vfprintf+0x306>
    18a6:	20 ff       	sbrs	r18, 0
    18a8:	06 c0       	rjmp	.+12     	; 0x18b6 <vfprintf+0x2f0>
    18aa:	5a 2c       	mov	r5, r10
    18ac:	73 14       	cp	r7, r3
    18ae:	18 f4       	brcc	.+6      	; 0x18b6 <vfprintf+0x2f0>
    18b0:	53 0c       	add	r5, r3
    18b2:	57 18       	sub	r5, r7
    18b4:	73 2c       	mov	r7, r3
    18b6:	73 14       	cp	r7, r3
    18b8:	68 f4       	brcc	.+26     	; 0x18d4 <vfprintf+0x30e>
    18ba:	b7 01       	movw	r22, r14
    18bc:	80 e2       	ldi	r24, 0x20	; 32
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	2c 87       	std	Y+12, r18	; 0x0c
    18c2:	0e 94 cb 0c 	call	0x1996	; 0x1996 <fputc>
    18c6:	73 94       	inc	r7
    18c8:	2c 85       	ldd	r18, Y+12	; 0x0c
    18ca:	f5 cf       	rjmp	.-22     	; 0x18b6 <vfprintf+0x2f0>
    18cc:	73 14       	cp	r7, r3
    18ce:	10 f4       	brcc	.+4      	; 0x18d4 <vfprintf+0x30e>
    18d0:	37 18       	sub	r3, r7
    18d2:	01 c0       	rjmp	.+2      	; 0x18d6 <vfprintf+0x310>
    18d4:	31 2c       	mov	r3, r1
    18d6:	24 ff       	sbrs	r18, 4
    18d8:	12 c0       	rjmp	.+36     	; 0x18fe <vfprintf+0x338>
    18da:	b7 01       	movw	r22, r14
    18dc:	80 e3       	ldi	r24, 0x30	; 48
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	2c 87       	std	Y+12, r18	; 0x0c
    18e2:	0e 94 cb 0c 	call	0x1996	; 0x1996 <fputc>
    18e6:	2c 85       	ldd	r18, Y+12	; 0x0c
    18e8:	22 ff       	sbrs	r18, 2
    18ea:	17 c0       	rjmp	.+46     	; 0x191a <vfprintf+0x354>
    18ec:	21 ff       	sbrs	r18, 1
    18ee:	03 c0       	rjmp	.+6      	; 0x18f6 <vfprintf+0x330>
    18f0:	88 e5       	ldi	r24, 0x58	; 88
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	02 c0       	rjmp	.+4      	; 0x18fa <vfprintf+0x334>
    18f6:	88 e7       	ldi	r24, 0x78	; 120
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	b7 01       	movw	r22, r14
    18fc:	0c c0       	rjmp	.+24     	; 0x1916 <vfprintf+0x350>
    18fe:	82 2f       	mov	r24, r18
    1900:	86 78       	andi	r24, 0x86	; 134
    1902:	59 f0       	breq	.+22     	; 0x191a <vfprintf+0x354>
    1904:	21 fd       	sbrc	r18, 1
    1906:	02 c0       	rjmp	.+4      	; 0x190c <vfprintf+0x346>
    1908:	80 e2       	ldi	r24, 0x20	; 32
    190a:	01 c0       	rjmp	.+2      	; 0x190e <vfprintf+0x348>
    190c:	8b e2       	ldi	r24, 0x2B	; 43
    190e:	27 fd       	sbrc	r18, 7
    1910:	8d e2       	ldi	r24, 0x2D	; 45
    1912:	b7 01       	movw	r22, r14
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	0e 94 cb 0c 	call	0x1996	; 0x1996 <fputc>
    191a:	a5 14       	cp	r10, r5
    191c:	38 f4       	brcc	.+14     	; 0x192c <vfprintf+0x366>
    191e:	b7 01       	movw	r22, r14
    1920:	80 e3       	ldi	r24, 0x30	; 48
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	0e 94 cb 0c 	call	0x1996	; 0x1996 <fputc>
    1928:	5a 94       	dec	r5
    192a:	f7 cf       	rjmp	.-18     	; 0x191a <vfprintf+0x354>
    192c:	aa 94       	dec	r10
    192e:	f4 01       	movw	r30, r8
    1930:	ea 0d       	add	r30, r10
    1932:	f1 1d       	adc	r31, r1
    1934:	80 81       	ld	r24, Z
    1936:	b7 01       	movw	r22, r14
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	0e 94 cb 0c 	call	0x1996	; 0x1996 <fputc>
    193e:	a1 10       	cpse	r10, r1
    1940:	f5 cf       	rjmp	.-22     	; 0x192c <vfprintf+0x366>
    1942:	33 20       	and	r3, r3
    1944:	09 f4       	brne	.+2      	; 0x1948 <vfprintf+0x382>
    1946:	51 ce       	rjmp	.-862    	; 0x15ea <vfprintf+0x24>
    1948:	b7 01       	movw	r22, r14
    194a:	80 e2       	ldi	r24, 0x20	; 32
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	0e 94 cb 0c 	call	0x1996	; 0x1996 <fputc>
    1952:	3a 94       	dec	r3
    1954:	f6 cf       	rjmp	.-20     	; 0x1942 <vfprintf+0x37c>
    1956:	f7 01       	movw	r30, r14
    1958:	86 81       	ldd	r24, Z+6	; 0x06
    195a:	97 81       	ldd	r25, Z+7	; 0x07
    195c:	02 c0       	rjmp	.+4      	; 0x1962 <vfprintf+0x39c>
    195e:	8f ef       	ldi	r24, 0xFF	; 255
    1960:	9f ef       	ldi	r25, 0xFF	; 255
    1962:	2c 96       	adiw	r28, 0x0c	; 12
    1964:	e2 e1       	ldi	r30, 0x12	; 18
    1966:	0c 94 a9 0d 	jmp	0x1b52	; 0x1b52 <__epilogue_restores__>

0000196a <strnlen_P>:
    196a:	fc 01       	movw	r30, r24
    196c:	05 90       	lpm	r0, Z+
    196e:	61 50       	subi	r22, 0x01	; 1
    1970:	70 40       	sbci	r23, 0x00	; 0
    1972:	01 10       	cpse	r0, r1
    1974:	d8 f7       	brcc	.-10     	; 0x196c <strnlen_P+0x2>
    1976:	80 95       	com	r24
    1978:	90 95       	com	r25
    197a:	8e 0f       	add	r24, r30
    197c:	9f 1f       	adc	r25, r31
    197e:	08 95       	ret

00001980 <strnlen>:
    1980:	fc 01       	movw	r30, r24
    1982:	61 50       	subi	r22, 0x01	; 1
    1984:	70 40       	sbci	r23, 0x00	; 0
    1986:	01 90       	ld	r0, Z+
    1988:	01 10       	cpse	r0, r1
    198a:	d8 f7       	brcc	.-10     	; 0x1982 <strnlen+0x2>
    198c:	80 95       	com	r24
    198e:	90 95       	com	r25
    1990:	8e 0f       	add	r24, r30
    1992:	9f 1f       	adc	r25, r31
    1994:	08 95       	ret

00001996 <fputc>:
    1996:	0f 93       	push	r16
    1998:	1f 93       	push	r17
    199a:	cf 93       	push	r28
    199c:	df 93       	push	r29
    199e:	18 2f       	mov	r17, r24
    19a0:	09 2f       	mov	r16, r25
    19a2:	eb 01       	movw	r28, r22
    19a4:	8b 81       	ldd	r24, Y+3	; 0x03
    19a6:	81 fd       	sbrc	r24, 1
    19a8:	03 c0       	rjmp	.+6      	; 0x19b0 <fputc+0x1a>
    19aa:	8f ef       	ldi	r24, 0xFF	; 255
    19ac:	9f ef       	ldi	r25, 0xFF	; 255
    19ae:	20 c0       	rjmp	.+64     	; 0x19f0 <fputc+0x5a>
    19b0:	82 ff       	sbrs	r24, 2
    19b2:	10 c0       	rjmp	.+32     	; 0x19d4 <fputc+0x3e>
    19b4:	4e 81       	ldd	r20, Y+6	; 0x06
    19b6:	5f 81       	ldd	r21, Y+7	; 0x07
    19b8:	2c 81       	ldd	r18, Y+4	; 0x04
    19ba:	3d 81       	ldd	r19, Y+5	; 0x05
    19bc:	42 17       	cp	r20, r18
    19be:	53 07       	cpc	r21, r19
    19c0:	7c f4       	brge	.+30     	; 0x19e0 <fputc+0x4a>
    19c2:	e8 81       	ld	r30, Y
    19c4:	f9 81       	ldd	r31, Y+1	; 0x01
    19c6:	9f 01       	movw	r18, r30
    19c8:	2f 5f       	subi	r18, 0xFF	; 255
    19ca:	3f 4f       	sbci	r19, 0xFF	; 255
    19cc:	39 83       	std	Y+1, r19	; 0x01
    19ce:	28 83       	st	Y, r18
    19d0:	10 83       	st	Z, r17
    19d2:	06 c0       	rjmp	.+12     	; 0x19e0 <fputc+0x4a>
    19d4:	e8 85       	ldd	r30, Y+8	; 0x08
    19d6:	f9 85       	ldd	r31, Y+9	; 0x09
    19d8:	81 2f       	mov	r24, r17
    19da:	09 95       	icall
    19dc:	89 2b       	or	r24, r25
    19de:	29 f7       	brne	.-54     	; 0x19aa <fputc+0x14>
    19e0:	2e 81       	ldd	r18, Y+6	; 0x06
    19e2:	3f 81       	ldd	r19, Y+7	; 0x07
    19e4:	2f 5f       	subi	r18, 0xFF	; 255
    19e6:	3f 4f       	sbci	r19, 0xFF	; 255
    19e8:	3f 83       	std	Y+7, r19	; 0x07
    19ea:	2e 83       	std	Y+6, r18	; 0x06
    19ec:	81 2f       	mov	r24, r17
    19ee:	90 2f       	mov	r25, r16
    19f0:	df 91       	pop	r29
    19f2:	cf 91       	pop	r28
    19f4:	1f 91       	pop	r17
    19f6:	0f 91       	pop	r16
    19f8:	08 95       	ret

000019fa <__ultoa_invert>:
    19fa:	fa 01       	movw	r30, r20
    19fc:	aa 27       	eor	r26, r26
    19fe:	28 30       	cpi	r18, 0x08	; 8
    1a00:	51 f1       	breq	.+84     	; 0x1a56 <__ultoa_invert+0x5c>
    1a02:	20 31       	cpi	r18, 0x10	; 16
    1a04:	81 f1       	breq	.+96     	; 0x1a66 <__ultoa_invert+0x6c>
    1a06:	e8 94       	clt
    1a08:	6f 93       	push	r22
    1a0a:	6e 7f       	andi	r22, 0xFE	; 254
    1a0c:	6e 5f       	subi	r22, 0xFE	; 254
    1a0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a10:	8f 4f       	sbci	r24, 0xFF	; 255
    1a12:	9f 4f       	sbci	r25, 0xFF	; 255
    1a14:	af 4f       	sbci	r26, 0xFF	; 255
    1a16:	b1 e0       	ldi	r27, 0x01	; 1
    1a18:	3e d0       	rcall	.+124    	; 0x1a96 <__ultoa_invert+0x9c>
    1a1a:	b4 e0       	ldi	r27, 0x04	; 4
    1a1c:	3c d0       	rcall	.+120    	; 0x1a96 <__ultoa_invert+0x9c>
    1a1e:	67 0f       	add	r22, r23
    1a20:	78 1f       	adc	r23, r24
    1a22:	89 1f       	adc	r24, r25
    1a24:	9a 1f       	adc	r25, r26
    1a26:	a1 1d       	adc	r26, r1
    1a28:	68 0f       	add	r22, r24
    1a2a:	79 1f       	adc	r23, r25
    1a2c:	8a 1f       	adc	r24, r26
    1a2e:	91 1d       	adc	r25, r1
    1a30:	a1 1d       	adc	r26, r1
    1a32:	6a 0f       	add	r22, r26
    1a34:	71 1d       	adc	r23, r1
    1a36:	81 1d       	adc	r24, r1
    1a38:	91 1d       	adc	r25, r1
    1a3a:	a1 1d       	adc	r26, r1
    1a3c:	20 d0       	rcall	.+64     	; 0x1a7e <__ultoa_invert+0x84>
    1a3e:	09 f4       	brne	.+2      	; 0x1a42 <__ultoa_invert+0x48>
    1a40:	68 94       	set
    1a42:	3f 91       	pop	r19
    1a44:	2a e0       	ldi	r18, 0x0A	; 10
    1a46:	26 9f       	mul	r18, r22
    1a48:	11 24       	eor	r1, r1
    1a4a:	30 19       	sub	r19, r0
    1a4c:	30 5d       	subi	r19, 0xD0	; 208
    1a4e:	31 93       	st	Z+, r19
    1a50:	de f6       	brtc	.-74     	; 0x1a08 <__ultoa_invert+0xe>
    1a52:	cf 01       	movw	r24, r30
    1a54:	08 95       	ret
    1a56:	46 2f       	mov	r20, r22
    1a58:	47 70       	andi	r20, 0x07	; 7
    1a5a:	40 5d       	subi	r20, 0xD0	; 208
    1a5c:	41 93       	st	Z+, r20
    1a5e:	b3 e0       	ldi	r27, 0x03	; 3
    1a60:	0f d0       	rcall	.+30     	; 0x1a80 <__ultoa_invert+0x86>
    1a62:	c9 f7       	brne	.-14     	; 0x1a56 <__ultoa_invert+0x5c>
    1a64:	f6 cf       	rjmp	.-20     	; 0x1a52 <__ultoa_invert+0x58>
    1a66:	46 2f       	mov	r20, r22
    1a68:	4f 70       	andi	r20, 0x0F	; 15
    1a6a:	40 5d       	subi	r20, 0xD0	; 208
    1a6c:	4a 33       	cpi	r20, 0x3A	; 58
    1a6e:	18 f0       	brcs	.+6      	; 0x1a76 <__ultoa_invert+0x7c>
    1a70:	49 5d       	subi	r20, 0xD9	; 217
    1a72:	31 fd       	sbrc	r19, 1
    1a74:	40 52       	subi	r20, 0x20	; 32
    1a76:	41 93       	st	Z+, r20
    1a78:	02 d0       	rcall	.+4      	; 0x1a7e <__ultoa_invert+0x84>
    1a7a:	a9 f7       	brne	.-22     	; 0x1a66 <__ultoa_invert+0x6c>
    1a7c:	ea cf       	rjmp	.-44     	; 0x1a52 <__ultoa_invert+0x58>
    1a7e:	b4 e0       	ldi	r27, 0x04	; 4
    1a80:	a6 95       	lsr	r26
    1a82:	97 95       	ror	r25
    1a84:	87 95       	ror	r24
    1a86:	77 95       	ror	r23
    1a88:	67 95       	ror	r22
    1a8a:	ba 95       	dec	r27
    1a8c:	c9 f7       	brne	.-14     	; 0x1a80 <__ultoa_invert+0x86>
    1a8e:	00 97       	sbiw	r24, 0x00	; 0
    1a90:	61 05       	cpc	r22, r1
    1a92:	71 05       	cpc	r23, r1
    1a94:	08 95       	ret
    1a96:	9b 01       	movw	r18, r22
    1a98:	ac 01       	movw	r20, r24
    1a9a:	0a 2e       	mov	r0, r26
    1a9c:	06 94       	lsr	r0
    1a9e:	57 95       	ror	r21
    1aa0:	47 95       	ror	r20
    1aa2:	37 95       	ror	r19
    1aa4:	27 95       	ror	r18
    1aa6:	ba 95       	dec	r27
    1aa8:	c9 f7       	brne	.-14     	; 0x1a9c <__ultoa_invert+0xa2>
    1aaa:	62 0f       	add	r22, r18
    1aac:	73 1f       	adc	r23, r19
    1aae:	84 1f       	adc	r24, r20
    1ab0:	95 1f       	adc	r25, r21
    1ab2:	a0 1d       	adc	r26, r0
    1ab4:	08 95       	ret

00001ab6 <__divmodsi4>:
    1ab6:	05 2e       	mov	r0, r21
    1ab8:	97 fb       	bst	r25, 7
    1aba:	1e f4       	brtc	.+6      	; 0x1ac2 <__divmodsi4+0xc>
    1abc:	00 94       	com	r0
    1abe:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <__negsi2>
    1ac2:	57 fd       	sbrc	r21, 7
    1ac4:	07 d0       	rcall	.+14     	; 0x1ad4 <__divmodsi4_neg2>
    1ac6:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <__udivmodsi4>
    1aca:	07 fc       	sbrc	r0, 7
    1acc:	03 d0       	rcall	.+6      	; 0x1ad4 <__divmodsi4_neg2>
    1ace:	4e f4       	brtc	.+18     	; 0x1ae2 <__divmodsi4_exit>
    1ad0:	0c 94 72 0d 	jmp	0x1ae4	; 0x1ae4 <__negsi2>

00001ad4 <__divmodsi4_neg2>:
    1ad4:	50 95       	com	r21
    1ad6:	40 95       	com	r20
    1ad8:	30 95       	com	r19
    1ada:	21 95       	neg	r18
    1adc:	3f 4f       	sbci	r19, 0xFF	; 255
    1ade:	4f 4f       	sbci	r20, 0xFF	; 255
    1ae0:	5f 4f       	sbci	r21, 0xFF	; 255

00001ae2 <__divmodsi4_exit>:
    1ae2:	08 95       	ret

00001ae4 <__negsi2>:
    1ae4:	90 95       	com	r25
    1ae6:	80 95       	com	r24
    1ae8:	70 95       	com	r23
    1aea:	61 95       	neg	r22
    1aec:	7f 4f       	sbci	r23, 0xFF	; 255
    1aee:	8f 4f       	sbci	r24, 0xFF	; 255
    1af0:	9f 4f       	sbci	r25, 0xFF	; 255
    1af2:	08 95       	ret

00001af4 <__muluhisi3>:
    1af4:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <__umulhisi3>
    1af8:	a5 9f       	mul	r26, r21
    1afa:	90 0d       	add	r25, r0
    1afc:	b4 9f       	mul	r27, r20
    1afe:	90 0d       	add	r25, r0
    1b00:	a4 9f       	mul	r26, r20
    1b02:	80 0d       	add	r24, r0
    1b04:	91 1d       	adc	r25, r1
    1b06:	11 24       	eor	r1, r1
    1b08:	08 95       	ret

00001b0a <__mulshisi3>:
    1b0a:	b7 ff       	sbrs	r27, 7
    1b0c:	0c 94 7a 0d 	jmp	0x1af4	; 0x1af4 <__muluhisi3>

00001b10 <__mulohisi3>:
    1b10:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <__muluhisi3>
    1b14:	82 1b       	sub	r24, r18
    1b16:	93 0b       	sbc	r25, r19
    1b18:	08 95       	ret

00001b1a <__prologue_saves__>:
    1b1a:	2f 92       	push	r2
    1b1c:	3f 92       	push	r3
    1b1e:	4f 92       	push	r4
    1b20:	5f 92       	push	r5
    1b22:	6f 92       	push	r6
    1b24:	7f 92       	push	r7
    1b26:	8f 92       	push	r8
    1b28:	9f 92       	push	r9
    1b2a:	af 92       	push	r10
    1b2c:	bf 92       	push	r11
    1b2e:	cf 92       	push	r12
    1b30:	df 92       	push	r13
    1b32:	ef 92       	push	r14
    1b34:	ff 92       	push	r15
    1b36:	0f 93       	push	r16
    1b38:	1f 93       	push	r17
    1b3a:	cf 93       	push	r28
    1b3c:	df 93       	push	r29
    1b3e:	cd b7       	in	r28, 0x3d	; 61
    1b40:	de b7       	in	r29, 0x3e	; 62
    1b42:	ca 1b       	sub	r28, r26
    1b44:	db 0b       	sbc	r29, r27
    1b46:	0f b6       	in	r0, 0x3f	; 63
    1b48:	f8 94       	cli
    1b4a:	de bf       	out	0x3e, r29	; 62
    1b4c:	0f be       	out	0x3f, r0	; 63
    1b4e:	cd bf       	out	0x3d, r28	; 61
    1b50:	09 94       	ijmp

00001b52 <__epilogue_restores__>:
    1b52:	2a 88       	ldd	r2, Y+18	; 0x12
    1b54:	39 88       	ldd	r3, Y+17	; 0x11
    1b56:	48 88       	ldd	r4, Y+16	; 0x10
    1b58:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b5a:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b5c:	7d 84       	ldd	r7, Y+13	; 0x0d
    1b5e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1b60:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b62:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b64:	b9 84       	ldd	r11, Y+9	; 0x09
    1b66:	c8 84       	ldd	r12, Y+8	; 0x08
    1b68:	df 80       	ldd	r13, Y+7	; 0x07
    1b6a:	ee 80       	ldd	r14, Y+6	; 0x06
    1b6c:	fd 80       	ldd	r15, Y+5	; 0x05
    1b6e:	0c 81       	ldd	r16, Y+4	; 0x04
    1b70:	1b 81       	ldd	r17, Y+3	; 0x03
    1b72:	aa 81       	ldd	r26, Y+2	; 0x02
    1b74:	b9 81       	ldd	r27, Y+1	; 0x01
    1b76:	ce 0f       	add	r28, r30
    1b78:	d1 1d       	adc	r29, r1
    1b7a:	0f b6       	in	r0, 0x3f	; 63
    1b7c:	f8 94       	cli
    1b7e:	de bf       	out	0x3e, r29	; 62
    1b80:	0f be       	out	0x3f, r0	; 63
    1b82:	cd bf       	out	0x3d, r28	; 61
    1b84:	ed 01       	movw	r28, r26
    1b86:	08 95       	ret

00001b88 <__udivmodsi4>:
    1b88:	a1 e2       	ldi	r26, 0x21	; 33
    1b8a:	1a 2e       	mov	r1, r26
    1b8c:	aa 1b       	sub	r26, r26
    1b8e:	bb 1b       	sub	r27, r27
    1b90:	fd 01       	movw	r30, r26
    1b92:	0d c0       	rjmp	.+26     	; 0x1bae <__udivmodsi4_ep>

00001b94 <__udivmodsi4_loop>:
    1b94:	aa 1f       	adc	r26, r26
    1b96:	bb 1f       	adc	r27, r27
    1b98:	ee 1f       	adc	r30, r30
    1b9a:	ff 1f       	adc	r31, r31
    1b9c:	a2 17       	cp	r26, r18
    1b9e:	b3 07       	cpc	r27, r19
    1ba0:	e4 07       	cpc	r30, r20
    1ba2:	f5 07       	cpc	r31, r21
    1ba4:	20 f0       	brcs	.+8      	; 0x1bae <__udivmodsi4_ep>
    1ba6:	a2 1b       	sub	r26, r18
    1ba8:	b3 0b       	sbc	r27, r19
    1baa:	e4 0b       	sbc	r30, r20
    1bac:	f5 0b       	sbc	r31, r21

00001bae <__udivmodsi4_ep>:
    1bae:	66 1f       	adc	r22, r22
    1bb0:	77 1f       	adc	r23, r23
    1bb2:	88 1f       	adc	r24, r24
    1bb4:	99 1f       	adc	r25, r25
    1bb6:	1a 94       	dec	r1
    1bb8:	69 f7       	brne	.-38     	; 0x1b94 <__udivmodsi4_loop>
    1bba:	60 95       	com	r22
    1bbc:	70 95       	com	r23
    1bbe:	80 95       	com	r24
    1bc0:	90 95       	com	r25
    1bc2:	9b 01       	movw	r18, r22
    1bc4:	ac 01       	movw	r20, r24
    1bc6:	bd 01       	movw	r22, r26
    1bc8:	cf 01       	movw	r24, r30
    1bca:	08 95       	ret

00001bcc <__umulhisi3>:
    1bcc:	a2 9f       	mul	r26, r18
    1bce:	b0 01       	movw	r22, r0
    1bd0:	b3 9f       	mul	r27, r19
    1bd2:	c0 01       	movw	r24, r0
    1bd4:	a3 9f       	mul	r26, r19
    1bd6:	70 0d       	add	r23, r0
    1bd8:	81 1d       	adc	r24, r1
    1bda:	11 24       	eor	r1, r1
    1bdc:	91 1d       	adc	r25, r1
    1bde:	b2 9f       	mul	r27, r18
    1be0:	70 0d       	add	r23, r0
    1be2:	81 1d       	adc	r24, r1
    1be4:	11 24       	eor	r1, r1
    1be6:	91 1d       	adc	r25, r1
    1be8:	08 95       	ret

00001bea <_exit>:
    1bea:	f8 94       	cli

00001bec <__stop_program>:
    1bec:	ff cf       	rjmp	.-2      	; 0x1bec <__stop_program>
