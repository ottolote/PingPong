
Ping_Pong_Shit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002a4  00800100  00001b8c  00001c20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b8c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000035  008003a4  008003a4  00001ec4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001ec4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000378  00000000  00000000  00001f20  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003591  00000000  00000000  00002298  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001522  00000000  00000000  00005829  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001684  00000000  00000000  00006d4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000928  00000000  00000000  000083d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000097d  00000000  00000000  00008cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001a2a  00000000  00000000  00009675  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000300  00000000  00000000  0000b09f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 bc 08 	jmp	0x1178	; 0x1178 <__vector_7>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <oled_move_arrow+0x24>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	13 e0       	ldi	r17, 0x03	; 3
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	ec e8       	ldi	r30, 0x8C	; 140
     37c:	fb e1       	ldi	r31, 0x1B	; 27
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a4 3a       	cpi	r26, 0xA4	; 164
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	23 e0       	ldi	r18, 0x03	; 3
     38c:	a4 ea       	ldi	r26, 0xA4	; 164
     38e:	b3 e0       	ldi	r27, 0x03	; 3
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a9 3d       	cpi	r26, 0xD9	; 217
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 d5 06 	call	0xdaa	; 0xdaa <main>
     39e:	0c 94 c4 0d 	jmp	0x1b88	; 0x1b88 <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <button_init>:
 */ 

#include <avr/io.h>

void button_init() {
	DDRB &= ~((1<<PINB1) | (1<<PINB2) | (1<<PINB3));
     3a6:	87 b3       	in	r24, 0x17	; 23
     3a8:	81 7f       	andi	r24, 0xF1	; 241
     3aa:	87 bb       	out	0x17, r24	; 23
     3ac:	08 95       	ret

000003ae <button_read>:
}

uint8_t button_read(uint8_t channel) {
	return (PINB&(1<<channel)) >> channel;
     3ae:	26 b3       	in	r18, 0x16	; 22
     3b0:	41 e0       	ldi	r20, 0x01	; 1
     3b2:	50 e0       	ldi	r21, 0x00	; 0
     3b4:	08 2e       	mov	r0, r24
     3b6:	02 c0       	rjmp	.+4      	; 0x3bc <button_read+0xe>
     3b8:	44 0f       	add	r20, r20
     3ba:	55 1f       	adc	r21, r21
     3bc:	0a 94       	dec	r0
     3be:	e2 f7       	brpl	.-8      	; 0x3b8 <button_read+0xa>
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	24 23       	and	r18, r20
     3c4:	35 23       	and	r19, r21
     3c6:	a9 01       	movw	r20, r18
     3c8:	02 c0       	rjmp	.+4      	; 0x3ce <button_read+0x20>
     3ca:	55 95       	asr	r21
     3cc:	47 95       	ror	r20
     3ce:	8a 95       	dec	r24
     3d0:	e2 f7       	brpl	.-8      	; 0x3ca <button_read+0x1c>
     3d2:	ca 01       	movw	r24, r20
}
     3d4:	08 95       	ret

000003d6 <button_rising_edge_detect>:

uint8_t button_rising_edge_detect(uint8_t channel){
	static last;
	static uint8_t current;
	current = button_read(channel);
     3d6:	0e 94 d7 01 	call	0x3ae	; 0x3ae <button_read>
     3da:	80 93 a6 03 	sts	0x03A6, r24
	if (last != current){
     3de:	28 2f       	mov	r18, r24
     3e0:	30 e0       	ldi	r19, 0x00	; 0
     3e2:	40 91 a4 03 	lds	r20, 0x03A4
     3e6:	50 91 a5 03 	lds	r21, 0x03A5
     3ea:	24 17       	cp	r18, r20
     3ec:	35 07       	cpc	r19, r21
     3ee:	49 f0       	breq	.+18     	; 0x402 <button_rising_edge_detect+0x2c>
		last = current;
     3f0:	30 93 a5 03 	sts	0x03A5, r19
     3f4:	20 93 a4 03 	sts	0x03A4, r18
		if(current == 1){
     3f8:	91 e0       	ldi	r25, 0x01	; 1
     3fa:	81 30       	cpi	r24, 0x01	; 1
     3fc:	19 f0       	breq	.+6      	; 0x404 <button_rising_edge_detect+0x2e>
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	01 c0       	rjmp	.+2      	; 0x404 <button_rising_edge_detect+0x2e>
			return 1;
		}
	}
	return 0;
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	89 2f       	mov	r24, r25
     406:	08 95       	ret

00000408 <can_init>:
can_message_t joy_message;*/


void can_init(){
	//Enter config mode
	mcp2515_init();
     408:	0e 94 04 04 	call	0x808	; 0x808 <mcp2515_init>
	printf("CANCTRL (expect 0x87): 0x%02x\n", mcp2515_read(MCP_CANCTRL));
     40c:	8f e0       	ldi	r24, 0x0F	; 15
     40e:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <mcp2515_read>
     412:	1f 92       	push	r1
     414:	8f 93       	push	r24
     416:	8a e2       	ldi	r24, 0x2A	; 42
     418:	91 e0       	ldi	r25, 0x01	; 1
     41a:	9f 93       	push	r25
     41c:	8f 93       	push	r24
     41e:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <printf>

	//RX0 - Turn mask/filter off
	mcp2515_bit_modify(MCP_RXB0CTRL, 0b01100000, 0xFF);
     422:	4f ef       	ldi	r20, 0xFF	; 255
     424:	60 e6       	ldi	r22, 0x60	; 96
     426:	80 e6       	ldi	r24, 0x60	; 96
     428:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <mcp2515_bit_modify>
	//RX0 - Disable rollover
	mcp2515_bit_modify(MCP_RXB0CTRL, 0b00000100, 0);
     42c:	40 e0       	ldi	r20, 0x00	; 0
     42e:	64 e0       	ldi	r22, 0x04	; 4
     430:	80 e6       	ldi	r24, 0x60	; 96
     432:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <mcp2515_bit_modify>

	mcp2515_bit_modify(MCP_CANINTE, MCP_RX0IF, 0xff);
     436:	4f ef       	ldi	r20, 0xFF	; 255
     438:	61 e0       	ldi	r22, 0x01	; 1
     43a:	8b e2       	ldi	r24, 0x2B	; 43
     43c:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <mcp2515_bit_modify>
	
	//Enable normal mode
	mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
     440:	40 e0       	ldi	r20, 0x00	; 0
     442:	60 ee       	ldi	r22, 0xE0	; 224
     444:	8f e0       	ldi	r24, 0x0F	; 15
     446:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <mcp2515_bit_modify>
     44a:	0f 90       	pop	r0
     44c:	0f 90       	pop	r0
     44e:	0f 90       	pop	r0
     450:	0f 90       	pop	r0
     452:	08 95       	ret

00000454 <can_transmit_complete>:
	return 1;
}

int can_transmit_complete(){
	//Check if TX buffer is not pending
	return (!test_bit(mcp2515_read(MCP_TXB0CTRL), 3));
     454:	80 e3       	ldi	r24, 0x30	; 48
     456:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <mcp2515_read>
     45a:	86 95       	lsr	r24
     45c:	86 95       	lsr	r24
     45e:	86 95       	lsr	r24
     460:	91 e0       	ldi	r25, 0x01	; 1
     462:	89 27       	eor	r24, r25
}
     464:	81 70       	andi	r24, 0x01	; 1
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	08 95       	ret

0000046a <can_message_send>:
	//Enable normal mode
	mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);

}

void can_message_send(can_message_t* message){
     46a:	1f 93       	push	r17
     46c:	cf 93       	push	r28
     46e:	df 93       	push	r29
     470:	ec 01       	movw	r28, r24
	while (!can_transmit_complete()) {}
     472:	0e 94 2a 02 	call	0x454	; 0x454 <can_transmit_complete>
     476:	89 2b       	or	r24, r25
     478:	e1 f3       	breq	.-8      	; 0x472 <can_message_send+0x8>
	//Use standard ID to set the message
	mcp2515_write(MCP_TXB0SIDH, (int8_t)(message->id >> 3));
     47a:	68 81       	ld	r22, Y
     47c:	79 81       	ldd	r23, Y+1	; 0x01
     47e:	75 95       	asr	r23
     480:	67 95       	ror	r22
     482:	75 95       	asr	r23
     484:	67 95       	ror	r22
     486:	75 95       	asr	r23
     488:	67 95       	ror	r22
     48a:	81 e3       	ldi	r24, 0x31	; 49
     48c:	0e 94 ac 03 	call	0x758	; 0x758 <mcp2515_write>
	mcp2515_write(MCP_TXB0SIDL, (int8_t)(message->id << 5));
     490:	68 81       	ld	r22, Y
     492:	79 81       	ldd	r23, Y+1	; 0x01
     494:	66 0f       	add	r22, r22
     496:	77 1f       	adc	r23, r23
     498:	62 95       	swap	r22
     49a:	72 95       	swap	r23
     49c:	70 7f       	andi	r23, 0xF0	; 240
     49e:	76 27       	eor	r23, r22
     4a0:	60 7f       	andi	r22, 0xF0	; 240
     4a2:	76 27       	eor	r23, r22
     4a4:	82 e3       	ldi	r24, 0x32	; 50
     4a6:	0e 94 ac 03 	call	0x758	; 0x758 <mcp2515_write>

	//Set correct data lenght and use data frame, max 8 bytes
	mcp2515_write(MCP_TXB0DLC, (0x0F) & (message->length));
     4aa:	6a 81       	ldd	r22, Y+2	; 0x02
     4ac:	6f 70       	andi	r22, 0x0F	; 15
     4ae:	85 e3       	ldi	r24, 0x35	; 53
     4b0:	0e 94 ac 03 	call	0x758	; 0x758 <mcp2515_write>

	//For loop to set data bytes
	for (uint8_t i = 0; i < message->length; i++) {
     4b4:	8a 81       	ldd	r24, Y+2	; 0x02
     4b6:	88 23       	and	r24, r24
     4b8:	69 f0       	breq	.+26     	; 0x4d4 <can_message_send+0x6a>
     4ba:	10 e0       	ldi	r17, 0x00	; 0
		mcp2515_write(MCP_TXB0D0 + i, message->data[i]);
     4bc:	fe 01       	movw	r30, r28
     4be:	e1 0f       	add	r30, r17
     4c0:	f1 1d       	adc	r31, r1
     4c2:	63 81       	ldd	r22, Z+3	; 0x03
     4c4:	86 e3       	ldi	r24, 0x36	; 54
     4c6:	81 0f       	add	r24, r17
     4c8:	0e 94 ac 03 	call	0x758	; 0x758 <mcp2515_write>

	//Set correct data lenght and use data frame, max 8 bytes
	mcp2515_write(MCP_TXB0DLC, (0x0F) & (message->length));

	//For loop to set data bytes
	for (uint8_t i = 0; i < message->length; i++) {
     4cc:	1f 5f       	subi	r17, 0xFF	; 255
     4ce:	8a 81       	ldd	r24, Y+2	; 0x02
     4d0:	18 17       	cp	r17, r24
     4d2:	a0 f3       	brcs	.-24     	; 0x4bc <can_message_send+0x52>
		mcp2515_write(MCP_TXB0D0 + i, message->data[i]);
	}

	mcp2515_request_to_send(1);
     4d4:	81 e0       	ldi	r24, 0x01	; 1
     4d6:	0e 94 c0 03 	call	0x780	; 0x780 <mcp2515_request_to_send>
}
     4da:	df 91       	pop	r29
     4dc:	cf 91       	pop	r28
     4de:	1f 91       	pop	r17
     4e0:	08 95       	ret

000004e2 <can_data_receive>:
void can_interrupt_vector(){
	//Clear interrupt flag
	rx_flag = 1;
}*/

can_message_t can_data_receive(){
     4e2:	9f 92       	push	r9
     4e4:	af 92       	push	r10
     4e6:	bf 92       	push	r11
     4e8:	cf 92       	push	r12
     4ea:	df 92       	push	r13
     4ec:	ef 92       	push	r14
     4ee:	ff 92       	push	r15
     4f0:	0f 93       	push	r16
     4f2:	1f 93       	push	r17
     4f4:	cf 93       	push	r28
     4f6:	df 93       	push	r29
     4f8:	cd b7       	in	r28, 0x3d	; 61
     4fa:	de b7       	in	r29, 0x3e	; 62
     4fc:	2b 97       	sbiw	r28, 0x0b	; 11
     4fe:	0f b6       	in	r0, 0x3f	; 63
     500:	f8 94       	cli
     502:	de bf       	out	0x3e, r29	; 62
     504:	0f be       	out	0x3f, r0	; 63
     506:	cd bf       	out	0x3d, r28	; 61
     508:	7c 01       	movw	r14, r24
	can_message_t message;
	
	//Check if RX buffer have message
	//if (rx_flag == 1) {
	if (mcp2515_read(MCP_CANINTF) & MCP_RX0IF) {
     50a:	8c e2       	ldi	r24, 0x2C	; 44
     50c:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <mcp2515_read>
     510:	80 ff       	sbrs	r24, 0
     512:	33 c0       	rjmp	.+102    	; 0x57a <__stack+0x7b>
		//Get ID if message
		message.id = (mcp2515_read(MCP_RXB0SIDH) << 3) | (mcp2515_read(MCP_RXB0SIDL) >> 5);
     514:	81 e6       	ldi	r24, 0x61	; 97
     516:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <mcp2515_read>
     51a:	c8 2e       	mov	r12, r24
     51c:	82 e6       	ldi	r24, 0x62	; 98
     51e:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <mcp2515_read>
     522:	82 95       	swap	r24
     524:	86 95       	lsr	r24
     526:	87 70       	andi	r24, 0x07	; 7
     528:	d1 2c       	mov	r13, r1
     52a:	cc 0c       	add	r12, r12
     52c:	dd 1c       	adc	r13, r13
     52e:	cc 0c       	add	r12, r12
     530:	dd 1c       	adc	r13, r13
     532:	cc 0c       	add	r12, r12
     534:	dd 1c       	adc	r13, r13
     536:	c8 2a       	or	r12, r24

		//Get lenght of message
		message.length = (0x0F) & (mcp2515_read(MCP_RXB0DLC));
     538:	85 e6       	ldi	r24, 0x65	; 101
     53a:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <mcp2515_read>
     53e:	8f 70       	andi	r24, 0x0F	; 15
     540:	98 2e       	mov	r9, r24

		//Get message data
		for(uint8_t i = 0; i < message.length; i++){
     542:	a9 f0       	breq	.+42     	; 0x56e <__stack+0x6f>
     544:	8e 01       	movw	r16, r28
     546:	0c 5f       	subi	r16, 0xFC	; 252
     548:	1f 4f       	sbci	r17, 0xFF	; 255
     54a:	0f 2e       	mov	r0, r31
     54c:	f6 e6       	ldi	r31, 0x66	; 102
     54e:	af 2e       	mov	r10, r31
     550:	f0 2d       	mov	r31, r0
     552:	a8 0e       	add	r10, r24
     554:	0f 2e       	mov	r0, r31
     556:	f6 e6       	ldi	r31, 0x66	; 102
     558:	bf 2e       	mov	r11, r31
     55a:	f0 2d       	mov	r31, r0
			message.data[i] = mcp2515_read(MCP_RXB0D0 + i);
     55c:	8b 2d       	mov	r24, r11
     55e:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <mcp2515_read>
     562:	f8 01       	movw	r30, r16
     564:	81 93       	st	Z+, r24
     566:	8f 01       	movw	r16, r30
     568:	b3 94       	inc	r11

		//Get lenght of message
		message.length = (0x0F) & (mcp2515_read(MCP_RXB0DLC));

		//Get message data
		for(uint8_t i = 0; i < message.length; i++){
     56a:	ba 10       	cpse	r11, r10
     56c:	f7 cf       	rjmp	.-18     	; 0x55c <__stack+0x5d>
			message.data[i] = mcp2515_read(MCP_RXB0D0 + i);
		}

		//Clear flag
		mcp2515_bit_modify(MCP_CANINTF, MCP_RX0IF, 0);
     56e:	40 e0       	ldi	r20, 0x00	; 0
     570:	61 e0       	ldi	r22, 0x01	; 1
     572:	8c e2       	ldi	r24, 0x2C	; 44
     574:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <mcp2515_bit_modify>
     578:	03 c0       	rjmp	.+6      	; 0x580 <__stack+0x81>
	} else {
		message.id = -1;
     57a:	cc 24       	eor	r12, r12
     57c:	ca 94       	dec	r12
     57e:	dc 2c       	mov	r13, r12
	}

	return message;
     580:	da 82       	std	Y+2, r13	; 0x02
     582:	c9 82       	std	Y+1, r12	; 0x01
     584:	9b 82       	std	Y+3, r9	; 0x03
     586:	8b e0       	ldi	r24, 0x0B	; 11
     588:	fe 01       	movw	r30, r28
     58a:	31 96       	adiw	r30, 0x01	; 1
     58c:	d7 01       	movw	r26, r14
     58e:	01 90       	ld	r0, Z+
     590:	0d 92       	st	X+, r0
     592:	8a 95       	dec	r24
     594:	e1 f7       	brne	.-8      	; 0x58e <__stack+0x8f>
}
     596:	c7 01       	movw	r24, r14
     598:	2b 96       	adiw	r28, 0x0b	; 11
     59a:	0f b6       	in	r0, 0x3f	; 63
     59c:	f8 94       	cli
     59e:	de bf       	out	0x3e, r29	; 62
     5a0:	0f be       	out	0x3f, r0	; 63
     5a2:	cd bf       	out	0x3d, r28	; 61
     5a4:	df 91       	pop	r29
     5a6:	cf 91       	pop	r28
     5a8:	1f 91       	pop	r17
     5aa:	0f 91       	pop	r16
     5ac:	ff 90       	pop	r15
     5ae:	ef 90       	pop	r14
     5b0:	df 90       	pop	r13
     5b2:	cf 90       	pop	r12
     5b4:	bf 90       	pop	r11
     5b6:	af 90       	pop	r10
     5b8:	9f 90       	pop	r9
     5ba:	08 95       	ret

000005bc <can_joystick_transmit>:
	}
}

void can_joystick_transmit(){
	static can_message_t joy_message;
	joy_message.id = JOY_CAN_ID; 
     5bc:	81 e0       	ldi	r24, 0x01	; 1
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	90 93 be 03 	sts	0x03BE, r25
     5c4:	80 93 bd 03 	sts	0x03BD, r24
	joy_message.length = 2;
     5c8:	82 e0       	ldi	r24, 0x02	; 2
     5ca:	80 93 bf 03 	sts	0x03BF, r24
	
	joy_message.data[0] = read_converted(JOYSTICK_X);
     5ce:	80 e0       	ldi	r24, 0x00	; 0
     5d0:	0e 94 60 03 	call	0x6c0	; 0x6c0 <read_converted>
     5d4:	80 93 c0 03 	sts	0x03C0, r24
	joy_message.data[1] = read_converted(JOYSTICK_Y);
     5d8:	81 e0       	ldi	r24, 0x01	; 1
     5da:	0e 94 60 03 	call	0x6c0	; 0x6c0 <read_converted>
     5de:	80 93 c1 03 	sts	0x03C1, r24

	//can_print_message(&joy_message);

	can_message_send(&joy_message);
     5e2:	8d eb       	ldi	r24, 0xBD	; 189
     5e4:	93 e0       	ldi	r25, 0x03	; 3
     5e6:	0e 94 35 02 	call	0x46a	; 0x46a <can_message_send>
     5ea:	08 95       	ret

000005ec <can_button_transmit>:
}

void can_button_transmit(uint8_t button_channel) {
		static can_message_t button_message;
		button_message.id = BUTTON_CAN_ID;
     5ec:	23 e0       	ldi	r18, 0x03	; 3
     5ee:	30 e0       	ldi	r19, 0x00	; 0
     5f0:	30 93 b3 03 	sts	0x03B3, r19
     5f4:	20 93 b2 03 	sts	0x03B2, r18
		button_message.length = 1;
     5f8:	91 e0       	ldi	r25, 0x01	; 1
     5fa:	90 93 b4 03 	sts	0x03B4, r25
		
		button_message.data[0] = button_channel;
     5fe:	80 93 b5 03 	sts	0x03B5, r24



		can_message_send(&button_message);
     602:	82 eb       	ldi	r24, 0xB2	; 178
     604:	93 e0       	ldi	r25, 0x03	; 3
     606:	0e 94 35 02 	call	0x46a	; 0x46a <can_message_send>
     60a:	08 95       	ret

0000060c <can_handle_message>:
}

void can_handle_message(){
     60c:	cf 93       	push	r28
     60e:	df 93       	push	r29
     610:	cd b7       	in	r28, 0x3d	; 61
     612:	de b7       	in	r29, 0x3e	; 62
     614:	2b 97       	sbiw	r28, 0x0b	; 11
     616:	0f b6       	in	r0, 0x3f	; 63
     618:	f8 94       	cli
     61a:	de bf       	out	0x3e, r29	; 62
     61c:	0f be       	out	0x3f, r0	; 63
     61e:	cd bf       	out	0x3d, r28	; 61
	static can_message_t message;
	message = can_data_receive();
     620:	ce 01       	movw	r24, r28
     622:	01 96       	adiw	r24, 0x01	; 1
     624:	0e 94 71 02 	call	0x4e2	; 0x4e2 <can_data_receive>
     628:	8b e0       	ldi	r24, 0x0B	; 11
     62a:	fe 01       	movw	r30, r28
     62c:	31 96       	adiw	r30, 0x01	; 1
     62e:	a7 ea       	ldi	r26, 0xA7	; 167
     630:	b3 e0       	ldi	r27, 0x03	; 3
     632:	01 90       	ld	r0, Z+
     634:	0d 92       	st	X+, r0
     636:	8a 95       	dec	r24
     638:	e1 f7       	brne	.-8      	; 0x632 <can_handle_message+0x26>
	if(message.id != -1){
     63a:	80 91 a7 03 	lds	r24, 0x03A7
     63e:	90 91 a8 03 	lds	r25, 0x03A8
     642:	01 96       	adiw	r24, 0x01	; 1
     644:	d1 f0       	breq	.+52     	; 0x67a <can_handle_message+0x6e>
		flash_diode();
     646:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <flash_diode>
	}
	switch(message.id){
     64a:	80 91 a7 03 	lds	r24, 0x03A7
     64e:	90 91 a8 03 	lds	r25, 0x03A8
     652:	02 97       	sbiw	r24, 0x02	; 2
     654:	91 f4       	brne	.+36     	; 0x67a <can_handle_message+0x6e>
		case IR_CAN_ID:
			printf("ir edge detect: %d\n",message.data[0]);
     656:	20 91 aa 03 	lds	r18, 0x03AA
     65a:	82 2f       	mov	r24, r18
     65c:	99 27       	eor	r25, r25
     65e:	87 fd       	sbrc	r24, 7
     660:	90 95       	com	r25
     662:	9f 93       	push	r25
     664:	2f 93       	push	r18
     666:	8c ea       	ldi	r24, 0xAC	; 172
     668:	91 e0       	ldi	r25, 0x01	; 1
     66a:	9f 93       	push	r25
     66c:	8f 93       	push	r24
     66e:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <printf>
			return;
     672:	0f 90       	pop	r0
     674:	0f 90       	pop	r0
     676:	0f 90       	pop	r0
     678:	0f 90       	pop	r0
		default:
			return;
	}
     67a:	2b 96       	adiw	r28, 0x0b	; 11
     67c:	0f b6       	in	r0, 0x3f	; 63
     67e:	f8 94       	cli
     680:	de bf       	out	0x3e, r29	; 62
     682:	0f be       	out	0x3f, r0	; 63
     684:	cd bf       	out	0x3d, r28	; 61
     686:	df 91       	pop	r29
     688:	cf 91       	pop	r28
     68a:	08 95       	ret

0000068c <joystick_read>:
			 v;
}

unsigned int joystick_read(joy_channel channel){
	volatile char* ext_ram = (char*) 0x1400;
	ext_ram[0] = 0x4 + channel;
     68c:	8c 5f       	subi	r24, 0xFC	; 252
     68e:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     692:	81 e4       	ldi	r24, 0x41	; 65
     694:	8a 95       	dec	r24
     696:	f1 f7       	brne	.-4      	; 0x694 <joystick_read+0x8>
     698:	00 c0       	rjmp	.+0      	; 0x69a <joystick_read+0xe>
	_delay_us(40);
	return (uint8_t) ext_ram[0];
     69a:	80 91 00 14 	lds	r24, 0x1400
}
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	08 95       	ret

000006a2 <joystick_init>:
int center_val_X;
int center_val_Y;


void joystick_init(){ 
	center_val_X = joystick_read(JOYSTICK_X);
     6a2:	80 e0       	ldi	r24, 0x00	; 0
     6a4:	0e 94 46 03 	call	0x68c	; 0x68c <joystick_read>
     6a8:	90 93 ca 03 	sts	0x03CA, r25
     6ac:	80 93 c9 03 	sts	0x03C9, r24
	center_val_Y = joystick_read(JOYSTICK_Y);
     6b0:	81 e0       	ldi	r24, 0x01	; 1
     6b2:	0e 94 46 03 	call	0x68c	; 0x68c <joystick_read>
     6b6:	90 93 cc 03 	sts	0x03CC, r25
     6ba:	80 93 cb 03 	sts	0x03CB, r24
     6be:	08 95       	ret

000006c0 <read_converted>:
}

signed int read_converted(joy_channel channel){
     6c0:	cf 93       	push	r28
     6c2:	c8 2f       	mov	r28, r24

	int v = (joystick_read(channel));
     6c4:	0e 94 46 03 	call	0x68c	; 0x68c <joystick_read>

	if      (channel == JOYSTICK_X)  {v -= center_val_X;}
     6c8:	c1 11       	cpse	r28, r1
     6ca:	07 c0       	rjmp	.+14     	; 0x6da <read_converted+0x1a>
     6cc:	20 91 c9 03 	lds	r18, 0x03C9
     6d0:	30 91 ca 03 	lds	r19, 0x03CA
     6d4:	82 1b       	sub	r24, r18
     6d6:	93 0b       	sbc	r25, r19
     6d8:	08 c0       	rjmp	.+16     	; 0x6ea <read_converted+0x2a>
	else if (channel == JOYSTICK_Y)  {v -= center_val_Y;}
     6da:	c1 30       	cpi	r28, 0x01	; 1
     6dc:	31 f4       	brne	.+12     	; 0x6ea <read_converted+0x2a>
     6de:	20 91 cb 03 	lds	r18, 0x03CB
     6e2:	30 91 cc 03 	lds	r19, 0x03CC
     6e6:	82 1b       	sub	r24, r18
     6e8:	93 0b       	sbc	r25, r19

	return  (v > 127)	? 127 :
     6ea:	80 38       	cpi	r24, 0x80	; 128
     6ec:	2f ef       	ldi	r18, 0xFF	; 255
     6ee:	92 07       	cpc	r25, r18
     6f0:	14 f4       	brge	.+4      	; 0x6f6 <read_converted+0x36>
     6f2:	80 e8       	ldi	r24, 0x80	; 128
     6f4:	9f ef       	ldi	r25, 0xFF	; 255
     6f6:	80 38       	cpi	r24, 0x80	; 128
     6f8:	91 05       	cpc	r25, r1
     6fa:	14 f0       	brlt	.+4      	; 0x700 <read_converted+0x40>
     6fc:	8f e7       	ldi	r24, 0x7F	; 127
     6fe:	90 e0       	ldi	r25, 0x00	; 0
			(v < -128)	? -128 :
			 v;
}
     700:	cf 91       	pop	r28
     702:	08 95       	ret

00000704 <joystick_direction_Y>:
	_delay_us(40);
	return (uint8_t) ext_ram[0];
}

signed int joystick_direction_Y(){
	signed int joy_Y = read_converted(JOYSTICK_Y);
     704:	81 e0       	ldi	r24, 0x01	; 1
     706:	0e 94 60 03 	call	0x6c0	; 0x6c0 <read_converted>
	if(joy_Y >= 100){
     70a:	84 36       	cpi	r24, 0x64	; 100
     70c:	91 05       	cpc	r25, r1
     70e:	64 f4       	brge	.+24     	; 0x728 <joystick_direction_Y+0x24>
		return 1;
	} else if (joy_Y <= -100) {
     710:	21 e0       	ldi	r18, 0x01	; 1
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	8d 39       	cpi	r24, 0x9D	; 157
     716:	9f 4f       	sbci	r25, 0xFF	; 255
     718:	14 f0       	brlt	.+4      	; 0x71e <joystick_direction_Y+0x1a>
     71a:	20 e0       	ldi	r18, 0x00	; 0
     71c:	30 e0       	ldi	r19, 0x00	; 0
     71e:	88 27       	eor	r24, r24
     720:	99 27       	eor	r25, r25
     722:	82 1b       	sub	r24, r18
     724:	93 0b       	sbc	r25, r19
     726:	08 95       	ret
}

signed int joystick_direction_Y(){
	signed int joy_Y = read_converted(JOYSTICK_Y);
	if(joy_Y >= 100){
		return 1;
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	90 e0       	ldi	r25, 0x00	; 0
	} else if (joy_Y <= -100) {
		return -1;
	} 
	return 0;
}
     72c:	08 95       	ret

0000072e <joystick_direction_X>:

signed int joystick_direction_X(){
	signed int joy_X = read_converted(JOYSTICK_X);
     72e:	80 e0       	ldi	r24, 0x00	; 0
     730:	0e 94 60 03 	call	0x6c0	; 0x6c0 <read_converted>
	if(joy_X >= 100){
     734:	84 36       	cpi	r24, 0x64	; 100
     736:	91 05       	cpc	r25, r1
     738:	64 f4       	brge	.+24     	; 0x752 <joystick_direction_X+0x24>
		return 1;
	} else if (joy_X <= -100) {
     73a:	21 e0       	ldi	r18, 0x01	; 1
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	8d 39       	cpi	r24, 0x9D	; 157
     740:	9f 4f       	sbci	r25, 0xFF	; 255
     742:	14 f0       	brlt	.+4      	; 0x748 <joystick_direction_X+0x1a>
     744:	20 e0       	ldi	r18, 0x00	; 0
     746:	30 e0       	ldi	r19, 0x00	; 0
     748:	88 27       	eor	r24, r24
     74a:	99 27       	eor	r25, r25
     74c:	82 1b       	sub	r24, r18
     74e:	93 0b       	sbc	r25, r19
     750:	08 95       	ret
}

signed int joystick_direction_X(){
	signed int joy_X = read_converted(JOYSTICK_X);
	if(joy_X >= 100){
		return 1;
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	90 e0       	ldi	r25, 0x00	; 0
	} else if (joy_X <= -100) {
		return -1;
	}
	return 0;
}
     756:	08 95       	ret

00000758 <mcp2515_write>:
	} else {
		;//printf("MCP2515 is in config mode after reset\n");
	}
}

void mcp2515_write(uint8_t address, uint8_t data){
     758:	cf 93       	push	r28
     75a:	df 93       	push	r29
     75c:	d8 2f       	mov	r29, r24
     75e:	c6 2f       	mov	r28, r22
	spi_select();
     760:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <spi_select>

	spi_send(MCP_WRITE);
     764:	82 e0       	ldi	r24, 0x02	; 2
     766:	0e 94 d1 05 	call	0xba2	; 0xba2 <spi_send>
	spi_send(address);
     76a:	8d 2f       	mov	r24, r29
     76c:	0e 94 d1 05 	call	0xba2	; 0xba2 <spi_send>
	spi_send(data);
     770:	8c 2f       	mov	r24, r28
     772:	0e 94 d1 05 	call	0xba2	; 0xba2 <spi_send>

	spi_deselect();
     776:	0e 94 de 05 	call	0xbbc	; 0xbbc <spi_deselect>
}
     77a:	df 91       	pop	r29
     77c:	cf 91       	pop	r28
     77e:	08 95       	ret

00000780 <mcp2515_request_to_send>:

void mcp2515_request_to_send(uint8_t command){
     780:	cf 93       	push	r28
	//Check last 3 bits of given command
	if (command <= 7) {
     782:	88 30       	cpi	r24, 0x08	; 8
     784:	18 f4       	brcc	.+6      	; 0x78c <mcp2515_request_to_send+0xc>
		command = MCP_RTS | command;
     786:	c8 2f       	mov	r28, r24
     788:	c0 68       	ori	r28, 0x80	; 128
     78a:	01 c0       	rjmp	.+2      	; 0x78e <mcp2515_request_to_send+0xe>
	} else {
		command = MCP_RTS;
     78c:	c0 e8       	ldi	r28, 0x80	; 128
	}

	//Select, send RTS command, then deselect
	spi_select();
     78e:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <spi_select>
	spi_send(command);
     792:	8c 2f       	mov	r24, r28
     794:	0e 94 d1 05 	call	0xba2	; 0xba2 <spi_send>
	spi_deselect();
     798:	0e 94 de 05 	call	0xbbc	; 0xbbc <spi_deselect>
}
     79c:	cf 91       	pop	r28
     79e:	08 95       	ret

000007a0 <mcp2515_bit_modify>:

void mcp2515_bit_modify(uint8_t address, uint8_t mask, uint8_t data){
     7a0:	1f 93       	push	r17
     7a2:	cf 93       	push	r28
     7a4:	df 93       	push	r29
     7a6:	18 2f       	mov	r17, r24
     7a8:	d6 2f       	mov	r29, r22
     7aa:	c4 2f       	mov	r28, r20
	spi_select();
     7ac:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <spi_select>

	spi_send(MCP_BITMOD);
     7b0:	85 e0       	ldi	r24, 0x05	; 5
     7b2:	0e 94 d1 05 	call	0xba2	; 0xba2 <spi_send>
	spi_send(address);
     7b6:	81 2f       	mov	r24, r17
     7b8:	0e 94 d1 05 	call	0xba2	; 0xba2 <spi_send>
	spi_send(mask);
     7bc:	8d 2f       	mov	r24, r29
     7be:	0e 94 d1 05 	call	0xba2	; 0xba2 <spi_send>
	spi_send(data);
     7c2:	8c 2f       	mov	r24, r28
     7c4:	0e 94 d1 05 	call	0xba2	; 0xba2 <spi_send>

	spi_deselect();
     7c8:	0e 94 de 05 	call	0xbbc	; 0xbbc <spi_deselect>
}
     7cc:	df 91       	pop	r29
     7ce:	cf 91       	pop	r28
     7d0:	1f 91       	pop	r17
     7d2:	08 95       	ret

000007d4 <mcp2515_reset>:

void mcp2515_reset(){
	spi_select();
     7d4:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <spi_select>
	spi_send(MCP_RESET);	
     7d8:	80 ec       	ldi	r24, 0xC0	; 192
     7da:	0e 94 d1 05 	call	0xba2	; 0xba2 <spi_send>
	spi_deselect();
     7de:	0e 94 de 05 	call	0xbbc	; 0xbbc <spi_deselect>
     7e2:	08 95       	ret

000007e4 <mcp2515_read>:
}


uint8_t mcp2515_read(uint8_t address){
     7e4:	cf 93       	push	r28
     7e6:	c8 2f       	mov	r28, r24
	uint8_t result;

	spi_select();
     7e8:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <spi_select>
	
	//Send command and address, then read result
	spi_send(MCP_READ);
     7ec:	83 e0       	ldi	r24, 0x03	; 3
     7ee:	0e 94 d1 05 	call	0xba2	; 0xba2 <spi_send>
	spi_send(address);
     7f2:	8c 2f       	mov	r24, r28
     7f4:	0e 94 d1 05 	call	0xba2	; 0xba2 <spi_send>

	result = spi_read();
     7f8:	0e 94 d5 05 	call	0xbaa	; 0xbaa <spi_read>
     7fc:	c8 2f       	mov	r28, r24
	spi_deselect();
     7fe:	0e 94 de 05 	call	0xbbc	; 0xbbc <spi_deselect>

	return result;	
}
     802:	8c 2f       	mov	r24, r28
     804:	cf 91       	pop	r28
     806:	08 95       	ret

00000808 <mcp2515_init>:
#include <util/delay.h>
#include "uart_driver.h"
#include "spi_driver.h"
#include "mcp2515_driver.h"

void mcp2515_init() {
     808:	cf 93       	push	r28
     80a:	df 93       	push	r29
     80c:	1f 92       	push	r1
     80e:	cd b7       	in	r28, 0x3d	; 61
     810:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t value_check;

	//Start SPI driver
	spi_init();
     812:	0e 94 c9 05 	call	0xb92	; 0xb92 <spi_init>

	mcp2515_reset();
     816:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <mcp2515_reset>
	
	//Testing for correct initialization
	value_check = mcp2515_read(MCP_CANSTAT);
     81a:	8e e0       	ldi	r24, 0x0E	; 14
     81c:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <mcp2515_read>
     820:	89 83       	std	Y+1, r24	; 0x01
	
	if ((value_check & MODE_MASK) != MODE_CONFIG) {
     822:	89 81       	ldd	r24, Y+1	; 0x01
     824:	80 7e       	andi	r24, 0xE0	; 224
     826:	80 38       	cpi	r24, 0x80	; 128
     828:	21 f0       	breq	.+8      	; 0x832 <mcp2515_init+0x2a>
		printf("MCP2515 is not in config mode after reset\n");
     82a:	80 ec       	ldi	r24, 0xC0	; 192
     82c:	91 e0       	ldi	r25, 0x01	; 1
     82e:	0e 94 85 0a 	call	0x150a	; 0x150a <puts>
	} else {
		;//printf("MCP2515 is in config mode after reset\n");
	}
}
     832:	0f 90       	pop	r0
     834:	df 91       	pop	r29
     836:	cf 91       	pop	r28
     838:	08 95       	ret

0000083a <oled_print_char>:
		//Set higher column address                                                                                                                                                                                                                                                                                                                                                                     
		*oled_command_addr = 0x10 + (column * (FONTWIDTH)>>4);
	}
}

void oled_print_char(char ch){
     83a:	28 e0       	ldi	r18, 0x08	; 8
     83c:	82 9f       	mul	r24, r18
     83e:	c0 01       	movw	r24, r0
     840:	11 24       	eor	r1, r1
     842:	fc 01       	movw	r30, r24
     844:	e0 59       	subi	r30, 0x90	; 144
     846:	f0 40       	sbci	r31, 0x00	; 0
	for (uint8_t i = 0; i<FONTWIDTH; i++) {
     848:	80 e0       	ldi	r24, 0x00	; 0
		oled_write_data(pgm_read_byte(&font[ch - FONTOFFSET][i]));
     84a:	94 91       	lpm	r25, Z
void oled_write_command(uint8_t command){
	*oled_command_addr = command;
}

void oled_write_data(uint8_t data){
	*oled_data_addr = data;
     84c:	a0 91 0a 01 	lds	r26, 0x010A
     850:	b0 91 0b 01 	lds	r27, 0x010B
     854:	9c 93       	st	X, r25
		*oled_command_addr = 0x10 + (column * (FONTWIDTH)>>4);
	}
}

void oled_print_char(char ch){
	for (uint8_t i = 0; i<FONTWIDTH; i++) {
     856:	8f 5f       	subi	r24, 0xFF	; 255
     858:	31 96       	adiw	r30, 0x01	; 1
     85a:	88 30       	cpi	r24, 0x08	; 8
     85c:	b1 f7       	brne	.-20     	; 0x84a <oled_print_char+0x10>
		oled_write_data(pgm_read_byte(&font[ch - FONTOFFSET][i]));
	}
}
     85e:	08 95       	ret

00000860 <oled_goto_page>:
void oled_back(){
	
}

void oled_goto_page(unsigned int page) {
	oled_write_command(0xB0 + page);
     860:	90 eb       	ldi	r25, 0xB0	; 176
     862:	98 0f       	add	r25, r24
	_delay_ms(800);
	oled_clear_screen();
}

void oled_write_command(uint8_t command){
	*oled_command_addr = command;
     864:	e0 91 0c 01 	lds	r30, 0x010C
     868:	f0 91 0d 01 	lds	r31, 0x010D
     86c:	90 83       	st	Z, r25
	
}

void oled_goto_page(unsigned int page) {
	oled_write_command(0xB0 + page);
	global_page = page;
     86e:	80 93 cd 03 	sts	0x03CD, r24
     872:	82 e5       	ldi	r24, 0x52	; 82
     874:	8a 95       	dec	r24
     876:	f1 f7       	brne	.-4      	; 0x874 <oled_goto_page+0x14>
     878:	08 95       	ret

0000087a <oled_clear_line>:
	_delay_us(50);
}

void oled_clear_line(){
     87a:	80 e8       	ldi	r24, 0x80	; 128
     87c:	90 e0       	ldi	r25, 0x00	; 0
void oled_write_command(uint8_t command){
	*oled_command_addr = command;
}

void oled_write_data(uint8_t data){
	*oled_data_addr = data;
     87e:	e0 91 0a 01 	lds	r30, 0x010A
     882:	f0 91 0b 01 	lds	r31, 0x010B
     886:	10 82       	st	Z, r1
     888:	01 97       	sbiw	r24, 0x01	; 1
	global_page = page;
	_delay_us(50);
}

void oled_clear_line(){
	for (int i = 0; i<128; i++) {
     88a:	00 97       	sbiw	r24, 0x00	; 0
     88c:	c1 f7       	brne	.-16     	; 0x87e <oled_clear_line+0x4>
		oled_write_data(0b00000000);
	}
}
     88e:	08 95       	ret

00000890 <oled_clear_screen>:

void oled_clear_screen() {
     890:	cf 93       	push	r28
     892:	df 93       	push	r29
     894:	c0 e0       	ldi	r28, 0x00	; 0
     896:	d0 e0       	ldi	r29, 0x00	; 0
	for (uint8_t i = 0; i<8; i++) {
		oled_goto_page(i);
     898:	ce 01       	movw	r24, r28
     89a:	0e 94 30 04 	call	0x860	; 0x860 <oled_goto_page>
		oled_clear_line();
     89e:	0e 94 3d 04 	call	0x87a	; 0x87a <oled_clear_line>
     8a2:	21 96       	adiw	r28, 0x01	; 1
		oled_write_data(0b00000000);
	}
}

void oled_clear_screen() {
	for (uint8_t i = 0; i<8; i++) {
     8a4:	c8 30       	cpi	r28, 0x08	; 8
     8a6:	d1 05       	cpc	r29, r1
     8a8:	b9 f7       	brne	.-18     	; 0x898 <oled_clear_screen+0x8>
		oled_goto_page(i);
		oled_clear_line();
		//_delay_ms(50);
	}
}
     8aa:	df 91       	pop	r29
     8ac:	cf 91       	pop	r28
     8ae:	08 95       	ret

000008b0 <oled_pos>:

void oled_pos(unsigned int row, unsigned int column){
     8b0:	cf 93       	push	r28
     8b2:	df 93       	push	r29
     8b4:	eb 01       	movw	r28, r22
	oled_goto_page(row);
     8b6:	0e 94 30 04 	call	0x860	; 0x860 <oled_goto_page>
	if(column < (128/FONTWIDTH)){
     8ba:	c0 31       	cpi	r28, 0x10	; 16
     8bc:	d1 05       	cpc	r29, r1
     8be:	e8 f4       	brcc	.+58     	; 0x8fa <oled_pos+0x4a>
		//Save column program goes to
		global_col = column * FONTWIDTH;
     8c0:	8c 2f       	mov	r24, r28
     8c2:	88 0f       	add	r24, r24
     8c4:	88 0f       	add	r24, r24
     8c6:	88 0f       	add	r24, r24
     8c8:	80 93 ce 03 	sts	0x03CE, r24
		//Set lower column address
		*oled_command_addr = 0x00 + (column * (FONTWIDTH)>>4);
     8cc:	e0 91 0c 01 	lds	r30, 0x010C
     8d0:	f0 91 0d 01 	lds	r31, 0x010D
     8d4:	cc 0f       	add	r28, r28
     8d6:	dd 1f       	adc	r29, r29
     8d8:	cc 0f       	add	r28, r28
     8da:	dd 1f       	adc	r29, r29
     8dc:	cc 0f       	add	r28, r28
     8de:	dd 1f       	adc	r29, r29
     8e0:	d2 95       	swap	r29
     8e2:	c2 95       	swap	r28
     8e4:	cf 70       	andi	r28, 0x0F	; 15
     8e6:	cd 27       	eor	r28, r29
     8e8:	df 70       	andi	r29, 0x0F	; 15
     8ea:	cd 27       	eor	r28, r29
     8ec:	c0 83       	st	Z, r28
		//Set higher column address                                                                                                                                                                                                                                                                                                                                                                     
		*oled_command_addr = 0x10 + (column * (FONTWIDTH)>>4);
     8ee:	e0 91 0c 01 	lds	r30, 0x010C
     8f2:	f0 91 0d 01 	lds	r31, 0x010D
     8f6:	c0 5f       	subi	r28, 0xF0	; 240
     8f8:	c0 83       	st	Z, r28
	}
}
     8fa:	df 91       	pop	r29
     8fc:	cf 91       	pop	r28
     8fe:	08 95       	ret

00000900 <oled_printf>:
	for (uint8_t i = 0; i<FONTWIDTH; i++) {
		oled_write_data(pgm_read_byte(&font[ch - FONTOFFSET][i]));
	}
}

void oled_printf(char* fmt, ...){
     900:	cf 93       	push	r28
     902:	df 93       	push	r29
     904:	cd b7       	in	r28, 0x3d	; 61
     906:	de b7       	in	r29, 0x3e	; 62
     908:	fe 01       	movw	r30, r28
     90a:	35 96       	adiw	r30, 0x05	; 5
     90c:	61 91       	ld	r22, Z+
     90e:	71 91       	ld	r23, Z+
	va_list v;
	va_start(v, fmt);
	vfprintf(&oled_stdout, fmt, v);
     910:	af 01       	movw	r20, r30
     912:	8e e0       	ldi	r24, 0x0E	; 14
     914:	91 e0       	ldi	r25, 0x01	; 1
     916:	0e 94 b2 0a 	call	0x1564	; 0x1564 <vfprintf>
	va_end(v);
}
     91a:	df 91       	pop	r29
     91c:	cf 91       	pop	r28
     91e:	08 95       	ret

00000920 <oled_init>:
	_delay_ms(800);
	oled_clear_screen();
}

void oled_write_command(uint8_t command){
	*oled_command_addr = command;
     920:	e0 91 0c 01 	lds	r30, 0x010C
     924:	f0 91 0d 01 	lds	r31, 0x010D
     928:	8e ea       	ldi	r24, 0xAE	; 174
     92a:	80 83       	st	Z, r24
     92c:	e0 91 0c 01 	lds	r30, 0x010C
     930:	f0 91 0d 01 	lds	r31, 0x010D
     934:	81 ea       	ldi	r24, 0xA1	; 161
     936:	80 83       	st	Z, r24
     938:	e0 91 0c 01 	lds	r30, 0x010C
     93c:	f0 91 0d 01 	lds	r31, 0x010D
     940:	8a ed       	ldi	r24, 0xDA	; 218
     942:	80 83       	st	Z, r24
     944:	e0 91 0c 01 	lds	r30, 0x010C
     948:	f0 91 0d 01 	lds	r31, 0x010D
     94c:	82 e1       	ldi	r24, 0x12	; 18
     94e:	80 83       	st	Z, r24
     950:	e0 91 0c 01 	lds	r30, 0x010C
     954:	f0 91 0d 01 	lds	r31, 0x010D
     958:	88 ec       	ldi	r24, 0xC8	; 200
     95a:	80 83       	st	Z, r24
     95c:	e0 91 0c 01 	lds	r30, 0x010C
     960:	f0 91 0d 01 	lds	r31, 0x010D
     964:	88 ea       	ldi	r24, 0xA8	; 168
     966:	80 83       	st	Z, r24
     968:	e0 91 0c 01 	lds	r30, 0x010C
     96c:	f0 91 0d 01 	lds	r31, 0x010D
     970:	8f e3       	ldi	r24, 0x3F	; 63
     972:	80 83       	st	Z, r24
     974:	e0 91 0c 01 	lds	r30, 0x010C
     978:	f0 91 0d 01 	lds	r31, 0x010D
     97c:	85 ed       	ldi	r24, 0xD5	; 213
     97e:	80 83       	st	Z, r24
     980:	e0 91 0c 01 	lds	r30, 0x010C
     984:	f0 91 0d 01 	lds	r31, 0x010D
     988:	80 e8       	ldi	r24, 0x80	; 128
     98a:	80 83       	st	Z, r24
     98c:	e0 91 0c 01 	lds	r30, 0x010C
     990:	f0 91 0d 01 	lds	r31, 0x010D
     994:	81 e8       	ldi	r24, 0x81	; 129
     996:	80 83       	st	Z, r24
     998:	e0 91 0c 01 	lds	r30, 0x010C
     99c:	f0 91 0d 01 	lds	r31, 0x010D
     9a0:	80 e5       	ldi	r24, 0x50	; 80
     9a2:	80 83       	st	Z, r24
     9a4:	e0 91 0c 01 	lds	r30, 0x010C
     9a8:	f0 91 0d 01 	lds	r31, 0x010D
     9ac:	89 ed       	ldi	r24, 0xD9	; 217
     9ae:	80 83       	st	Z, r24
     9b0:	e0 91 0c 01 	lds	r30, 0x010C
     9b4:	f0 91 0d 01 	lds	r31, 0x010D
     9b8:	81 e2       	ldi	r24, 0x21	; 33
     9ba:	80 83       	st	Z, r24
     9bc:	e0 91 0c 01 	lds	r30, 0x010C
     9c0:	f0 91 0d 01 	lds	r31, 0x010D
     9c4:	80 e2       	ldi	r24, 0x20	; 32
     9c6:	80 83       	st	Z, r24
     9c8:	e0 91 0c 01 	lds	r30, 0x010C
     9cc:	f0 91 0d 01 	lds	r31, 0x010D
     9d0:	82 e0       	ldi	r24, 0x02	; 2
     9d2:	80 83       	st	Z, r24
     9d4:	e0 91 0c 01 	lds	r30, 0x010C
     9d8:	f0 91 0d 01 	lds	r31, 0x010D
     9dc:	8b ed       	ldi	r24, 0xDB	; 219
     9de:	80 83       	st	Z, r24
     9e0:	e0 91 0c 01 	lds	r30, 0x010C
     9e4:	f0 91 0d 01 	lds	r31, 0x010D
     9e8:	80 e3       	ldi	r24, 0x30	; 48
     9ea:	80 83       	st	Z, r24
     9ec:	e0 91 0c 01 	lds	r30, 0x010C
     9f0:	f0 91 0d 01 	lds	r31, 0x010D
     9f4:	8d ea       	ldi	r24, 0xAD	; 173
     9f6:	80 83       	st	Z, r24
     9f8:	e0 91 0c 01 	lds	r30, 0x010C
     9fc:	f0 91 0d 01 	lds	r31, 0x010D
     a00:	10 82       	st	Z, r1
     a02:	e0 91 0c 01 	lds	r30, 0x010C
     a06:	f0 91 0d 01 	lds	r31, 0x010D
     a0a:	84 ea       	ldi	r24, 0xA4	; 164
     a0c:	80 83       	st	Z, r24
     a0e:	e0 91 0c 01 	lds	r30, 0x010C
     a12:	f0 91 0d 01 	lds	r31, 0x010D
     a16:	86 ea       	ldi	r24, 0xA6	; 166
     a18:	80 83       	st	Z, r24
     a1a:	e0 91 0c 01 	lds	r30, 0x010C
     a1e:	f0 91 0d 01 	lds	r31, 0x010D
     a22:	8f ea       	ldi	r24, 0xAF	; 175
     a24:	80 83       	st	Z, r24
	oled_write_command(0x00);
	oled_write_command(0xa4);    //out follows RAM content
	oled_write_command(0xa6);    //set normal display
	oled_write_command(0xaf);    // display on
	
	oled_clear_screen();
     a26:	0e 94 48 04 	call	0x890	; 0x890 <oled_clear_screen>
	oled_pos(2,3);
     a2a:	63 e0       	ldi	r22, 0x03	; 3
     a2c:	70 e0       	ldi	r23, 0x00	; 0
     a2e:	82 e0       	ldi	r24, 0x02	; 2
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	0e 94 58 04 	call	0x8b0	; 0x8b0 <oled_pos>
	oled_printf(" #SWAG");
     a36:	81 e2       	ldi	r24, 0x21	; 33
     a38:	92 e0       	ldi	r25, 0x02	; 2
     a3a:	9f 93       	push	r25
     a3c:	8f 93       	push	r24
     a3e:	0e 94 80 04 	call	0x900	; 0x900 <oled_printf>
	oled_pos(3,7);
     a42:	67 e0       	ldi	r22, 0x07	; 7
     a44:	70 e0       	ldi	r23, 0x00	; 0
     a46:	83 e0       	ldi	r24, 0x03	; 3
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	0e 94 58 04 	call	0x8b0	; 0x8b0 <oled_pos>
	oled_printf("  4");
     a4e:	88 e2       	ldi	r24, 0x28	; 40
     a50:	92 e0       	ldi	r25, 0x02	; 2
     a52:	9f 93       	push	r25
     a54:	8f 93       	push	r24
     a56:	0e 94 80 04 	call	0x900	; 0x900 <oled_printf>
	oled_pos(4,9);
     a5a:	69 e0       	ldi	r22, 0x09	; 9
     a5c:	70 e0       	ldi	r23, 0x00	; 0
     a5e:	84 e0       	ldi	r24, 0x04	; 4
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	0e 94 58 04 	call	0x8b0	; 0x8b0 <oled_pos>
	oled_printf(" LYFE");
     a66:	8c e2       	ldi	r24, 0x2C	; 44
     a68:	92 e0       	ldi	r25, 0x02	; 2
     a6a:	9f 93       	push	r25
     a6c:	8f 93       	push	r24
     a6e:	0e 94 80 04 	call	0x900	; 0x900 <oled_printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a72:	2f ef       	ldi	r18, 0xFF	; 255
     a74:	8f ef       	ldi	r24, 0xFF	; 255
     a76:	9b e0       	ldi	r25, 0x0B	; 11
     a78:	21 50       	subi	r18, 0x01	; 1
     a7a:	80 40       	sbci	r24, 0x00	; 0
     a7c:	90 40       	sbci	r25, 0x00	; 0
     a7e:	e1 f7       	brne	.-8      	; 0xa78 <oled_init+0x158>
     a80:	00 c0       	rjmp	.+0      	; 0xa82 <oled_init+0x162>
     a82:	00 c0       	rjmp	.+0      	; 0xa84 <oled_init+0x164>
	_delay_ms(800);
	oled_clear_screen();
     a84:	0e 94 48 04 	call	0x890	; 0x890 <oled_clear_screen>
     a88:	0f 90       	pop	r0
     a8a:	0f 90       	pop	r0
     a8c:	0f 90       	pop	r0
     a8e:	0f 90       	pop	r0
     a90:	0f 90       	pop	r0
     a92:	0f 90       	pop	r0
     a94:	08 95       	ret

00000a96 <oled_get_arrow_page>:

//Arrow functions

uint8_t oled_get_arrow_page(){
	return arrow_global;
}
     a96:	80 91 c8 03 	lds	r24, 0x03C8
     a9a:	08 95       	ret

00000a9c <oled_print_arrow>:

void oled_print_arrow(uint8_t row, uint8_t col){
	arrow_global = row;
     a9c:	80 93 c8 03 	sts	0x03C8, r24
	oled_pos(row, col);
     aa0:	70 e0       	ldi	r23, 0x00	; 0
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	0e 94 58 04 	call	0x8b0	; 0x8b0 <oled_pos>
void oled_write_command(uint8_t command){
	*oled_command_addr = command;
}

void oled_write_data(uint8_t data){
	*oled_data_addr = data;
     aa8:	e0 91 0a 01 	lds	r30, 0x010A
     aac:	f0 91 0b 01 	lds	r31, 0x010B
     ab0:	88 e1       	ldi	r24, 0x18	; 24
     ab2:	80 83       	st	Z, r24
     ab4:	e0 91 0a 01 	lds	r30, 0x010A
     ab8:	f0 91 0b 01 	lds	r31, 0x010B
     abc:	80 83       	st	Z, r24
     abe:	e0 91 0a 01 	lds	r30, 0x010A
     ac2:	f0 91 0b 01 	lds	r31, 0x010B
     ac6:	9e e7       	ldi	r25, 0x7E	; 126
     ac8:	90 83       	st	Z, r25
     aca:	e0 91 0a 01 	lds	r30, 0x010A
     ace:	f0 91 0b 01 	lds	r31, 0x010B
     ad2:	9c e3       	ldi	r25, 0x3C	; 60
     ad4:	90 83       	st	Z, r25
     ad6:	e0 91 0a 01 	lds	r30, 0x010A
     ada:	f0 91 0b 01 	lds	r31, 0x010B
     ade:	80 83       	st	Z, r24
     ae0:	08 95       	ret

00000ae2 <oled_clear_arrow>:
	oled_write_data(0b00111100);
	oled_write_data(0b00011000);
}

void oled_clear_arrow(uint8_t row, uint8_t col){
	oled_pos(row, col);
     ae2:	70 e0       	ldi	r23, 0x00	; 0
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	0e 94 58 04 	call	0x8b0	; 0x8b0 <oled_pos>
void oled_write_command(uint8_t command){
	*oled_command_addr = command;
}

void oled_write_data(uint8_t data){
	*oled_data_addr = data;
     aea:	e0 91 0a 01 	lds	r30, 0x010A
     aee:	f0 91 0b 01 	lds	r31, 0x010B
     af2:	10 82       	st	Z, r1
     af4:	e0 91 0a 01 	lds	r30, 0x010A
     af8:	f0 91 0b 01 	lds	r31, 0x010B
     afc:	10 82       	st	Z, r1
     afe:	e0 91 0a 01 	lds	r30, 0x010A
     b02:	f0 91 0b 01 	lds	r31, 0x010B
     b06:	10 82       	st	Z, r1
     b08:	e0 91 0a 01 	lds	r30, 0x010A
     b0c:	f0 91 0b 01 	lds	r31, 0x010B
     b10:	10 82       	st	Z, r1
     b12:	e0 91 0a 01 	lds	r30, 0x010A
     b16:	f0 91 0b 01 	lds	r31, 0x010B
     b1a:	10 82       	st	Z, r1
     b1c:	08 95       	ret

00000b1e <oled_move_arrow>:
	oled_write_data(0b00000000);
	oled_write_data(0b00000000);
}

void oled_move_arrow(signed int joystick_Y, unsigned int menu_min, unsigned int menu_max){
	if(joystick_Y < 0 && arrow_global < menu_max) {
     b1e:	99 23       	and	r25, r25
     b20:	a4 f4       	brge	.+40     	; 0xb4a <oled_move_arrow+0x2c>
     b22:	e0 91 c8 03 	lds	r30, 0x03C8
     b26:	2e 2f       	mov	r18, r30
     b28:	30 e0       	ldi	r19, 0x00	; 0
     b2a:	24 17       	cp	r18, r20
     b2c:	35 07       	cpc	r19, r21
     b2e:	68 f4       	brcc	.+26     	; 0xb4a <oled_move_arrow+0x2c>
		oled_clear_arrow(arrow_global, 0);
     b30:	60 e0       	ldi	r22, 0x00	; 0
     b32:	8e 2f       	mov	r24, r30
     b34:	0e 94 71 05 	call	0xae2	; 0xae2 <oled_clear_arrow>
		arrow_global++;
     b38:	80 91 c8 03 	lds	r24, 0x03C8
     b3c:	8f 5f       	subi	r24, 0xFF	; 255
     b3e:	80 93 c8 03 	sts	0x03C8, r24
		oled_print_arrow(arrow_global, 0);
     b42:	60 e0       	ldi	r22, 0x00	; 0
     b44:	0e 94 4e 05 	call	0xa9c	; 0xa9c <oled_print_arrow>
     b48:	08 95       	ret
	} else if (joystick_Y > 0 && arrow_global > menu_min) {
     b4a:	18 16       	cp	r1, r24
     b4c:	19 06       	cpc	r1, r25
     b4e:	94 f4       	brge	.+36     	; 0xb74 <oled_move_arrow+0x56>
     b50:	80 91 c8 03 	lds	r24, 0x03C8
     b54:	28 2f       	mov	r18, r24
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	62 17       	cp	r22, r18
     b5a:	73 07       	cpc	r23, r19
     b5c:	58 f4       	brcc	.+22     	; 0xb74 <oled_move_arrow+0x56>
		oled_clear_arrow(arrow_global, 0);
     b5e:	60 e0       	ldi	r22, 0x00	; 0
     b60:	0e 94 71 05 	call	0xae2	; 0xae2 <oled_clear_arrow>
		arrow_global--;
     b64:	80 91 c8 03 	lds	r24, 0x03C8
     b68:	81 50       	subi	r24, 0x01	; 1
     b6a:	80 93 c8 03 	sts	0x03C8, r24
		oled_print_arrow(arrow_global, 0);
     b6e:	60 e0       	ldi	r22, 0x00	; 0
     b70:	0e 94 4e 05 	call	0xa9c	; 0xa9c <oled_print_arrow>
     b74:	08 95       	ret

00000b76 <oled_arrow_handler>:
	}
}

unsigned int oled_arrow_handler(signed int joystick_Y, unsigned int menu_min, unsigned int menu_max){
	oled_move_arrow(joystick_Y, menu_min, menu_max);
     b76:	0e 94 8f 05 	call	0xb1e	; 0xb1e <oled_move_arrow>
     b7a:	2c ec       	ldi	r18, 0xCC	; 204
     b7c:	8c e0       	ldi	r24, 0x0C	; 12
     b7e:	91 e0       	ldi	r25, 0x01	; 1
     b80:	21 50       	subi	r18, 0x01	; 1
     b82:	80 40       	sbci	r24, 0x00	; 0
     b84:	90 40       	sbci	r25, 0x00	; 0
     b86:	e1 f7       	brne	.-8      	; 0xb80 <oled_arrow_handler+0xa>
     b88:	00 c0       	rjmp	.+0      	; 0xb8a <oled_arrow_handler+0x14>
	_delay_ms(70);
	return arrow_global;
     b8a:	80 91 c8 03 	lds	r24, 0x03C8
}
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	08 95       	ret

00000b92 <spi_init>:
#define SPI_MISO PB6
#define SPI_SCK PB7 

void spi_init(){
	//Set MOSI, SCK and SS as output pins 	
	DDRB |= (1 << SPI_MOSI) | (1 << SPI_SCK) | (1 << SPI_SS);
     b92:	87 b3       	in	r24, 0x17	; 23
     b94:	80 6b       	ori	r24, 0xB0	; 176
     b96:	87 bb       	out	0x17, r24	; 23
	
	//Set MISO as input pin
	DDRB &= ~(1 << SPI_MISO);
     b98:	be 98       	cbi	0x17, 6	; 23
	
	//Enable SPI in master mode and set clock rate fosc/16
	SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0);
     b9a:	8d b1       	in	r24, 0x0d	; 13
     b9c:	81 65       	ori	r24, 0x51	; 81
     b9e:	8d b9       	out	0x0d, r24	; 13
     ba0:	08 95       	ret

00000ba2 <spi_send>:
	return SPDR;
}

void spi_send(char data){
	//Start transmission
	SPDR = data;
     ba2:	8f b9       	out	0x0f, r24	; 15
	
	//Wait for transmission, checks if register is empty 
	while(!(SPSR & (1 << SPIF)));
     ba4:	77 9b       	sbis	0x0e, 7	; 14
     ba6:	fe cf       	rjmp	.-4      	; 0xba4 <spi_send+0x2>
}
     ba8:	08 95       	ret

00000baa <spi_read>:
}


uint8_t spi_read(){
	//Dummy send in order to read from slave
	spi_send(0xaa);
     baa:	8a ea       	ldi	r24, 0xAA	; 170
     bac:	0e 94 d1 05 	call	0xba2	; 0xba2 <spi_send>
	
	while(!(SPSR & (1 << SPIF)));
     bb0:	77 9b       	sbis	0x0e, 7	; 14
     bb2:	fe cf       	rjmp	.-4      	; 0xbb0 <spi_read+0x6>

	return SPDR;
     bb4:	8f b1       	in	r24, 0x0f	; 15
}
     bb6:	08 95       	ret

00000bb8 <spi_select>:
	while(!(SPSR & (1 << SPIF)));
}

void spi_select(){
	//Set !SS to 0 for selection of slave
	PORTB &= ~(1 << SPI_SS);
     bb8:	c4 98       	cbi	0x18, 4	; 24
     bba:	08 95       	ret

00000bbc <spi_deselect>:
}

void spi_deselect(){
	//Set !SS to 1 for deselection of slave
	PORTB |= (1 << SPI_SS);
     bbc:	c4 9a       	sbi	0x18, 4	; 24
     bbe:	08 95       	ret

00000bc0 <SRAM_test>:
	if (address_offset > 0x100) { return 0; }
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	return ext_ram[address_offset];
}

void SRAM_test(void) {
     bc0:	cf 92       	push	r12
     bc2:	df 92       	push	r13
     bc4:	ef 92       	push	r14
     bc6:	ff 92       	push	r15
     bc8:	0f 93       	push	r16
     bca:	1f 93       	push	r17
     bcc:	cf 93       	push	r28
     bce:	df 93       	push	r29
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size       = 0x800;
	uint16_t write_errors       = 0;
	uint16_t retrieval_errors   = 0;

	oled_clear_screen();
     bd0:	0e 94 48 04 	call	0x890	; 0x890 <oled_clear_screen>
	oled_pos(3,2);
     bd4:	62 e0       	ldi	r22, 0x02	; 2
     bd6:	70 e0       	ldi	r23, 0x00	; 0
     bd8:	83 e0       	ldi	r24, 0x03	; 3
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	0e 94 58 04 	call	0x8b0	; 0x8b0 <oled_pos>
	oled_printf("TESTING SRAM");
     be0:	82 e3       	ldi	r24, 0x32	; 50
     be2:	92 e0       	ldi	r25, 0x02	; 2
     be4:	9f 93       	push	r25
     be6:	8f 93       	push	r24
     be8:	0e 94 80 04 	call	0x900	; 0x900 <oled_printf>
	printf("\nStarting SRAM test...\n");
     bec:	8f e3       	ldi	r24, 0x3F	; 63
     bee:	92 e0       	ldi	r25, 0x02	; 2
     bf0:	0e 94 85 0a 	call	0x150a	; 0x150a <puts>

	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
     bf4:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <rand>
     bf8:	6c 01       	movw	r12, r24

	// Write phase: Immediately check that the correct value was stored
	srand(seed);
     bfa:	0e 94 66 0a 	call	0x14cc	; 0x14cc <srand>
     bfe:	0f 90       	pop	r0
     c00:	0f 90       	pop	r0
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     c02:	c0 e0       	ldi	r28, 0x00	; 0
     c04:	d0 e0       	ldi	r29, 0x00	; 0
}

void SRAM_test(void) {
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size       = 0x800;
	uint16_t write_errors       = 0;
     c06:	00 e0       	ldi	r16, 0x00	; 0
     c08:	10 e0       	ldi	r17, 0x00	; 0
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		ext_ram[i] = some_value;
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
     c0a:	0f 2e       	mov	r0, r31
     c0c:	f6 e5       	ldi	r31, 0x56	; 86
     c0e:	ef 2e       	mov	r14, r31
     c10:	f2 e0       	ldi	r31, 0x02	; 2
     c12:	ff 2e       	mov	r15, r31
     c14:	f0 2d       	mov	r31, r0
	uint16_t seed = rand();

	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     c16:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <rand>
     c1a:	fe 01       	movw	r30, r28
     c1c:	f8 5e       	subi	r31, 0xE8	; 232
		ext_ram[i] = some_value;
     c1e:	80 83       	st	Z, r24
		uint8_t retreived_value = ext_ram[i];
     c20:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     c22:	28 17       	cp	r18, r24
     c24:	a9 f0       	breq	.+42     	; 0xc50 <SRAM_test+0x90>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
     c26:	99 27       	eor	r25, r25
     c28:	9f 93       	push	r25
     c2a:	8f 93       	push	r24
     c2c:	1f 92       	push	r1
     c2e:	2f 93       	push	r18
     c30:	df 93       	push	r29
     c32:	cf 93       	push	r28
     c34:	ff 92       	push	r15
     c36:	ef 92       	push	r14
     c38:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <printf>
			write_errors++;
     c3c:	0f 5f       	subi	r16, 0xFF	; 255
     c3e:	1f 4f       	sbci	r17, 0xFF	; 255
     c40:	8d b7       	in	r24, 0x3d	; 61
     c42:	9e b7       	in	r25, 0x3e	; 62
     c44:	08 96       	adiw	r24, 0x08	; 8
     c46:	0f b6       	in	r0, 0x3f	; 63
     c48:	f8 94       	cli
     c4a:	9e bf       	out	0x3e, r25	; 62
     c4c:	0f be       	out	0x3f, r0	; 63
     c4e:	8d bf       	out	0x3d, r24	; 61
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();

	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     c50:	21 96       	adiw	r28, 0x01	; 1
     c52:	c1 15       	cp	r28, r1
     c54:	98 e0       	ldi	r25, 0x08	; 8
     c56:	d9 07       	cpc	r29, r25
     c58:	f1 f6       	brne	.-68     	; 0xc16 <SRAM_test+0x56>
			write_errors++;
		}
	}

	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);    // reset the PRNG to the state it had before the write phase
     c5a:	c6 01       	movw	r24, r12
     c5c:	0e 94 66 0a 	call	0x14cc	; 0x14cc <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     c60:	c0 e0       	ldi	r28, 0x00	; 0
     c62:	d0 e0       	ldi	r29, 0x00	; 0

void SRAM_test(void) {
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size       = 0x800;
	uint16_t write_errors       = 0;
	uint16_t retrieval_errors   = 0;
     c64:	e1 2c       	mov	r14, r1
     c66:	f1 2c       	mov	r15, r1
	srand(seed);    // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
     c68:	0f 2e       	mov	r0, r31
     c6a:	ff e8       	ldi	r31, 0x8F	; 143
     c6c:	cf 2e       	mov	r12, r31
     c6e:	f2 e0       	ldi	r31, 0x02	; 2
     c70:	df 2e       	mov	r13, r31
     c72:	f0 2d       	mov	r31, r0
	}

	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);    // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     c74:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <rand>
     c78:	fe 01       	movw	r30, r28
     c7a:	f8 5e       	subi	r31, 0xE8	; 232
		uint8_t retreived_value = ext_ram[i];
     c7c:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     c7e:	28 17       	cp	r18, r24
     c80:	b1 f0       	breq	.+44     	; 0xcae <SRAM_test+0xee>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
     c82:	99 27       	eor	r25, r25
     c84:	9f 93       	push	r25
     c86:	8f 93       	push	r24
     c88:	1f 92       	push	r1
     c8a:	2f 93       	push	r18
     c8c:	df 93       	push	r29
     c8e:	cf 93       	push	r28
     c90:	df 92       	push	r13
     c92:	cf 92       	push	r12
     c94:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <printf>
			retrieval_errors++;
     c98:	9f ef       	ldi	r25, 0xFF	; 255
     c9a:	e9 1a       	sub	r14, r25
     c9c:	f9 0a       	sbc	r15, r25
     c9e:	8d b7       	in	r24, 0x3d	; 61
     ca0:	9e b7       	in	r25, 0x3e	; 62
     ca2:	08 96       	adiw	r24, 0x08	; 8
     ca4:	0f b6       	in	r0, 0x3f	; 63
     ca6:	f8 94       	cli
     ca8:	9e bf       	out	0x3e, r25	; 62
     caa:	0f be       	out	0x3f, r0	; 63
     cac:	8d bf       	out	0x3d, r24	; 61
		}
	}

	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);    // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     cae:	21 96       	adiw	r28, 0x01	; 1
     cb0:	c1 15       	cp	r28, r1
     cb2:	98 e0       	ldi	r25, 0x08	; 8
     cb4:	d9 07       	cpc	r29, r25
     cb6:	f1 f6       	brne	.-68     	; 0xc74 <SRAM_test+0xb4>
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	if (retrieval_errors != 0 || write_errors != 0) { 
     cb8:	e1 14       	cp	r14, r1
     cba:	f1 04       	cpc	r15, r1
     cbc:	19 f4       	brne	.+6      	; 0xcc4 <SRAM_test+0x104>
     cbe:	01 15       	cp	r16, r1
     cc0:	11 05       	cpc	r17, r1
     cc2:	71 f1       	breq	.+92     	; 0xd20 <SRAM_test+0x160>
		oled_pos(5,0);
     cc4:	60 e0       	ldi	r22, 0x00	; 0
     cc6:	70 e0       	ldi	r23, 0x00	; 0
     cc8:	85 e0       	ldi	r24, 0x05	; 5
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	0e 94 58 04 	call	0x8b0	; 0x8b0 <oled_pos>
		oled_printf("R ERRORS:  %4d",retrieval_errors);
     cd0:	ff 92       	push	r15
     cd2:	ef 92       	push	r14
     cd4:	8c ec       	ldi	r24, 0xCC	; 204
     cd6:	92 e0       	ldi	r25, 0x02	; 2
     cd8:	9f 93       	push	r25
     cda:	8f 93       	push	r24
     cdc:	0e 94 80 04 	call	0x900	; 0x900 <oled_printf>
		oled_pos(6,0);
     ce0:	60 e0       	ldi	r22, 0x00	; 0
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	86 e0       	ldi	r24, 0x06	; 6
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	0e 94 58 04 	call	0x8b0	; 0x8b0 <oled_pos>
		oled_printf("W ERRORS:  %4d",write_errors);
     cec:	1f 93       	push	r17
     cee:	0f 93       	push	r16
     cf0:	8b ed       	ldi	r24, 0xDB	; 219
     cf2:	92 e0       	ldi	r25, 0x02	; 2
     cf4:	9f 93       	push	r25
     cf6:	8f 93       	push	r24
     cf8:	0e 94 80 04 	call	0x900	; 0x900 <oled_printf>
     cfc:	2f ef       	ldi	r18, 0xFF	; 255
     cfe:	8f ef       	ldi	r24, 0xFF	; 255
     d00:	9b e3       	ldi	r25, 0x3B	; 59
     d02:	21 50       	subi	r18, 0x01	; 1
     d04:	80 40       	sbci	r24, 0x00	; 0
     d06:	90 40       	sbci	r25, 0x00	; 0
     d08:	e1 f7       	brne	.-8      	; 0xd02 <SRAM_test+0x142>
     d0a:	00 c0       	rjmp	.+0      	; 0xd0c <SRAM_test+0x14c>
     d0c:	00 00       	nop
     d0e:	8d b7       	in	r24, 0x3d	; 61
     d10:	9e b7       	in	r25, 0x3e	; 62
     d12:	08 96       	adiw	r24, 0x08	; 8
     d14:	0f b6       	in	r0, 0x3f	; 63
     d16:	f8 94       	cli
     d18:	9e bf       	out	0x3e, r25	; 62
     d1a:	0f be       	out	0x3f, r0	; 63
     d1c:	8d bf       	out	0x3d, r24	; 61
     d1e:	0e c0       	rjmp	.+28     	; 0xd3c <SRAM_test+0x17c>
		_delay_ms(4000);
	} else {
		oled_pos(6,4);
     d20:	64 e0       	ldi	r22, 0x04	; 4
     d22:	70 e0       	ldi	r23, 0x00	; 0
     d24:	86 e0       	ldi	r24, 0x06	; 6
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	0e 94 58 04 	call	0x8b0	; 0x8b0 <oled_pos>
		oled_printf("NO ERRORS");
     d2c:	8a ee       	ldi	r24, 0xEA	; 234
     d2e:	92 e0       	ldi	r25, 0x02	; 2
     d30:	9f 93       	push	r25
     d32:	8f 93       	push	r24
     d34:	0e 94 80 04 	call	0x900	; 0x900 <oled_printf>
     d38:	0f 90       	pop	r0
     d3a:	0f 90       	pop	r0
	}
	printf("SRAM test completed with \n%4d errors in write phase and \n%4d errors in retrieval phase\n\n", write_errors, retrieval_errors);
     d3c:	ff 92       	push	r15
     d3e:	ef 92       	push	r14
     d40:	1f 93       	push	r17
     d42:	0f 93       	push	r16
     d44:	84 ef       	ldi	r24, 0xF4	; 244
     d46:	92 e0       	ldi	r25, 0x02	; 2
     d48:	9f 93       	push	r25
     d4a:	8f 93       	push	r24
     d4c:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <printf>
     d50:	0f 90       	pop	r0
     d52:	0f 90       	pop	r0
     d54:	0f 90       	pop	r0
     d56:	0f 90       	pop	r0
     d58:	0f 90       	pop	r0
     d5a:	0f 90       	pop	r0
     d5c:	df 91       	pop	r29
     d5e:	cf 91       	pop	r28
     d60:	1f 91       	pop	r17
     d62:	0f 91       	pop	r16
     d64:	ff 90       	pop	r15
     d66:	ef 90       	pop	r14
     d68:	df 90       	pop	r13
     d6a:	cf 90       	pop	r12
     d6c:	08 95       	ret

00000d6e <SRAM_init>:
#include "SRAM_driver.h"
#include "oled_driver.h"

//Simple setup for SRAM, also tests for correctness
void SRAM_init(){
	MCUCR = 0x80;
     d6e:	80 e8       	ldi	r24, 0x80	; 128
     d70:	85 bf       	out	0x35, r24	; 53
	DDRA = 0xFF;
     d72:	8f ef       	ldi	r24, 0xFF	; 255
     d74:	8a bb       	out	0x1a, r24	; 26
	SRAM_test();
     d76:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <SRAM_test>
     d7a:	08 95       	ret

00000d7c <uart_sendChar>:

}

void uart_sendChar(unsigned char data){
	//Wait for empty transmitter buffer
	while(!(UCSR0A & (1<<UDRE0)));
     d7c:	5d 9b       	sbis	0x0b, 5	; 11
     d7e:	fe cf       	rjmp	.-4      	; 0xd7c <uart_sendChar>
		
	//Put data into buffer, then send the data
	UDR0 = data;
     d80:	8c b9       	out	0x0c, r24	; 12
     d82:	08 95       	ret

00000d84 <uart_getChar>:
}


unsigned int uart_getChar(){
	//Wait for the data to be received 
	while(!(UCSR0A & (1<<RXC0))){}
     d84:	5f 9b       	sbis	0x0b, 7	; 11
     d86:	fe cf       	rjmp	.-4      	; 0xd84 <uart_getChar>
	
	//Get status and the 9th bit, then data from buffer
	return UDR0;
     d88:	8c b1       	in	r24, 0x0c	; 12
}
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	08 95       	ret

00000d8e <uart_init>:

static FILE uart_io = FDEV_SETUP_STREAM(uart_sendChar, uart_getChar, _FDEV_SETUP_RW);

void uart_init(unsigned int ubrr){
	//Set baud rate
	UBRR0L = (unsigned int) ubrr;
     d8e:	89 b9       	out	0x09, r24	; 9
	
	//Enable receiver and transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
     d90:	88 e1       	ldi	r24, 0x18	; 24
     d92:	8a b9       	out	0x0a, r24	; 10
	
	stdout = &uart_io;
     d94:	8c e1       	ldi	r24, 0x1C	; 28
     d96:	91 e0       	ldi	r25, 0x01	; 1
     d98:	90 93 d6 03 	sts	0x03D6, r25
     d9c:	80 93 d5 03 	sts	0x03D5, r24
	stdin = &uart_io;
     da0:	90 93 d4 03 	sts	0x03D4, r25
     da4:	80 93 d3 03 	sts	0x03D3, r24
     da8:	08 95       	ret

00000daa <main>:
#include "Drivers/mcp2515_driver.h"
#include "Drivers/can_driver.h"
#include "timer.h"

int main(void) {
    uart_init(MYUBRR);
     daa:	8f e1       	ldi	r24, 0x1F	; 31
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	0e 94 c7 06 	call	0xd8e	; 0xd8e <uart_init>
	printf("\nREBOOTED\n");
     db2:	8d e4       	ldi	r24, 0x4D	; 77
     db4:	93 e0       	ldi	r25, 0x03	; 3
     db6:	0e 94 85 0a 	call	0x150a	; 0x150a <puts>
	SRAM_init();
     dba:	0e 94 b7 06 	call	0xd6e	; 0xd6e <SRAM_init>
	joystick_init();
     dbe:	0e 94 51 03 	call	0x6a2	; 0x6a2 <joystick_init>
	button_init();
     dc2:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <button_init>
	oled_init();
     dc6:	0e 94 90 04 	call	0x920	; 0x920 <oled_init>
	//mcp2515_init();
	can_init();	
     dca:	0e 94 04 02 	call	0x408	; 0x408 <can_init>
	timer_init();
     dce:	0e 94 83 08 	call	0x1106	; 0x1106 <timer_init>

	DDRB |= (1<<DDB0);
     dd2:	b8 9a       	sbi	0x17, 0	; 23

	printf("\nAll init done\n\n");
     dd4:	87 e5       	ldi	r24, 0x57	; 87
     dd6:	93 e0       	ldi	r25, 0x03	; 3
     dd8:	0e 94 85 0a 	call	0x150a	; 0x150a <puts>
	//can_joy_test();
	while(1) { 
		//shell();
		//spi_test();

		menuitem* test_menu = MENU_create_menu();
     ddc:	0e 94 53 07 	call	0xea6	; 0xea6 <MENU_create_menu>
		MENU_navigate(test_menu);
     de0:	0e 94 fe 07 	call	0xffc	; 0xffc <MENU_navigate>
     de4:	2f ef       	ldi	r18, 0xFF	; 255
     de6:	8f ef       	ldi	r24, 0xFF	; 255
     de8:	95 e9       	ldi	r25, 0x95	; 149
     dea:	21 50       	subi	r18, 0x01	; 1
     dec:	80 40       	sbci	r24, 0x00	; 0
     dee:	90 40       	sbci	r25, 0x00	; 0
     df0:	e1 f7       	brne	.-8      	; 0xdea <main+0x40>
     df2:	00 c0       	rjmp	.+0      	; 0xdf4 <main+0x4a>
     df4:	00 00       	nop
     df6:	f2 cf       	rjmp	.-28     	; 0xddc <main+0x32>

00000df8 <MENU_new_item>:
#include "Drivers/mcp2515_driver.h"
#include "Drivers/can_driver.h"

#define MENU_INDENT 2

menuitem* MENU_new_item(char *name, void (*handlerFunc)(void), uint8_t number_of_submenus) {
     df8:	df 92       	push	r13
     dfa:	ef 92       	push	r14
     dfc:	ff 92       	push	r15
     dfe:	0f 93       	push	r16
     e00:	1f 93       	push	r17
     e02:	cf 93       	push	r28
     e04:	df 93       	push	r29
     e06:	7c 01       	movw	r14, r24
     e08:	8b 01       	movw	r16, r22
     e0a:	d4 2e       	mov	r13, r20
	menuitem* new_item = malloc(sizeof(menuitem));
     e0c:	89 e0       	ldi	r24, 0x09	; 9
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <malloc>
     e14:	ec 01       	movw	r28, r24
	
	new_item->name = name;
     e16:	fe 82       	std	Y+6, r15	; 0x06
     e18:	ed 82       	std	Y+5, r14	; 0x05
	new_item->handlerFunc = handlerFunc;
     e1a:	18 87       	std	Y+8, r17	; 0x08
     e1c:	0f 83       	std	Y+7, r16	; 0x07
	new_item->number_of_submenus = number_of_submenus;
     e1e:	d8 82       	st	Y, r13
	new_item->submenus = malloc(number_of_submenus * sizeof(menuitem));
     e20:	4d 2d       	mov	r20, r13
     e22:	50 e0       	ldi	r21, 0x00	; 0
     e24:	ca 01       	movw	r24, r20
     e26:	88 0f       	add	r24, r24
     e28:	99 1f       	adc	r25, r25
     e2a:	88 0f       	add	r24, r24
     e2c:	99 1f       	adc	r25, r25
     e2e:	88 0f       	add	r24, r24
     e30:	99 1f       	adc	r25, r25
     e32:	84 0f       	add	r24, r20
     e34:	95 1f       	adc	r25, r21
     e36:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <malloc>
     e3a:	9a 83       	std	Y+2, r25	; 0x02
     e3c:	89 83       	std	Y+1, r24	; 0x01
	
	return new_item;
}
     e3e:	ce 01       	movw	r24, r28
     e40:	df 91       	pop	r29
     e42:	cf 91       	pop	r28
     e44:	1f 91       	pop	r17
     e46:	0f 91       	pop	r16
     e48:	ff 90       	pop	r15
     e4a:	ef 90       	pop	r14
     e4c:	df 90       	pop	r13
     e4e:	08 95       	ret

00000e50 <MENU_assign_parents>:

void MENU_assign_parents(menuitem *current_menu){
     e50:	1f 93       	push	r17
     e52:	cf 93       	push	r28
     e54:	df 93       	push	r29
     e56:	ec 01       	movw	r28, r24
	for (uint8_t n = 0; n < current_menu->number_of_submenus; n++) {
     e58:	88 81       	ld	r24, Y
     e5a:	88 23       	and	r24, r24
     e5c:	01 f1       	breq	.+64     	; 0xe9e <MENU_assign_parents+0x4e>
     e5e:	10 e0       	ldi	r17, 0x00	; 0
		current_menu->submenus[n]->parent = current_menu;
     e60:	81 2f       	mov	r24, r17
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	88 0f       	add	r24, r24
     e66:	99 1f       	adc	r25, r25
     e68:	e9 81       	ldd	r30, Y+1	; 0x01
     e6a:	fa 81       	ldd	r31, Y+2	; 0x02
     e6c:	e8 0f       	add	r30, r24
     e6e:	f9 1f       	adc	r31, r25
     e70:	01 90       	ld	r0, Z+
     e72:	f0 81       	ld	r31, Z
     e74:	e0 2d       	mov	r30, r0
     e76:	d4 83       	std	Z+4, r29	; 0x04
     e78:	c3 83       	std	Z+3, r28	; 0x03
		if (current_menu->submenus[n]->number_of_submenus > 0) {
     e7a:	29 81       	ldd	r18, Y+1	; 0x01
     e7c:	3a 81       	ldd	r19, Y+2	; 0x02
     e7e:	f9 01       	movw	r30, r18
     e80:	e8 0f       	add	r30, r24
     e82:	f9 1f       	adc	r31, r25
     e84:	01 90       	ld	r0, Z+
     e86:	f0 81       	ld	r31, Z
     e88:	e0 2d       	mov	r30, r0
     e8a:	80 81       	ld	r24, Z
     e8c:	88 23       	and	r24, r24
     e8e:	19 f0       	breq	.+6      	; 0xe96 <MENU_assign_parents+0x46>
			MENU_assign_parents(current_menu->submenus[n]);
     e90:	cf 01       	movw	r24, r30
     e92:	0e 94 28 07 	call	0xe50	; 0xe50 <MENU_assign_parents>
	
	return new_item;
}

void MENU_assign_parents(menuitem *current_menu){
	for (uint8_t n = 0; n < current_menu->number_of_submenus; n++) {
     e96:	1f 5f       	subi	r17, 0xFF	; 255
     e98:	88 81       	ld	r24, Y
     e9a:	18 17       	cp	r17, r24
     e9c:	08 f3       	brcs	.-62     	; 0xe60 <MENU_assign_parents+0x10>
		current_menu->submenus[n]->parent = current_menu;
		if (current_menu->submenus[n]->number_of_submenus > 0) {
			MENU_assign_parents(current_menu->submenus[n]);
		}
	}
}
     e9e:	df 91       	pop	r29
     ea0:	cf 91       	pop	r28
     ea2:	1f 91       	pop	r17
     ea4:	08 95       	ret

00000ea6 <MENU_create_menu>:


menuitem* MENU_create_menu(){
     ea6:	0f 93       	push	r16
     ea8:	1f 93       	push	r17
     eaa:	cf 93       	push	r28
     eac:	df 93       	push	r29
	menuitem* root_menu = MENU_new_item("Main", NULL, 3);
     eae:	43 e0       	ldi	r20, 0x03	; 3
     eb0:	60 e0       	ldi	r22, 0x00	; 0
     eb2:	70 e0       	ldi	r23, 0x00	; 0
     eb4:	87 e6       	ldi	r24, 0x67	; 103
     eb6:	93 e0       	ldi	r25, 0x03	; 3
     eb8:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <MENU_new_item>
     ebc:	ec 01       	movw	r28, r24
	root_menu->parent = NULL;
     ebe:	1c 82       	std	Y+4, r1	; 0x04
     ec0:	1b 82       	std	Y+3, r1	; 0x03
	root_menu->submenus[0] = MENU_new_item("Play game", timer_toggle, 0);
     ec2:	09 81       	ldd	r16, Y+1	; 0x01
     ec4:	1a 81       	ldd	r17, Y+2	; 0x02
     ec6:	40 e0       	ldi	r20, 0x00	; 0
     ec8:	62 eb       	ldi	r22, 0xB2	; 178
     eca:	78 e0       	ldi	r23, 0x08	; 8
     ecc:	8c e6       	ldi	r24, 0x6C	; 108
     ece:	93 e0       	ldi	r25, 0x03	; 3
     ed0:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <MENU_new_item>
     ed4:	f8 01       	movw	r30, r16
     ed6:	91 83       	std	Z+1, r25	; 0x01
     ed8:	80 83       	st	Z, r24
	root_menu->submenus[1] = MENU_new_item("Snake", SRAM_test, 0);
     eda:	09 81       	ldd	r16, Y+1	; 0x01
     edc:	1a 81       	ldd	r17, Y+2	; 0x02
     ede:	40 e0       	ldi	r20, 0x00	; 0
     ee0:	60 ee       	ldi	r22, 0xE0	; 224
     ee2:	75 e0       	ldi	r23, 0x05	; 5
     ee4:	86 e7       	ldi	r24, 0x76	; 118
     ee6:	93 e0       	ldi	r25, 0x03	; 3
     ee8:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <MENU_new_item>
     eec:	f8 01       	movw	r30, r16
     eee:	93 83       	std	Z+3, r25	; 0x03
     ef0:	82 83       	std	Z+2, r24	; 0x02
	root_menu->submenus[2] = MENU_new_item("Test functions", NULL, 2);
     ef2:	09 81       	ldd	r16, Y+1	; 0x01
     ef4:	1a 81       	ldd	r17, Y+2	; 0x02
     ef6:	42 e0       	ldi	r20, 0x02	; 2
     ef8:	60 e0       	ldi	r22, 0x00	; 0
     efa:	70 e0       	ldi	r23, 0x00	; 0
     efc:	8c e7       	ldi	r24, 0x7C	; 124
     efe:	93 e0       	ldi	r25, 0x03	; 3
     f00:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <MENU_new_item>
     f04:	f8 01       	movw	r30, r16
     f06:	95 83       	std	Z+5, r25	; 0x05
     f08:	84 83       	std	Z+4, r24	; 0x04
	root_menu->submenus[2]->submenus[0] = MENU_new_item("Flash diode", flash_diode, 0);
     f0a:	e9 81       	ldd	r30, Y+1	; 0x01
     f0c:	fa 81       	ldd	r31, Y+2	; 0x02
     f0e:	04 80       	ldd	r0, Z+4	; 0x04
     f10:	f5 81       	ldd	r31, Z+5	; 0x05
     f12:	e0 2d       	mov	r30, r0
     f14:	01 81       	ldd	r16, Z+1	; 0x01
     f16:	12 81       	ldd	r17, Z+2	; 0x02
     f18:	40 e0       	ldi	r20, 0x00	; 0
     f1a:	6a e7       	ldi	r22, 0x7A	; 122
     f1c:	78 e0       	ldi	r23, 0x08	; 8
     f1e:	8b e8       	ldi	r24, 0x8B	; 139
     f20:	93 e0       	ldi	r25, 0x03	; 3
     f22:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <MENU_new_item>
     f26:	f8 01       	movw	r30, r16
     f28:	91 83       	std	Z+1, r25	; 0x01
     f2a:	80 83       	st	Z, r24
	root_menu->submenus[2]->submenus[1] = MENU_new_item("CAN loopback", SRAM_test, 0);
     f2c:	e9 81       	ldd	r30, Y+1	; 0x01
     f2e:	fa 81       	ldd	r31, Y+2	; 0x02
     f30:	04 80       	ldd	r0, Z+4	; 0x04
     f32:	f5 81       	ldd	r31, Z+5	; 0x05
     f34:	e0 2d       	mov	r30, r0
     f36:	01 81       	ldd	r16, Z+1	; 0x01
     f38:	12 81       	ldd	r17, Z+2	; 0x02
     f3a:	40 e0       	ldi	r20, 0x00	; 0
     f3c:	60 ee       	ldi	r22, 0xE0	; 224
     f3e:	75 e0       	ldi	r23, 0x05	; 5
     f40:	87 e9       	ldi	r24, 0x97	; 151
     f42:	93 e0       	ldi	r25, 0x03	; 3
     f44:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <MENU_new_item>
     f48:	f8 01       	movw	r30, r16
     f4a:	93 83       	std	Z+3, r25	; 0x03
     f4c:	82 83       	std	Z+2, r24	; 0x02

	
	MENU_assign_parents(root_menu);
     f4e:	ce 01       	movw	r24, r28
     f50:	0e 94 28 07 	call	0xe50	; 0xe50 <MENU_assign_parents>
		
	return root_menu;
}
     f54:	ce 01       	movw	r24, r28
     f56:	df 91       	pop	r29
     f58:	cf 91       	pop	r28
     f5a:	1f 91       	pop	r17
     f5c:	0f 91       	pop	r16
     f5e:	08 95       	ret

00000f60 <MENU_print>:

//fixed
void MENU_print(menuitem *current_menu_item){
     f60:	ef 92       	push	r14
     f62:	ff 92       	push	r15
     f64:	0f 93       	push	r16
     f66:	1f 93       	push	r17
     f68:	cf 93       	push	r28
     f6a:	df 93       	push	r29
     f6c:	7c 01       	movw	r14, r24
	oled_clear_screen();
     f6e:	0e 94 48 04 	call	0x890	; 0x890 <oled_clear_screen>
	oled_print_arrow(1, 0);
     f72:	60 e0       	ldi	r22, 0x00	; 0
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	0e 94 4e 05 	call	0xa9c	; 0xa9c <oled_print_arrow>
	oled_pos(0,0);
     f7a:	60 e0       	ldi	r22, 0x00	; 0
     f7c:	70 e0       	ldi	r23, 0x00	; 0
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	0e 94 58 04 	call	0x8b0	; 0x8b0 <oled_pos>
	oled_printf(current_menu_item->name);
     f86:	d7 01       	movw	r26, r14
     f88:	16 96       	adiw	r26, 0x06	; 6
     f8a:	8c 91       	ld	r24, X
     f8c:	16 97       	sbiw	r26, 0x06	; 6
     f8e:	8f 93       	push	r24
     f90:	15 96       	adiw	r26, 0x05	; 5
     f92:	8c 91       	ld	r24, X
     f94:	8f 93       	push	r24
     f96:	0e 94 80 04 	call	0x900	; 0x900 <oled_printf>
	//printf("%s\n", current_menu_item->name);
	
	for (unsigned int i = 0; i < current_menu_item->number_of_submenus; i++) {
     f9a:	0f 90       	pop	r0
     f9c:	0f 90       	pop	r0
     f9e:	f7 01       	movw	r30, r14
     fa0:	80 81       	ld	r24, Z
     fa2:	88 23       	and	r24, r24
     fa4:	21 f1       	breq	.+72     	; 0xfee <MENU_print+0x8e>
     fa6:	00 e0       	ldi	r16, 0x00	; 0
     fa8:	10 e0       	ldi	r17, 0x00	; 0
     faa:	c0 e0       	ldi	r28, 0x00	; 0
     fac:	d0 e0       	ldi	r29, 0x00	; 0
		oled_pos(i + 1, MENU_INDENT);
     fae:	21 96       	adiw	r28, 0x01	; 1
     fb0:	62 e0       	ldi	r22, 0x02	; 2
     fb2:	70 e0       	ldi	r23, 0x00	; 0
     fb4:	ce 01       	movw	r24, r28
     fb6:	0e 94 58 04 	call	0x8b0	; 0x8b0 <oled_pos>
		oled_printf(current_menu_item->submenus[i]->name);
     fba:	d7 01       	movw	r26, r14
     fbc:	11 96       	adiw	r26, 0x01	; 1
     fbe:	ed 91       	ld	r30, X+
     fc0:	fc 91       	ld	r31, X
     fc2:	12 97       	sbiw	r26, 0x02	; 2
     fc4:	e0 0f       	add	r30, r16
     fc6:	f1 1f       	adc	r31, r17
     fc8:	01 90       	ld	r0, Z+
     fca:	f0 81       	ld	r31, Z
     fcc:	e0 2d       	mov	r30, r0
     fce:	86 81       	ldd	r24, Z+6	; 0x06
     fd0:	8f 93       	push	r24
     fd2:	85 81       	ldd	r24, Z+5	; 0x05
     fd4:	8f 93       	push	r24
     fd6:	0e 94 80 04 	call	0x900	; 0x900 <oled_printf>
     fda:	0e 5f       	subi	r16, 0xFE	; 254
     fdc:	1f 4f       	sbci	r17, 0xFF	; 255
	oled_print_arrow(1, 0);
	oled_pos(0,0);
	oled_printf(current_menu_item->name);
	//printf("%s\n", current_menu_item->name);
	
	for (unsigned int i = 0; i < current_menu_item->number_of_submenus; i++) {
     fde:	f7 01       	movw	r30, r14
     fe0:	80 81       	ld	r24, Z
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	0f 90       	pop	r0
     fe6:	0f 90       	pop	r0
     fe8:	c8 17       	cp	r28, r24
     fea:	d9 07       	cpc	r29, r25
     fec:	00 f3       	brcs	.-64     	; 0xfae <MENU_print+0x4e>
		oled_pos(i + 1, MENU_INDENT);
		oled_printf(current_menu_item->submenus[i]->name);
		//printf("%s\n",current_menu_item->submenus[i]->name);
	}
}
     fee:	df 91       	pop	r29
     ff0:	cf 91       	pop	r28
     ff2:	1f 91       	pop	r17
     ff4:	0f 91       	pop	r16
     ff6:	ff 90       	pop	r15
     ff8:	ef 90       	pop	r14
     ffa:	08 95       	ret

00000ffc <MENU_navigate>:

void MENU_navigate(menuitem *current_menu){
     ffc:	8c 01       	movw	r16, r24
	MENU_print(current_menu);
     ffe:	0e 94 b0 07 	call	0xf60	; 0xf60 <MENU_print>
	while(1){
		if(joystick_direction_Y() != 0){
    1002:	0e 94 82 03 	call	0x704	; 0x704 <joystick_direction_Y>
    1006:	89 2b       	or	r24, r25
    1008:	51 f0       	breq	.+20     	; 0x101e <MENU_navigate+0x22>
			oled_arrow_handler(joystick_direction_Y(), 1, current_menu->number_of_submenus);
    100a:	f8 01       	movw	r30, r16
    100c:	c0 81       	ld	r28, Z
    100e:	d0 e0       	ldi	r29, 0x00	; 0
    1010:	0e 94 82 03 	call	0x704	; 0x704 <joystick_direction_Y>
    1014:	ae 01       	movw	r20, r28
    1016:	61 e0       	ldi	r22, 0x01	; 1
    1018:	70 e0       	ldi	r23, 0x00	; 0
    101a:	0e 94 bb 05 	call	0xb76	; 0xb76 <oled_arrow_handler>
		}
		
		if(joystick_direction_X() != 0){
    101e:	0e 94 97 03 	call	0x72e	; 0x72e <joystick_direction_X>
    1022:	89 2b       	or	r24, r25
    1024:	71 f3       	breq	.-36     	; 0x1002 <MENU_navigate+0x6>
			if (joystick_direction_X() == 1) {
    1026:	0e 94 97 03 	call	0x72e	; 0x72e <joystick_direction_X>
    102a:	01 97       	sbiw	r24, 0x01	; 1
    102c:	09 f0       	breq	.+2      	; 0x1030 <MENU_navigate+0x34>
    102e:	4b c0       	rjmp	.+150    	; 0x10c6 <MENU_navigate+0xca>
				if (current_menu->submenus[oled_get_arrow_page() - 1]->number_of_submenus > 0) {
    1030:	f8 01       	movw	r30, r16
    1032:	c1 81       	ldd	r28, Z+1	; 0x01
    1034:	d2 81       	ldd	r29, Z+2	; 0x02
    1036:	0e 94 4b 05 	call	0xa96	; 0xa96 <oled_get_arrow_page>
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	81 50       	subi	r24, 0x01	; 1
    103e:	90 48       	sbci	r25, 0x80	; 128
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	c8 0f       	add	r28, r24
    1046:	d9 1f       	adc	r29, r25
    1048:	e8 81       	ld	r30, Y
    104a:	f9 81       	ldd	r31, Y+1	; 0x01
    104c:	80 81       	ld	r24, Z
    104e:	88 23       	and	r24, r24
    1050:	91 f0       	breq	.+36     	; 0x1076 <MENU_navigate+0x7a>
					current_menu = current_menu->submenus[oled_get_arrow_page() - 1];
    1052:	f8 01       	movw	r30, r16
    1054:	c1 81       	ldd	r28, Z+1	; 0x01
    1056:	d2 81       	ldd	r29, Z+2	; 0x02
    1058:	0e 94 4b 05 	call	0xa96	; 0xa96 <oled_get_arrow_page>
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	81 50       	subi	r24, 0x01	; 1
    1060:	90 48       	sbci	r25, 0x80	; 128
    1062:	88 0f       	add	r24, r24
    1064:	99 1f       	adc	r25, r25
    1066:	c8 0f       	add	r28, r24
    1068:	d9 1f       	adc	r29, r25
    106a:	08 81       	ld	r16, Y
    106c:	19 81       	ldd	r17, Y+1	; 0x01
					//printf(current_menu->submenus[0]->name);
					//last_arrow_pos = 1;
					MENU_print(current_menu);
    106e:	c8 01       	movw	r24, r16
    1070:	0e 94 b0 07 	call	0xf60	; 0xf60 <MENU_print>
    1074:	35 c0       	rjmp	.+106    	; 0x10e0 <MENU_navigate+0xe4>
				} else  if (current_menu->submenus[oled_get_arrow_page() - 1]->handlerFunc != NULL) {
    1076:	f8 01       	movw	r30, r16
    1078:	c1 81       	ldd	r28, Z+1	; 0x01
    107a:	d2 81       	ldd	r29, Z+2	; 0x02
    107c:	0e 94 4b 05 	call	0xa96	; 0xa96 <oled_get_arrow_page>
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	81 50       	subi	r24, 0x01	; 1
    1084:	90 48       	sbci	r25, 0x80	; 128
    1086:	88 0f       	add	r24, r24
    1088:	99 1f       	adc	r25, r25
    108a:	c8 0f       	add	r28, r24
    108c:	d9 1f       	adc	r29, r25
    108e:	e8 81       	ld	r30, Y
    1090:	f9 81       	ldd	r31, Y+1	; 0x01
    1092:	87 81       	ldd	r24, Z+7	; 0x07
    1094:	90 85       	ldd	r25, Z+8	; 0x08
    1096:	89 2b       	or	r24, r25
    1098:	19 f1       	breq	.+70     	; 0x10e0 <MENU_navigate+0xe4>
					current_menu->submenus[oled_get_arrow_page() - 1]->handlerFunc();
    109a:	f8 01       	movw	r30, r16
    109c:	c1 81       	ldd	r28, Z+1	; 0x01
    109e:	d2 81       	ldd	r29, Z+2	; 0x02
    10a0:	0e 94 4b 05 	call	0xa96	; 0xa96 <oled_get_arrow_page>
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	81 50       	subi	r24, 0x01	; 1
    10a8:	90 48       	sbci	r25, 0x80	; 128
    10aa:	88 0f       	add	r24, r24
    10ac:	99 1f       	adc	r25, r25
    10ae:	c8 0f       	add	r28, r24
    10b0:	d9 1f       	adc	r29, r25
    10b2:	e8 81       	ld	r30, Y
    10b4:	f9 81       	ldd	r31, Y+1	; 0x01
    10b6:	07 80       	ldd	r0, Z+7	; 0x07
    10b8:	f0 85       	ldd	r31, Z+8	; 0x08
    10ba:	e0 2d       	mov	r30, r0
    10bc:	09 95       	icall
					//last_arrow_pos = 1;
					MENU_print(current_menu);
    10be:	c8 01       	movw	r24, r16
    10c0:	0e 94 b0 07 	call	0xf60	; 0xf60 <MENU_print>
    10c4:	0d c0       	rjmp	.+26     	; 0x10e0 <MENU_navigate+0xe4>
				}
			} else if (joystick_direction_X() == -1 && current_menu->parent != NULL) {
    10c6:	0e 94 97 03 	call	0x72e	; 0x72e <joystick_direction_X>
    10ca:	01 96       	adiw	r24, 0x01	; 1
    10cc:	49 f4       	brne	.+18     	; 0x10e0 <MENU_navigate+0xe4>
    10ce:	f8 01       	movw	r30, r16
    10d0:	c3 81       	ldd	r28, Z+3	; 0x03
    10d2:	d4 81       	ldd	r29, Z+4	; 0x04
    10d4:	20 97       	sbiw	r28, 0x00	; 0
    10d6:	21 f0       	breq	.+8      	; 0x10e0 <MENU_navigate+0xe4>
				current_menu = current_menu->parent;
				//last_arrow_pos = 1;
				MENU_print(current_menu);
    10d8:	ce 01       	movw	r24, r28
    10da:	0e 94 b0 07 	call	0xf60	; 0xf60 <MENU_print>
					current_menu->submenus[oled_get_arrow_page() - 1]->handlerFunc();
					//last_arrow_pos = 1;
					MENU_print(current_menu);
				}
			} else if (joystick_direction_X() == -1 && current_menu->parent != NULL) {
				current_menu = current_menu->parent;
    10de:	8e 01       	movw	r16, r28
    10e0:	ff ef       	ldi	r31, 0xFF	; 255
    10e2:	2f e7       	ldi	r18, 0x7F	; 127
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	f1 50       	subi	r31, 0x01	; 1
    10e8:	20 40       	sbci	r18, 0x00	; 0
    10ea:	80 40       	sbci	r24, 0x00	; 0
    10ec:	e1 f7       	brne	.-8      	; 0x10e6 <MENU_navigate+0xea>
    10ee:	00 c0       	rjmp	.+0      	; 0x10f0 <MENU_navigate+0xf4>
    10f0:	00 c0       	rjmp	.+0      	; 0x10f2 <MENU_navigate+0xf6>
    10f2:	87 cf       	rjmp	.-242    	; 0x1002 <MENU_navigate+0x6>

000010f4 <flash_diode>:
#include "Drivers/oled_driver.h"


//Simple test, Ex 1, task 6
void flash_diode(){
	PORTB |= (1<<PINB0);
    10f4:	c0 9a       	sbi	0x18, 0	; 24
    10f6:	8f ef       	ldi	r24, 0xFF	; 255
    10f8:	9f e2       	ldi	r25, 0x2F	; 47
    10fa:	01 97       	sbiw	r24, 0x01	; 1
    10fc:	f1 f7       	brne	.-4      	; 0x10fa <flash_diode+0x6>
    10fe:	00 c0       	rjmp	.+0      	; 0x1100 <flash_diode+0xc>
    1100:	00 00       	nop
	_delay_ms(10);
	PORTB &= ~(1<<PINB0);
    1102:	c0 98       	cbi	0x18, 0	; 24
    1104:	08 95       	ret

00001106 <timer_init>:

void timer_init() {
	
		//timer_enable();
		
		TCCR3A &= ~(1<<WGM30);
    1106:	eb e8       	ldi	r30, 0x8B	; 139
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	8e 7f       	andi	r24, 0xFE	; 254
    110e:	80 83       	st	Z, r24
		TCCR3A &= ~(1<<WGM31);
    1110:	80 81       	ld	r24, Z
    1112:	8d 7f       	andi	r24, 0xFD	; 253
    1114:	80 83       	st	Z, r24
		TCCR3B |=  (1<<WGM32);
    1116:	ea e8       	ldi	r30, 0x8A	; 138
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	88 60       	ori	r24, 0x08	; 8
    111e:	80 83       	st	Z, r24
		TCCR3B &= ~(1<<WGM33);
    1120:	80 81       	ld	r24, Z
    1122:	8f 7e       	andi	r24, 0xEF	; 239
    1124:	80 83       	st	Z, r24
		//TCCR3A |=  (1<<COM3A1) | (1<<COM3A0);
		
		OCR3A = 68; //68 for 70Hz, 4760 for 1Hz
    1126:	84 e4       	ldi	r24, 0x44	; 68
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	90 93 87 00 	sts	0x0087, r25
    112e:	80 93 86 00 	sts	0x0086, r24
		
		//enable interrupt on OCR3A compare

		ETIMSK |= (1<<OCIE3A);
    1132:	ed e7       	ldi	r30, 0x7D	; 125
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	80 61       	ori	r24, 0x10	; 16
    113a:	80 83       	st	Z, r24
		TIFR |= (1<<ICF1);
    113c:	88 b7       	in	r24, 0x38	; 56
    113e:	88 60       	ori	r24, 0x08	; 8
    1140:	88 bf       	out	0x38, r24	; 56
		
		
		sei();
    1142:	78 94       	sei
    1144:	08 95       	ret

00001146 <timer_enable>:
		
}

void timer_enable(){
	//CS3{2:0}   = 101  prescaler set to 1024
	TCCR3B |=  (1<<CS32) | (1<<CS30);
    1146:	ea e8       	ldi	r30, 0x8A	; 138
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	85 60       	ori	r24, 0x05	; 5
    114e:	80 83       	st	Z, r24
	TCCR3B &= ~(1<<CS31);
    1150:	80 81       	ld	r24, Z
    1152:	8d 7f       	andi	r24, 0xFD	; 253
    1154:	80 83       	st	Z, r24
    1156:	08 95       	ret

00001158 <timer_disable>:
}

void timer_disable(){
	TCCR3B &= ~((1<<CS30) | (1<<CS31) | (1<<CS32));
    1158:	ea e8       	ldi	r30, 0x8A	; 138
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	88 7f       	andi	r24, 0xF8	; 248
    1160:	80 83       	st	Z, r24
    1162:	08 95       	ret

00001164 <timer_toggle>:
}

void timer_toggle(){
	if((TCCR3B & 0x07) == 0x00){
    1164:	80 91 8a 00 	lds	r24, 0x008A
    1168:	87 70       	andi	r24, 0x07	; 7
    116a:	19 f4       	brne	.+6      	; 0x1172 <timer_toggle+0xe>
		timer_enable();
    116c:	0e 94 a3 08 	call	0x1146	; 0x1146 <timer_enable>
    1170:	08 95       	ret
	} else {
		timer_disable();
    1172:	0e 94 ac 08 	call	0x1158	; 0x1158 <timer_disable>
    1176:	08 95       	ret

00001178 <__vector_7>:
	}
}

ISR(TIMER3_COMPA_vect){
    1178:	1f 92       	push	r1
    117a:	0f 92       	push	r0
    117c:	0f b6       	in	r0, 0x3f	; 63
    117e:	0f 92       	push	r0
    1180:	11 24       	eor	r1, r1
    1182:	2f 93       	push	r18
    1184:	3f 93       	push	r19
    1186:	4f 93       	push	r20
    1188:	5f 93       	push	r21
    118a:	6f 93       	push	r22
    118c:	7f 93       	push	r23
    118e:	8f 93       	push	r24
    1190:	9f 93       	push	r25
    1192:	af 93       	push	r26
    1194:	bf 93       	push	r27
    1196:	ef 93       	push	r30
    1198:	ff 93       	push	r31
	can_joystick_transmit();
    119a:	0e 94 de 02 	call	0x5bc	; 0x5bc <can_joystick_transmit>
	
	if(button_rising_edge_detect(2)){
    119e:	82 e0       	ldi	r24, 0x02	; 2
    11a0:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <button_rising_edge_detect>
    11a4:	88 23       	and	r24, r24
    11a6:	29 f0       	breq	.+10     	; 0x11b2 <__vector_7+0x3a>
		can_button_transmit(2);
    11a8:	82 e0       	ldi	r24, 0x02	; 2
    11aa:	0e 94 f6 02 	call	0x5ec	; 0x5ec <can_button_transmit>
		flash_diode();
    11ae:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <flash_diode>
	}
	
	can_handle_message();
    11b2:	0e 94 06 03 	call	0x60c	; 0x60c <can_handle_message>
    11b6:	ff 91       	pop	r31
    11b8:	ef 91       	pop	r30
    11ba:	bf 91       	pop	r27
    11bc:	af 91       	pop	r26
    11be:	9f 91       	pop	r25
    11c0:	8f 91       	pop	r24
    11c2:	7f 91       	pop	r23
    11c4:	6f 91       	pop	r22
    11c6:	5f 91       	pop	r21
    11c8:	4f 91       	pop	r20
    11ca:	3f 91       	pop	r19
    11cc:	2f 91       	pop	r18
    11ce:	0f 90       	pop	r0
    11d0:	0f be       	out	0x3f, r0	; 63
    11d2:	0f 90       	pop	r0
    11d4:	1f 90       	pop	r1
    11d6:	18 95       	reti

000011d8 <malloc>:
    11d8:	cf 93       	push	r28
    11da:	df 93       	push	r29
    11dc:	82 30       	cpi	r24, 0x02	; 2
    11de:	91 05       	cpc	r25, r1
    11e0:	10 f4       	brcc	.+4      	; 0x11e6 <malloc+0xe>
    11e2:	82 e0       	ldi	r24, 0x02	; 2
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	e0 91 d1 03 	lds	r30, 0x03D1
    11ea:	f0 91 d2 03 	lds	r31, 0x03D2
    11ee:	20 e0       	ldi	r18, 0x00	; 0
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	a0 e0       	ldi	r26, 0x00	; 0
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	30 97       	sbiw	r30, 0x00	; 0
    11f8:	39 f1       	breq	.+78     	; 0x1248 <malloc+0x70>
    11fa:	40 81       	ld	r20, Z
    11fc:	51 81       	ldd	r21, Z+1	; 0x01
    11fe:	48 17       	cp	r20, r24
    1200:	59 07       	cpc	r21, r25
    1202:	b8 f0       	brcs	.+46     	; 0x1232 <malloc+0x5a>
    1204:	48 17       	cp	r20, r24
    1206:	59 07       	cpc	r21, r25
    1208:	71 f4       	brne	.+28     	; 0x1226 <malloc+0x4e>
    120a:	82 81       	ldd	r24, Z+2	; 0x02
    120c:	93 81       	ldd	r25, Z+3	; 0x03
    120e:	10 97       	sbiw	r26, 0x00	; 0
    1210:	29 f0       	breq	.+10     	; 0x121c <malloc+0x44>
    1212:	13 96       	adiw	r26, 0x03	; 3
    1214:	9c 93       	st	X, r25
    1216:	8e 93       	st	-X, r24
    1218:	12 97       	sbiw	r26, 0x02	; 2
    121a:	2c c0       	rjmp	.+88     	; 0x1274 <malloc+0x9c>
    121c:	90 93 d2 03 	sts	0x03D2, r25
    1220:	80 93 d1 03 	sts	0x03D1, r24
    1224:	27 c0       	rjmp	.+78     	; 0x1274 <malloc+0x9c>
    1226:	21 15       	cp	r18, r1
    1228:	31 05       	cpc	r19, r1
    122a:	31 f0       	breq	.+12     	; 0x1238 <malloc+0x60>
    122c:	42 17       	cp	r20, r18
    122e:	53 07       	cpc	r21, r19
    1230:	18 f0       	brcs	.+6      	; 0x1238 <malloc+0x60>
    1232:	a9 01       	movw	r20, r18
    1234:	db 01       	movw	r26, r22
    1236:	01 c0       	rjmp	.+2      	; 0x123a <malloc+0x62>
    1238:	ef 01       	movw	r28, r30
    123a:	9a 01       	movw	r18, r20
    123c:	bd 01       	movw	r22, r26
    123e:	df 01       	movw	r26, r30
    1240:	02 80       	ldd	r0, Z+2	; 0x02
    1242:	f3 81       	ldd	r31, Z+3	; 0x03
    1244:	e0 2d       	mov	r30, r0
    1246:	d7 cf       	rjmp	.-82     	; 0x11f6 <malloc+0x1e>
    1248:	21 15       	cp	r18, r1
    124a:	31 05       	cpc	r19, r1
    124c:	f9 f0       	breq	.+62     	; 0x128c <malloc+0xb4>
    124e:	28 1b       	sub	r18, r24
    1250:	39 0b       	sbc	r19, r25
    1252:	24 30       	cpi	r18, 0x04	; 4
    1254:	31 05       	cpc	r19, r1
    1256:	80 f4       	brcc	.+32     	; 0x1278 <malloc+0xa0>
    1258:	8a 81       	ldd	r24, Y+2	; 0x02
    125a:	9b 81       	ldd	r25, Y+3	; 0x03
    125c:	61 15       	cp	r22, r1
    125e:	71 05       	cpc	r23, r1
    1260:	21 f0       	breq	.+8      	; 0x126a <malloc+0x92>
    1262:	fb 01       	movw	r30, r22
    1264:	93 83       	std	Z+3, r25	; 0x03
    1266:	82 83       	std	Z+2, r24	; 0x02
    1268:	04 c0       	rjmp	.+8      	; 0x1272 <malloc+0x9a>
    126a:	90 93 d2 03 	sts	0x03D2, r25
    126e:	80 93 d1 03 	sts	0x03D1, r24
    1272:	fe 01       	movw	r30, r28
    1274:	32 96       	adiw	r30, 0x02	; 2
    1276:	44 c0       	rjmp	.+136    	; 0x1300 <malloc+0x128>
    1278:	fe 01       	movw	r30, r28
    127a:	e2 0f       	add	r30, r18
    127c:	f3 1f       	adc	r31, r19
    127e:	81 93       	st	Z+, r24
    1280:	91 93       	st	Z+, r25
    1282:	22 50       	subi	r18, 0x02	; 2
    1284:	31 09       	sbc	r19, r1
    1286:	39 83       	std	Y+1, r19	; 0x01
    1288:	28 83       	st	Y, r18
    128a:	3a c0       	rjmp	.+116    	; 0x1300 <malloc+0x128>
    128c:	20 91 cf 03 	lds	r18, 0x03CF
    1290:	30 91 d0 03 	lds	r19, 0x03D0
    1294:	23 2b       	or	r18, r19
    1296:	41 f4       	brne	.+16     	; 0x12a8 <malloc+0xd0>
    1298:	20 91 02 01 	lds	r18, 0x0102
    129c:	30 91 03 01 	lds	r19, 0x0103
    12a0:	30 93 d0 03 	sts	0x03D0, r19
    12a4:	20 93 cf 03 	sts	0x03CF, r18
    12a8:	20 91 00 01 	lds	r18, 0x0100
    12ac:	30 91 01 01 	lds	r19, 0x0101
    12b0:	21 15       	cp	r18, r1
    12b2:	31 05       	cpc	r19, r1
    12b4:	41 f4       	brne	.+16     	; 0x12c6 <malloc+0xee>
    12b6:	2d b7       	in	r18, 0x3d	; 61
    12b8:	3e b7       	in	r19, 0x3e	; 62
    12ba:	40 91 04 01 	lds	r20, 0x0104
    12be:	50 91 05 01 	lds	r21, 0x0105
    12c2:	24 1b       	sub	r18, r20
    12c4:	35 0b       	sbc	r19, r21
    12c6:	e0 91 cf 03 	lds	r30, 0x03CF
    12ca:	f0 91 d0 03 	lds	r31, 0x03D0
    12ce:	e2 17       	cp	r30, r18
    12d0:	f3 07       	cpc	r31, r19
    12d2:	a0 f4       	brcc	.+40     	; 0x12fc <malloc+0x124>
    12d4:	2e 1b       	sub	r18, r30
    12d6:	3f 0b       	sbc	r19, r31
    12d8:	28 17       	cp	r18, r24
    12da:	39 07       	cpc	r19, r25
    12dc:	78 f0       	brcs	.+30     	; 0x12fc <malloc+0x124>
    12de:	ac 01       	movw	r20, r24
    12e0:	4e 5f       	subi	r20, 0xFE	; 254
    12e2:	5f 4f       	sbci	r21, 0xFF	; 255
    12e4:	24 17       	cp	r18, r20
    12e6:	35 07       	cpc	r19, r21
    12e8:	48 f0       	brcs	.+18     	; 0x12fc <malloc+0x124>
    12ea:	4e 0f       	add	r20, r30
    12ec:	5f 1f       	adc	r21, r31
    12ee:	50 93 d0 03 	sts	0x03D0, r21
    12f2:	40 93 cf 03 	sts	0x03CF, r20
    12f6:	81 93       	st	Z+, r24
    12f8:	91 93       	st	Z+, r25
    12fa:	02 c0       	rjmp	.+4      	; 0x1300 <malloc+0x128>
    12fc:	e0 e0       	ldi	r30, 0x00	; 0
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	cf 01       	movw	r24, r30
    1302:	df 91       	pop	r29
    1304:	cf 91       	pop	r28
    1306:	08 95       	ret

00001308 <free>:
    1308:	cf 93       	push	r28
    130a:	df 93       	push	r29
    130c:	00 97       	sbiw	r24, 0x00	; 0
    130e:	09 f4       	brne	.+2      	; 0x1312 <free+0xa>
    1310:	87 c0       	rjmp	.+270    	; 0x1420 <free+0x118>
    1312:	fc 01       	movw	r30, r24
    1314:	32 97       	sbiw	r30, 0x02	; 2
    1316:	13 82       	std	Z+3, r1	; 0x03
    1318:	12 82       	std	Z+2, r1	; 0x02
    131a:	c0 91 d1 03 	lds	r28, 0x03D1
    131e:	d0 91 d2 03 	lds	r29, 0x03D2
    1322:	20 97       	sbiw	r28, 0x00	; 0
    1324:	81 f4       	brne	.+32     	; 0x1346 <free+0x3e>
    1326:	20 81       	ld	r18, Z
    1328:	31 81       	ldd	r19, Z+1	; 0x01
    132a:	28 0f       	add	r18, r24
    132c:	39 1f       	adc	r19, r25
    132e:	80 91 cf 03 	lds	r24, 0x03CF
    1332:	90 91 d0 03 	lds	r25, 0x03D0
    1336:	82 17       	cp	r24, r18
    1338:	93 07       	cpc	r25, r19
    133a:	79 f5       	brne	.+94     	; 0x139a <free+0x92>
    133c:	f0 93 d0 03 	sts	0x03D0, r31
    1340:	e0 93 cf 03 	sts	0x03CF, r30
    1344:	6d c0       	rjmp	.+218    	; 0x1420 <free+0x118>
    1346:	de 01       	movw	r26, r28
    1348:	20 e0       	ldi	r18, 0x00	; 0
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	ae 17       	cp	r26, r30
    134e:	bf 07       	cpc	r27, r31
    1350:	50 f4       	brcc	.+20     	; 0x1366 <free+0x5e>
    1352:	12 96       	adiw	r26, 0x02	; 2
    1354:	4d 91       	ld	r20, X+
    1356:	5c 91       	ld	r21, X
    1358:	13 97       	sbiw	r26, 0x03	; 3
    135a:	9d 01       	movw	r18, r26
    135c:	41 15       	cp	r20, r1
    135e:	51 05       	cpc	r21, r1
    1360:	09 f1       	breq	.+66     	; 0x13a4 <free+0x9c>
    1362:	da 01       	movw	r26, r20
    1364:	f3 cf       	rjmp	.-26     	; 0x134c <free+0x44>
    1366:	b3 83       	std	Z+3, r27	; 0x03
    1368:	a2 83       	std	Z+2, r26	; 0x02
    136a:	40 81       	ld	r20, Z
    136c:	51 81       	ldd	r21, Z+1	; 0x01
    136e:	84 0f       	add	r24, r20
    1370:	95 1f       	adc	r25, r21
    1372:	8a 17       	cp	r24, r26
    1374:	9b 07       	cpc	r25, r27
    1376:	71 f4       	brne	.+28     	; 0x1394 <free+0x8c>
    1378:	8d 91       	ld	r24, X+
    137a:	9c 91       	ld	r25, X
    137c:	11 97       	sbiw	r26, 0x01	; 1
    137e:	84 0f       	add	r24, r20
    1380:	95 1f       	adc	r25, r21
    1382:	02 96       	adiw	r24, 0x02	; 2
    1384:	91 83       	std	Z+1, r25	; 0x01
    1386:	80 83       	st	Z, r24
    1388:	12 96       	adiw	r26, 0x02	; 2
    138a:	8d 91       	ld	r24, X+
    138c:	9c 91       	ld	r25, X
    138e:	13 97       	sbiw	r26, 0x03	; 3
    1390:	93 83       	std	Z+3, r25	; 0x03
    1392:	82 83       	std	Z+2, r24	; 0x02
    1394:	21 15       	cp	r18, r1
    1396:	31 05       	cpc	r19, r1
    1398:	29 f4       	brne	.+10     	; 0x13a4 <free+0x9c>
    139a:	f0 93 d2 03 	sts	0x03D2, r31
    139e:	e0 93 d1 03 	sts	0x03D1, r30
    13a2:	3e c0       	rjmp	.+124    	; 0x1420 <free+0x118>
    13a4:	d9 01       	movw	r26, r18
    13a6:	13 96       	adiw	r26, 0x03	; 3
    13a8:	fc 93       	st	X, r31
    13aa:	ee 93       	st	-X, r30
    13ac:	12 97       	sbiw	r26, 0x02	; 2
    13ae:	4d 91       	ld	r20, X+
    13b0:	5d 91       	ld	r21, X+
    13b2:	a4 0f       	add	r26, r20
    13b4:	b5 1f       	adc	r27, r21
    13b6:	ea 17       	cp	r30, r26
    13b8:	fb 07       	cpc	r31, r27
    13ba:	79 f4       	brne	.+30     	; 0x13da <free+0xd2>
    13bc:	80 81       	ld	r24, Z
    13be:	91 81       	ldd	r25, Z+1	; 0x01
    13c0:	84 0f       	add	r24, r20
    13c2:	95 1f       	adc	r25, r21
    13c4:	02 96       	adiw	r24, 0x02	; 2
    13c6:	d9 01       	movw	r26, r18
    13c8:	11 96       	adiw	r26, 0x01	; 1
    13ca:	9c 93       	st	X, r25
    13cc:	8e 93       	st	-X, r24
    13ce:	82 81       	ldd	r24, Z+2	; 0x02
    13d0:	93 81       	ldd	r25, Z+3	; 0x03
    13d2:	13 96       	adiw	r26, 0x03	; 3
    13d4:	9c 93       	st	X, r25
    13d6:	8e 93       	st	-X, r24
    13d8:	12 97       	sbiw	r26, 0x02	; 2
    13da:	e0 e0       	ldi	r30, 0x00	; 0
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	8a 81       	ldd	r24, Y+2	; 0x02
    13e0:	9b 81       	ldd	r25, Y+3	; 0x03
    13e2:	00 97       	sbiw	r24, 0x00	; 0
    13e4:	19 f0       	breq	.+6      	; 0x13ec <free+0xe4>
    13e6:	fe 01       	movw	r30, r28
    13e8:	ec 01       	movw	r28, r24
    13ea:	f9 cf       	rjmp	.-14     	; 0x13de <free+0xd6>
    13ec:	ce 01       	movw	r24, r28
    13ee:	02 96       	adiw	r24, 0x02	; 2
    13f0:	28 81       	ld	r18, Y
    13f2:	39 81       	ldd	r19, Y+1	; 0x01
    13f4:	82 0f       	add	r24, r18
    13f6:	93 1f       	adc	r25, r19
    13f8:	20 91 cf 03 	lds	r18, 0x03CF
    13fc:	30 91 d0 03 	lds	r19, 0x03D0
    1400:	28 17       	cp	r18, r24
    1402:	39 07       	cpc	r19, r25
    1404:	69 f4       	brne	.+26     	; 0x1420 <free+0x118>
    1406:	30 97       	sbiw	r30, 0x00	; 0
    1408:	29 f4       	brne	.+10     	; 0x1414 <free+0x10c>
    140a:	10 92 d2 03 	sts	0x03D2, r1
    140e:	10 92 d1 03 	sts	0x03D1, r1
    1412:	02 c0       	rjmp	.+4      	; 0x1418 <free+0x110>
    1414:	13 82       	std	Z+3, r1	; 0x03
    1416:	12 82       	std	Z+2, r1	; 0x02
    1418:	d0 93 d0 03 	sts	0x03D0, r29
    141c:	c0 93 cf 03 	sts	0x03CF, r28
    1420:	df 91       	pop	r29
    1422:	cf 91       	pop	r28
    1424:	08 95       	ret

00001426 <do_rand>:
    1426:	8f 92       	push	r8
    1428:	9f 92       	push	r9
    142a:	af 92       	push	r10
    142c:	bf 92       	push	r11
    142e:	cf 92       	push	r12
    1430:	df 92       	push	r13
    1432:	ef 92       	push	r14
    1434:	ff 92       	push	r15
    1436:	cf 93       	push	r28
    1438:	df 93       	push	r29
    143a:	ec 01       	movw	r28, r24
    143c:	68 81       	ld	r22, Y
    143e:	79 81       	ldd	r23, Y+1	; 0x01
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	9b 81       	ldd	r25, Y+3	; 0x03
    1444:	61 15       	cp	r22, r1
    1446:	71 05       	cpc	r23, r1
    1448:	81 05       	cpc	r24, r1
    144a:	91 05       	cpc	r25, r1
    144c:	21 f4       	brne	.+8      	; 0x1456 <do_rand+0x30>
    144e:	64 e2       	ldi	r22, 0x24	; 36
    1450:	79 ed       	ldi	r23, 0xD9	; 217
    1452:	8b e5       	ldi	r24, 0x5B	; 91
    1454:	97 e0       	ldi	r25, 0x07	; 7
    1456:	2d e1       	ldi	r18, 0x1D	; 29
    1458:	33 ef       	ldi	r19, 0xF3	; 243
    145a:	41 e0       	ldi	r20, 0x01	; 1
    145c:	50 e0       	ldi	r21, 0x00	; 0
    145e:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__divmodsi4>
    1462:	49 01       	movw	r8, r18
    1464:	5a 01       	movw	r10, r20
    1466:	9b 01       	movw	r18, r22
    1468:	ac 01       	movw	r20, r24
    146a:	a7 ea       	ldi	r26, 0xA7	; 167
    146c:	b1 e4       	ldi	r27, 0x41	; 65
    146e:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <__muluhisi3>
    1472:	6b 01       	movw	r12, r22
    1474:	7c 01       	movw	r14, r24
    1476:	ac ee       	ldi	r26, 0xEC	; 236
    1478:	b4 ef       	ldi	r27, 0xF4	; 244
    147a:	a5 01       	movw	r20, r10
    147c:	94 01       	movw	r18, r8
    147e:	0e 94 57 0d 	call	0x1aae	; 0x1aae <__mulohisi3>
    1482:	c6 0e       	add	r12, r22
    1484:	d7 1e       	adc	r13, r23
    1486:	e8 1e       	adc	r14, r24
    1488:	f9 1e       	adc	r15, r25
    148a:	f7 fe       	sbrs	r15, 7
    148c:	06 c0       	rjmp	.+12     	; 0x149a <do_rand+0x74>
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	c8 1a       	sub	r12, r24
    1492:	d1 08       	sbc	r13, r1
    1494:	e1 08       	sbc	r14, r1
    1496:	80 e8       	ldi	r24, 0x80	; 128
    1498:	f8 0a       	sbc	r15, r24
    149a:	c8 82       	st	Y, r12
    149c:	d9 82       	std	Y+1, r13	; 0x01
    149e:	ea 82       	std	Y+2, r14	; 0x02
    14a0:	fb 82       	std	Y+3, r15	; 0x03
    14a2:	c6 01       	movw	r24, r12
    14a4:	9f 77       	andi	r25, 0x7F	; 127
    14a6:	df 91       	pop	r29
    14a8:	cf 91       	pop	r28
    14aa:	ff 90       	pop	r15
    14ac:	ef 90       	pop	r14
    14ae:	df 90       	pop	r13
    14b0:	cf 90       	pop	r12
    14b2:	bf 90       	pop	r11
    14b4:	af 90       	pop	r10
    14b6:	9f 90       	pop	r9
    14b8:	8f 90       	pop	r8
    14ba:	08 95       	ret

000014bc <rand_r>:
    14bc:	0e 94 13 0a 	call	0x1426	; 0x1426 <do_rand>
    14c0:	08 95       	ret

000014c2 <rand>:
    14c2:	86 e0       	ldi	r24, 0x06	; 6
    14c4:	91 e0       	ldi	r25, 0x01	; 1
    14c6:	0e 94 13 0a 	call	0x1426	; 0x1426 <do_rand>
    14ca:	08 95       	ret

000014cc <srand>:
    14cc:	a0 e0       	ldi	r26, 0x00	; 0
    14ce:	b0 e0       	ldi	r27, 0x00	; 0
    14d0:	80 93 06 01 	sts	0x0106, r24
    14d4:	90 93 07 01 	sts	0x0107, r25
    14d8:	a0 93 08 01 	sts	0x0108, r26
    14dc:	b0 93 09 01 	sts	0x0109, r27
    14e0:	08 95       	ret

000014e2 <printf>:
    14e2:	a0 e0       	ldi	r26, 0x00	; 0
    14e4:	b0 e0       	ldi	r27, 0x00	; 0
    14e6:	e7 e7       	ldi	r30, 0x77	; 119
    14e8:	fa e0       	ldi	r31, 0x0A	; 10
    14ea:	0c 94 6c 0d 	jmp	0x1ad8	; 0x1ad8 <__prologue_saves__+0x20>
    14ee:	fe 01       	movw	r30, r28
    14f0:	35 96       	adiw	r30, 0x05	; 5
    14f2:	61 91       	ld	r22, Z+
    14f4:	71 91       	ld	r23, Z+
    14f6:	af 01       	movw	r20, r30
    14f8:	80 91 d5 03 	lds	r24, 0x03D5
    14fc:	90 91 d6 03 	lds	r25, 0x03D6
    1500:	0e 94 b2 0a 	call	0x1564	; 0x1564 <vfprintf>
    1504:	e2 e0       	ldi	r30, 0x02	; 2
    1506:	0c 94 88 0d 	jmp	0x1b10	; 0x1b10 <__epilogue_restores__+0x20>

0000150a <puts>:
    150a:	0f 93       	push	r16
    150c:	1f 93       	push	r17
    150e:	cf 93       	push	r28
    1510:	df 93       	push	r29
    1512:	e0 91 d5 03 	lds	r30, 0x03D5
    1516:	f0 91 d6 03 	lds	r31, 0x03D6
    151a:	23 81       	ldd	r18, Z+3	; 0x03
    151c:	21 ff       	sbrs	r18, 1
    151e:	1b c0       	rjmp	.+54     	; 0x1556 <puts+0x4c>
    1520:	ec 01       	movw	r28, r24
    1522:	00 e0       	ldi	r16, 0x00	; 0
    1524:	10 e0       	ldi	r17, 0x00	; 0
    1526:	89 91       	ld	r24, Y+
    1528:	60 91 d5 03 	lds	r22, 0x03D5
    152c:	70 91 d6 03 	lds	r23, 0x03D6
    1530:	db 01       	movw	r26, r22
    1532:	18 96       	adiw	r26, 0x08	; 8
    1534:	ed 91       	ld	r30, X+
    1536:	fc 91       	ld	r31, X
    1538:	19 97       	sbiw	r26, 0x09	; 9
    153a:	88 23       	and	r24, r24
    153c:	31 f0       	breq	.+12     	; 0x154a <puts+0x40>
    153e:	09 95       	icall
    1540:	89 2b       	or	r24, r25
    1542:	89 f3       	breq	.-30     	; 0x1526 <puts+0x1c>
    1544:	0f ef       	ldi	r16, 0xFF	; 255
    1546:	1f ef       	ldi	r17, 0xFF	; 255
    1548:	ee cf       	rjmp	.-36     	; 0x1526 <puts+0x1c>
    154a:	8a e0       	ldi	r24, 0x0A	; 10
    154c:	09 95       	icall
    154e:	89 2b       	or	r24, r25
    1550:	11 f4       	brne	.+4      	; 0x1556 <puts+0x4c>
    1552:	c8 01       	movw	r24, r16
    1554:	02 c0       	rjmp	.+4      	; 0x155a <puts+0x50>
    1556:	8f ef       	ldi	r24, 0xFF	; 255
    1558:	9f ef       	ldi	r25, 0xFF	; 255
    155a:	df 91       	pop	r29
    155c:	cf 91       	pop	r28
    155e:	1f 91       	pop	r17
    1560:	0f 91       	pop	r16
    1562:	08 95       	ret

00001564 <vfprintf>:
    1564:	ac e0       	ldi	r26, 0x0C	; 12
    1566:	b0 e0       	ldi	r27, 0x00	; 0
    1568:	e8 eb       	ldi	r30, 0xB8	; 184
    156a:	fa e0       	ldi	r31, 0x0A	; 10
    156c:	0c 94 5c 0d 	jmp	0x1ab8	; 0x1ab8 <__prologue_saves__>
    1570:	7c 01       	movw	r14, r24
    1572:	6b 01       	movw	r12, r22
    1574:	8a 01       	movw	r16, r20
    1576:	fc 01       	movw	r30, r24
    1578:	17 82       	std	Z+7, r1	; 0x07
    157a:	16 82       	std	Z+6, r1	; 0x06
    157c:	83 81       	ldd	r24, Z+3	; 0x03
    157e:	81 ff       	sbrs	r24, 1
    1580:	bd c1       	rjmp	.+890    	; 0x18fc <vfprintf+0x398>
    1582:	ce 01       	movw	r24, r28
    1584:	01 96       	adiw	r24, 0x01	; 1
    1586:	4c 01       	movw	r8, r24
    1588:	f7 01       	movw	r30, r14
    158a:	93 81       	ldd	r25, Z+3	; 0x03
    158c:	f6 01       	movw	r30, r12
    158e:	93 fd       	sbrc	r25, 3
    1590:	85 91       	lpm	r24, Z+
    1592:	93 ff       	sbrs	r25, 3
    1594:	81 91       	ld	r24, Z+
    1596:	6f 01       	movw	r12, r30
    1598:	88 23       	and	r24, r24
    159a:	09 f4       	brne	.+2      	; 0x159e <vfprintf+0x3a>
    159c:	ab c1       	rjmp	.+854    	; 0x18f4 <vfprintf+0x390>
    159e:	85 32       	cpi	r24, 0x25	; 37
    15a0:	39 f4       	brne	.+14     	; 0x15b0 <vfprintf+0x4c>
    15a2:	93 fd       	sbrc	r25, 3
    15a4:	85 91       	lpm	r24, Z+
    15a6:	93 ff       	sbrs	r25, 3
    15a8:	81 91       	ld	r24, Z+
    15aa:	6f 01       	movw	r12, r30
    15ac:	85 32       	cpi	r24, 0x25	; 37
    15ae:	29 f4       	brne	.+10     	; 0x15ba <vfprintf+0x56>
    15b0:	b7 01       	movw	r22, r14
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	0e 94 9a 0c 	call	0x1934	; 0x1934 <fputc>
    15b8:	e7 cf       	rjmp	.-50     	; 0x1588 <vfprintf+0x24>
    15ba:	51 2c       	mov	r5, r1
    15bc:	31 2c       	mov	r3, r1
    15be:	20 e0       	ldi	r18, 0x00	; 0
    15c0:	20 32       	cpi	r18, 0x20	; 32
    15c2:	a0 f4       	brcc	.+40     	; 0x15ec <vfprintf+0x88>
    15c4:	8b 32       	cpi	r24, 0x2B	; 43
    15c6:	69 f0       	breq	.+26     	; 0x15e2 <vfprintf+0x7e>
    15c8:	30 f4       	brcc	.+12     	; 0x15d6 <vfprintf+0x72>
    15ca:	80 32       	cpi	r24, 0x20	; 32
    15cc:	59 f0       	breq	.+22     	; 0x15e4 <vfprintf+0x80>
    15ce:	83 32       	cpi	r24, 0x23	; 35
    15d0:	69 f4       	brne	.+26     	; 0x15ec <vfprintf+0x88>
    15d2:	20 61       	ori	r18, 0x10	; 16
    15d4:	2c c0       	rjmp	.+88     	; 0x162e <vfprintf+0xca>
    15d6:	8d 32       	cpi	r24, 0x2D	; 45
    15d8:	39 f0       	breq	.+14     	; 0x15e8 <vfprintf+0x84>
    15da:	80 33       	cpi	r24, 0x30	; 48
    15dc:	39 f4       	brne	.+14     	; 0x15ec <vfprintf+0x88>
    15de:	21 60       	ori	r18, 0x01	; 1
    15e0:	26 c0       	rjmp	.+76     	; 0x162e <vfprintf+0xca>
    15e2:	22 60       	ori	r18, 0x02	; 2
    15e4:	24 60       	ori	r18, 0x04	; 4
    15e6:	23 c0       	rjmp	.+70     	; 0x162e <vfprintf+0xca>
    15e8:	28 60       	ori	r18, 0x08	; 8
    15ea:	21 c0       	rjmp	.+66     	; 0x162e <vfprintf+0xca>
    15ec:	27 fd       	sbrc	r18, 7
    15ee:	27 c0       	rjmp	.+78     	; 0x163e <vfprintf+0xda>
    15f0:	30 ed       	ldi	r19, 0xD0	; 208
    15f2:	38 0f       	add	r19, r24
    15f4:	3a 30       	cpi	r19, 0x0A	; 10
    15f6:	78 f4       	brcc	.+30     	; 0x1616 <vfprintf+0xb2>
    15f8:	26 ff       	sbrs	r18, 6
    15fa:	06 c0       	rjmp	.+12     	; 0x1608 <vfprintf+0xa4>
    15fc:	fa e0       	ldi	r31, 0x0A	; 10
    15fe:	5f 9e       	mul	r5, r31
    1600:	30 0d       	add	r19, r0
    1602:	11 24       	eor	r1, r1
    1604:	53 2e       	mov	r5, r19
    1606:	13 c0       	rjmp	.+38     	; 0x162e <vfprintf+0xca>
    1608:	8a e0       	ldi	r24, 0x0A	; 10
    160a:	38 9e       	mul	r3, r24
    160c:	30 0d       	add	r19, r0
    160e:	11 24       	eor	r1, r1
    1610:	33 2e       	mov	r3, r19
    1612:	20 62       	ori	r18, 0x20	; 32
    1614:	0c c0       	rjmp	.+24     	; 0x162e <vfprintf+0xca>
    1616:	8e 32       	cpi	r24, 0x2E	; 46
    1618:	21 f4       	brne	.+8      	; 0x1622 <vfprintf+0xbe>
    161a:	26 fd       	sbrc	r18, 6
    161c:	6b c1       	rjmp	.+726    	; 0x18f4 <vfprintf+0x390>
    161e:	20 64       	ori	r18, 0x40	; 64
    1620:	06 c0       	rjmp	.+12     	; 0x162e <vfprintf+0xca>
    1622:	8c 36       	cpi	r24, 0x6C	; 108
    1624:	11 f4       	brne	.+4      	; 0x162a <vfprintf+0xc6>
    1626:	20 68       	ori	r18, 0x80	; 128
    1628:	02 c0       	rjmp	.+4      	; 0x162e <vfprintf+0xca>
    162a:	88 36       	cpi	r24, 0x68	; 104
    162c:	41 f4       	brne	.+16     	; 0x163e <vfprintf+0xda>
    162e:	f6 01       	movw	r30, r12
    1630:	93 fd       	sbrc	r25, 3
    1632:	85 91       	lpm	r24, Z+
    1634:	93 ff       	sbrs	r25, 3
    1636:	81 91       	ld	r24, Z+
    1638:	6f 01       	movw	r12, r30
    163a:	81 11       	cpse	r24, r1
    163c:	c1 cf       	rjmp	.-126    	; 0x15c0 <vfprintf+0x5c>
    163e:	98 2f       	mov	r25, r24
    1640:	9f 7d       	andi	r25, 0xDF	; 223
    1642:	95 54       	subi	r25, 0x45	; 69
    1644:	93 30       	cpi	r25, 0x03	; 3
    1646:	28 f4       	brcc	.+10     	; 0x1652 <vfprintf+0xee>
    1648:	0c 5f       	subi	r16, 0xFC	; 252
    164a:	1f 4f       	sbci	r17, 0xFF	; 255
    164c:	ff e3       	ldi	r31, 0x3F	; 63
    164e:	f9 83       	std	Y+1, r31	; 0x01
    1650:	0d c0       	rjmp	.+26     	; 0x166c <vfprintf+0x108>
    1652:	83 36       	cpi	r24, 0x63	; 99
    1654:	31 f0       	breq	.+12     	; 0x1662 <vfprintf+0xfe>
    1656:	83 37       	cpi	r24, 0x73	; 115
    1658:	71 f0       	breq	.+28     	; 0x1676 <vfprintf+0x112>
    165a:	83 35       	cpi	r24, 0x53	; 83
    165c:	09 f0       	breq	.+2      	; 0x1660 <vfprintf+0xfc>
    165e:	5b c0       	rjmp	.+182    	; 0x1716 <vfprintf+0x1b2>
    1660:	22 c0       	rjmp	.+68     	; 0x16a6 <vfprintf+0x142>
    1662:	f8 01       	movw	r30, r16
    1664:	80 81       	ld	r24, Z
    1666:	89 83       	std	Y+1, r24	; 0x01
    1668:	0e 5f       	subi	r16, 0xFE	; 254
    166a:	1f 4f       	sbci	r17, 0xFF	; 255
    166c:	44 24       	eor	r4, r4
    166e:	43 94       	inc	r4
    1670:	51 2c       	mov	r5, r1
    1672:	54 01       	movw	r10, r8
    1674:	15 c0       	rjmp	.+42     	; 0x16a0 <vfprintf+0x13c>
    1676:	38 01       	movw	r6, r16
    1678:	f2 e0       	ldi	r31, 0x02	; 2
    167a:	6f 0e       	add	r6, r31
    167c:	71 1c       	adc	r7, r1
    167e:	f8 01       	movw	r30, r16
    1680:	a0 80       	ld	r10, Z
    1682:	b1 80       	ldd	r11, Z+1	; 0x01
    1684:	26 ff       	sbrs	r18, 6
    1686:	03 c0       	rjmp	.+6      	; 0x168e <vfprintf+0x12a>
    1688:	65 2d       	mov	r22, r5
    168a:	70 e0       	ldi	r23, 0x00	; 0
    168c:	02 c0       	rjmp	.+4      	; 0x1692 <vfprintf+0x12e>
    168e:	6f ef       	ldi	r22, 0xFF	; 255
    1690:	7f ef       	ldi	r23, 0xFF	; 255
    1692:	c5 01       	movw	r24, r10
    1694:	2c 87       	std	Y+12, r18	; 0x0c
    1696:	0e 94 8f 0c 	call	0x191e	; 0x191e <strnlen>
    169a:	2c 01       	movw	r4, r24
    169c:	83 01       	movw	r16, r6
    169e:	2c 85       	ldd	r18, Y+12	; 0x0c
    16a0:	2f 77       	andi	r18, 0x7F	; 127
    16a2:	22 2e       	mov	r2, r18
    16a4:	17 c0       	rjmp	.+46     	; 0x16d4 <vfprintf+0x170>
    16a6:	38 01       	movw	r6, r16
    16a8:	f2 e0       	ldi	r31, 0x02	; 2
    16aa:	6f 0e       	add	r6, r31
    16ac:	71 1c       	adc	r7, r1
    16ae:	f8 01       	movw	r30, r16
    16b0:	a0 80       	ld	r10, Z
    16b2:	b1 80       	ldd	r11, Z+1	; 0x01
    16b4:	26 ff       	sbrs	r18, 6
    16b6:	03 c0       	rjmp	.+6      	; 0x16be <vfprintf+0x15a>
    16b8:	65 2d       	mov	r22, r5
    16ba:	70 e0       	ldi	r23, 0x00	; 0
    16bc:	02 c0       	rjmp	.+4      	; 0x16c2 <vfprintf+0x15e>
    16be:	6f ef       	ldi	r22, 0xFF	; 255
    16c0:	7f ef       	ldi	r23, 0xFF	; 255
    16c2:	c5 01       	movw	r24, r10
    16c4:	2c 87       	std	Y+12, r18	; 0x0c
    16c6:	0e 94 84 0c 	call	0x1908	; 0x1908 <strnlen_P>
    16ca:	2c 01       	movw	r4, r24
    16cc:	2c 85       	ldd	r18, Y+12	; 0x0c
    16ce:	20 68       	ori	r18, 0x80	; 128
    16d0:	22 2e       	mov	r2, r18
    16d2:	83 01       	movw	r16, r6
    16d4:	23 fc       	sbrc	r2, 3
    16d6:	1b c0       	rjmp	.+54     	; 0x170e <vfprintf+0x1aa>
    16d8:	83 2d       	mov	r24, r3
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	48 16       	cp	r4, r24
    16de:	59 06       	cpc	r5, r25
    16e0:	b0 f4       	brcc	.+44     	; 0x170e <vfprintf+0x1aa>
    16e2:	b7 01       	movw	r22, r14
    16e4:	80 e2       	ldi	r24, 0x20	; 32
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	0e 94 9a 0c 	call	0x1934	; 0x1934 <fputc>
    16ec:	3a 94       	dec	r3
    16ee:	f4 cf       	rjmp	.-24     	; 0x16d8 <vfprintf+0x174>
    16f0:	f5 01       	movw	r30, r10
    16f2:	27 fc       	sbrc	r2, 7
    16f4:	85 91       	lpm	r24, Z+
    16f6:	27 fe       	sbrs	r2, 7
    16f8:	81 91       	ld	r24, Z+
    16fa:	5f 01       	movw	r10, r30
    16fc:	b7 01       	movw	r22, r14
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	0e 94 9a 0c 	call	0x1934	; 0x1934 <fputc>
    1704:	31 10       	cpse	r3, r1
    1706:	3a 94       	dec	r3
    1708:	f1 e0       	ldi	r31, 0x01	; 1
    170a:	4f 1a       	sub	r4, r31
    170c:	51 08       	sbc	r5, r1
    170e:	41 14       	cp	r4, r1
    1710:	51 04       	cpc	r5, r1
    1712:	71 f7       	brne	.-36     	; 0x16f0 <vfprintf+0x18c>
    1714:	e5 c0       	rjmp	.+458    	; 0x18e0 <vfprintf+0x37c>
    1716:	84 36       	cpi	r24, 0x64	; 100
    1718:	11 f0       	breq	.+4      	; 0x171e <vfprintf+0x1ba>
    171a:	89 36       	cpi	r24, 0x69	; 105
    171c:	39 f5       	brne	.+78     	; 0x176c <vfprintf+0x208>
    171e:	f8 01       	movw	r30, r16
    1720:	27 ff       	sbrs	r18, 7
    1722:	07 c0       	rjmp	.+14     	; 0x1732 <vfprintf+0x1ce>
    1724:	60 81       	ld	r22, Z
    1726:	71 81       	ldd	r23, Z+1	; 0x01
    1728:	82 81       	ldd	r24, Z+2	; 0x02
    172a:	93 81       	ldd	r25, Z+3	; 0x03
    172c:	0c 5f       	subi	r16, 0xFC	; 252
    172e:	1f 4f       	sbci	r17, 0xFF	; 255
    1730:	08 c0       	rjmp	.+16     	; 0x1742 <vfprintf+0x1de>
    1732:	60 81       	ld	r22, Z
    1734:	71 81       	ldd	r23, Z+1	; 0x01
    1736:	88 27       	eor	r24, r24
    1738:	77 fd       	sbrc	r23, 7
    173a:	80 95       	com	r24
    173c:	98 2f       	mov	r25, r24
    173e:	0e 5f       	subi	r16, 0xFE	; 254
    1740:	1f 4f       	sbci	r17, 0xFF	; 255
    1742:	2f 76       	andi	r18, 0x6F	; 111
    1744:	b2 2e       	mov	r11, r18
    1746:	97 ff       	sbrs	r25, 7
    1748:	09 c0       	rjmp	.+18     	; 0x175c <vfprintf+0x1f8>
    174a:	90 95       	com	r25
    174c:	80 95       	com	r24
    174e:	70 95       	com	r23
    1750:	61 95       	neg	r22
    1752:	7f 4f       	sbci	r23, 0xFF	; 255
    1754:	8f 4f       	sbci	r24, 0xFF	; 255
    1756:	9f 4f       	sbci	r25, 0xFF	; 255
    1758:	20 68       	ori	r18, 0x80	; 128
    175a:	b2 2e       	mov	r11, r18
    175c:	2a e0       	ldi	r18, 0x0A	; 10
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	a4 01       	movw	r20, r8
    1762:	0e 94 cc 0c 	call	0x1998	; 0x1998 <__ultoa_invert>
    1766:	a8 2e       	mov	r10, r24
    1768:	a8 18       	sub	r10, r8
    176a:	44 c0       	rjmp	.+136    	; 0x17f4 <vfprintf+0x290>
    176c:	85 37       	cpi	r24, 0x75	; 117
    176e:	29 f4       	brne	.+10     	; 0x177a <vfprintf+0x216>
    1770:	2f 7e       	andi	r18, 0xEF	; 239
    1772:	b2 2e       	mov	r11, r18
    1774:	2a e0       	ldi	r18, 0x0A	; 10
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	25 c0       	rjmp	.+74     	; 0x17c4 <vfprintf+0x260>
    177a:	f2 2f       	mov	r31, r18
    177c:	f9 7f       	andi	r31, 0xF9	; 249
    177e:	bf 2e       	mov	r11, r31
    1780:	8f 36       	cpi	r24, 0x6F	; 111
    1782:	c1 f0       	breq	.+48     	; 0x17b4 <vfprintf+0x250>
    1784:	18 f4       	brcc	.+6      	; 0x178c <vfprintf+0x228>
    1786:	88 35       	cpi	r24, 0x58	; 88
    1788:	79 f0       	breq	.+30     	; 0x17a8 <vfprintf+0x244>
    178a:	b4 c0       	rjmp	.+360    	; 0x18f4 <vfprintf+0x390>
    178c:	80 37       	cpi	r24, 0x70	; 112
    178e:	19 f0       	breq	.+6      	; 0x1796 <vfprintf+0x232>
    1790:	88 37       	cpi	r24, 0x78	; 120
    1792:	21 f0       	breq	.+8      	; 0x179c <vfprintf+0x238>
    1794:	af c0       	rjmp	.+350    	; 0x18f4 <vfprintf+0x390>
    1796:	2f 2f       	mov	r18, r31
    1798:	20 61       	ori	r18, 0x10	; 16
    179a:	b2 2e       	mov	r11, r18
    179c:	b4 fe       	sbrs	r11, 4
    179e:	0d c0       	rjmp	.+26     	; 0x17ba <vfprintf+0x256>
    17a0:	8b 2d       	mov	r24, r11
    17a2:	84 60       	ori	r24, 0x04	; 4
    17a4:	b8 2e       	mov	r11, r24
    17a6:	09 c0       	rjmp	.+18     	; 0x17ba <vfprintf+0x256>
    17a8:	24 ff       	sbrs	r18, 4
    17aa:	0a c0       	rjmp	.+20     	; 0x17c0 <vfprintf+0x25c>
    17ac:	9f 2f       	mov	r25, r31
    17ae:	96 60       	ori	r25, 0x06	; 6
    17b0:	b9 2e       	mov	r11, r25
    17b2:	06 c0       	rjmp	.+12     	; 0x17c0 <vfprintf+0x25c>
    17b4:	28 e0       	ldi	r18, 0x08	; 8
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	05 c0       	rjmp	.+10     	; 0x17c4 <vfprintf+0x260>
    17ba:	20 e1       	ldi	r18, 0x10	; 16
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	02 c0       	rjmp	.+4      	; 0x17c4 <vfprintf+0x260>
    17c0:	20 e1       	ldi	r18, 0x10	; 16
    17c2:	32 e0       	ldi	r19, 0x02	; 2
    17c4:	f8 01       	movw	r30, r16
    17c6:	b7 fe       	sbrs	r11, 7
    17c8:	07 c0       	rjmp	.+14     	; 0x17d8 <vfprintf+0x274>
    17ca:	60 81       	ld	r22, Z
    17cc:	71 81       	ldd	r23, Z+1	; 0x01
    17ce:	82 81       	ldd	r24, Z+2	; 0x02
    17d0:	93 81       	ldd	r25, Z+3	; 0x03
    17d2:	0c 5f       	subi	r16, 0xFC	; 252
    17d4:	1f 4f       	sbci	r17, 0xFF	; 255
    17d6:	06 c0       	rjmp	.+12     	; 0x17e4 <vfprintf+0x280>
    17d8:	60 81       	ld	r22, Z
    17da:	71 81       	ldd	r23, Z+1	; 0x01
    17dc:	80 e0       	ldi	r24, 0x00	; 0
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	0e 5f       	subi	r16, 0xFE	; 254
    17e2:	1f 4f       	sbci	r17, 0xFF	; 255
    17e4:	a4 01       	movw	r20, r8
    17e6:	0e 94 cc 0c 	call	0x1998	; 0x1998 <__ultoa_invert>
    17ea:	a8 2e       	mov	r10, r24
    17ec:	a8 18       	sub	r10, r8
    17ee:	fb 2d       	mov	r31, r11
    17f0:	ff 77       	andi	r31, 0x7F	; 127
    17f2:	bf 2e       	mov	r11, r31
    17f4:	b6 fe       	sbrs	r11, 6
    17f6:	0b c0       	rjmp	.+22     	; 0x180e <vfprintf+0x2aa>
    17f8:	2b 2d       	mov	r18, r11
    17fa:	2e 7f       	andi	r18, 0xFE	; 254
    17fc:	a5 14       	cp	r10, r5
    17fe:	50 f4       	brcc	.+20     	; 0x1814 <vfprintf+0x2b0>
    1800:	b4 fe       	sbrs	r11, 4
    1802:	0a c0       	rjmp	.+20     	; 0x1818 <vfprintf+0x2b4>
    1804:	b2 fc       	sbrc	r11, 2
    1806:	08 c0       	rjmp	.+16     	; 0x1818 <vfprintf+0x2b4>
    1808:	2b 2d       	mov	r18, r11
    180a:	2e 7e       	andi	r18, 0xEE	; 238
    180c:	05 c0       	rjmp	.+10     	; 0x1818 <vfprintf+0x2b4>
    180e:	7a 2c       	mov	r7, r10
    1810:	2b 2d       	mov	r18, r11
    1812:	03 c0       	rjmp	.+6      	; 0x181a <vfprintf+0x2b6>
    1814:	7a 2c       	mov	r7, r10
    1816:	01 c0       	rjmp	.+2      	; 0x181a <vfprintf+0x2b6>
    1818:	75 2c       	mov	r7, r5
    181a:	24 ff       	sbrs	r18, 4
    181c:	0d c0       	rjmp	.+26     	; 0x1838 <vfprintf+0x2d4>
    181e:	fe 01       	movw	r30, r28
    1820:	ea 0d       	add	r30, r10
    1822:	f1 1d       	adc	r31, r1
    1824:	80 81       	ld	r24, Z
    1826:	80 33       	cpi	r24, 0x30	; 48
    1828:	11 f4       	brne	.+4      	; 0x182e <vfprintf+0x2ca>
    182a:	29 7e       	andi	r18, 0xE9	; 233
    182c:	09 c0       	rjmp	.+18     	; 0x1840 <vfprintf+0x2dc>
    182e:	22 ff       	sbrs	r18, 2
    1830:	06 c0       	rjmp	.+12     	; 0x183e <vfprintf+0x2da>
    1832:	73 94       	inc	r7
    1834:	73 94       	inc	r7
    1836:	04 c0       	rjmp	.+8      	; 0x1840 <vfprintf+0x2dc>
    1838:	82 2f       	mov	r24, r18
    183a:	86 78       	andi	r24, 0x86	; 134
    183c:	09 f0       	breq	.+2      	; 0x1840 <vfprintf+0x2dc>
    183e:	73 94       	inc	r7
    1840:	23 fd       	sbrc	r18, 3
    1842:	13 c0       	rjmp	.+38     	; 0x186a <vfprintf+0x306>
    1844:	20 ff       	sbrs	r18, 0
    1846:	06 c0       	rjmp	.+12     	; 0x1854 <vfprintf+0x2f0>
    1848:	5a 2c       	mov	r5, r10
    184a:	73 14       	cp	r7, r3
    184c:	18 f4       	brcc	.+6      	; 0x1854 <vfprintf+0x2f0>
    184e:	53 0c       	add	r5, r3
    1850:	57 18       	sub	r5, r7
    1852:	73 2c       	mov	r7, r3
    1854:	73 14       	cp	r7, r3
    1856:	68 f4       	brcc	.+26     	; 0x1872 <vfprintf+0x30e>
    1858:	b7 01       	movw	r22, r14
    185a:	80 e2       	ldi	r24, 0x20	; 32
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	2c 87       	std	Y+12, r18	; 0x0c
    1860:	0e 94 9a 0c 	call	0x1934	; 0x1934 <fputc>
    1864:	73 94       	inc	r7
    1866:	2c 85       	ldd	r18, Y+12	; 0x0c
    1868:	f5 cf       	rjmp	.-22     	; 0x1854 <vfprintf+0x2f0>
    186a:	73 14       	cp	r7, r3
    186c:	10 f4       	brcc	.+4      	; 0x1872 <vfprintf+0x30e>
    186e:	37 18       	sub	r3, r7
    1870:	01 c0       	rjmp	.+2      	; 0x1874 <vfprintf+0x310>
    1872:	31 2c       	mov	r3, r1
    1874:	24 ff       	sbrs	r18, 4
    1876:	12 c0       	rjmp	.+36     	; 0x189c <vfprintf+0x338>
    1878:	b7 01       	movw	r22, r14
    187a:	80 e3       	ldi	r24, 0x30	; 48
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	2c 87       	std	Y+12, r18	; 0x0c
    1880:	0e 94 9a 0c 	call	0x1934	; 0x1934 <fputc>
    1884:	2c 85       	ldd	r18, Y+12	; 0x0c
    1886:	22 ff       	sbrs	r18, 2
    1888:	17 c0       	rjmp	.+46     	; 0x18b8 <vfprintf+0x354>
    188a:	21 ff       	sbrs	r18, 1
    188c:	03 c0       	rjmp	.+6      	; 0x1894 <vfprintf+0x330>
    188e:	88 e5       	ldi	r24, 0x58	; 88
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	02 c0       	rjmp	.+4      	; 0x1898 <vfprintf+0x334>
    1894:	88 e7       	ldi	r24, 0x78	; 120
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	b7 01       	movw	r22, r14
    189a:	0c c0       	rjmp	.+24     	; 0x18b4 <vfprintf+0x350>
    189c:	82 2f       	mov	r24, r18
    189e:	86 78       	andi	r24, 0x86	; 134
    18a0:	59 f0       	breq	.+22     	; 0x18b8 <vfprintf+0x354>
    18a2:	21 fd       	sbrc	r18, 1
    18a4:	02 c0       	rjmp	.+4      	; 0x18aa <vfprintf+0x346>
    18a6:	80 e2       	ldi	r24, 0x20	; 32
    18a8:	01 c0       	rjmp	.+2      	; 0x18ac <vfprintf+0x348>
    18aa:	8b e2       	ldi	r24, 0x2B	; 43
    18ac:	27 fd       	sbrc	r18, 7
    18ae:	8d e2       	ldi	r24, 0x2D	; 45
    18b0:	b7 01       	movw	r22, r14
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	0e 94 9a 0c 	call	0x1934	; 0x1934 <fputc>
    18b8:	a5 14       	cp	r10, r5
    18ba:	38 f4       	brcc	.+14     	; 0x18ca <vfprintf+0x366>
    18bc:	b7 01       	movw	r22, r14
    18be:	80 e3       	ldi	r24, 0x30	; 48
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	0e 94 9a 0c 	call	0x1934	; 0x1934 <fputc>
    18c6:	5a 94       	dec	r5
    18c8:	f7 cf       	rjmp	.-18     	; 0x18b8 <vfprintf+0x354>
    18ca:	aa 94       	dec	r10
    18cc:	f4 01       	movw	r30, r8
    18ce:	ea 0d       	add	r30, r10
    18d0:	f1 1d       	adc	r31, r1
    18d2:	80 81       	ld	r24, Z
    18d4:	b7 01       	movw	r22, r14
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	0e 94 9a 0c 	call	0x1934	; 0x1934 <fputc>
    18dc:	a1 10       	cpse	r10, r1
    18de:	f5 cf       	rjmp	.-22     	; 0x18ca <vfprintf+0x366>
    18e0:	33 20       	and	r3, r3
    18e2:	09 f4       	brne	.+2      	; 0x18e6 <vfprintf+0x382>
    18e4:	51 ce       	rjmp	.-862    	; 0x1588 <vfprintf+0x24>
    18e6:	b7 01       	movw	r22, r14
    18e8:	80 e2       	ldi	r24, 0x20	; 32
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	0e 94 9a 0c 	call	0x1934	; 0x1934 <fputc>
    18f0:	3a 94       	dec	r3
    18f2:	f6 cf       	rjmp	.-20     	; 0x18e0 <vfprintf+0x37c>
    18f4:	f7 01       	movw	r30, r14
    18f6:	86 81       	ldd	r24, Z+6	; 0x06
    18f8:	97 81       	ldd	r25, Z+7	; 0x07
    18fa:	02 c0       	rjmp	.+4      	; 0x1900 <vfprintf+0x39c>
    18fc:	8f ef       	ldi	r24, 0xFF	; 255
    18fe:	9f ef       	ldi	r25, 0xFF	; 255
    1900:	2c 96       	adiw	r28, 0x0c	; 12
    1902:	e2 e1       	ldi	r30, 0x12	; 18
    1904:	0c 94 78 0d 	jmp	0x1af0	; 0x1af0 <__epilogue_restores__>

00001908 <strnlen_P>:
    1908:	fc 01       	movw	r30, r24
    190a:	05 90       	lpm	r0, Z+
    190c:	61 50       	subi	r22, 0x01	; 1
    190e:	70 40       	sbci	r23, 0x00	; 0
    1910:	01 10       	cpse	r0, r1
    1912:	d8 f7       	brcc	.-10     	; 0x190a <strnlen_P+0x2>
    1914:	80 95       	com	r24
    1916:	90 95       	com	r25
    1918:	8e 0f       	add	r24, r30
    191a:	9f 1f       	adc	r25, r31
    191c:	08 95       	ret

0000191e <strnlen>:
    191e:	fc 01       	movw	r30, r24
    1920:	61 50       	subi	r22, 0x01	; 1
    1922:	70 40       	sbci	r23, 0x00	; 0
    1924:	01 90       	ld	r0, Z+
    1926:	01 10       	cpse	r0, r1
    1928:	d8 f7       	brcc	.-10     	; 0x1920 <strnlen+0x2>
    192a:	80 95       	com	r24
    192c:	90 95       	com	r25
    192e:	8e 0f       	add	r24, r30
    1930:	9f 1f       	adc	r25, r31
    1932:	08 95       	ret

00001934 <fputc>:
    1934:	0f 93       	push	r16
    1936:	1f 93       	push	r17
    1938:	cf 93       	push	r28
    193a:	df 93       	push	r29
    193c:	18 2f       	mov	r17, r24
    193e:	09 2f       	mov	r16, r25
    1940:	eb 01       	movw	r28, r22
    1942:	8b 81       	ldd	r24, Y+3	; 0x03
    1944:	81 fd       	sbrc	r24, 1
    1946:	03 c0       	rjmp	.+6      	; 0x194e <fputc+0x1a>
    1948:	8f ef       	ldi	r24, 0xFF	; 255
    194a:	9f ef       	ldi	r25, 0xFF	; 255
    194c:	20 c0       	rjmp	.+64     	; 0x198e <fputc+0x5a>
    194e:	82 ff       	sbrs	r24, 2
    1950:	10 c0       	rjmp	.+32     	; 0x1972 <fputc+0x3e>
    1952:	4e 81       	ldd	r20, Y+6	; 0x06
    1954:	5f 81       	ldd	r21, Y+7	; 0x07
    1956:	2c 81       	ldd	r18, Y+4	; 0x04
    1958:	3d 81       	ldd	r19, Y+5	; 0x05
    195a:	42 17       	cp	r20, r18
    195c:	53 07       	cpc	r21, r19
    195e:	7c f4       	brge	.+30     	; 0x197e <fputc+0x4a>
    1960:	e8 81       	ld	r30, Y
    1962:	f9 81       	ldd	r31, Y+1	; 0x01
    1964:	9f 01       	movw	r18, r30
    1966:	2f 5f       	subi	r18, 0xFF	; 255
    1968:	3f 4f       	sbci	r19, 0xFF	; 255
    196a:	39 83       	std	Y+1, r19	; 0x01
    196c:	28 83       	st	Y, r18
    196e:	10 83       	st	Z, r17
    1970:	06 c0       	rjmp	.+12     	; 0x197e <fputc+0x4a>
    1972:	e8 85       	ldd	r30, Y+8	; 0x08
    1974:	f9 85       	ldd	r31, Y+9	; 0x09
    1976:	81 2f       	mov	r24, r17
    1978:	09 95       	icall
    197a:	89 2b       	or	r24, r25
    197c:	29 f7       	brne	.-54     	; 0x1948 <fputc+0x14>
    197e:	2e 81       	ldd	r18, Y+6	; 0x06
    1980:	3f 81       	ldd	r19, Y+7	; 0x07
    1982:	2f 5f       	subi	r18, 0xFF	; 255
    1984:	3f 4f       	sbci	r19, 0xFF	; 255
    1986:	3f 83       	std	Y+7, r19	; 0x07
    1988:	2e 83       	std	Y+6, r18	; 0x06
    198a:	81 2f       	mov	r24, r17
    198c:	90 2f       	mov	r25, r16
    198e:	df 91       	pop	r29
    1990:	cf 91       	pop	r28
    1992:	1f 91       	pop	r17
    1994:	0f 91       	pop	r16
    1996:	08 95       	ret

00001998 <__ultoa_invert>:
    1998:	fa 01       	movw	r30, r20
    199a:	aa 27       	eor	r26, r26
    199c:	28 30       	cpi	r18, 0x08	; 8
    199e:	51 f1       	breq	.+84     	; 0x19f4 <__ultoa_invert+0x5c>
    19a0:	20 31       	cpi	r18, 0x10	; 16
    19a2:	81 f1       	breq	.+96     	; 0x1a04 <__ultoa_invert+0x6c>
    19a4:	e8 94       	clt
    19a6:	6f 93       	push	r22
    19a8:	6e 7f       	andi	r22, 0xFE	; 254
    19aa:	6e 5f       	subi	r22, 0xFE	; 254
    19ac:	7f 4f       	sbci	r23, 0xFF	; 255
    19ae:	8f 4f       	sbci	r24, 0xFF	; 255
    19b0:	9f 4f       	sbci	r25, 0xFF	; 255
    19b2:	af 4f       	sbci	r26, 0xFF	; 255
    19b4:	b1 e0       	ldi	r27, 0x01	; 1
    19b6:	3e d0       	rcall	.+124    	; 0x1a34 <__ultoa_invert+0x9c>
    19b8:	b4 e0       	ldi	r27, 0x04	; 4
    19ba:	3c d0       	rcall	.+120    	; 0x1a34 <__ultoa_invert+0x9c>
    19bc:	67 0f       	add	r22, r23
    19be:	78 1f       	adc	r23, r24
    19c0:	89 1f       	adc	r24, r25
    19c2:	9a 1f       	adc	r25, r26
    19c4:	a1 1d       	adc	r26, r1
    19c6:	68 0f       	add	r22, r24
    19c8:	79 1f       	adc	r23, r25
    19ca:	8a 1f       	adc	r24, r26
    19cc:	91 1d       	adc	r25, r1
    19ce:	a1 1d       	adc	r26, r1
    19d0:	6a 0f       	add	r22, r26
    19d2:	71 1d       	adc	r23, r1
    19d4:	81 1d       	adc	r24, r1
    19d6:	91 1d       	adc	r25, r1
    19d8:	a1 1d       	adc	r26, r1
    19da:	20 d0       	rcall	.+64     	; 0x1a1c <__ultoa_invert+0x84>
    19dc:	09 f4       	brne	.+2      	; 0x19e0 <__ultoa_invert+0x48>
    19de:	68 94       	set
    19e0:	3f 91       	pop	r19
    19e2:	2a e0       	ldi	r18, 0x0A	; 10
    19e4:	26 9f       	mul	r18, r22
    19e6:	11 24       	eor	r1, r1
    19e8:	30 19       	sub	r19, r0
    19ea:	30 5d       	subi	r19, 0xD0	; 208
    19ec:	31 93       	st	Z+, r19
    19ee:	de f6       	brtc	.-74     	; 0x19a6 <__ultoa_invert+0xe>
    19f0:	cf 01       	movw	r24, r30
    19f2:	08 95       	ret
    19f4:	46 2f       	mov	r20, r22
    19f6:	47 70       	andi	r20, 0x07	; 7
    19f8:	40 5d       	subi	r20, 0xD0	; 208
    19fa:	41 93       	st	Z+, r20
    19fc:	b3 e0       	ldi	r27, 0x03	; 3
    19fe:	0f d0       	rcall	.+30     	; 0x1a1e <__ultoa_invert+0x86>
    1a00:	c9 f7       	brne	.-14     	; 0x19f4 <__ultoa_invert+0x5c>
    1a02:	f6 cf       	rjmp	.-20     	; 0x19f0 <__ultoa_invert+0x58>
    1a04:	46 2f       	mov	r20, r22
    1a06:	4f 70       	andi	r20, 0x0F	; 15
    1a08:	40 5d       	subi	r20, 0xD0	; 208
    1a0a:	4a 33       	cpi	r20, 0x3A	; 58
    1a0c:	18 f0       	brcs	.+6      	; 0x1a14 <__ultoa_invert+0x7c>
    1a0e:	49 5d       	subi	r20, 0xD9	; 217
    1a10:	31 fd       	sbrc	r19, 1
    1a12:	40 52       	subi	r20, 0x20	; 32
    1a14:	41 93       	st	Z+, r20
    1a16:	02 d0       	rcall	.+4      	; 0x1a1c <__ultoa_invert+0x84>
    1a18:	a9 f7       	brne	.-22     	; 0x1a04 <__ultoa_invert+0x6c>
    1a1a:	ea cf       	rjmp	.-44     	; 0x19f0 <__ultoa_invert+0x58>
    1a1c:	b4 e0       	ldi	r27, 0x04	; 4
    1a1e:	a6 95       	lsr	r26
    1a20:	97 95       	ror	r25
    1a22:	87 95       	ror	r24
    1a24:	77 95       	ror	r23
    1a26:	67 95       	ror	r22
    1a28:	ba 95       	dec	r27
    1a2a:	c9 f7       	brne	.-14     	; 0x1a1e <__ultoa_invert+0x86>
    1a2c:	00 97       	sbiw	r24, 0x00	; 0
    1a2e:	61 05       	cpc	r22, r1
    1a30:	71 05       	cpc	r23, r1
    1a32:	08 95       	ret
    1a34:	9b 01       	movw	r18, r22
    1a36:	ac 01       	movw	r20, r24
    1a38:	0a 2e       	mov	r0, r26
    1a3a:	06 94       	lsr	r0
    1a3c:	57 95       	ror	r21
    1a3e:	47 95       	ror	r20
    1a40:	37 95       	ror	r19
    1a42:	27 95       	ror	r18
    1a44:	ba 95       	dec	r27
    1a46:	c9 f7       	brne	.-14     	; 0x1a3a <__ultoa_invert+0xa2>
    1a48:	62 0f       	add	r22, r18
    1a4a:	73 1f       	adc	r23, r19
    1a4c:	84 1f       	adc	r24, r20
    1a4e:	95 1f       	adc	r25, r21
    1a50:	a0 1d       	adc	r26, r0
    1a52:	08 95       	ret

00001a54 <__divmodsi4>:
    1a54:	05 2e       	mov	r0, r21
    1a56:	97 fb       	bst	r25, 7
    1a58:	1e f4       	brtc	.+6      	; 0x1a60 <__divmodsi4+0xc>
    1a5a:	00 94       	com	r0
    1a5c:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <__negsi2>
    1a60:	57 fd       	sbrc	r21, 7
    1a62:	07 d0       	rcall	.+14     	; 0x1a72 <__divmodsi4_neg2>
    1a64:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <__udivmodsi4>
    1a68:	07 fc       	sbrc	r0, 7
    1a6a:	03 d0       	rcall	.+6      	; 0x1a72 <__divmodsi4_neg2>
    1a6c:	4e f4       	brtc	.+18     	; 0x1a80 <__divmodsi4_exit>
    1a6e:	0c 94 41 0d 	jmp	0x1a82	; 0x1a82 <__negsi2>

00001a72 <__divmodsi4_neg2>:
    1a72:	50 95       	com	r21
    1a74:	40 95       	com	r20
    1a76:	30 95       	com	r19
    1a78:	21 95       	neg	r18
    1a7a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a7c:	4f 4f       	sbci	r20, 0xFF	; 255
    1a7e:	5f 4f       	sbci	r21, 0xFF	; 255

00001a80 <__divmodsi4_exit>:
    1a80:	08 95       	ret

00001a82 <__negsi2>:
    1a82:	90 95       	com	r25
    1a84:	80 95       	com	r24
    1a86:	70 95       	com	r23
    1a88:	61 95       	neg	r22
    1a8a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a8c:	8f 4f       	sbci	r24, 0xFF	; 255
    1a8e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a90:	08 95       	ret

00001a92 <__muluhisi3>:
    1a92:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <__umulhisi3>
    1a96:	a5 9f       	mul	r26, r21
    1a98:	90 0d       	add	r25, r0
    1a9a:	b4 9f       	mul	r27, r20
    1a9c:	90 0d       	add	r25, r0
    1a9e:	a4 9f       	mul	r26, r20
    1aa0:	80 0d       	add	r24, r0
    1aa2:	91 1d       	adc	r25, r1
    1aa4:	11 24       	eor	r1, r1
    1aa6:	08 95       	ret

00001aa8 <__mulshisi3>:
    1aa8:	b7 ff       	sbrs	r27, 7
    1aaa:	0c 94 49 0d 	jmp	0x1a92	; 0x1a92 <__muluhisi3>

00001aae <__mulohisi3>:
    1aae:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <__muluhisi3>
    1ab2:	82 1b       	sub	r24, r18
    1ab4:	93 0b       	sbc	r25, r19
    1ab6:	08 95       	ret

00001ab8 <__prologue_saves__>:
    1ab8:	2f 92       	push	r2
    1aba:	3f 92       	push	r3
    1abc:	4f 92       	push	r4
    1abe:	5f 92       	push	r5
    1ac0:	6f 92       	push	r6
    1ac2:	7f 92       	push	r7
    1ac4:	8f 92       	push	r8
    1ac6:	9f 92       	push	r9
    1ac8:	af 92       	push	r10
    1aca:	bf 92       	push	r11
    1acc:	cf 92       	push	r12
    1ace:	df 92       	push	r13
    1ad0:	ef 92       	push	r14
    1ad2:	ff 92       	push	r15
    1ad4:	0f 93       	push	r16
    1ad6:	1f 93       	push	r17
    1ad8:	cf 93       	push	r28
    1ada:	df 93       	push	r29
    1adc:	cd b7       	in	r28, 0x3d	; 61
    1ade:	de b7       	in	r29, 0x3e	; 62
    1ae0:	ca 1b       	sub	r28, r26
    1ae2:	db 0b       	sbc	r29, r27
    1ae4:	0f b6       	in	r0, 0x3f	; 63
    1ae6:	f8 94       	cli
    1ae8:	de bf       	out	0x3e, r29	; 62
    1aea:	0f be       	out	0x3f, r0	; 63
    1aec:	cd bf       	out	0x3d, r28	; 61
    1aee:	09 94       	ijmp

00001af0 <__epilogue_restores__>:
    1af0:	2a 88       	ldd	r2, Y+18	; 0x12
    1af2:	39 88       	ldd	r3, Y+17	; 0x11
    1af4:	48 88       	ldd	r4, Y+16	; 0x10
    1af6:	5f 84       	ldd	r5, Y+15	; 0x0f
    1af8:	6e 84       	ldd	r6, Y+14	; 0x0e
    1afa:	7d 84       	ldd	r7, Y+13	; 0x0d
    1afc:	8c 84       	ldd	r8, Y+12	; 0x0c
    1afe:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b00:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b02:	b9 84       	ldd	r11, Y+9	; 0x09
    1b04:	c8 84       	ldd	r12, Y+8	; 0x08
    1b06:	df 80       	ldd	r13, Y+7	; 0x07
    1b08:	ee 80       	ldd	r14, Y+6	; 0x06
    1b0a:	fd 80       	ldd	r15, Y+5	; 0x05
    1b0c:	0c 81       	ldd	r16, Y+4	; 0x04
    1b0e:	1b 81       	ldd	r17, Y+3	; 0x03
    1b10:	aa 81       	ldd	r26, Y+2	; 0x02
    1b12:	b9 81       	ldd	r27, Y+1	; 0x01
    1b14:	ce 0f       	add	r28, r30
    1b16:	d1 1d       	adc	r29, r1
    1b18:	0f b6       	in	r0, 0x3f	; 63
    1b1a:	f8 94       	cli
    1b1c:	de bf       	out	0x3e, r29	; 62
    1b1e:	0f be       	out	0x3f, r0	; 63
    1b20:	cd bf       	out	0x3d, r28	; 61
    1b22:	ed 01       	movw	r28, r26
    1b24:	08 95       	ret

00001b26 <__udivmodsi4>:
    1b26:	a1 e2       	ldi	r26, 0x21	; 33
    1b28:	1a 2e       	mov	r1, r26
    1b2a:	aa 1b       	sub	r26, r26
    1b2c:	bb 1b       	sub	r27, r27
    1b2e:	fd 01       	movw	r30, r26
    1b30:	0d c0       	rjmp	.+26     	; 0x1b4c <__udivmodsi4_ep>

00001b32 <__udivmodsi4_loop>:
    1b32:	aa 1f       	adc	r26, r26
    1b34:	bb 1f       	adc	r27, r27
    1b36:	ee 1f       	adc	r30, r30
    1b38:	ff 1f       	adc	r31, r31
    1b3a:	a2 17       	cp	r26, r18
    1b3c:	b3 07       	cpc	r27, r19
    1b3e:	e4 07       	cpc	r30, r20
    1b40:	f5 07       	cpc	r31, r21
    1b42:	20 f0       	brcs	.+8      	; 0x1b4c <__udivmodsi4_ep>
    1b44:	a2 1b       	sub	r26, r18
    1b46:	b3 0b       	sbc	r27, r19
    1b48:	e4 0b       	sbc	r30, r20
    1b4a:	f5 0b       	sbc	r31, r21

00001b4c <__udivmodsi4_ep>:
    1b4c:	66 1f       	adc	r22, r22
    1b4e:	77 1f       	adc	r23, r23
    1b50:	88 1f       	adc	r24, r24
    1b52:	99 1f       	adc	r25, r25
    1b54:	1a 94       	dec	r1
    1b56:	69 f7       	brne	.-38     	; 0x1b32 <__udivmodsi4_loop>
    1b58:	60 95       	com	r22
    1b5a:	70 95       	com	r23
    1b5c:	80 95       	com	r24
    1b5e:	90 95       	com	r25
    1b60:	9b 01       	movw	r18, r22
    1b62:	ac 01       	movw	r20, r24
    1b64:	bd 01       	movw	r22, r26
    1b66:	cf 01       	movw	r24, r30
    1b68:	08 95       	ret

00001b6a <__umulhisi3>:
    1b6a:	a2 9f       	mul	r26, r18
    1b6c:	b0 01       	movw	r22, r0
    1b6e:	b3 9f       	mul	r27, r19
    1b70:	c0 01       	movw	r24, r0
    1b72:	a3 9f       	mul	r26, r19
    1b74:	70 0d       	add	r23, r0
    1b76:	81 1d       	adc	r24, r1
    1b78:	11 24       	eor	r1, r1
    1b7a:	91 1d       	adc	r25, r1
    1b7c:	b2 9f       	mul	r27, r18
    1b7e:	70 0d       	add	r23, r0
    1b80:	81 1d       	adc	r24, r1
    1b82:	11 24       	eor	r1, r1
    1b84:	91 1d       	adc	r25, r1
    1b86:	08 95       	ret

00001b88 <_exit>:
    1b88:	f8 94       	cli

00001b8a <__stop_program>:
    1b8a:	ff cf       	rjmp	.-2      	; 0x1b8a <__stop_program>
